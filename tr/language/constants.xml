<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 345983 Maintainer: nilgun Status: ready -->
<!-- CREDITS: tpug, sezer -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Sabitler</title>

  <simpara>
    Bir sabit basit bir değerin betimleyicisidir (ismidir). İsminden de
    anlaşılacağı gibi, betiğin çalışması sırasında bu değer değiştirilemez
    (aslında birer sabit olmayan <link
    linkend="language.constants.predefined">sihirli sabitler</link>
    hariç). Sabitler öntanımlı olarak büyük-küçük harf duyarlıdır.
    Geleneksel olarak, sabit isimleri daima büyük harfle yazılır.
  </simpara>
  <para>
    Bir sabite verilen isim PHP'de varolan diğer tüm isimlerle aynı
    kurallara tabidir. Geçerli bir sabit ismi bir harfle ya da alt çizgi imi
    ile başlar, herhangi bir sayıda harf, rakam ya da alt çizgi ile
    devam eder. Bir sabit ismi düzenli ifade olarak, şu şekilde ifade
    edilebilir: 
   <code>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</code>
  </para>
  <para>
   Geçersiz ismleri ve PHP kullanımına ayrılmış isimleri 
   <function>define</function> işlevi ile tanımlamak mümkünse de bunların 
   değeri sadece <function>constant</function> işlevi ile elde edilebilir. 
   Ancak, bu tavsiye edilmez.
  </para>
    &tip.userlandnaming;
  <para>
   <example>
    <title> - Geçerli ve geçersiz sabit isimleri</title>
    <programlisting role="php">
<![CDATA[
<?php

// Geçerli sabit isimleri
define("FOO",     "bir şey");
define("FOO2",    "başka bir şey");
define("FOO_BAR", "daha başka bir şey");

// Geçersiz sabit isimleri
define("2FOO",    "bir şey");

// Bu geçerli olmasına rağmen kullanmaktan kaçınılmalıdır.
// PHP bir gün betiğinizin çalışmasını bozacak bir sihirli
// sabit kullanmaya karar verebilir.
define("__FOO__", "bir şey");

?>]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    Burada bir harften söz ettiğimiz zaman, ASCII a-Z veya A-Z arasındaki ki
    bir karakterden veya karakter kodu 127-255 (<literal>0x7f-0xff</literal>)
    arasındaki bir karakterden bahsetmiş oluyoruz.
   </simpara>
  </note>

  <simpara>
    Süper küresellerde olduğu gibi, sabitlerin etki alanı da betiklerin
    genelidir. "Etki alanı" hakkında daha ayrıntılı bilgi edinmek için <link
    linkend="language.variables.scope">Değişken Etki Alanı</link>
    bölümünü okuyunuz.
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>Söz dizimi</title>
   <simpara>
    Bir sabiti <function>define</function> işlevini kullanarak veya 
    PHP 5.3.0'dan itibaren sınıf tanımlarının dışında <literal>const</literal> 
    anahtar sözcüğünü kullanarak tanımlayabilirsiniz. 
    <function>define</function> bir sabitin keyfî bir ifadede tanımlanmasına 
    izin verir. <literal>const</literal> ile ilgili kısıtlamalara aşağıdaki 
    paragrafta yer verilmiştir. Bir sabit tanımlandıktan sonra asla 
    değiştirilemez ve tanımsız yapılamaz.
   </simpara>
   <simpara>
    PHP 5.6.0 öncesinde, <literal>const</literal> kullanılırken
    sabitlere yalnızca bir sayıl değer (<type>boolean</type>,
    <type>integer</type>, <type>float</type> veya <type>string</type>)
    atanabilirdi. PHP 5.6 itibariyle, bir sabiti sayısal bir ifade hatta bir 
    <type>array</type> sabit olarak tanımlamak mümkündür. Sabitleri 
    <type>resource</type> olarak tanımlamak mümkünse de, umulmadık 
    sonuçlara yol açabileceğinden bundan kaçınılmalıdır.
   </simpara>
   <simpara>
    Bir sabitin değerini basitçe ismini belirterek alabilirsiniz.
    Değişkenlerin aksine, sabitlerin önüne <literal>$</literal> imi
    ekleme<emphasis>ME</emphasis>niz gerekir. Bunun yanında, bir sabitin 
    ismini devingen şekilde kullanmak isterseniz, sabitin değerini okumak 
    için <function>constant</function> işlevini de kullanabilirsiniz.
    Tanımlanmış sabitlerin tamamının bir listesini almak için,
    <function>get_defined_constants</function> işlevini kullanabilirsiniz.
   </simpara>
   <note>
    <simpara>
      Sabitlerin ve (genel) değişkenlerin isim alanları farklıdır. Bu,
      örneğin &true; ile <varname>$TRUE</varname> değerlerinin farklı
      olabilecekleri anlamına gelir.
    </simpara>
   </note>
   <simpara>
    Tanımlanmamış bir sabit ismi kullanırsanız, PHP, bir sabit değil bir
    sayıl değer kullanmak istediğinizi varsayar ve sabiti <type>string</type>
    türünde bir değer (SABIT yerine "SABIT" ) olarak ele alır. PHP 7.2.0 ve 
    sonrasında bu önerilmemekta olup böyle bir durumda bir 
    <constant>E_WARNING</constant> çıktılanır (evvelce bir <link 
    linkend="ref.errorfunc">E_NOTICE</link> çıktılanırdı). Ayrıca, 
    <code>$foo[bar]</code> kullanımının (evvelce
    <function>define</function> işleviyle <literal>bar</literal> isminde bir
    sabit tanımlamamışsanız) neden yanlış olduğuyla ilgili açıklamayı <link
    linkend="language.types.array.foo-bar"><code>$foo[bar]</code> neden
    yanlıştır?</link> başlığı altında bulabilirsiniz. Bu <link
    linkend="language.namespaces.rules">(tamamen) nitelenmiş sabitlere</link>
    uygulanmaz, çünkü tanımsızsa ölümcül bir hataya yol açar. Bir
    sabitin tanımlı olup olmadığını <function>defined</function> işlevi
    sayesinde kolayca öğrenebilirsiniz.
   </simpara>
   <para>
    <emphasis>Sabitler ve değişkenler arasındaki farklar:</emphasis>
    <itemizedlist>
     <listitem>
      <simpara>
        Bir sabit ismi <literal>$</literal> imi ile başlamaz.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
        PHP 5.3 ve öncesinde, sabitler basit bir atama ile değil, sadece
        <function>define</function> işlevi kullanılarak tanımlanabilirler.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
        Sabitler, değişken etki alanı kurallarına bağlı olmaksızın her yerde
        tanımlanabilir ve her yerden erişilebilir.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
        Sabitler tanımlandıktan sonra yeniden tanımlanamaz ya da tanımsız
        duruma getirilemez.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
        Bir sabit sadece bir sayıl değerlerle (<type>boolean</type>,
        <type>integer</type>, <type>float</type> veya <type>string</type>
        türünde bir değerle) sonuçlanabilir. PHP 5.6 ve sonrasında
        <literal>const</literal> sözcüğünü kullanarak (örneğin, 
        <literal>const FOO = array(1,2,3)[0];</literal>), PHP 7.0 ve 
        sonrasında ise <function>define</function> kullanarak dizi sabitler 
        tanımlamak mümkünse de sonuçta değerin izin verilen türde olması 
        gerekir.
       </simpara>
     </listitem>
    </itemizedlist>
   </para>

   <para>
    <example>
     <title>- Sabitlerin Tanımlanması</title>
     <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Merhaba dünya.");
echo CONSTANT; // "Merhaba dünya" çıktılar.
echo Constant; // "Constant" çıktılar ve bir uyarı gösterir.
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
      <title>- Sabitlerin <code>const</code> ile tanımlanması</title>
      <programlisting role="php">
<![CDATA[
<?php
// PHP 5.3.0 ve sonrasında çalışır
const SABIT = 'Merhaba Dünya';

echo SABIT;

// PHP 5.6.0 ve sonrasında çalışır
const DIGER_SABIT = SABIT.'; Elveda Dünya';
echo DIGER_SABIT;

const HAYVANLAR = array('köpek', 'kedi', 'kuş');
echo HAYVANLAR[1]; // "kedi" çıktılanır

// PHP 7 ve sonrasında çalışır
define('HAYVANLAR', array(
    'köpek',
    'kedi',
    'kuş'
));
echo HAYVANLAR[1]; // "kedi" çıktılanır
?>
]]>
      </programlisting>
    </example>
   </para>

   <note>
    <para>
     Sabitlerin <function>define</function> kullanılarak tanımlanmasının tersine,
     <literal>const</literal> anahtar sözcüğü ile tanımlanan sabitler derleme
     sırasında tanımlandıklarından en üst seviye etki alanında bildirilmiş
     olmalıdır. Yani bunlar işlevlerin, döngülerin, <literal>if</literal>
     deyimlerinin veya <literal>try</literal>/<literal>catch</literal>
     bloklarının içinde bildirilemez.
    </para>
   </note>

   <note>
    <para>
     <literal>const</literal> anahtar sözcüğü ile tanımlanan sabitler daima harf 
     büyüklüğüne duyarlıyken <function>define</function> ile tanımlanan sabitler 
     harf büyüklüğüne duyarlı olmayabilir.
    </para>
   </note>

   <simpara>
    Ayrıca, <link linkend="language.oop5.constants">Sınıf Sabitleri</link>
    belgesine de bakınız.
   </simpara>
  </sect1>

  <sect1 xml:id="language.constants.predefined">
   <title>Sihirli Sabitler</title>

   <simpara>
    PHP, çalışan her betiğe çok sayıda <link
    linkend="reserved.constants">öntanımlı sabit</link> sağlar. Öte
    yandan, bu sabitlerin çoğu, çeşitli eklentiler tarafından
    tanımlandığından, sadece eklenti bir modül olarak veya PHP içinde
    derlenmişse kullanılabilir.
   </simpara>

   <para>
    Değerleri kullanıldıkları yere göre değişen dokuz sihirli sabit vardır.
    Örneğin, <constant>__LINE__</constant> sabitinin değeri betiğin hangi
    satırında kullanıldığına bağlıdır. Çalışma zamanında çözümlenen sırada 
    sabitlerin tersine "sihirli" sabitlerin tamamı derleme sırasında çözümlenir.
    Bu özel sabitler büyük-küçük harf farkına duyarsızdır ve aşağıda 
    listelenmişlerdir:
   </para>
   <para>
    <table>
     <title>Birkaç "sihirli" PHP sabiti</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>İsim</entry>
        <entry>Açıklama</entry>
       </row>
      </thead>
      <tbody>
       <row xml:id="constant.line">
        <entry><constant>__LINE__</constant></entry>
        <entry>
          Dosyada geçerli satırın numarası.
        </entry>
       </row>
       <row xml:id="constant.file">
        <entry><constant>__FILE__</constant></entry>
        <entry>
          Dosyanın veya sembolik bağdan çözümlenen dosyanın tam dosya yolu ve
          dosya ismi. <function>include</function> işlevi ile betiğe eklenen bir
          dosyanın içinde kullanıldığında betiğin ismini değil, eklenen dosyanın
          ismini içerir.
        </entry>
       </row>
       <row xml:id="constant.dir">
        <entry><constant>__DIR__</constant></entry>
        <entry>
          Dosyanın bulurduğu dizin. Dahil edilen bir dosyanın içinde
          kullanıldığında dahil edilen dosyanın dizini döner. Bu
          <literal>dirname(__FILE__)</literal> işlevine eşdeğerder. Bu dizin
          isminin sonuna bir kök dizin olmadıkça bir bölü imi konmaz.
        </entry>
       </row>
       <row xml:id="constant.function">
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
          İşlev ismi veya anonim işlevler için <literal>{closure}</literal>.
        </entry>
       </row>
       <row xml:id="constant.class">
        <entry><constant>__CLASS__</constant></entry>
        <entry>
          Sınıf ismi. Bildirildiği isim alanını
          (<literal>Foo\Bar</literal> gibi) içerir. PHP 5.4 ve sonrasında
          __CLASS__ ayrıca kalıtsal özelliklerin içinde de çalışır. Böyle bir
          yöntemin içinde kullanıldığında __CLASS__, kalıtsal özelliğin içinde
          kullanıldığı sınıfın ismidir.
        </entry>
       </row>
       <row xml:id="constant.trait">
        <entry><constant>__TRAIT__</constant></entry>
        <entry>
         Kalıtsal özellik ismi. Bildirildiği isim alanını
         (<literal>Foo\Bar</literal> gibi) içerir.
        </entry>
       </row>
       <row xml:id="constant.method">
        <entry><constant>__METHOD__</constant></entry>
        <entry>
          Yöntem ismi.
        </entry>
       </row>
       <row xml:id="constant.namespace">
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
          Geçerli isim alanının adı.
        </entry>
       </row>
       <row xml:id="constant.coloncolonclass">
        <entry><constant>ClassName::class</constant></entry>
        <entry>
         Tamamen nitelenmiş sınıf ismi. Ayrıca bkz, 
         <link linkend="language.oop5.basic.class.class">::class</link>.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Ayrıca bakınız:
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>

   <sect2 xml:id="language.constants.predefined.changelog">
    &reftitle.changelog;
    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>5.5.0</entry>
         <entry>
          Sihirli sabit <constant>::class</constant> eklendi.
         </entry>
        </row>
        <row>
         <entry>5.4.0</entry>
         <entry>
          <constant>__TRAIT__</constant> sabiti eklendi
         </entry>
        </row>
        <row>
         <entry>5.3.0</entry>
         <entry>
          <constant>__DIR__</constant> ve <constant>__NAMESPACE__</constant>
          sabitleri eklendi
         </entry>
        </row>
        <row>
         <entry>5.0.0</entry>
         <entry>
          <constant>__METHOD__</constant> sabiti eklendi
         </entry>
        </row>
        <row>
         <entry>5.0.0</entry>
         <entry>
          Bu sürümden önce bazı sihirli sabitlerin değerleri daima küçük
          harfliydi. Şimdi bunların hepsi harf büyüklüğüne duyarlıdır (isimler
          bildirildikleri gibi içerilir).
         </entry>
        </row>
        <row>
         <entry>4.3.0</entry>
         <entry>
          <constant>__FUNCTION__</constant> ve <constant>__CLASS__</constant>
          sabitleri eklendi
         </entry>
        </row>
        <row>
         <entry>4.0.2</entry>
         <entry>
          <constant>__FILE__</constant> daima sembolik bağları çözümlenmiş
          mutlak bir yol içerir, halbuki eski sürümlerde bazı durumlarda göreli
          yollar da içerirdi.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
