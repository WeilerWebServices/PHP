<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 345850 Maintainer: nilgun Status: ready -->
<sect1 xml:id="language.types.integer">
 <title><code>integer</code></title>

 <simpara>
  Bir <type>integer</type> türünde değer şu kümeden bir tamsayıdır:
  &#8484; = {..., -2, -1, 0, 1, 2, ...}.
 </simpara>

 <para>
  Bunlara da bakınız:
 </para>

 <itemizedlist>
  <listitem>
   <simpara>
    <link linkend="book.gmp">Keyfi uzunlukta tamsayı / GMP</link>
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <link linkend="language.types.float">Kayan noktalı sayılar</link>
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    <link linkend="book.bc">Keyfi ondalık hassasiyet / BCMath</link>
   </simpara>
  </listitem>
 </itemizedlist>

 <sect2 xml:id="language.types.integer.syntax">
  <title>Syntax</title>

  <simpara>
   <type>integer</type> türünde değerler  onluk, sekizlik veya onaltılık
   tabanda belirtilebilirler.
   <link linkend="language.operators.arithmetic">değil işleci</link>
   negatif bir tamsayı belirtmekte kullanılabilir.
  </simpara>

  <para>
   İkil <type>integer</type> sayılar PHP 5.4.0 ve sonrasında kullanılabilir.
  </para>

  <para>
   Sekizlik gösterimde sayıların önüne <literal>0</literal> (sıfır),
   onaltılık gösterimde <literal>0x</literal> ve ikil gösterimde 
   <literal>0b</literal> getirilir.
  </para>

  <example>
   <title>- Tamsayı sayıllar</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1234; // onluk tabanda bir sayı
$a = -123; // negatif bir sayı
$a = 0123; // sekizlik tabanda bir sayı (onluk: 83)
$a = 0x1A; // onaltılık tabanda bir sayı (onluk: 26)
$a = 0b11111111; // ikil sayı (onluk: 255)
?>
]]>
   </programlisting>
  </example>

  <para>
   Biçimsel olarak <type>integer</type> sayılların yapısı:
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
onluk     : [1-9][0-9]*
          | 0

onaltılık : 0[xX][0-9a-fA-F]+

sekizlik  : 0[0-7]+

ikil      : 0[bB][01]+

tamsayı     : onluk
            | onaltılık
            | sekizlik
            | ikil
]]>
   </programlisting>
  </informalexample>

  <para>
   Bir <type>integer</type> türün genişliği platforma göre değişir. 32 bitlik
   sistemlerde azami değer 2 milyon civarında iken 64 bitlik sistemlerde 9E18
   civarındadır. PHP işaretsiz tamsayıları (C'deki unsigned) desteklemez.
   <type>integer</type> türün genişliği <constant>PHP_INT_SIZE</constant> 
   sabitine, olası en büyük değeri PHP 5.0.5'te <constant>PHP_INT_MAX</constant> 
   sabitine ve en küçük değeri ise PHP 7'de <constant>PHP_INT_MIN</constant> 
   sabitine atanmıştır.
  </para>

  <warning>
   <para>
    PHP 7 öncesinde, sekizlik bir değer içinde geçersiz bir rakam kullanılmışsa 
    (8, 9 gibi) o ve kalan tüm rakamlar yok sayılır, PHP 7 ve sonrasında bir çözümleme hatası çıktılanır.
   </para>
  </warning>
 </sect2>

 <sect2 xml:id="language.types.integer.overflow">
  <title>Tamsayılarda taşma</title>

  <para>
   PHP, <type>integer</type> türünde bir değerin bellekte
   <type>integer</type> türüne ayrılan genişliğe sığmadığını saptarsa
   <type>float</type> türünde bir değer olarak ele alır ve bu durum yapılan
   bir işlem sırasında ortaya çıkmışsa işlemden dönen değer
   <type>float</type> türünde olur.
  </para>

  <example>
   <title>32 bitlik sistemlerde tamsayı taşması</title>
   <programlisting role="php">
<![CDATA[
<?php
$büyük_sayı =  2147483647;
var_dump($büyük_sayı);

$büyük_sayı =  2147483648;
var_dump($büyük_sayı);

$milyon = 1000000;
$büyük_sayı =  50000 * $million;
var_dump($büyük_sayı);
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>64 bitlik sistemlerde tamsayı taşması</title>
   <programlisting role="php">
<![CDATA[
<?php
$büyük_sayı = 9223372036854775807;
var_dump($büyük_sayı);                     // int(9223372036854775807)

$büyük_sayı = 9223372036854775808;
var_dump($büyük_sayı);                     // float(9.2233720368548E+18)

$milyon = 1000000;
$büyük_sayı=  50000000000000 * $milyon;
var_dump($büyük_sayı);                     // float(5.0E+19)
?>
]]>
   </programlisting>
  </example>

  <para>
   PHP'de sonucun <type>integer</type> türünde elde edileceği bir bölme
   işlemi mevcut değildir. <literal>1/2</literal> işleminin sonucu
   <type>float</type> türünde <literal>0.5</literal> değeridir. Bu değer
   (<type>integer</type>) ile çarpıtılarak sıfıra yuvarlamak suretiyle bir
   tamsayıya dönüştürülebilirse de <function>round</function> işlevini
   kullanırsanız dönüşümün nasıl yapılacağını kendiniz belirleyebilirsiniz.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(25/7);         // float(3.5714285714286)
var_dump((int) (25/7)); // int(3)
var_dump(round(25/7));  // float(4)
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.integer.casting">
  <title><code>integer</code> türüne dönüşüm</title>

  <simpara>
   Bir değeri doğrudan <type>integer</type> türüne dönüştürmek için
   <literal>(int)</literal> veya <literal>(integer)</literal> çarpıtmasını
   kullanabilirsiniz. Ancak, çoğu durumda türü çarpıtmak gerekmez, bir
   tamsayı değer gerektiren bir işlev veya denetim yapısı, değeri özdevinimli
   olarak <type>integer</type> türüne dönüştürecektir. Ayrıca, bir değer
   <type>integer</type> türüne <function>intval</function> işleviyle de
   dönüştürülebilir.
  </simpara>

  <simpara>
   Bir <type>resource</type> bir <type>integer</type> sayıya dönüştürülürse, 
   sonuç, PHP tarafından çalışma anında özkaynağa atanan eşsiz özkaynak 
   numarası olacaktır.
  </simpara>

  <simpara>
   Ayrıca, <link linkend="language.types.type-juggling">Tür Dönüşümü</link>
   bölümüne de bakınız.
  </simpara>

  <sect3 xml:id="language.types.integer.casting.from-boolean">
   <title><link linkend="language.types.boolean"><code>boolean</code></link>
   türünden dönüşüm</title>

   <simpara>
    &false;, <literal>0</literal>'a (sıfır); &true;, <literal>1</literal>'e
    (bir) dönüştürülür.
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-float">
   <title><link linkend="language.types.float"><code>float</code></link>
   türünden dönüşüm</title>

   <simpara>
    <type>float</type> türünden <type>integer</type> türüne dönüşümde sayı
    <emphasis>sıfıra yaklaştırılarak</emphasis> yuvarlanır.
   </simpara>

   <para>
    Dönüşüm sonucu <type>integer</type> türüne ayrılan genişliğe (normalde
    32 bitlik sistemlerde <literal>+/- 2.15e+9 = 2^31</literal>, Windows dışındaki
    64 bitlik sistemlerde ise <literal>+/- 9.22e+18 = 2^63</literal>) sığmıyorsa,
    <type>float</type> türün hassasiyeti <type>integer</type> türünde tam bir
    sonuç vermeyeceğinden sonuç tanımsızdır. Bu durumda ne bir uyarı ne de bir
    bilgi verilir!
   </para>

   <note>
    <para>
     PHP 7.0.0 ve sonrasında, tanımsız ve platforma bağlı olmak yerine
     <type>integer</type> türüne çarpıtıldığında NaN ve Infinity daima sıfır 
     olacaktır. 
    </para>
   </note>

   <warning>
    <para>
     Ondalık kısmı <type>integer</type> türüne asla dönüştürmeyin, yoksa
     beklenmedik sonuçlar elde edebilirsiniz.
    </para>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo (int) ( (0.1+0.7) * 10 ); // çıktısı: 7!
?>
]]>
     </programlisting>
    </informalexample>

    <para>
     Ayrıca bakınız: <link linkend="warn.float-precision">Kayan noktalı
     sayılarda hassasiyet</link> uyarısı.
    </para>
   </warning>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-string">
   <title><code><type>string</type></code> türünden dönüşüm</title>

   <simpara>
    <link linkend="language.types.string.conversion">Dizgelerin sayılara
    dönüşümü</link> bölümüne bakınız.
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting-from-null">
   <title><type>NULL</type> türünden dönüşüm</title>

   <simpara>
    &null; daima sıfıra dönüşür (<literal>0</literal>).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-other">
   <title>Diğer türlerden dönüşüm</title>

   <caution>
    <simpara>
     Diğer türlerden <type>integer</type> türüne dönüşümün nasıl davranacağı
     henüz kesin olarak tanımlanmamıştır. Gözlemlediğiniz bir davranışın
     doğruluğuna güvenmeyiniz, ileride bu davranış hiçbir bilgi verilmeden
     değiştirilebilir.
    </simpara>
   </caution>
  </sect3>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
