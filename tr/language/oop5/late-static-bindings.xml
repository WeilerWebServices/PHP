<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 305233 Maintainer: nilgun Status: ready -->
 <sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
  <title>Duruk İçselleştirim</title>
  <para>
   PHP 5.3.0'dan itibaren, miras alınan duruk bağlamın çağrıldığı nesne
   bağlamında değerlendirilmesini sağlayan ve duruk içselleştirim (İng.:
   <literal>late static bindings</literal>) adı verilen bir özellik eklenmiştir.
  </para>

  <para>
   Daha kesin olarak, duruk içselleştirim son "ötelenmeyen çağrıda" bahsi 
   geçen sınıfın saklanmasıyla çalışır. Duruk yöntem çağrısı durumunda sınıfın 
   adı açıkça (genellikle 
   <link linkend="language.oop5.paamayim-nekudotayim"><literal>::</literal></link>
   işlecinin sol tarafında) belirtilmiştir. Duruk olmayan yöntem çağrısı 
   durumunda söz konusu sınıf, nesnenin sınıfıdır. Bir "ötelenen çağrı",
   bir <literal>self::</literal>, <literal>parent::</literal>, 
   <literal>static::</literal> yöntemi veya sınıf hiyerarşisi üzerinden 
   gidiliyorsa <function>forward_static_call</function> çağrısıdır.
   <!-- technically, static:: may be non forwarding, but it's irrelevant -->
   <function>get_called_class</function> işlevi, çağrılan sınıfın ismini bir dize olarak almakta kullanılabilir ve bağlamını <literal>static::</literal> belirler.
  </para>

  <para>
    "<literal>Duruk içselleştirme</literal>", <literal>static::</literal>
    yöntemin çalışma anında, tanımlandığı nesnenin bağlamında değil,
    çağrıldığı nesnenin bağlamında değerlendirilmesi olgusunu betimler.
  </para>

  <sect2 xml:id="language.oop5.late-static-bindings.self">
   <title><code>self::</code> ile ilgili sınırlamalar</title>
   <para>
    <literal>self::</literal> veya <literal>__CLASS__</literal> gibi bulunduğu sınıfa
    duruk gönderim yapan öğeler, örnekten de görüleceği üzere, yöntemi miras
    alan sınıf bağlamında değil, yöntemin ait olduğu sınıf bağlamında
    değerlendirilirler:
   </para>
   <example>
    <title>- <code>self::</code> kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function kimsin() {
        echo __CLASS__;
    }
    public static function dene() {
        self::kimsin();
    }
}

class B extends A {
    public static function kimsin() {
        echo __CLASS__;
    }
}

B::dene();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
]]>
    </screen>
   </example>

  </sect2>

  <sect2 xml:id="language.oop5.late-static-bindings.usage">
   <title>Duruk İçselleştirimin uygulanması</title>

   <para>
    Duruk içselleştirimde çözümlemenin, gönderimin çalışma anında ilk
    çağrıldığı sınıfla sınırlandırılması, gönderim için özel bir anahtar
    sözcük kullanılarak sağlanır. Temel olarak, böyle bir anahtar sözcük,
    yukarıdaki örnekteki <literal>dene()</literal> yönteminin aşağıdaki gibi
    <literal>B</literal> döndürmesini sağlar. Bunun için yeni bir anahtar sözcük
    atamaktansa, zaten bir anahtar sözcük olan <literal>static</literal> sözcüğü
    kullanılmıştır.
   </para>

   <example>
    <title>- <code>static::</code> kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function kimsin() {
        echo __CLASS__;
    }
    public static function dene() {
        static::kimsin(); // Burada duruk içselleştirim yapılıyor
    }
}

class B extends A {
    public static function kimsin() {
         echo __CLASS__;
    }
}

B::dene();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
   <note>
    <para>
     Duruk olmayan bağlamlarda, çağrılan sınıf, nesne örneğini sınıfı 
     olacaktır. <literal>$this-></literal> aynı bağlamdaki private yöntemleri 
     çağırmayı denerken, <literal>static::</literal> kullanımı farklı sonuçlar 
     verebilir. <literal>static::</literal> ile ilgili diğer bir fark, sadece 
     duruk özellikler için kullanılabilmesidir.
    </para>
   </note>
   <example>
    <title>- Duruk olmayan bağlamda <code>static::</code> kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    private function foo() {
        echo "success!\n";
    }

    public function dene() {
        $this->foo();
        static::foo();
    }
}

class B extends A {
   /* foo() B'ye kopyalanacak, dolayısıyls bağlamı hala A olacak ve
    * çağrı başarılı olacaktır. */
}

class C extends A {
    private function foo() {
        /* özgün yöntem değişti; yenisinin bağlamı C'dir */
    }
}

$b = new B();
$b->test();
$c = new C();
$c->test();   //hata verir
?>]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
success!
success!
success!


Fatal error:  Call to private method C::foo() from context 'A' in /tmp/test.php on line 9
]]>
    </screen>
   </example>
   <note>
    <para>
     Duruk içselleştirimin çözümlemesi duruk çağrının tamamen çözümlendiği
     noktada durdurulur, daha öteye gidilmez. Diğer taraftan,
     <literal>parent::</literal> veya <literal>self::</literal> gibi anahtar sözcükler
     kullanılarak yapılan duruk çağrılar çağrı bilgisini ötelerler.
    </para>
    <example>
     <title>Ötelenen ve ötelenmeyen çağrılar</title>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function nesin() {
        static::kimsin();
    }

    public static function kimsin() {
        echo __CLASS__."\n";
    }
}

class B extends A {
    public static function dene() {
        A::nesin();
        parent::nesin();
        self::nesin();
    }

    public static function kimsin() {
        echo __CLASS__."\n";
    }
}
class C extends B {
    public static function kimsin() {
        echo __CLASS__."\n";
    }
}

C::dene();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
A
C
C
]]>
     </screen>
    </example>
   </note>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
