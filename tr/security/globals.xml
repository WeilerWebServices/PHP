<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336340 Maintainer: nilgun Status: ready -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
  <chapter xml:id="security.globals" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <title><literal>register_globals</literal> Kullanımı</title>
   &warn.deprecated.feature-5-3-0.removed-5-4-0;
   <para>
    <acronym>PHP</acronym>'deki belki de en tartışmalı değişiklik,
    <link linkend="ini.register-globals">register_globals</link>
    <acronym>PHP</acronym> yönergesinin öntanımlı değerinin  <acronym>PHP</acronym>
    <link xlink:href="&url.php.release4.2.0;">4.2.0</link>'da
    <literal>On</literal> iken <literal>Off</literal> yapılmasıdır. Bu yönerge
    üzerindeki geçmiş deneyimlere dayanmak oldukça yaygındı ve çoğu kişi
    yönergenin varlığını bile bilmediği gibi <acronym>PHP</acronym>'nin böyle
    çalıştığını varsayardı. Bu sayfada, bu yönerge ile yazılan kodun nasıl
    güvensiz olabileceği gösterilecek, fakat güvensizliğin yönergenin
    kendisinden ziyade nasıl yanlış kullanımından kaynaklandığı açıklanacaktır.
   </para>
   <para>
    <link linkend="ini.register-globals">register_globals</link>
    <literal>On</literal> iken, <acronym>HTML</acronym> formlarındaki istek
    değişkenleri gibi bir takım değişkenler betiğinize dahil edilir.
    <acronym>PHP</acronym>'nin değişken ilklendirme gerektirmeme olgusu güvensiz
    kod yazımını daha da kolaylaştırır. Zor bir karar olmasına rağmen
    <acronym>PHP</acronym> topluluğu bu yönergeyi öntanımlı olarak iptal
    etmeyi uygun gördü. Yönergenin değeri <literal>On</literal> iken,
    kullanıcılar, değişkenleri, aslında ne olup bittiğini bilmeden sadece
    varsayımla kullanırdı. Betiğin kendisi tarafından tanımlanmış dahili
    değişkenler kullanıcı tarafından gönderilen istek verileri ile karışırdı.
    <link linkend="ini.register-globals">register_globals</link>
    <literal>Off</literal> yapılınca bu değişti. Yönergenin yanlış kullanımını
    bir örnekle açıklamaya çalışalım:
   </para>
   <para>
    <example>
     <title>- <literal>register_globals = on</literal> ile yanlış kullanım
     örneği</title>
     <programlisting role="php">
<![CDATA[
<?php
// Sadece kullanıcı kimliği doğrulanıyorsa $yetkili = true olmalı
if (authenticated_user()) {
    $yetkili = true;
}

// $yetkili değişkenini başta false ile ilklendirmediğimizden
// bu atama GET auth.php?yetkili=1 şeklinde register_globals
// üzerinden yapılmış olabilir. Dolayısıyla, kullanıcı kendini
// yetkiliymiş gibi gösterebilir!
if ($yetkili) {
    include "/gayet/hassas/veriler.php";
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <literal>register_globals = on</literal> iken yukarıda yürüttüğümüz mantık
    zarar görebilir. <literal>register_globals = off</literal> olduğunda,
    <varname>$yetkili</varname> değişkenine istek üzerinden değer
    atanamayacağından bir açık söz konunu olmayacaktır. Aslında değişkenleri
    baştan ilklendirmek iyi bir programcılık alışkanlığıdır. Yukarıdaki
    örnekte baştan <literal>$yetkili = false</literal> yapabilirdik. Bu
    ilklendirme yapılmış olsaydı, kullanıcı öntanımlı olarak yetkisiz
    olacağından <literal>register_globals</literal> yönergesinin değerinin ne
    olduğunun bir önemi olmayacaktı.
   </para>
   <para>
    Diğer bir örnek <link linkend="ref.session">oturumlarla</link> ilgilidir.
    <literal>register_globals = on</literal> iken, aşağıdaki örnekte
    <varname>$kullanici</varname> değişkenini de kullanabilirdik, fakat tekrar
    hatırlatmakta yarar var: <varname>$kullanici</varname>, GET gibi başka bir
    kaynaktan da (örn, URL üzerinden) gelebilirdi.
   </para>
   <para>
    <example>
     <title>- <literal>register_globals</literal> On veya Off iken oturum
     örneği</title>
     <programlisting role="php">
<![CDATA[
<?php
// $kullanici'nin nereden geleceğini bilemezdik
// Fakat oturum verisi için $_SESSION kullanınca biliriz
if (isset($_SESSION['kullanici'])) {

    echo "Merhaba <b>{$_SESSION['kullanici']}</b>";

} else {

    echo "Merhaba <b>Ziyaretçi</b><br />";
    echo "Oturum açmak ister misiniz?";

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Sahtecilik yapılmaya çalışıldığında uyaracak önleyici tedbirler almak da
    mümkündür. Bir değişken vaktinden önce geliyorsa, gönderilen verinin
    ilgisiz bir teslimat çeşidinden gelip gelmediğini sınayabilirsiniz.
    Verinin sahte olmadığını garanti etmese de saldırganın yaptığı sahtecilik
    türünün tahmin edilmesi gerekir. İstek verisinin geldiği yeri
    önemsemiyorsanız, GET, POST ve COOKIE verilerinin bir karışımını içeren
    <varname>$_REQUEST</varname> dizisini kullanabilirsiniz. Ayrıca, <link
    linkend="language.variables.external">Dış Kaynaklı Değişkenler</link>
    bölümüne de bakınız.
   </para>
   <para>
    <example>
     <title>- Basit değişken sahteciliğinin saptanması</title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['MAGIC_COOKIE'])) {

    // MAGIC_COOKIE bir çerezden gelir.
    // Çerez verisini doğrulamayı unutmayın!

} elseif (isset($_GET['MAGIC_COOKIE']) || isset($_POST['MAGIC_COOKIE'])) {

   mail("admin@example.com", "Olası kırma çabası", $_SERVER['REMOTE_ADDR']);
   echo "Güvenlik ihlali; yönetici uyarıldı.";
   exit;

} else {

   // MAGIC_COOKIE bu istek (REQUEST) üzerinden atanmamış.

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Şüphesiz, tek başına <literal>register_globals = off</literal>, kodunuzun
    güvenli olduğu anlamına gelmez. Gönderilen her veri parçası başka yollarla
    da ayrıca sınanmalıdır. Kullanıcı verinizi daima doğrulayın ve
    değişkenlerinizi daima ilklendirin! İlklendirilmemiş değişkenleri görmek
    için <function>error_reporting</function> işlevi ile
    <constant>E_NOTICE</constant> seviyesinden hataların gösterilmesini
    sağlamalısınız.
   </para>
   <para>
    <literal>register_globals</literal>'in On veya Off olmasının taklit
    edilmesi hakkında bilgi edinmek için SSS'deki <link
    linkend="faq.misc.registerglobals">register_globals ile nasıl çalışacağım?
    </link> sorusuna bakınız.
   </para>
  </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
