<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: nilgun Status: ready -->
<refentry xml:id="domdocument.registernodeclass" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>DOMDocument::registerNodeClass</refname>
  <refpurpose>Temel düğüm türünü oluşturmakta kullanılacak türetilmiş sınıfı belirtmek için kullanılır</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>DOMDocument::registerNodeClass</methodname>
   <methodparam><type>string</type><parameter>temelSınıf</parameter></methodparam>
   <methodparam><type>string</type><parameter>türetilenSınıf</parameter></methodparam>
  </methodsynopsis>

  <para>
   Sonradan PHP DOM eklentisi tarafından kullanılmak üzere hazırladığınız
   kendi DOM sınıfınızı tanıtmanızı sağlar.
  </para>
  <para>
   Bu yöntem DOM standardının bir parçası değildir.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>temelSınıf</parameter></term>
     <listitem>
      <para>
       Kendi sınıfınızı türetirken kullandığınız temel sınıfın ismi. Bu
       sınıfların listesi için bakınız: <xref linkend="book.dom" />.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>türetilenSınıf</parameter></term>
     <listitem>
      <para>
       Türettiğiniz sınıfın ismi. &null; belirtilirse,
       <parameter>temelSınıf</parameter>'tan evvelce türetilen sınıf silinir.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PHP 5.2.2</entry>
       <entry>
        5.2.2 öncesinde, <parameter>temelSınıf</parameter>'tan evvelce
        türetilmiş bir sınıf varsa yenisinin kaydı yapılmadan önce eskisinin
        kaydı silinmek zorundaydı.
       </entry>
      </row>
<!--
      <row>
       <entry>...</entry>
       <entry>
        ...
       </entry>
      </row>
-->
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- Kolaylık olsun diye <classname>DOMElement</classname> sınıfına
    yeni bir yöntem eklemek</title>
    <programlisting role="php">
<![CDATA[
<?php

class myElement extends DOMElement {
   function appendElement($name) {
      return $this->appendChild(new myElement($name));
   }
}

class myDocument extends DOMDocument {
   function setRoot($name) {
      return $this->appendChild(new myElement($name));
   }
}

$doc = new myDocument();
$doc->registerNodeClass('DOMElement', 'myElement');

// Artık bir elemanı diğerine eklemek için bir yöntem yetecek!
$root = $doc->setRoot('root');
$child = $root->appendElement('child');
$child->setAttribute('foo', 'bar');

echo $doc->saveXML();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
<?xml version="1.0"?>
<root><child foo="bar"/></root>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Elemanların özel bir sınıf olarak döndürülmesi</title>
    <programlisting role="php">
<![CDATA[
<?php
class myElement extends DOMElement {
    public function __toString() {
        return $this->nodeValue;
    }
}

$doc = new DOMDocument;
$doc->loadXML("<root><element><child>text in child</child></element></root>");
$doc->registerNodeClass("DOMElement", "myElement");

$element = $doc->getElementsByTagName("child")->item(0);
var_dump(get_class($element));

// __toString yönteminden yararlanalım
echo $element;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(9) "myElement"
text in child
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Asıl belgeyi döndürmek</title>
    <para>
     <classname>DOMDocument</classname> sınıfına özgü olarak, sınıf
     örneklenirken sınıfın <varname>ownerDocument</varname> özelliği
     örneklenen sınıfı gösterecektir. Yani, <classname>DOMDocument</classname>
     sınıfı için <function>DOMDocument::registerNodeClass</function> yönteminin
     kullanımına aslında gerek yoktur.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class myDOMDocument extends DOMDocument {
}

class myOtherDOMDocument extends DOMDocument {
}

// myDOMDocument nesnesini XML belge olarak oluşturalım
$doc = new myDOMDocument;
$doc->loadXML("<root><element><child>text in child</child></element></root>");

$child = $doc->getElementsByTagName("child")->item(0);

// Düğümün sahibi myDOMDocument nesnesidir
var_dump(get_class($child->ownerDocument));

// myDOMDocument nesnesinden bir düğüm alalım
$newdoc = new myOtherDOMDocument;
$child = $newdoc->importNode($child);

// Düğümün sahibi artık myOtherDOMDocument nesnesi oldu
var_dump(get_class($child->ownerDocument));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(13) "myDOMDocument"
string(18) "myOtherDOMDocument"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
