<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 333185 Maintainer: nilgun Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.array-map">
 <refnamediv>
  <refname>array_map</refname>
  <refpurpose>Belirtilen dizilerin elemanlarına geriçağırım işlevini uygular
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_map</methodname>
   <methodparam><type>callable</type><parameter>işlev</parameter></methodparam>
   <methodparam><type>array</type><parameter>dizi1</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_map</function> işlevi belirtilen dizilerin elemanlarının
   her birine <parameter>işlev</parameter> işlevini uygulayıp sonucu bir dizi
   olarak döndürür. Geriçağırım işlevinin değiştirge sayısı
   <function>array_map</function> işlevine aktarılan değiştirge sayısını kabul
   edebilmelidir.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>işlev</parameter></term>
     <listitem>
      <para>
       Her dizinin her elemanına uygulanacak geri çağırım işlevi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dizi1</parameter></term>
     <listitem>
      <para>
       Elemanları <parameter>işlev</parameter> tarafından işlenecek ilk dizi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
        Elemanları <parameter>işlev</parameter> tarafından işlenecek diğer
        diziler.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Belirtilen dizilerin elemanlarının her birine <parameter>işlev</parameter>
   işlevini uyguladıktan sonra oluşan diziyi döndürür.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <function>array_map</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
function cube($n)
{
    return($n * $n * $n);
}

$a = array(1, 2, 3, 4, 5);
$b = array_map("cube", $a);
print_r($b);
?>
]]>
    </programlisting>
    <para>
     <varname>$b</varname> şöyle olur:
    </para>
    <screen>
<![CDATA[
Array
(
    [0] => 1
    [1] => 8
    [2] => 27
    [3] => 64
    [4] => 125
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Lamda işlevi kullanan <function>array_map</function> örneği
    (PHP 5.3.0 ve sonrası)</title>
    <programlisting role="php">
<![CDATA[
<?php
$func = function($deger) {
    return $deger * 2;
};

print_r(array_map($func, range(1, 5)));
?>
]]>
    </programlisting>
    <screen>
<![CDATA[
Array
(
    [0] => 2
    [1] => 4
    [2] => 6
    [3] => 8
    [4] => 10
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Birden fazla diziyle <function>array_map</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
function show_Spanish($n, $m)
{
    return("İspanyolcada $n sayısının ismi:");
}

function map_Spanish($n, $m)
{
    return(array($n => $m));
}

$a = array(1, 2, 3, 4, 5);
$b = array("uno", "dos", "tres", "cuatro", "cinco");

$c = array_map("show_Spanish", $a, $b);
print_r($c);

$d = array_map("map_Spanish", $a , $b);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
// $c çıktısı
Array
(
    [0] => İspanyolcada 1 sayısının ismi: uno
    [1] => İspanyolcada 2 sayısının ismi: dos
    [2] => İspanyolcada 3 sayısının ismi: tres
    [3] => İspanyolcada 4 sayısının ismi: cuatro
    [4] => İspanyolcada 5 sayısının ismi: cinco
)

// $d çıktısı
Array
(
    [0] => Array
        (
            [1] => uno
        )

    [1] => Array
        (
            [2] => dos
        )

    [2] => Array
        (
            [3] => tres
        )

    [3] => Array
        (
            [4] => cuatro
        )

    [4] => Array
        (
            [5] => cinco
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   İki veya daha fazla sayıda dizi kullanırken işlev elemanlara karşılıklı
   uygulanacağından normal olarak dizilerin eleman sayılarının eşit olması
   gerekir. Eğer bu eşitlik yoksa, kısa olanlar boş elemanlar eklenerek en
   uzun olanın boyuna eşitlenir
  </para>
  <para>
   Bu işlevin ilginç bir kullanımı da, geriçağırım işlevi ismi olarak &null;
   belirterek bir diziler dizisi oluşturmaktır.
  </para>
  <para>
   <example>
    <title>- Bir diziler dizisi oluşturmak</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = array(1, 2, 3, 4, 5);
$b = array("one", "two", "three", "four", "five");
$c = array("bir", "iki", "üç", "dört", "beş");

$d = array_map(null, $a, $b, $c);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => 1
            [1] => one
            [2] => bir
        )

    [1] => Array
        (
            [0] => 2
            [1] => two
            [2] => iki
        )

    [2] => Array
        (
            [0] => 3
            [1] => three
            [2] => üç
        )

    [3] => Array
        (
            [0] => 4
            [1] => four
            [2] => dört
        )

    [4] => Array
        (
            [0] => 5
            [1] => five
            [2] => beş
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   Eğer dizi elemanları dizgesel anahtarlar içeriyorsa, sadece aynı anahtara
   sahip olmayan elemanlar dizgesel anahtarlarıyla içerilir. Eğer aynı
   anahtara sahip birden fazla eleman varsa dönen dizi bu elemanları daima
   sayısal indisli olarak içerir.
  </para>
  <para>
   <example>
    <title>- Dizgesel anahtarlarla <function>array_map</function> örneği
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$arr = array("anahtar" => "değer");
function cb1($a) {
    return array ($a);
}
function cb2($a, $b) {
    return array ($a, $b);
}
var_dump(array_map("cb1", $arr));
var_dump(array_map("cb2", $arr, $arr));
var_dump(array_map(null,  $arr));
var_dump(array_map(null, $arr, $arr));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  ["anahtar"]=>
  array(1) {
    [0]=>
    string(5) "deger"
  }
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "deger"
    [1]=>
    string(5) "deger"
  }
}
array(1) {
  ["stringkey"]=>
  string(5) "deger"
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "deger"
    [1]=>
    string(5) "deger"
  }
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_filter</function></member>
    <member><function>array_reduce</function></member>
    <member><function>array_walk</function></member>
    <member>&seealso.callback;</member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
