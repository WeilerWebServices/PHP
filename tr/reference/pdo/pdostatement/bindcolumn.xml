<?xml version='1.0' encoding='utf-8'?>
<!-- $Revision$ -->
<!-- EN-Revision: 297078 Maintainer: nilgun Status: ready -->
<refentry xml:id="pdostatement.bindcolumn" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement->bindColumn</refname>
  <refpurpose>Bir sütunu bir PHP değişkeni ile ilişkilendirir
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type>bool</type><methodname>PDOStatement::bindColumn</methodname>
    <methodparam><type>mixed</type><parameter>sütun</parameter></methodparam>
    <methodparam><type>mixed</type><parameter role="reference">değişken</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>veri_türü</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>uzunluk</parameter></methodparam>
    <methodparam choice="opt"><type>mixed</type><parameter>seçenekler</parameter></methodparam>
   </methodsynopsis>

  <para>
   Bir sorgunun sonuç kümesindeki belli bir sütunu bir değişken ile
   ilişkilendirir. Her <function>PDOStatement::fetch</function> veya
   <function>PDOStatement::fetchAll</function> çağrısında sütunlarla ilişkili
   değişkenler güncellenir.
  </para>
  <note>
   <para>
    Deyim çalıştırılana kadar sütun bilgisi PDO'ya görünür olmadığından
    taşınabilir uygulamaların bu yöntemi bir
    <function>PDOStatement::execute</function> çağrısından sonra kullanmaları
    gerekir.
   </para>
   <para>
    Ancak, <emphasis>PgSQL sürücüsü</emphasis> kullanılırken bir LOB sütununu
    bir akımla ilişkilendirmek için bu yöntemin
    <function>PDOStatement::execute</function> çağrısından önce kullanılması
    gerekir. Aksi takdirde büyük nesnenin nesne kimliği (oid) bir tamsayı
    olarak döner.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>sütun</parameter></term>
     <listitem>
      <para>
       Sütunun numarası veya ismi; sütun numaraları 1'den başlar. Sütun
       isminin sürücüden dönen isimle aynı harf büyüklüklerine sahip olmasına
       dikkat edin.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>değişken</parameter></term>
     <listitem>
      <para>
       Sütun ile ilişkilendirilecek PHP değişkeninin ismi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>veri_türü</parameter></term>
     <listitem>
      <para>
        PDO::PARAM_* sabitlerinden biri olarak veri türü.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>uzunluk</parameter></term>
     <listitem>
      <para>
       Yer ayırmak için ipucu olarak kullanılır.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>seçenekler</parameter></term>
     <listitem>
      <para>
       Sürücü için isteğe bağlı değiştirgeler.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- Sonuç kümesi çıktısının PHP değişkenleri ile ilişkilendirilmesi
    </title>
    <para>
     Sütunları birer PHP değişkeni ile ilişkilendirmek, sonuç kümesinin her
     satırının anında kullanıma hazır olmasını sağlamanın en kolay ve en
     verimli yoludur. Aşağıdaki örnekte, sütunların alınması ve değişkenlerle
     ilişkilendirilirken akıllı öntanımlılarla bazı seçeneklerin  kullanılışı
     gösterilmiştir.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function readData($dbh) {
  $sql = 'SELECT name, colour, calories FROM fruit';
  try {
    $stmt = $dbh->prepare($sql);
    $stmt->execute();

    /* Bind by column number */
    $stmt->bindColumn(1, $name);
    $stmt->bindColumn(2, $colour);

    /* Bind by column name */
    $stmt->bindColumn('calories', $cals);

    while ($row = $stmt->fetch(PDO::FETCH_BOUND)) {
      $data = $name . "\t" . $colour . "\t" . $cals . "\n";
      print $data;
    }
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}
readData($dbh);
?>
  ]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
apple   red     150
banana  yellow  175
kiwi    green   75
orange  orange  150
mango   red     200
strawberry      red     25
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDOStatement::execute</function></member>
    <member><function>PDOStatement::fetch</function></member>
    <member><function>PDOStatement::fetchAll</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
