<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: nilgun Status: ready -->
<chapter xml:id="pdo.connections" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Bağlantılar ve Bağlantı Yönetimi</title>
 <para>
  Bağlantılar temel PDO sınıfının örneklenmesiyle kurulur. Hangi sürücüyü
  kullanacağınızın bir önemi yoktur; daima PDO sınıf ismini kullanmanız gerekir.
  Veritabanı kaynağını (diğer bir deyişle DSN' i) ve isteğe bağlı olarak kullanıcı
  ismini ve parolasını belirtmek için kurucuyu kullanabilirsiniz.
 </para>
 <para>
  <example>
   <title>- MySQL'e bağlanma</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Bir hata oluşursa bu bir <classname>PDOException</classname> istisnasına
  sebep olur. Hatayı ele almak için istisnayı yakalayabilir veya işi
  <function>set_exception_handler</function> üzerinden ayarladığınız bir
  küresel hata işleme uygulamasına bırakabilirsiniz.
 </para>
 <para>
  <example><title>- Bağlantı hatalarının ele alınışı</title>
   <programlisting role="php">
<![CDATA[
<?php
try {
    $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
    foreach($dbh->query('SELECT * from FOO') as $row) {
        print_r($row);
    }
    $dbh = null;
} catch (PDOException $e) {
    print "Hata!: " . $e->getMessage() . "<br/>";
    die();
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <para>
   Uygulamanız, PDO kurucusu tarafından tetiklenen istisnayı yakalamazsa
   betiği sonlandırıp bir hata geri izlemesi oluşturmak için denetim öntanımlı
   olarak zend motoruna geçer. Bu geri izleme, kullanıcı ismi ve parola dahil
   veritabanı bağlantısıyla ilgili tüm ayrıntıları ortaya döker. Bu istisnayı
   yakalamak sizin sorumluluğunuzdadır. Bunu ya doğrudan
   <literal>catch</literal> deyimiyle ya da örtük olarak
   <function>set_exception_handler</function> üzerinden yaparsınız.
  </para>
 </warning>
 <para>
  Veritabanı bağlantısının başarıyla kurulmasıyla betiğinize PDO sınıfının bir
  örneği döner. PDO nesnesinin ömrü boyunca bağlantı etkin kalır. Bağlantıyı
  kapatmak için, nesneye gönderimli herşeyin silindiğinden emin olarak nesneyi
  yok etmeniz gerekir; bunu nesneyi tutan değişkene &null; atayarak
  yapabilirsiniz. Bunu siz yapmazsanız, PHP betiğiniz sonlandığında bunu sizin
  yerinize yapacaktır.
 </para>
 <para>
  <example>
   <title>- Bir bağlantının kapatılışı</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
// burada bağlantıyı kullanıyoruz


// İşimiz bittiğine göre bağlantıyı kapatabiliriz.
$dbh = null;
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Çoğu HTTP uygulaması veritabanı sunucularına kalıcı bağlantılardan medet
  umar. Kalıcı bağlantılar betiğin işi bittiğinde kapatılmaz, önbelleğe alınıp
  aynı kimlik kanıtlarıyla bağlantı kurmak isteyen başka betiklerce
  kullanılır. Kalıcı bağlantı önbelleği, bir betiğin bir veritabanı ile her
  iletişime geçme isteğinde yeni bir bağlantı kurma maliyetini ortadan
  kaldırır ve uygulamanın daha hızlı çalışmasını sağlar.
 </para>
 <para>
  <example>
   <title>- Kalıcı bağlantılar</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass, array(
    PDO::ATTR_PERSISTENT => true
));
?>
]]>
   </programlisting>
  </example>
 </para>
 <note>
  <para>
   Kalıcı bağlantı kullanmak için PDO kurucusuna aktarılan sürücü seçenekleri
   dizisinde <constant>PDO::ATTR_PERSISTENT</constant> sabitine &true;
   atamalısınız. Nesneyi ilklendirdikten sonra bu özelliği etkin kılmak
   isterseniz sürücü kalıcı bağlantıları kullanmayacaktır.
  </para>
 </note>
 <note>
  <para>
   PDO ODBC sürücüsünü kullanıyorsanız ve ODBC küüphaneleriniz ODBC Bağlantı
   Havuzlarını destekliyorsa (hem unixODBC hem de Windows bunu yapar;
   başkaları da olabilir) kalıcı PDO bağlantılarını kullanmanız önerilmez;
   bağlantı önbelleklemesini ODBC Bağlantı Havuzlama katmanına bırakmak daha
   iyidir. ODBC Bağlantı Havuzu bağlantıyı süreçteki diğer modüllerle
   paylaşır; eğer PDO bağlantıyı önbelleklemeye çalışırsa bu bağlantı asla
   ODBC bağlantı havuzuna dönmez ve sonuçta diğer modüllere hizmet vermek için
   ek bağlantılar oluşur.
  </para>
 </note>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

