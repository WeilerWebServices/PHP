<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: nilgun Status: ready -->
<refentry xml:id="function.yaz-record" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>yaz_record</refname>
  <refpurpose>Bir kayıt döndürür</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>yaz_record</methodname>
   <methodparam><type>resource</type><parameter>id</parameter></methodparam>
   <methodparam><type>int</type><parameter>konum</parameter></methodparam>
   <methodparam><type>string</type><parameter>tür</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>yaz_record</function> işlevi, geçerli sonuç kümesinin
   <parameter>konum</parameter> ile belirtilen konumundaki kaydı döndürür.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>id</parameter></term>
     <listitem>
      <para>
       <function>yaz_connect</function> tarafından döndürülmüş bağlantı
       özkaynağı.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>konum</parameter></term>
     <listitem>
      <para>
       Kaydın konumu. Sonuç kümesindeki kayıtların konumları 1, 2, ...,
       <varname>$sayı</varname> şeklinde olup <varname>$sayı</varname>,
       <function>yaz_hits</function> işlevi tarafından döndürülen sonuç
       sayısıdır.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>tür</parameter></term>
     <listitem>
      <para>
       Dönen kaydın biçimi belirtilir.
      </para>
      <note>
       <para>
        Aslında, kayıtların Z39.50/SRW sunucusundan uygun biçemde dönmesini
        garanti etmekten sorumludur. <parameter>tür</parameter> sadece,
        istemci tarafında yer alacak bir uzlaşım belirtir (PHP/YAZ olarak).
       </para>
      </note>
      <para>
       Aktarım kaydının bir dizi veya dizgeye dönüşmesinin yanında, PHP/YAZ'ın
       kayda bir karakter kümesi dönüşümü de uygulaması mümkündür.
       USMARC/MARC21 için bu özellikle önerilir, çünkü bunlar tarayıcılar
       tarafından desteklenmeyen MARC-8 karakter kümesini kullanırlar. Dönüşüm
       belirtmek için şunu ekleyin: <literal>;
       charset=</literal><replaceable>kaynak</replaceable><literal>,
       </literal><replaceable>hedef</replaceable>. Burada
       <replaceable>kaynak</replaceable> kaydın özgün karakter kümesini,
       <replaceable>hedef</replaceable> ise PHP tarafından görülecek karakter
       kümesini belirtir.
      </para>
      <variablelist>
       <varlistentry>
        <term><literal>string</literal></term>
        <listitem>
         <para>
          Kayıt, basit gösterim için bir dizge olarak döndürülür. Bu kipte,
          tüm MARC kayıtları ISO2709 zorlukla okunabildiğinden satırlı biçeme
          dönüştürülür. XML kayıtları ve SUTRS özgün biçemleriyle döndürülür.
          GRS-1 ise satırlı fakat çirkin bir biçemde döndürülür.
         </para>
         <para>
          Kaydın çabucak basit bir biçemde gösterilmesi gerektiğinde, hata
          ayıklamak için veya başka türlü göstermenin uygun olmadığı
          durumlarda bu biçem yararlıdır.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>xml</literal></term>
        <listitem>
         <para>
          Mümkünse kayıt bir XML dizge olarak döndürülür. Bu kipte tüm MARC
          kayıtları  <link xlink:href="&url.yaz-marcxml;">MARCXML</link>'e
          dönüştürülür. XML kayıtları ve SUTRS özgün biçemleriyle döndürülür.
          GRS-1 desteklenmez.
         </para>
         <para>
          Bu biçem, MARC kayıtlarının MARCXML'e dönüştürülmesi dışında
          <parameter>string</parameter> biçemine benzer.
         </para>
         <para>
          Bu biçem, kayıtların bir XML çözümleyici veya bir XSLT işlemcisi
          tarafından işleme sokulmasının gerektiği durumlarda yararlıdır.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>raw</literal></term>
        <listitem>
         <para>
          Kayıt, özgün biçemi korunarak bir dizge olarak döndürülür. Bu tür,
          MARC, XML ve SUTRS için yararlıdır. GRS-1 için işe yaramaz.
         </para>
         <para>
          MARC kayıtları bir ISO2709 dizgesi olarak döndürülür. XML ve SUTRS
          ise dizge olarak döndürülür.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>syntax</literal></term>
        <listitem>
         <para>
          Kaydın sözdizimi ismi, <literal>USmarc</literal>,
          <literal>GRS-1</literal>, <literal>XML</literal> gibi bir dizge
          olarak döndürülür.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>database</literal></term>
        <listitem>
         <para>
          Kaydın ilişkili olduğu veritabanının ismi bir dizge olarak
          döndürülür.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><literal>array</literal></term>
        <listitem>
         <para>
          Kayıt, GRS-1 yapısını yansıtan bir dizi olarak döndürülür. Bu tür,
          MARC ve GRS-1 için elverişlidir. XML ve SUTRS desteklenmez ve asıl
          kayıt XML veya SUTRS ise boş bir dizge döner.
         </para>
         <para>
          Dönen dizi, GRS-1'in her dahili/uç düğümü ile ilişkili bir listeden
          oluşur. Her liste öğesi, ilk elemanı <emphasis>yol</emphasis> ve
          (varsa) <emphasis>veri</emphasis> olan bir alt listeden oluşur.
         </para>
         <para>
          Yol öğesi, ağacın köküne göre ağaç bileşenlerinin listesini içeren
          bir dizgedir. Her bileşen
          <literal>(</literal><replaceable>tür</replaceable><literal>,
          </literal><replaceable>değer</replaceable><literal>)</literal>
          biçeminde bir yafta türü ve yafta değeri çiftinden oluşur.
         </para>
         <para>
          Dizge yaftalar normalde 3. tür yaftaya karşılıktır. MARC bir dizi
          olarak da döndürülebilir (dahili olarak GRS-1'e dönüştürülür).
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Belirtilen konumda kayıt yoksa boş bir dizge, varsa kaydı döndürür.
  </para>
  <para>
   Belirtilen konumda veritabanı kaydı yoksa boş bir dizge döner.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>- GRS-1 kaydı için bir dizi</title>
   <para>
    GRS-1 kaydı şöyle olsun:
    <screen>
<![CDATA[
(4,52)Robert M. Pirsig
(4,70)
      (4,90)
            (2,7)Transworld Publishers, ltd.
]]>
    </screen>
    Bu kayıt, kök seviyesinde iki düğüme sahiptir. Kök seviyesindeki
    düğümlerden ilkinin yaftası (4,52) [yafta türü: 4, yafta değeri: 52],
    verisi ise <literal>Robert M. Pirsig</literal>'dir; ikincisinin yaftası
    (4,70) olup (4,90) yaftalı tek elemanlı bir alt ağaç ve bu ağaç da (2,7)
    yaftalı ve <literal>Transworld Publishers, ltd.</literal> verili bir düğüm
    içermektedir.
   </para>
   <para>
    Bu kaydın bulunduğu konum <varname>$p</varname> ise,
    <programlisting role="php">
<![CDATA[
<?php

$ar = yaz_record($id, $p, "array");
print_r($ar);

?>
]]>
    </programlisting>
    kodunun çıktısı şöyle olur:
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => (4,52)
            [1] => Robert M. Pirsig
        )
    [1] => Array
        (
            [0] => (4,70)
        )
    [2] => Array
        (
            [0] => (4,70)(4,90)
        )
    [3] => Array
        (
            [0] => (4,70)(4,90)(2,7)
            [1] => Transworld Publishers, ltd.
        )
)
]]>
    </screen>
   </para>
  </example>
  <example>
   <title>- MARCXML ile çalışma</title>
   <para>
    Aşağıdaki PHP betiği MARCXML olarak bir MARC21/USMARC kaydı döndürür.
    Özgün kayıt (çoğu XML çözümleyicinin bilmediği) marc-8 kodlu olduğundan
    (tüm XML çözümleyicilerin desteklediği) UTF-8'e dönüştürüyoruz.
    <programlisting role="php">
<![CDATA[
<?php
$rec = yaz_record($id, $p, "xml; charset=marc-8,utf-8");
?>
]]>
    </programlisting>
   </para>
   <para>
    <varname>$rec</varname> kaydı Sablotron
    XSLT işlemcisi tarafından şöyle işlenir:
   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php

$xslfile = 'display.xsl';
$processor = xslt_create();
$parms = array('/_xml' => $rec);
$res = xslt_process($processor, 'arg:/_xml', $xslfile, NULL, $parms);
xslt_free($processor);
$res = preg_replace("'</?html[^>]*>'", '', $res);
echo $res;

?>
]]>
    </programlisting>
   </para>
   <para>
    PHP 5 için Sablotron XSLT yerine <link linkend="book.xsl">XSL</link>
    eklentisi kullanılmalıdır.
   </para>
  </example>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
