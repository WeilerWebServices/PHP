<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: nilgun Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.levenshtein" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>levenshtein</refname>
  <refpurpose>İki dizge arasındaki Levenştayn mesafesini hesaplar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>d1</parameter></methodparam>
   <methodparam><type>string</type><parameter>d2</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>d1</parameter></methodparam>
   <methodparam><type>string</type><parameter>d2</parameter></methodparam>
   <methodparam><type>int</type><parameter>yerleştirme_bedeli</parameter></methodparam>
   <methodparam><type>int</type><parameter>değiştirme_bedeli</parameter></methodparam>
   <methodparam><type>int</type><parameter>silme_bedeli</parameter></methodparam>
  </methodsynopsis>
  <para>
   Levenştayn mesafesi, <parameter>d1</parameter> dizgesini
   <parameter>d2</parameter>'ye dönüştürmek için silinecek, yerleştirilecek
   veya değiştirilecek karakterlerin asgarisini tanımlar. Algoritmanın
   hesaplama karmaşıklığı, <literal>n</literal> ve <literal>m</literal>,
   <parameter>d1</parameter> ve <parameter>d2</parameter>'nin uzunluğu olmak
   üzere <literal>O(m*n)</literal>'dir (Hesaplama karmaşıklığı O(max(n,m)**3)
   olan <function>similar_text</function> işlevine göre daha iyi olsa da hala
   pahalıdır).
  </para>
  <para>
   İşlevin en basit kullanımında, işlev sadece iki değiştirge alır ve
   <parameter>d1</parameter> dizgesini <parameter>d2</parameter>'ye
   dönüştürmek için silinecek, yerleştirilecek veya değiştirilecek
   karakterlerin sayısını hesaplar.
  </para>
  <para>
   İşlevin diğer bir kullanım türünde, işlev, yerleştirme, değiştirme ve silme
   işlemlerinin maliyetini tanımlayan üç değiştirge daha alır. Bu daha genel
   ve daha uyarlanabilir bir kullanım olsa da o kadar verimli değildir.
  </para>
 </refsect1>

<refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>d1</parameter></term>
     <listitem>
      <para>
       Levenştayn mesafesi değerlendirilecek dizgelerden biri.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>d2</parameter></term>
     <listitem>
      <para>
       Levenştayn mesafesi değerlendirilecek dizgelerden biri.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>yerleştirme_bedeli</parameter></term>
     <listitem>
      <para>
       Yerleştirme maliyetini tanımlar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>değiştirme_bedeli</parameter></term>
     <listitem>
      <para>
       Değiştirme maliyetini tanımlar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>silme_bedeli</parameter></term>
     <listitem>
      <para>
       Silme maliyetini tanımlar.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Belirtilen diziler 255 karakterlik üst sınırdan uzunsa -1 değilse
   Levenştayn mesafesi döner.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <function>levenshtein</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
// girdi yanlış yazılmış olsun
$input = 'carrrot';

// bir sözcük dizisiyle karşılaştıralım
$words  = array('apple','pineapple','banana','orange',
                'radish','carrot','pea','bean','potato');

// en kısa mesafenin bulunamaması durumu
$shortest = -1;

// En kısa mesafeyi bulmak için döngü
foreach ($words as $word) {

    // girdi ile sözcük arasındaki mesafeyi hesaplatalım
    $lev = levenshtein($input, $word);

    // Bir eşleşme var mı bakalım
    if ($lev == 0) {

        // en yakın sözcük bu olacak (tam eşleşme)
        $closest = $word;
        $shortest = 0;

        // Tam bir eşleşme bulduğumuza göre döngüden çıkalım
        break;
    }

    // Eğer bu mesafe bir öncekinden kısaysa
    // veya en kısa mesafe henüz bulunamadıysa
    if ($lev <= $shortest || $shortest < 0) {
        // en yakın eşleşmeyi ve en kısa mesafeyi tanımlayalım
        $closest  = $word;
        $shortest = $lev;
    }
}

echo "Girdi: $input\n";
if ($shortest == 0) {
    echo "Tam eşleşme bulundu: $closest\n";
} else {
    echo "Doğrusu bu olabilir mi?: $closest\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Girdi: carrrot
Doğrusu bu olabilir mi?: carrot
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>soundex</function></member>
    <member><function>similar_text</function></member>
    <member><function>metaphone</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
