<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: nilgun Status: ready -->
<refentry xml:id="function.debug-zval-dump" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>debug_zval_dump</refname>
  <refpurpose>Dahili bir zend değerinin dizgesel gösterimini çıktıya
  dökümler</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>debug_zval_dump</methodname>
   <methodparam><type>mixed</type><parameter>değişken</parameter></methodparam>
  </methodsynopsis>
  <para>
   Dahili bir zend değerinin dizgesel gösterimini çıktıya dökümler.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>değişken</parameter></term>
     <listitem>
      <para>
       İşleme alınacak değişken.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <function>debug_zval_dump</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';
$var2 = '';

$var2 =& $var1;

debug_zval_dump(&$var1);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
&string(11) "Hello World" refcount(3)
]]>
    </screen>
   </example>
  </para>
  <note>
   <title><literal>refcount</literal> hakkında</title>
   <para>
    Bu işlevden döndürülen <literal>refcount</literal> değerinin ne olduğu
    bazı durumlarda pek açık değildir. Örneğin bir geliştirici yukarıdaki
    örneğin <literal>refcount</literal> değerinin <literal>2</literal>
    olacağını bekleyebilirdi. Üçüncü gönderim aslında
    <function>debug_zval_dump</function> çağrılırken oluşur.
   </para>
   <para>
    Bu davranış, bir değişken <function>debug_zval_dump</function> işlevine
    gönderimli aktarılmadığı takdirde daha da karmaşıklaşır. Bunu göstermek
    için yukardaki örneğin hafifçe değiştirilmiş bir sürümünü ele alalım:
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';
$var2 = '';

$var2 =& $var1;

debug_zval_dump($var1); // bu sefer gönderimli aktarmadık
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hello World" refcount(1)
]]>
     </screen>
    </example>
   </para>
   <para>
    Neden <literal>refcount(1)</literal>? Çünkü <literal>$var1</literal>
    değişkeni işlev çağrılırken kopyalandı.
   </para>
   <para>
    Bu işlev, 1 <literal>refcount</literal>'lu bir değişken değeriyle
    aktarıldığında işleri daha da karmaşıklaştırır:
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';

debug_zval_dump($var1);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hello World" refcount(2)
]]>
     </screen>
    </example>
   </para>
   <para>
    Buradaki <literal>2</literal>'lik <literal>refcount</literal> neredeyse
    kesinlikle apaçık değildir. Özellikle yukarıdaki örnekler göz önüne
    alınarak. Peki ne oluyor?
   </para>
   <para>
    Bir değişken tek bir gönderime sahipse
    (<function>debug_zval_dump</function> işlevinde bir değiştirge olarak
    kullanılmadan önce,  <literal>$var1</literal>'de olduğu gibi),  PHP
    motoru, aktarılan gönderim yazılacaksa sadece yazma anında bir kopyasının
    yapılacağı ikazıyla bunu bir işleve aktarılmış gibi eniyileştirir. Buna
    "yazma sırasında kopyalama" denir.
   </para>
   <para>
    Eğer <function>debug_zval_dump</function> işlevi kendi tek değiştirgesine
    yazarsa (ki normalde yazmaz) bu durumda (bellekte bu parametre için) bir
    kopya oluşturulur. O zamana kadar bu değiştirge bir gönderim olarak kalır
    ve işlev çağrısının etki alanı içinde <literal>refcount</literal> değeri
    <literal>2</literal>'ye yükseltilir.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>var_dump</function></member>
    <member><function>debug_backtrace</function></member>
    <member><link linkend="language.references">Gönderimlerle İlgili Herşey
    </link></member>
    <member><link xlink:href="&url.derick.references;">References Explained (Derick Rethans)</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
