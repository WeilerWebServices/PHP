<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: nilgun Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.xml-parse-into-struct">
 <refnamediv>
  <refname>xml_parse_into_struct</refname>
  <refpurpose>XML veriyi çözümleyip sonucu bir dizi içinde döndürür
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>xml_parse_into_struct</methodname>
   <methodparam><type>resource</type><parameter>çözümleyici</parameter></methodparam>
   <methodparam><type>string</type><parameter>veri</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">değerler</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">indis</parameter></methodparam>
  </methodsynopsis>
  <para>
   Bu işlev bir XML belgeyi iki diziye çözümler.  <parameter>indis</parameter>
   dizisi, <parameter>değerler</parameter> dizisindeki değerlerin konumlarına
   birer gösterici içerir. Bu dizilerin işleve gönderimli aktarılmaları
   gerekir.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>çözümleyici</parameter></term>
     <listitem>
      <para>
       <function>xml_parser_create</function> ve
       <function>xml_parser_create_ns</function> işlevleri tarafından
       döndürülen bir XML özkaynağı.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>veri</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>değerler</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>indis</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Başarısızlık durumunda 0, başarı durumunda 1 döner. Bu, &false; ve &true;
   olarak ele alınmamalıdır. Dönen değeri === işleci ile karşılaştırın.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Aşağıdaki örnekte dönen dizilerin iç yapısı gösterilmiştir. Basit olarak,
   <literal>para</literal> etiketi içine <literal>note</literal> etiketini
   gömüp, bunu çözümledikten sonra üretilen dizileri dökümlüyoruz.
   <example>
    <title>- <function>xml_parse_into_struct</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
$simple = "<para><note>basit örnek</note></para>";
$p = xml_parser_create();
xml_parse_into_struct($p, $simple, $vals, $index);
xml_parser_free($p);
echo "İndis dizisi\n";
print_r($index);
echo "\nDeğerler dizisi\n";
print_r($vals);
?>
]]>
    </programlisting>
    <para>
     Çıktı şöyle olur:
    </para>
    <screen>
<![CDATA[
İndis dizisi
Array
(
    [PARA] => Array
        (
            [0] => 0
            [1] => 2
        )

    [NOTE] => Array
        (
            [0] => 1
        )

)

Değerler dizisi
Array
(
    [0] => Array
        (
            [tag] => PARA
            [type] => open
            [level] => 1
        )

    [1] => Array
        (
            [tag] => NOTE
            [type] => complete
            [level] => 2
            [value] => basit örnek
        )

    [2] => Array
        (
            [tag] => PARA
            [type] => close
            [level] => 1
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   Olaylarla tetiklenen çözümleme (expat kütüphanesine dayalı olarak) XML
   belgenin karmaşıklığına bağlı olarak karmaşıklaşabilir. Bu işlev DOM tarzı
   bir nesne üretmez fakat bir ağaç halinde uygun bir yapı üretir. Bu
   bakımdan, XML belge içindeki veriyi gösteren nesneler kolayca
   oluşturulabilir. Amino asitlerden oluşan küçük bir veritabanı olarak
   aşağıdaki XML belgeyi ele alalım:
   <example>
    <title>- moldb.xml - küçük bir moleküler bilgi veritabanı</title>
    <programlisting role="xml">
<![CDATA[
<?xml version="1.0"?>
<moldb>

  <molecule>
      <name>Alanine</name>
      <symbol>ala</symbol>
      <code>A</code>
      <type>hydrophobic</type>
  </molecule>

  <molecule>
      <name>Lysine</name>
      <symbol>lys</symbol>
      <code>K</code>
      <type>charged</type>
  </molecule>

</moldb>
]]>
    </programlisting>
   </example>
   Bu belgeyi çözümleyip uygun nesneleri üretecek kod:
   <example>
    <title>- parsemoldb.php - moldb.xml dosyasını bir moleküler nesne dizisine
    çözümler</title>
    <programlisting role="php">
<![CDATA[
<?php

class AminoAcid {
    var $name;    // amino asidin ismi
    var $symbol;  // üç harfli simge
    var $code;    // tek harflik kod
    var $type;    // hydrophobic, charged veya neutral

    function AminoAcid ($aa)
    {
        foreach ($aa as $k=>$v)
            $this->$k = $aa[$k];
    }
}

function readDatabase($filename)
{
    // amino asit veritabanını okuyalım
    $data = implode("", file($filename));
    $parser = xml_parser_create();
    xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
    xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
    xml_parse_into_struct($parser, $data, $values, $tags);
    xml_parser_free($parser);

    // dizileri açalım
    foreach ($tags as $key=>$val) {
        if ($key == "molecule") {
            $molranges = $val;
            // Dizi girdilerindeki her devamlı dizi çifti
            // bir molekülün alt ve üst aralıklarını tanımlar
            for ($i=0; $i < count($molranges); $i+=2) {
                $offset = $molranges[$i] + 1;
                $len = $molranges[$i + 1] - $offset;
                $tdb[] = parseMol(array_slice($values, $offset, $len));
            }
        } else {
            continue;
        }
    }
    return $tdb;
}

function parseMol($mvalues)
{
    for ($i=0; $i < count($mvalues); $i++) {
        $mol[$mvalues[$i]["tag"]] = $mvalues[$i]["value"];
    }
    return new AminoAcid($mol);
}

$db = readDatabase("moldb.xml");
echo "** Amino Asit Nesneleri Veritabanı:\n";
print_r($db);

?>
]]>
    </programlisting>
   </example>
   <filename>parsemoldb.php</filename> betiği çalıştırılınca,
   <varname>$db</varname> dizisi Amino asit nesnelerinden oluşturulmuş olur.
   Betiğin çıktısı şöyle olur:
   <informalexample>
    <screen>
<![CDATA[
** Amino Asit Nesneleri Veritabanı:
Array
(
    [0] => aminoacid Object
        (
            [name] => Alanine
            [symbol] => ala
            [code] => A
            [type] => hydrophobic
        )

    [1] => aminoacid Object
        (
            [name] => Lysine
            [symbol] => lys
            [code] => K
            [type] => charged
        )

)
]]>
    </screen>
   </informalexample>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
