<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: nilgun Status: ready -->
<refentry xml:id="function.stream-filter-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_register</refname>
  <refpurpose>Kullanıcı tanımlı bir akım süzgecini etkin kılar</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>stream_filter_register</methodname>
   <methodparam><type>string</type><parameter>süzgeç</parameter></methodparam>
   <methodparam><type>string</type><parameter>sınıf</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>stream_filter_register</function> işlevi dosya sistemi
   işlevleriyle (<function>fopen</function>, <function>fread</function> gibi)
   kullanılmak üzere kendi süzgecinizi tanımlamanıza izin verir.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>süzgeç</parameter></term>
     <listitem>
      <para>
       Süzgecin ismi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sınıf</parameter></term>
     <listitem>
      <para>
       Bir süzgeci gerçeklemek için, <literal>php_user_filter</literal>'in bir
       uzantısı olarak, aşağıda belirtilen üye işlevlerle bir sınıf
       tanımlamanız gerekir. Süzgecinizin ekli olduğu akım üzerinde okuma ve
       yazma işlemleri yaparken, PHP tüm veriyi süzgecinizden (ve akıma ekli
       diğer süzgeçlerden) geçirerek verinin istendiği gibi değiştirilmesini
       sağlar. Yöntemleri tamamen aşağıda belirtildiği gibi gerçeklemeniz
       gerekir. Başka türlü yaparsanız süzgecin ne yapacağı belli olmaz.
      </para>
      <methodsynopsis>
       <type>int</type><methodname>filter</methodname>
       <methodparam><type>resource</type><parameter>in</parameter></methodparam>
       <methodparam><type>resource</type><parameter>out</parameter></methodparam>
       <methodparam><type>int</type><parameter role="reference">consumed</parameter></methodparam>
       <methodparam><type>bool</type><parameter>closing</parameter></methodparam>
      </methodsynopsis>
      <para>
       Bu yöntem, süzgecin ekli olduğu akım üzerinde yapılan her okuma veya
       yazma (<function>fread</function> veya <function>fwrite</function>
       gibi) işleminde çağrılır.
       <parameter>in</parameter> değiştirgesi, süzülecek verinin içerdiği bir
       veya daha fazla sayıda <literal>biriktirici</literal> nesneden oluşan
       <literal>biriktirici kümesi</literal>'ni gösteren bir özkaynaktır.
       <parameter>out</parameter> değiştirgesi, değiştirilen biriktiricilerin
       konulduğu <literal>biriktirici kümesi</literal>'ni gösteren bir
       özkaynaktır.
       <parameter>consumed</parameter> değiştirgesi, süzgecinizce okunan ve
       değiştirilen veri uzunluğu kadar artmalı ve göreli olarak
       aktarılmalıdır. Çoğu durumda <parameter>consumed</parameter> değeri her
       <literal>$biriktirici</literal> için
       <literal>$biriktirici->datalen</literal> kadar arttılırılır. Eğer akım
       kapama sürecindeyse (dolayısıyla bu, süzgeç zincirindeki son geçiştir)
       <parameter>closing</parameter> değiştirgesine &true; atanmalıdır.
       <methodname>filter</methodname> yöntemi işini bitirdiğinde şu üç
       değerden birini döndürmelidir:
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Dönüş Değeri</entry>
           <entry>Anlamı</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PSFS_PASS_ON</constant></entry>
           <entry>
            Süzgeç veriyi başarıyla işleyip <literal>biriktirici
            kümesi</literal>'ni <parameter>out</parameter> değiştirgesine
            yerleştirdi.
           </entry>
          </row>
          <row>
           <entry><constant>PSFS_FEED_ME</constant></entry>
           <entry>
            Süzgeç işini tamamladı ancak, döndürülecek bir veri yok. Akımdan
            veya önceki süzgeçten daha fazla veri gerekiyor.
           </entry>
          </row>
          <row>
           <entry><constant>PSFS_ERR_FATAL</constant> (öntanımlı)</entry>
           <entry>
            Süzgeç kurtarılamayacak bir hata tespit etti; devam edilemiyor.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <methodsynopsis>
       <type>bool</type><methodname>onCreate</methodname>
       <void/>
      </methodsynopsis>
      <simpara>
       Bu yöntem süzgeç sınıfının bir nesne olarak örneklenmesi sırasında
       çağrılır. Süzgeciniz herhangi bir özkaynak ayıracaksa (bir tampon gibi)
       bunun yapılacağı yer burasıdır. Yöntem başarılı olduğunda &true; aksi
       takdirde &false; döndürmelidir
      </simpara>
      <simpara>
       Süzgeciniz ilk örneklendiğinde ve
       <literal>süzgeciniz-&gt;onCreate()</literal> çağrıldığında, aşağıdaki
       tabloda gösterilen özellikler kullanılabilir olmalıdır:
      </simpara>
      <para>
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Özellik</entry>
           <entry>İçeriği</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><literal>süzgeciniz-&gt;filtername</literal></entry>
           <entry>
            Örneklenen süzgecin ismini içeren dizge. Süzgeçler farklı
            isimlerle veya dosya ismi kalıplarıyla kayıt altına alınabilirler.
            Bu özellik kullanılacak ismi belirlemek için kullanılır.
           </entry>
          </row>
          <row>
           <entry><literal>süzgeciniz-&gt;params</literal></entry>
           <entry>
            <parameter>params</parameter> değiştirgesinin içeriği
            <function>stream_filter_append</function> veya
            <function>stream_filter_prepend</function> işlevine aktarılır.
           </entry>
          </row>
          <row>
           <entry><literal>süzgeciniz-&gt;stream</literal></entry>
           <entry>
            Süzülecek akım özkaynağı. Sadece <parameter>closing</parameter>
            değiştirgesine &false; atanmışken yapılan
            <methodname>filter</methodname> çağrılarında kullanılabilir.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <methodsynopsis>
       <type>void</type><methodname>onClose</methodname>
       <void/>
      </methodsynopsis>
      <para>
       Bu yöntem süzgeç kapanırken çağrılır (genellikle, akım da bu sırada
       kapanır) ve <literal>flush</literal> yöntem çağrısından
       <emphasis>sonra</emphasis> çalıştırılır. <literal>onCreate()</literal>
       çağrısı ile oluşturulan veya ayrılan özkaynaklar varsa bunların
       elden çıkarılacağı veya serbest bırakılacağı yer burasıdır.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
  <para>
   <parameter>süzgeç</parameter> zaten tanımlı bir süzgeçse &false; döner.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <filename>foo-bar.txt</filename> akımında büyük harfe dönüşüm
    süzgeci</title>
    <para>
     Aşağıdaki örnekte, <filename>foo-bar.txt</filename> akımında okunup
     yazılan tüm harfleri büyük harfe çeviren <literal>strtoupper</literal>
     isimli bir süzgeç gerçeklenmektedir.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Kendi süzgecimizi tanımlayalım */
class strtoupper_filter extends php_user_filter {
  function filter($in, $out, &$consumed, $closing)
  {
    while ($bucket = stream_bucket_make_writeable($in)) {
      $bucket->data = strtoupper($bucket->data);
      $consumed += $bucket->datalen;
      stream_bucket_append($out, $bucket);
    }
    return PSFS_PASS_ON;
  }
}

/* Süzgecimizi PHP'ye tanıtalım */
stream_filter_register("strtoupper", "strtoupper_filter")
    or die("Süzgecin tanıtımı başarısız oldu");

$fp = fopen("foo-bar.txt", "w");

/* Süzgeci açık akıma ekleyelim  */
stream_filter_append($fp, "strtoupper");

fwrite($fp, "Line1\n");
fwrite($fp, "Word - 2\n");
fwrite($fp, "Easy As 123\n");

fclose($fp);

/* İçeriği tekrar okuyalım */
readfile("foo-bar.txt");

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
LINE1
WORD - 2
EASY AS 123
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Çok sayıda süzgeç ismiyle eşleşen soysal bir süzgeç sınıfının
    tanıtımı</title>
    <programlisting role="php">
<![CDATA[
<?php

/* Kendi süzgeç sınıfımızı tanımlayalım */
class string_filter extends php_user_filter {
  var $mode;

  function filter($in, $out, &$consumed, $closing)
  {
    while ($bucket = stream_bucket_make_writeable($in)) {
      if ($this->mode == 1) {
        $bucket->data = strtoupper($bucket->data);
      } elseif ($this->mode == 0) {
        $bucket->data = strtolower($bucket->data);
      }

      $consumed += $bucket->datalen;
      stream_bucket_append($out, $bucket);
    }
    return PSFS_PASS_ON;
  }

  function onCreate()
  {
    if ($this->filtername == 'str.toupper') {
      $this->mode = 1;
    } elseif ($this->filtername == 'str.tolower') {
      $this->mode = 0;
    } else {
      /* PHP'nin başka str.* süzgeçlerine bakması için
         başarısızlığı raporluyoruz */
      return false;
    }

    return true;
  }
}

/*Süzgecimizi PHP'ye tanıtalım */
stream_filter_register("str.*", "string_filter")
    or die("Süzgeç tanıtılamadı");

$fp = fopen("foo-bar.txt", "w");

/* Süzgeci açık akıma ekleyelim.
   Burada str.tolower süzgecini de ekleyebilirdik. */
stream_filter_append($fp, "str.toupper");

fwrite($fp, "Line1\n");
fwrite($fp, "Word - 2\n");
fwrite($fp, "Easy As 123\n");

fclose($fp);

/* İçeriği tekrar okuyalım */
readfile("foo-bar.txt");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
LINE1
WORD - 2
EASY AS 123
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stream_wrapper_register</function></member>
    <member><function>stream_filter_append</function></member>
    <member><function>stream_filter_prepend</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
