<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 349253 Maintainer: nobody Status: ready -->

<phpdoc:classref xmlns:phpdoc="http://php.net/ns/phpdoc" xml:id="class.variant" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <titleabbrev>variant</titleabbrev>
 <title>variant Klasse</title>
 <partintro>

<!-- {{{ variant intro -->
  <section xml:id="variant.intro">
   &reftitle.intro;
   <para>
    Die VARIANTe ist COMs Pendant des PHP zvals; es ist eine Struktur, die einen
    Wert einer Reihe unterschiedlicher möglicher Typen enthalten kann. Die
    variant-Klasse, die durch die COM Extension zur Verfügung gestellt wird,
    erlaubt es, mehr Kontrolle über die Art, wie PHP Werte an COM übergibt und
    von diesem empfängt, zu haben.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="variant.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>variant</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>variant</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.variant')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="class.variant.examples">
   <title>variant-Beispiele</title>
   <para>
    <example xml:id="com.variant.example.php5">
     <title>variant-Beispiel</title>
     <programlisting role="php">
<![CDATA[
<?php
$v = new variant(42);
print "Der Typ ist " . variant_get_type($v) . "<br/>";
print "Der Wert ist " . $v . "<br/>";
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Wenn ein Wert zurückgegeben, oder eine variante Eigenschaft abgerufen wird,
     wird die Variante nur in einen PHP-Wert konvertiert, falls es eine direkte,
     verlustlose Zuordnung zwischen den Typen gibt. In allen anderen Fällen wird
     das Ergebnis als Exemplar der variant-Klasse zurückgegeben. Es ist möglich
     PHP zu zwingen, die Variante in einen nativen Typ zu konvertieren, entweder
     durch explizite Verwendung eines Typumwandlungs-Operators, oder durch das
     <function>print</function>en implizit in einen String zu wandeln.
     Die umfangreichen Variant-Funktionen können verwendet werden, um arithmetische
     Operationen auf Varianten durchzuführen, ohne eine Konvertierung zu erzwingen,
     oder Datenverlust zu riskieren.
    </para>
   </note>
   <para>
    Siehe auch <function>variant_get_type</function>.
   </para>
  </section>

 </partintro>

 &reference.com.entities.variant;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
