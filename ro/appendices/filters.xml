<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 348383 Maintainer: simionea Status: ready -->

<appendix xml:id="filters" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Lista filtrelor disponibile</title>
 <para>
  Urmează o listă a câtorva filtre de flux pentru a fi utilizate cu
  <function>stream_filter_append</function>.
  Versiunea dumneavoastră a PHP poate avea mai multre filtre (sau mai puține)
  decât cele listate aici.
 </para>

 <para>
  Merită de a fi remarcată mica asimetrie dintre
  <function>stream_filter_append</function>
  și <function>stream_filter_prepend</function>.
  Fiecare flux PHP conține o mică <emphasis>zonă-tampon de citire</emphasis>
  unde el stochează blocuri de date recepționate de la sistemul de fișiere
  sau alte resurse pentru a procesa datele în modul cel mai eficient.
  Imediat ce datele sunt extrase din resursă în zona-tampon internă a fluxului,
  ele sunt procesate prin orice filtru atașat, indiferent dacă aplicația PHP
  este pregătită de a primi datele, sau nu.
  Dacă datele se află în zona-tampon de citire în timp ce sunt
  <emphasis>anexate</emphasis> la filtru, aceste date vor fi imediat procesate
  prin acel filtru, astfel încât faptul aflării lor în zona-tampon trece
  neobservat.
  Însă dacă datele se află în zona-tampon de citire în timp ce sunt
  <emphasis>prefixate</emphasis> la filtru, ele <emphasis>NU</emphasis>
  vor fi procesate prin acel filtru. În schimb se va aștepta momentul când următorul
  bloc de date va fi extras din resursă.
 </para>

 <para>
  Pentru a vedea lista filtrelor instalate în versiunea dumneavoastră a PHP,
  folosiți <function>stream_get_filters</function>.
 </para>

 <section xml:id="filters.string">
  <title>Filtrele string-urilor</title>

  <simpara>
   Fiecare dintre aceste filtre efectuează exact ceea ce indică denumirea lor
   și corespund cu comportamentul unei funcții de manipulare a stringurilor
   incorporate în PHP. Pentru mai multe informații despre un anumit filtru,
   referiți-vă la pagina din manual pentru funcția corespunzătoare.
  </simpara>

  <section xml:id="filters.string.rot13">
   <title>string.rot13</title>
   <simpara>
    Folosirea acestui filtru este echivalentă cu procesarea tuturor datelor
    din flux prin funcția <function>str_rot13</function>.
   </simpara>
   <example>
    <title>string.rot13</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.rot13');
fwrite($fp, "This is a test.\n");
/* Afișează:  Guvf vf n grfg.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.toupper">
   <title>string.toupper</title>
   <simpara>
    Folosirea acestui filtru este echivalentă cu procesarea tuturor datelor
    din flux prin funcția <function>strtoupper</function>.
   </simpara>
   <example>
    <title>string.toupper</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.toupper');
fwrite($fp, "This is a test.\n");
/* Afișează:  THIS IS A TEST.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.tolower">
   <title>string.tolower</title>
   <simpara>
    Folosirea acestui filtru este echivalentă cu procesarea tuturor datelor
    din flux prin funcția <function>strtolower</function>.
   </simpara>
   <example>
    <title>string.tolower</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.tolower');
fwrite($fp, "This is a test.\n");
/* Afișează:  this is a test.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.strip_tags">
   <title>string.strip_tags</title>
   <simpara>
    Folosirea acestui filtru este echivalentă cu procesarea tuturor datelor
    din flux prin funcția <function>strip_tags</function>.
    El acceptă parametrii în unul din aceste două moduri:
    un string conținând o listă de tag-uri, similar celui de-al doilea
    parametru al funcției <function>strip_tags</function>,
    sau ca un tablou cu denumirile tag-urilor.
   </simpara>
   <para>
    &warn.deprecated.feature-7-3-0;
   </para>
   <example>
    <title>string.strip_tags</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, "<b><i><u>");
fwrite($fp, "<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\n");
fclose($fp);
/* Afișează:  <b>bolded text</b> enlarged to a level 1 heading   */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u'));
fwrite($fp, "<b>bolded text</b> enlarged to a <h1>level 1 heading</h1>\n");
fclose($fp);
/* Afișează:  <b>bolded text</b> enlarged to a level 1 heading   */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.convert">
  <title>Filtre de conversie</title>

  <simpara>
   Ca și filtrele string.*, filtrele convert.* efectuează acțiuni similare numelor
   lor. Pentru mai multe informații despre un anumit filtru, referiți-vă la pagina
   din manual pentru funcția corespunzătoare.
  </simpara>

  <section xml:id="filters.convert.base64">
   <title>convert.base64-encode și convert.base64-decode</title>
   <simpara>
    Utilizarea acestor filtre este echivalentă cu procesarea tuturor datelor din
    flux prin funcțiile <function>base64_encode</function> și
    <function>base64_decode</function> respectiv.
    <literal>convert.base64-encode</literal> susține parametri sub forma unui
    tablou asociativ. Dacă parametrul <parameter>line-length</parameter> este
    specificat, ieșirile sub forma base64 for fi separate în porțiuni de câte
    <parameter>line-length</parameter> caractere fiecare. Dacă parametrul
    <parameter>line-break-chars</parameter> este specificat, fiecare porțiune va
    fi delimitată cu caracterele specificaate în parametru. Acești parametri
    produc același efect ca și utilizarea <function>base64_encode</function> cu
    <function>chunk_split</function>.
   </simpara>
   <example>
    <title>
     convert.base64-encode &amp;
     convert.base64-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode');
fwrite($fp, "This is a test.\n");
fclose($fp);
/* Afișează:  VGhpcyBpcyBhIHRlc3QuCg==  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($fp, "This is a test.\n");
fclose($fp);
/* Afișează:  VGhpcyBp
           :  cyBhIHRl
           :  c3QuCg==  */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-decode');
fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");
fclose($fp);
/* Afișează:  This is a test.  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.covert.quoted-printable">
   <title>convert.quoted-printable-encode și convert.quoted-printable-decode</title>
   <simpara>
    Utilizarea versiunii decode a acestui filtru este echivalentă cu procesarea
    tuturor datelor din flux prin funcția <function>quoted_printable_decode</function>.
    Nu există o funcție echivalentă pentru <literal>convert.quoted-printable-encode</literal>.
    <literal>convert.quoted-printable-encode</literal> susține parametrii sub
    forma unui tablou asociativ. Adăugător la parametrii susținuți de
    <literal>convert.base64-encode</literal>, <literal>convert.quoted-printable-encode</literal>
    de asemenea susține argumente boolean <parameter>binary</parameter> și
    <parameter>force-encode-first</parameter>. <literal>convert.base64-decode</literal>
    susține numai parametrul <parameter>line-break-chars</parameter> în calitate
    de indiciu al caracterelor ce trebiue eliminate din încărcătura utilă
    codificată.
   </simpara>
   <example>
    <title>
     convert.quoted-printable-encode &amp;
     convert.quoted-printable-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.quoted-printable-encode');
fwrite($fp, "This is a test.\n");
/* Afișează:  =This is a test.=0A  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.convert.iconv">
   <title>convert.iconv.*</title>
   <simpara>
    Filtrele <literal>convert.iconv.*</literal> sunt disponibile dacă susținerea
    <link linkend="book.iconv">iconv</link> este activată. Utilizarea lor este
    echivalentă cu procesarea tuturor datelor din flux cu funcția
    <function>iconv</function>. Aceste filtre nu susțin parametri, în schimb se
    așteaptă ca codificările de intrare și de ieșire să fie furnizate în
    denumirea filtrului, de exemplu
    <literal>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</literal> sau
    <literal>convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</literal>
    (ambele notări sunt echivalente semantic).
   </simpara>

   <example>
    <title>convert.iconv.*</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.iconv.utf-16le.utf-8');
fwrite($fp, "T\0h\0i\0s\0 \0i\0s\0 \0a\0 \0t\0e\0s\0t\0.\0\n\0");
fclose($fp);
/* Afișează: This is a test. */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.compression">
  <title>Filtrele de compresie</title>

  <simpara>
   În timp ce <link linkend="wrappers.compression">învelișurile de compresie</link>
   oferă o modalitate de a crea fișiere compatibile cu gzip and bz2 pe sistemul de
   fișiere local, ele nu oferă o modalitate de compresie generalizată prin fluxuri
   în rețea, nici nu oferă o modalitate de a începe cu un flux necomprimat și a
   trece la unul comprimat. Pentru acestea, un filtru de compresie poate fi aplicat
   oricând asupra oricărei resurse-flux.
  </simpara>

  <note>
   <simpara>
    Filtrele de compresie <emphasis>nu</emphasis> generează antete sau sfârșituri
    utilizate de utilitele din linie de comandă, cum ar fi <literal>gzip</literal>.
    Ele numai comprimă și decomprimă porțiunile cu încărcătură utilă a fluxurilor
    de date.
   </simpara>
  </note>

  <section xml:id="filters.compression.zlib">
   <title>zlib.deflate and zlib.inflate</title>
   <simpara>
    <literal>zlib.deflate</literal> (compresie) și
    <literal>zlib.inflate</literal> (decompresie) sunt implementări ale metodelor de
    compresie descrise în <link xlink:href="&url.rfc;1951">RFC 1951</link>.
    Filtrul <literal>deflate</literal> preia până la trei parametri transmiși sub
    forma unui tablou asociativ.

    <parameter>level</parameter> descrie nivelul de compresie utilizat (1-9).
    Numere mai mari vor produce în general încărcături utile mai mici fără a necesita
    timp de procesare suplimentar. De asemenea există și două nivele speciale de
    compresie: 0 (fără compresie), și -1 (valoarea internă implicită a zlib -- în prezent 6).

    <parameter>window</parameter> este logaritmul în baza 2 a mărimii ferestrei de compresie
    în buclă inversă. Valorile mai mari (până la 15 -- 32768 baiți) produc o compresie mai
    bună, costul fiind mai multă memorie, în timp ce valorile mai mici (până la 9 -- 512 baiți)
    produc o compresie mai rea într-un volum de memorie mai mic.
    Valoarea implicită a mărimii <parameter>window</parameter> este în prezent
    <constant>15</constant>.

    <parameter>memory</parameter> este o scară care indică ce volum de memorie de lucru trebiue
    allocated. Valori permise sunt în intervalul de la 1 (alocare minimă) până la 9 (alocare maximă).
    Aceată alocare de memorie influențează doar viteza și nu are impact asupra mărimii
    încărcăturii de lucru generate.
   </simpara>

   <note>
    <simpara>
     Deoarece nivelul compresiei este cel mai des utilizat parametru, el poate fi transmis, îm mod
     alternativ, sub forma unei simple valori întregi (și nu sub forma unui tablou dintr-un element).
    </simpara>
   </note>

   <simpara>
    Filtrele de compresie zlib.* sunt disponibile în PHP începând cu versiunea <literal>5.1.0</literal>,
    dacă susținerea <link linkend="ref.zlib">zlib</link> a fost activată. Ele de asemenea sunt disponibile
    în calitate de cod portabil și pentru versiunea <literal>5.0.x</literal> instalând pachetul
    <link xlink:href="&url.pecl.package;zlib_filter">zlib_filter</link> din
    <link xlink:href="&url.pecl;">PECL</link>.
   </simpara>

   <example>
    <title>
     <literal>zlib.deflate</literal> și
     <literal>zlib.inflate</literal>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$params = array('level' => 6, 'window' => 15, 'memory' => 9);

$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "The original text is " . strlen($original_text) . " characters long.\n";

$fp = fopen('test.deflated', 'w');
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, $params);
fwrite($fp, $original_text);
fclose($fp);

echo "The compressed file is " . filesize('test.deflated') . " bytes long.\n";
echo "The original text was:\n";
/* Folosim readfile și zlib.inflate pentru a decomprima datele 'din zbor' */
readfile('php://filter/zlib.inflate/resource=test.deflated');

/* Generează utmătoarele:

The original text is 70 characters long.
The compressed file is 56 bytes long.
The original text was:
This is a test.
This is only a test.
This is not an important string.

 */
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>
     <literal>zlib.deflate</literal> simplu
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "The original text is " . strlen($original_text) . " characters long.\n";

$fp = fopen('test.deflated', 'w');
/* Aici "6" indică nivelul de compresie 6 */
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, 6);
fwrite($fp, $original_text);
fclose($fp);

echo "The compressed file is " . filesize('test.deflated') . " bytes long.\n";

/* Generează următoarele:

The original text is 70 characters long.
The compressed file is 56 bytes long.

 */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.compression.bzip2">
   <title>bzip2.compress and bzip2.decompress</title>
   <simpara>
    <literal>bzip2.compress</literal> și
    <literal>bzip2.decompress</literal>
    funcționează în același mod ca și filtrele zlib descrise anterior.

    Filtrul <literal>bzip2.compress</literal> acceptă până la doi parametri transmiși sub
    formă de elemente ale unui tablou asociativ:

    <parameter>blocks</parameter> este o valoare de tip întreg de la 1 până la 9, specificând
    numărul de blocuri de memorie de 100 kbaiți pentru a fi alocați în spațiul de lucru.

    <parameter>work</parameter> este de asemenea o valoare de tip întreg din intervalul de la
    0 până la 250 indicând ce volum de efort trebuie cheltuit folosind metoda normală de
    compresie, înainte de a trece înapoi la o metodă mai lentă, dar mai sigură.
    Reglarea acestui parametru afectează doar viteza de compresie. Nici mărimea datelor finale,
    nici utilizarea memoriei nu sunt afectate de modificarea acestui parametru.
    Valoarea 0 instruiește biblioteca bzip să utilizeze valoarea internă implicită.

    Filtrul <literal>bzip2.decompress</literal> acceptă doar un parametru, care poate fi
    transmis sub forma unei valori boolean obișnuite sau sub forma elementului
    <parameter>small</parameter> al unui tablou asociativ.

    <parameter>small</parameter>, când este stabilit la valoarea &true;, instruiește biblioteca
    bzip să efectueze decomprimarea cu utilizarea unui volum minimal al memoriei la costul
    vitezei de procesare.
   </simpara>

   <simpara>
    Filtrele de copresie bzip2.* sunt disponibile în PHP începând cu versiunea <literal>5.1.0</literal>
    dacă susținerea <link linkend="ref.bzip2">bz2</link> a fost activată. Ele de asemenea sunt disponibile
    în calitate de cod portabil și pentru versiunea <literal>5.0.x</literal> instalând pachetul
    <link xlink:href="&url.pecl.package;bz2_filter">bz2_filter</link> din
    <link xlink:href="&url.pecl;">PECL</link>.
   </simpara>

   <example>
    <title>
     <literal>bzip2.compress</literal> și
     <literal>bzip2.decompress</literal>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$param = array('blocks' => 9, 'work' => 0);

echo "The original file is " . filesize('LICENSE') . " bytes long.\n";

$fp = fopen('LICENSE.compressed', 'w');
stream_filter_append($fp, 'bzip2.compress', STREAM_FILTER_WRITE, $param);
fwrite($fp, file_get_contents('LICENSE'));
fclose($fp);

echo "The compressed file is " . filesize('LICENSE.compressed') . " bytes long.\n";

/* Generează următoarele:

The original text is 3288 characters long.
The compressed file is 1488 bytes long.

 */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.encryption">
  <title>Filtrele de criptare</title>
  <para>
   Filtrele de criptare sunt utile în special pentru criptarea fișierelor/fluxurilor.
  </para>

  <section xml:id="filters.encryption.mcrypt">
   <title>mcrypt.* și mdecrypt.*</title>
   <para>
    &warn.deprecated.feature-7-1-0;
   </para>

   <simpara>
    <literal>mcrypt.*</literal> și <literal>mdecrypt.*</literal>
    oferă criptare și decriptare simetrică, utilizând libmcrypt.
    Ambele seturi de filtre susțin aceiași algoritmi disponibili
    <link linkend="ref.mcrypt">extensiei mcrypt</link> sub forma
    <literal>mcrypt.ciphername</literal>, unde <parameter>ciphername</parameter>
    este denumirea algoritmului de criptare, care ar fi putut fi transmis funcției
    <function>mcrypt_module_open</function>.
    De asemenea sunt disponibili și următorii cinci parametri:
   </simpara>

   <para>
    <table>
     <title>Parametrii filtrului mcrypt</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Parametrul</entry>
        <entry>Necesar?</entry>
        <entry>Implicit</entry>
        <entry>Valori-exemple</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>mode</entry>
        <entry>Opțional</entry>
        <entry>cbc</entry>
        <entry>cbc, cfb, ecb, nofb, ofb, stream</entry>
       </row>
       <row>
        <entry>algorithms_dir</entry>
        <entry>Opțional</entry>
        <entry>ini_get('mcrypt.algorithms_dir')</entry>
        <entry>Localizarea modulelor algoritmilor</entry>
       </row>
       <row>
        <entry>modes_dir</entry>
        <entry>Opțional</entry>
        <entry>ini_get('mcrypt.modes_dir')</entry>
        <entry>Localizarea modulelor modurilor</entry>
       </row>
       <row>
        <entry>iv</entry>
        <entry>Necesar</entry>
        <entry>nu este</entry>
        <entry>De obicei 8, 16, sau 32 baiți de date binare. Depinde de cifru</entry>
       </row>
       <row>
        <entry>key</entry>
        <entry>Necesar</entry>
        <entry>nu este</entry>
        <entry>De obicei 8, 16, sau 32 baiți de date binare. Depinde de cifru</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <example>
    <title>Criptarea/Decriptarea cu Blowfish</title>
    <programlisting role="php">
<![CDATA[
<?php
// Se presupune că $key a fost generat anterior
$iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC);
$iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM);
$fp = fopen('encrypted-file.enc', 'wb');
fwrite($fp, $iv);
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key);
stream_filter_append($fp, 'mcrypt.blowfish', STREAM_FILTER_WRITE, $opts);
fwrite($fp, 'message to encrypt');
fclose($fp);

// Decriptarea ...
$fp = fopen('encrypted-file.enc', 'rb');
$iv = fread($fp, $iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC));
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key)
stream_filter_append($fp, 'mdecrypt.blowfish', STREAM_FILTER_READ, $opts);
$data = rtrim(stream_get_contents($fp));//trims off null padding
fclose($fp);
echo $data;
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Criptarea fișierului utilizând AES-128 CBC cu SHA256 HMAC în PHP 5.5+</title>
    <programlisting role="php">
<![CDATA[
<?php
AES_CBC::encryptFile($password, "plaintext.txt", "encrypted.enc");
AES_CBC::decryptFile($password, "encrypted.enc", "decrypted.txt");

class AES_CBC
{
   protected static $KEY_SIZES = array('AES-128'=>16,'AES-192'=>24,'AES-256'=>32);
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; } //default AES-128
   public static function encryptFile($password, $input_stream, $aes_filename){
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $fin = fopen($input_stream, "rb");
      $fc = fopen($aes_filename, "wb+");
      if (!empty($fin) && !empty($fc)) {
         fwrite($fc, str_repeat("_", 32) );//placeholder, SHA256 HMAC will go here later
         fwrite($fc, $hmac_salt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $esalt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mcrypt.rijndael-128', STREAM_FILTER_WRITE, $opts);
         $infilesize = 0;
         while (!feof($fin)) {
            $block = fread($fin, 8192);
            $infilesize+=strlen($block);
            fwrite($fc, $block);
         }
         $block_size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
         $padding = $block_size - ($infilesize % $block_size);//$padding is a number from 1-16
         fwrite($fc, str_repeat(chr($padding), $padding) );//perform PKCS7 padding
         fclose($fin);
         fclose($fc);
         $hmac_raw = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
         $fc = fopen($aes_filename, "rb+");
         fwrite($fc, $hmac_raw);//overwrite placeholder
         fclose($fc);
      }
   }
   public static function decryptFile($password, $aes_filename, $out_stream) {
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $hmac_raw = file_get_contents($aes_filename, false, NULL,  0, 32);
      $hmac_salt = file_get_contents($aes_filename, false, NULL, 32, $iv_size);
      $hmac_calc = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
      $fc = fopen($aes_filename, "rb");
      $fout = fopen($out_stream, 'wb');
      if (!empty($fout) && !empty($fc) && self::hash_equals($hmac_raw,$hmac_calc)) {
         fread($fc, 32+$iv_size);//skip sha256 hmac and salt
         $esalt = fread($fc, $iv_size);
         $iv    = fread($fc, $iv_size);
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mdecrypt.rijndael-128', STREAM_FILTER_READ, $opts);
         while (!feof($fc)) {
            $block = fread($fc, 8192);
            if (feof($fc)) {
               $padding = ord($block[strlen($block) - 1]);//assume PKCS7 padding
               $block = substr($block, 0, 0-$padding);
            }
            fwrite($fout, $block);
         }
         fclose($fout);
         fclose($fc);
      }
   }
   private static function hash_equals($str1, $str2) {
      if(strlen($str1) == strlen($str2)) {
         $res = $str1 ^ $str2;
         for($ret=0,$i = strlen($res) - 1; $i >= 0; $i--) $ret |= ord($res[$i]);
         return !$ret;
      }
      return false;
   }
   private static function calculate_hmac_after_32bytes($password, $hsalt, $filename) {
      static $init=0;
      $init or $init = stream_filter_register("user-filter.skipfirst32bytes", "FileSkip32Bytes");
      $stream = 'php://filter/read=user-filter.skipfirst32bytes/resource=' . $filename;
      $hkey = hash_pbkdf2("sha256", $password, $hsalt, $iterations=1000, 24, $raw=true);
      return hash_hmac_file('sha256', $stream, $hkey, $raw=true);
   }
}
class FileSkip32Bytes extends php_user_filter
{
   private $skipped=0;
   function filter($in, $out, &$consumed, $closing)  {
      while ($bucket = stream_bucket_make_writeable($in)) {
         $outlen = $bucket->datalen;
         if ($this->skipped<32){
            $outlen = min($bucket->datalen,32-$this->skipped);
            $bucket->data = substr($bucket->data, $outlen);
            $bucket->datalen = $bucket->datalen-$outlen;
            $this->skipped+=$outlen;
         }
         $consumed += $outlen;
         stream_bucket_append($out, $bucket);
      }
      return PSFS_PASS_ON;
   }
}
class AES_128_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; }
}
class AES_192_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-192']; }
}
class AES_256_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-256']; }
}
]]>
    </programlisting>
   </example>
  </section>
 </section>

</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
