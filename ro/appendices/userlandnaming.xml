<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 340765 Maintainer: simionea Status: ready -->

<appendix xml:id="userlandnaming" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Ghidul de stabilire a denumirilor de către utilizatori</title>
 <para>
  În continuare urmează un ghid pentru alegerea cea mai potrivită a denumirilor
  pentru identificatori în codul PHP al utilizatorului. La alegerea denumirilor
  în orice cod ce crează simboluri în spațiul global de denumiri este important
  de a lua în considerație următoarele sfaturi pentru a exclude posibilitatea ca
  versiunile viitoare ale PHP să conflicteze cu simbolurile dumneavoastră.
 </para>

 <section xml:id="userlandnaming.globalnamespace">
  <title>Spațiul global de denumiri</title>
  <para>
   Iată o trecere în revistă a construcțiilor de limbaj care fac parte din
   spațiul global de denumiri:
  </para>

  <itemizedlist>
   <listitem><para>funcții</para></listitem>
   <listitem><para>clase</para></listitem>
   <listitem><para>interfețe</para></listitem>
   <listitem><para>constante (nu constante de clasă)</para></listitem>
   <listitem>
    <para>variabile definite în afara funcțiilor/metodelor</para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.rules">
  <title>Reguli</title>
  <para>
   Următoarea listă oferă o trecere în revistă a drepturilor pe care proiectul
   PHP și le rezervează pentru sine la alegerea denumirilor pentru
   identificatorii interni noi. Ghidul definitiv oficial este
   <link xlink:href="&url.userlandnaming.cs;">STANDARDELE DE CODIFICARE</link>:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     PHP gestionează spațiul de denumiri de nivel superior dar încearcă să
     găsească niște denumiri decente, descriptive pentru a evita unele conflicte
     evidente.
    </para>
   </listitem>
   <listitem>
    <para>
     Denumirile funcțiilor utilizează linii de subliniere între cuvinte, în timp
     ce denumirile claselor utilizează atât reguli de tip
     <literal>camelCase</literal>, cât și de tip <literal>PascalCase</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     PHP va prefixa orice simbol global al unei extensii cu denumirea extensiei.
     (În trecut au fost numeroase excepții de la această regulă.) Exemple:
    </para>

    <itemizedlist>
     <listitem><para><function>curl_close</function></para></listitem>
     <listitem><para><function>mysql_query</function></para></listitem>
     <listitem><para>PREG_SPLIT_DELIM_CAPTURE</para></listitem>
     <listitem><para>new DOMDocument()</para></listitem>
     <listitem>
      <para>
       <function>strpos</function> (exemplu al unei greșeli din trecut)
      </para>
     </listitem>
     <listitem><para>new SplFileObject()</para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Iteratoarele și Excepțiile sunt însă pur și simplu sufixate cu
     "<literal>Iterator</literal>" și "<literal>Exception</literal>."
     Exemple:
    </para>
    <itemizedlist>
     <listitem><para><classname>ArrayIterator</classname></para></listitem>
     <listitem><para><classname>LogicException</classname></para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     PHP rezervează toate simbolurile ce încep cu <literal>__</literal> ca
     simboluri magice. Se recomandă să nu creați în PHP simboluri ce încep cu
     <literal>__</literal>, doar dacă doriți să utilizați funcționalitățile
     magice documentate. Exemple:
    </para>
    <itemizedlist>
     <listitem><para><link linkend="object.get">__get()</link></para></listitem>
     <listitem><para><function>__autoload</function></para></listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.tips">
  <title>Sfaturi</title>
  <para>
   Pentru a scrie cod-sursă valid în viitor se recomandă să nu plasați multe
   variabile, funcții sau clase în spațiul de nume global. Aceasta va preveni
   conflictele de nume cu codul părților terțe, precum și posibile adăugări viitoare
   la limbă.
  </para>
  <para>
   O metodă răspândită de a evita conflictele de nume ale funcțiilor și claselor
   este de a le adăuga la spațiul lor de nume
   (<link linkend="language.namespaces">namespace</link>) dedicat.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

namespace MyProject;

function my_function() {
    return true;
}

\MyProject\my_function();
]]>
   </programlisting>
  </informalexample>
  <para>
   Totuși este nevoie să urmăriți spațiile de nume deja utilizate, dar odată ce
   decideți asupra unui spațiu de nume pe care îl veți utiliza, puteți adăuga la
   el toate clasaele și funcțiile fără să vă mai gândiți la conflicte.
  </para>
  <para>
   Se consideră o practică bună limitarea numărului de variabile adăugate la
   circumstanța globală (global scope) pentru a preveni conflictele de nume cu
   codul părților terțe.
  </para>
  <note>
   <title>Circumstanțele variabilelor</title>
   <para>
    Datorită regulilor de atribuire a
    <link linkend="language.variables.scope">circumstanțelor</link> în PHP
    variabilele definite în interiorul funcțiilor și metodelor nu se află în
    circumstanța globală și deci nu pot conflicta cu alte variabile definite în
    circumstanța globală.
   </para>
  </note>

 </section>

</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
