<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- $Author$ -->
<!-- EN-Revision: 347577 Maintainer: simionea Status: ready -->
<!-- CREDITS: adiju -->

<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose>Elimină o variabilă dată</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>unset</function> distruge variabila specificată.
  </para>
  <para>
   Comportamentul <function>unset</function> în interiorul unei funcții poate
   varia în dependență de tipul variabilei pe care încercați să o distrugeți.
  </para>
  <para>
   Dacă este aplicat <function>unset</function> asupra unei variabile globale
   în interiorul unei funcții, numai variabila locală va fi distrusă. Variabila
   din mediul apelant își va păstra aceeași valoare ca și până la apelul
   <function>unset</function>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function destroy_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
bar
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Dacă doriți să aplicați <function>unset</function> asupra unei variabile
   globale din interiorul unei funcții, puteți utiliza tabloul
   <varname>$GLOBALS</varname> pentru aceasta:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    unset($GLOBALS['bar']);
}

$bar = "ceva";
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   Dacă se aplică <function>unset</function> în interiorul unei funcții asupra
   unei variabile care este transmisă PRIN REFERINȚĂ, numai variabila locală va
   fi distrusă. Variabila din mediul apelant își va păstra aceeași valoare ca
   și până la apelul <function>unset</function>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'ceva';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
ceva
ceva
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Dacă se aplică <function>unset</function> asupra unei variabile statice în
   interiorul unei funcții, <function>unset</function> distruge variabila numai
   în contextul restului funcției. Apelurile următoare vor restabili valoarea
   precedentă a variabilei.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Înainte de unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "după unset: $bar\n";
}

foo();
foo();
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
Înainte de unset: 1, după unset: 23
Înainte de unset: 2, după unset: 23
Înainte de unset: 3, după unset: 23
]]>
    </screen>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Variabila ce va fi eliminată.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
       O altă variabilă ...
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplu <function>unset</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// distruge o singură variabilă
unset($foo);

// distruge un singur element din tablou
unset($bar['quux']);

// distruge mai multe variabile
unset($foo1, $foo2, $foo3);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Utilizarea modificatorului <literal>(unset)</literal></title>
    <para>
     Utilizarea modificatorului
     <link linkend="language.types.null.casting"><literal>(unset)</literal></link>
     este deseori confundată cu funcția <function>unset</function>. Modificarea cu
     ajutorul <literal>(unset)</literal> servește doar pentru transformarea
     într-un tip <literal>NULL</literal>, pentru a asigura completitudinea.
     El nu modifică variabla căreia îi modifică tipul.
     Modificarea tipului cu (unset) este învechită începând cu PHP 7.2.0.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$name = 'Felipe';

var_dump((unset) $name);
var_dump($name);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
string(6) "Felipe"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    Este posibil de a elimina chiar și proprietăți ale obiectelor vizibile în
    contextul curent.
   </para>
  </note>
  <note>
   <para>
    Nu este posibil de a elimina <literal>$this</literal> în interiorul unei
    metode a unui obiect.
   </para>
  </note>
  <note>
   <para>
    La utilizarea <function>unset</function> asupra proprietăților inaccesibile
    ale obiectelor, va fi apelată metoda de supraîncărcare
    <link linkend="object.unset">__unset()</link>, dacă este
    declarată.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><link linkend="object.unset">__unset()</link></member>
    <member><function>array_splice</function></member>
    <member><link linkend="language.types.null.casting">(unset) casting</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
