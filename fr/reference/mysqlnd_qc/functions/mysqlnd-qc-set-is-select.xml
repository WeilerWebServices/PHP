<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325489 Maintainer: itanea Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.mysqlnd-qc-set-is-select" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>mysqlnd_qc_set_is_select</refname>
  <refpurpose>Installe une fonction de rappel qui décide si une requête doit être mise en cache</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type>
   <methodname>mysqlnd_qc_set_is_select</methodname>
   <methodparam>
    <type>string</type>
    <parameter>callback</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Installe une fonction de rappel qui décide si une requête doit être mise
   en cache.
  </para>
  <para>
   Il y a plusieurs façons de demander à PELC/mysqlnd_qc de mettre en cache
   une requête. Par défaut, PECL/mysqlnd_qc tente de mettre en cache une
   requête si la mise en cache de toutes les requêtes est activée ou si
   la chaîne de requête commence avec une astuce SQL. Le plugin, en interne,
   appèle une fonction nommée <literal>is_select()</literal>. Cette fonction
   interne peut être remplacée avec une fonction de rappel définie par l'utilisateur.
   Ainsi, la fonction de rappel définie par l'utilisateur est responsable 
   de décider si le plugin tente une mise en cache ou non de la requête.
   En raison du fait que la fonction interne est remplacée par la fonction
   de rappel, la fonction de rappel a un contrôle total. La fonction de rappel
   est libre d'ignorer la directive de configuration
   <literal>mysqlnd_qc.cache_by_default</literal> ainsi que les astuces SQL.
  </para>
  <para>
   La fonction de rappel est invoquée pour chaque requête inspectée
   par le plugin. Elle prend la chaîne de requête comme paramètre.
   La fonction de rappel retourne &false; si la requête ne doit pas être
   mise en cache. Elle retourne &true; pour demander au plugin de tenter
   de mettre en cache le jeu de résultats, s'il y en a un.
   Une entrée du cache est ainsi créée en utilisant le TTL par défaut
   défini par la directive de configuration PHP <literal>mysqlnd_qc.ttl</literal>.
   Si un TTL différent doit être utilisé, la fonction de rappel doit retourner
   une valeur numérique qui sera utilisée comme TTL.
  </para>
  <para>
   La fonction interne <literal>is_select</literal> fait partie de l'interface
   interne de gestion de stockage du cache. Aussi, un gestionnaire de stockage
   défini par l'utilisateur offre les mêmes possibilités.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>mysqlnd_qc_set_is_select</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/* fonction de rappel qui va décider si la requête doit être mise en cache ou non */
function is_select($query) {
  static $patterns = array(
   /* true - utilisation de la valeur par défaut depuis mysqlnd_qc.ttl */
   "@SELECT\s+.*\s+FROM\s+test@ismU" => true,
   /* 3 - utilisation d'un TTL = 3 secondes */
   "@SELECT\s+.*\s+FROM\s+news@ismU" => 3
  );
  /* vérifie si la requête correspond au masque */
  foreach ($patterns as $pattern => $ttl) {
    if (preg_match($pattern, $query)) {
      printf("is_select(%45s): mise en cache\n", $query);
      return $ttl;
    }
  }
  printf("is_select(%45s): pas de mise en cache\n", $query);
  return false;
}
mysqlnd_qc_set_is_select("is_select");

/* Connexion, création et peuplement de la table test */
$mysqli = new mysqli("host", "user", "password", "schema");
$mysqli->query("DROP TABLE IF EXISTS test");
$mysqli->query("CREATE TABLE test(id INT)");
$mysqli->query("INSERT INTO test(id) VALUES (1), (2), (3)");

/* Mise en cache */
$mysqli->query("SELECT id FROM test WHERE id = 1");
/* Récupération depuis le cache */
$mysqli->query("SELECT id FROM test WHERE id = 1");
/* Mise en cache */
$mysqli->query("SELECT * FROM test");
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
is_select(                    DROP TABLE IF EXISTS test): pas de mise en cache
is_select(                    CREATE TABLE test(id INT)): pas de mise en cache
is_select(    INSERT INTO test(id) VALUES (1), (2), (3)): pas de mise en cache
is_select(             SELECT id FROM test WHERE id = 1): mise en cache
is_select(             SELECT id FROM test WHERE id = 1): mise en cache
is_select(                           SELECT * FROM test): mise en cache
]]>
   </screen>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     <link linkend="mysqlnd-qc.configuration">Configuration de l'exécution</link>
    </member>
    <member>
     <link linkend="ini.mysqlnd-qc.ttl">mysqlnd_qc.ttl</link>
    </member>
    <member>
     <link linkend="ini.mysqlnd-qc.cache-by-default">mysqlnd_qc.cache_by_default</link>
    </member>
    <member>
     <function>mysqlnd_qc_set_user_handlers</function>
    </member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
