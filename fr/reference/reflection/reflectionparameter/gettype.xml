<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 347954 Maintainer: girgias Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="reflectionparameter.gettype" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionParameter::getType</refname>
  <refpurpose>Récupère le type du paramètre</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>ReflectionType</type><methodname>ReflectionParameter::getType</methodname>
   <void />
  </methodsynopsis>
  <para>
   Récupère le type associé d'un paramètre.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un objet <classname>ReflectionType</classname> si un type de
   paramètre est spécifié, &null; sinon.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Utilisation de <methodname>ReflectionParameter::getType</methodname> à partir de PHP 7.1.0</title>
    <simpara>
     À partir de PHP 7.1.0, <methodname>ReflectionType::__toString</methodname> est obsolète, et
     <methodname>ReflectionParameter::getType</methodname> <emphasis>peut</emphasis> retourner une
     instance de <classname>ReflectionNamedType</classname>. Pour récupérer le nom du type de paramètre,
     <methodname>ReflectionNamedType</methodname> est disponible dans ce cas.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
function someFunction(int $param, $param2) {}

$reflectionFunc = new ReflectionFunction('someFunction');
$reflectionParams = $reflectionFunc->getParameters();
$reflectionType1 = $reflectionParams[0]->getType();
$reflectionType2 = $reflectionParams[1]->getType();

assert($reflectionType1 instanceof ReflectionNamedType);
echo $reflectionType1->getName(), PHP_EOL;
var_dump($reflectionType2);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int
NULL
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Utilisation de <methodname>ReflectionParameter::getType</methodname> antérieur à PHP 7.1.0</title>
    <programlisting role="php">
<![CDATA[
<?php
function someFunction(int $param, $param2) {}

$reflectionFunc = new ReflectionFunction('someFunction');
$reflectionParams = $reflectionFunc->getParameters();
$reflectionType1 = $reflectionParams[0]->getType();
$reflectionType2 = $reflectionParams[1]->getType();

echo $reflectionType1, PHP_EOL;
var_dump($reflectionType2);
?>
]]>
    </programlisting>
    &example.outputs.70;
    <screen>
<![CDATA[
int
NULL
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionParameter::hasType</methodname></member>
    <member><methodname>ReflectionType::__toString</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
