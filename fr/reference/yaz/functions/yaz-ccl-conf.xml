<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: jsgoupil Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.yaz-ccl-conf" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>yaz_ccl_conf</refname>
  <refpurpose>Configure l'analyseur CCL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>yaz_ccl_conf</methodname>
   <methodparam><type>resource</type><parameter>id</parameter></methodparam>
   <methodparam><type>array</type><parameter>config</parameter></methodparam>
  </methodsynopsis>
  <para>
   Cette fonction configure l'analyseur CCL de requête pour un serveur avec
   les définitions de points d'accès (CCL qualifiers) et leur
   équivalent en RPN.
  </para>
  <para>
   Pour faire correspondre une requête CCL spécifique à RPN, utilisez la
   fonction <function>yaz_ccl_parse</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>id</parameter></term>
     <listitem>
      <para>
       La ressource de connexion retournée par
       <function>yaz_connect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>config</parameter></term>
     <listitem>
      <para>
       Un tableau de configuration. Chaque clé du tableau est le nom du champ
       CCL et la valeur correspondante contient une chaîne de caractères qui
       spécifie la correspondance au RPN.
      </para>
      <para>
       La correspondance est une séquence de paires d'attributs type et
       d'attributs valeur. L'attribut type et l'attribut valeur sont séparés par
       un signe égal (<literal>=</literal>). Chaque paire est séparée par un
       espace.
      </para>
      <para>
       Des informations supplémentaires peuvent être trouvées sur la page <link
       xlink:href="&url.yaz-ccl;">CCL</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Dans l'exemple ci-dessous, l'analyseur CCL est configuré pour supporter
   trois champs CCL : <literal>ti</literal>, <literal>au</literal> et
   <literal>isbn</literal>. Chaque champ correspond à leur équivalent BIB-1.
   On assume que la variable <literal>$id</literal> est l'ID de la connexion.
  </para>
  <example>
   <title>Configuration CCL</title>
   <programlisting role="php">
<![CDATA[
<?php
$fields = array(
  "ti" => "1=4",
  "au"   => "1=1",
  "isbn" => "1=7"
);
yaz_ccl_conf($id, $field);
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>yaz_ccl_parse</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
