<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350988 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<refentry xml:id="sdo-das-datafactory.addpropertytotype" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SDO_DAS_DataFactory::addPropertyToType</refname>
  <refpurpose>
   Ajoute une nouvelle propriété à une définition de type
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>SDO_DAS_DataFactory::addPropertyToType</methodname>
   <methodparam><type>string</type><parameter>parent_type_namespace_uri</parameter></methodparam>
   <methodparam><type>string</type><parameter>parent_type_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>property_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>type_namespace_uri</parameter></methodparam>
   <methodparam><type>string</type><parameter>type_name</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>

  &warn.experimental.func;

  <para>
   Ajoute une nouvelle propriété à une définition de type. Le type doit être
   déjà connu de SDO_DAS_DataFactory (c'est-à-dire, a été ajouté en utilisant
   addType()). La propriété devient une propriété du type. Voici comment le
   modèle de graphique pour la structure d'un SDO_DataObject est construit.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>parent_type_namespace_uri</parameter>
     </term>
     <listitem>
      <para>
       L'espace de nom URI du type parent.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>parent_type_name</parameter>
     </term>
     <listitem>
      <para>
       Le nom du type pour le type parent.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>property_name</parameter>
     </term>
     <listitem>
      <para>
       Le nom par lequel la propriété sera connue dans le type parent.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>type_namespace_uri</parameter>
     </term>
     <listitem>
      <para>
       L'espace de nom URI pour le type de la propriété.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>type_name</parameter>
     </term>
     <listitem>
      <para>
       Le nom du type pour le type de la propriété.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Ce tableau contient une ou plusieurs paires de clé=&gt;valeur pour
       fixer les valeurs des attributs pour la propriété. Les clés
       optionnelles sont :
      </para>
      <variablelist>
       <varlistentry>
        <term><parameter>many</parameter></term>
        <listitem>
         <para>
          Un drapeau pour dire si la propriété est de valeurs multiples. Une
          valeur &true; ajoute la propriété en tant que propriété à valeurs
          multiples (la valeur par défaut est &false;).
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>
         <parameter>readOnly</parameter>
        </term>
        <listitem>
         <para>
          Un drapeau pour dire si la propriété est en lecture seule. Une
          valeur &true; signifie que la valeur de la propriété ne peut être
          modifiée à travers des APIs de l'application SDO (la valeur par
          défaut est &false;).
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>
         <parameter>containment</parameter>
        </term>
        <listitem>
         <para>
          Un drapeau pour dire si la propriété est contenue par le parent. Une
          valeur &true; signifie que la propriété est contenue par le parent.
          Une valeur &false; résulte en une référence non contenue (la valeur
          par défaut est &true;). Ce drapeau est seulement interprété lors de
          l'ajout de propriétés qui sont des types d'objet de données,
          autrement il est ignoré.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>
         <parameter>default</parameter>
        </term>
        <listitem>
         <para>
          Une valeur par défaut de la propriété. L'omission de cette clé
          signifie que la propriété ne possède pas de valeur par défaut. Une
          propriété peut seulement avoir une valeur par défaut s'il s'agit
          d'un type de données de valeur simple (primitive).
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Aucune.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL sdo 0.5.2</entry>
       <entry>Les paramètres optionnels <varname>many</varname>,
        <varname>readOnly</varname> et <varname>containment</varname>
        sont obsolètes en faveur du tableau <varname>options</varname>.
        </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>


 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>SDO_DAS_DataFactory::addPropertyToType</function></title>
    <para>
     L'exemple suivant ajoute une propriété <literal>"addressline"</literal> au type Person. Le
     type person est identifié par son espace de nom, <literal>"PersonNS"</literal> et son nom de
     type <literal>"PersonType"</literal>. Le type de la propriété <literal>"addressline"</literal> est de valeurs
     multiples (primitive) avec un espace de nom <literal>"commonj.sdo"</literal> et le nom de
     type est <literal>"String"</literal>.
    </para>
    <programlisting role="php">
     <![CDATA[
<?php
  $df->addPropertyToType('PersonNS', 'PersonType',
    'addressline', 'commonj.sdo', 'String', array('many'=>true));
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
