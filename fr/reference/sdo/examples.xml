<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 322162 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="sdo.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <section xml:id="sdo.examples-basic">
  <title>Utilisation simple</title>
  <para>
   Les exemples ci-dessous assument qu'un SDO est créé avec le schéma et
   l'information de l'instance montrée ci-dessous, en utilisant le Service
   d'Accès de Données.
  </para>
  <para>
   L'instance du document ci-dessous décrit un compagnie simple,
   nommée <literal>"MegaCorp"</literal>, qui contient un seul département, nommé
   <literal>"Advanced Technologies"</literal>. Ce département contient trois employés.
   La compagnie <literal>"employeeOfTheMonth"</literal> référence le second employé,
   <literal>"Jane Doe"</literal>.
  </para>
  <para>
   <programlisting role="xml">
<![CDATA[
<?xml version="1.0" encoding="UTF-8" ?> 
<company xmlns="companyNS" name="MegaCorp" 
  employeeOfTheMonth="E0003">
  <departments name="Advanced Technologies" location="NY" number="123">
    <employees name="John Jones" SN="E0001"/>
    <employees name="Jane Doe" SN="E0003"/>
    <employees name="Al Smith" SN="E0004" manager="true"/>
  </departments>
</company>
]]>
   </programlisting>
  </para>
  <para>
   L'élément racine de ce schéma est une compagnie. La compagnie contient des départements,
   et chaque département contient des employés. Chaque élément a un nombre d'attributs pour y
   stocker des valeurs comme le nom, un numéro de série et ainsi de suite. Finalement, la compagnie
   a également un attribut IDREF qui identifie un des employés comme <literal>"employeeOfTheMonth"</literal>.
  </para>
  <para>
   <programlisting role="xml">
<![CDATA[
<xsd:schema
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:sdo="commonj.sdo"
  xmlns:sdoxml="commonj.sdo/xml"
  xmlns:company="companyNS"
  targetNamespace="companyNS">
  <xsd:element name="company" type="company:CompanyType"/>
  <xsd:complexType name="CompanyType">
    <xsd:sequence>
      <xsd:element name="departments" type="company:DepartmentType" 
        maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:string"/>
    <xsd:attribute name="employeeOfTheMonth" type="xsd:IDREF" 
      sdoxml:propertyType="company:EmployeeType"/> 
  </xsd:complexType>
  <xsd:complexType name="DepartmentType">
    <xsd:sequence>
      <xsd:element name="employees" type="company:EmployeeType"  
        maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:string"/>
    <xsd:attribute name="location" type="xsd:string"/>
    <xsd:attribute name="number" type="xsd:int"/>
  </xsd:complexType>
  <xsd:complexType name="EmployeeType">
    <xsd:attribute name="name" type="xsd:string"/>
    <xsd:attribute name="SN" type="xsd:ID"/>
    <xsd:attribute name="manager" type="xsd:boolean"/>
  </xsd:complexType>
</xsd:schema>
]]>
   </programlisting>
  </para>
  <para>
   Un Service d'Accès de Données XML voit ce schéma comme un SDO. Les attributs
   comme <literal>"name"</literal> deviennent des propriétés primaires, les séquences d'employés
   deviennent une relation de contenu à multiples valeurs, et ainsi de suite.
   Notez que les relations de contenu sont représentées comme un type complexe
   contenu dans un autre, où les références non-contenues sont représentées
   en terme d'ID et d'IDREF, avec un attribut <command>sdoxml:propertyType</command>
   spécial spécifiant le type de la référence non-contenue.
  </para>
 </section>

 <section xml:id="sdo.sample.getset">
  <title>Fixe et Récupère les Valeurs des Propriétés</title>
  <para>
   Les exemples suivants présument que <command>$compagnie</command>
   est la racine d'un arbre d'objets de données créés depuis le schéma et le document
   montré ci-dessus.
  </para>
  <para>
   <example>
    <title>Accès via les noms de Propriété</title>
    <para>
     Les propriétés des objets de données peuvent être accédées en utilisant
     la syntaxe d'accès de propriété d'objet. L'exemple fixe le nom de
     compagnie à <literal>"Acme"</literal>.
    </para>
    <programlisting role="php" xml:id="sdo.examples.propname">
<![CDATA[
<?php
$company->name = 'Acme';
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Accès via le nom de la propriété en tant que tableau indexé</title>
    <para>
     Nous pouvons également accéder aux propriétés en utilisant un tableau associatif.
     La forme la plus simple est d'utiliser le nom de la propriété dans le tableau indexé.
     Par exemple, ce qui suit définit le nom de la compagnie et récupère 
     l'<literal>"employeeOfTheMonth"</literal>.
    </para>
    <programlisting role="php" xml:id="sdo.examples.simplexpath">
<![CDATA[
<?php
$company['name'] = 'UltraCorp';
$eotm = $company['employeeOfTheMonth'];
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Itération d'objet de données</title>
    <para>
     Vous pouvons passer en revue les propriétés d'un objet de données 
     en utilisant l'instruction &foreach;.
    </para>
    <programlisting role="php" xml:id="sdo.examples.doiter">
<![CDATA[
<?php
  $eotm = $company->employeeOfTheMonth;
  foreach ($eotm as $name => $value) {
      echo "$name: $value\n";
  }
?>
]]>
    </programlisting>
    <para>
     Affichera :
    </para>
    <programlisting xml:id="sdo.examples.doiter-output">
<![CDATA[
name: Jane Doe
SN: E0003
]]>
    </programlisting>
    <para>
     La propriété <literal>"manager"</literal> n'est pas affichées, car elle
     n'a pas été spécifiée.
    </para>
   </example>
  </para>

  <para>
   <example>
    <title>Accès à une propriété à valeurs multiples par le nom</title>
    <para>
     Les propriétés à valeurs multiples d'un objet de données peuvent être
     accédées en utilisant la syntaxe des noms de propriétés de l'objet.
     Ce qui suit récupère la liste des départements.
    </para>
    <programlisting role="php" xml:id="sdo.examples.mvpname">
<![CDATA[
<?php
$departments = $company->departments;
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Accès aux éléments à valeurs multiples</title>
    <para>
     Nous pouvons accéder aux éléments individuels des propriétés à valeurs
     multiples en utilisant la syntaxe des tableaux. Ce qui suit permet d'accéder
     au premier département de la compagnie.
    </para>
    <programlisting role="php" xml:id="sdo.examples.mvaccess">
<![CDATA[
<?php
$ad_tech_dept = $company->departments[0];
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Itération d'une propriété à valeurs multiples</title>
    <para>
     Les propriétés à valeurs multiples peuvent être passées en
     revue en utilisant l'instruction &foreach;.
    </para>
    <programlisting role="php" xml:id="sdo.examples.mvpiter">
<![CDATA[
<?php
  foreach ($company->departments as $department) {
    // ...
  }
?>
]]>
    </programlisting>
    <para>
     Chaque itération assignera le prochain département de
     la liste dans la variable <command>$department</command>.
    </para>
   </example>
  </para>

  <para>
   <example>
    <title>Accès aux propriétés chaînées</title>
    <para>
     Nous pouvons chaîner les références des propriétés sur une seule ligne.
     Ce qui suit définit et récupère le nom du premier département.
    </para>
    <programlisting role="php" xml:id="sdo.examples.nestedprop">
<![CDATA[
<?php
  $company->departments[0]->name = 'Emerging Technologies';
  $dept_name = $company->departments[0]->name;
?>
]]>
    </programlisting>
    <para>En utilisant la syntaxe des tableaux associatifs, c'est l'équivalent de</para>
    <programlisting role="php" xml:id="sdo.examples.chainarray">
<![CDATA[
<?php
  $company['departments'][0]['name'] = 'Emerging Technologies';
  $dept_name = $company['departments'][0]['name'];
?>
]]>
    </programlisting>
    <para>
     Dans tous les cas, la variable dept_name est définie à <literal>"Emerging Technologies"</literal>.
    </para>
   </example>
  </para>

  <para>
   <example>
    <title>Navigation XPath</title>
    <para>
     Le tableau associatif indexé peut être une expression façon XPath.
     Les expressions valides sont définies par une sous définition d'XPath.
    </para>
    <para>
     Deux façons d'indexations de propriétés à valeurs multiples sont supportées.
     La première est la syntaxe de tableau XPath standard dont l'index commence
     à 0, la seconde est une extension SDO à XPath avec un index qui commence
     à 0. La syntaxe standard est :
    </para>
    <programlisting role="php" xml:id="sdo.examples.xpath1nav">
<![CDATA[
<?php
  $jane_doe = $company["departments[1]/employees[2]"];
?>
]]>
    </programlisting>
    <para>et la syntaxe de l'extension SDO XPath est :</para> 
    <programlisting role="php" xml:id="sdo.examples.xpath0nav">
<![CDATA[
<?php
  $jane_doe = $company["departments.0/employees.1"];
?>
]]>
    </programlisting>
    <para>
     Les deux exemples ci-dessus récupèrent le second employé du premier
     département.
    </para>
   </example>
  </para>

  <para>
   <example>
    <title>Requête XPath</title>
    <para>
     Nous pouvons utiliser XPath pour effectuer une requête et ainsi identifier
     des parties d'un objet de données basé sur des données instanciées.
     Ce qui suit récupère le manager depuis le département
     <literal>"Advanced Technologies"</literal>.
    </para>
    <programlisting role="php" xml:id="sdo.examples.xpathquery">
<![CDATA[
<?php
 $ad_tech_mgr = 
  $company["departments[name='Advanced Technologies']/employees[manager=true]"];
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Création d'objets de données fils</title>
    <para>
     Un objet de données peut être une fraction pour ces objets de données fils.
     Un objet de données fils est automatiquement une partie des données.
     Ce qui suit ajoute un nouvel employé au département
     <literal>"Advanced Technologies"</literal>.
    </para>
    <programlisting role="php" xml:id="sdo.examples.create">
<![CDATA[
<?php
  $ad_tech_dept = $company["departments[name='Advanced Technologies']"];
  $new_hire = $ad_tech_dept->createDataObject('employees');
  $new_hire->name = 'John Johnson';
  $new_hire->SN = 'E0005';
  $new_hire->manager = false;
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Effacement d'une propriété primitive</title>
    <para>
     Nous pouvons utiliser la fonction <function>isset</function> et
     <function>unset</function> pour tester et effacer des éléments
     de l'objet de données.
    </para>
    <para>
     Ce qui suit efface le nom du premier département.
    </para>
    <programlisting role="php" xml:id="sdo.examples.unsetprim">
<![CDATA[ 
<?php
  unset($company->departments[0]->name);
?>
]]>
   </programlisting>
  </example>
  </para>

  <para>
   <example>
    <title>Effacement d'un objet de données</title>
    <para>
     La fonction <function>unset</function> peut également être utilisée
     pour effacer un objet de données de l'arbre.
     L'exemple suivant montre comment John Jones à quitter la compagnie...
    </para>
    <programlisting role="php" xml:id="sdo.examples.unsetdo">
<![CDATA[ 
<?php
  unset($company->departments[0]->employees[0]);
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Effacement d'un objet de données référencé</title>
    <para>
     Ce qui suit efface <literal>"employeeOfTheMonth"</literal> de la compagnie.
     Si c'est une relation contenue, alors l'employé sera effacé de la compagnie.
     (probablement pas une bonne idée que d'effacer chaque mois votre meilleur employé !)
     mais si c'est une relation non-contenue, l'employé référencé restera
     dans le département de la compagnie, mais ne sera plus accessible
     via la propriété <literal>"employeeOfTheMonth"</literal>.
    </para>
    <programlisting role="php" xml:id="sdo.examples.unsetrefdo">
<![CDATA[ 
<?php
  if (isset($company->employeeOfTheMonth)) {
    unset($company->employeeOfTheMonth);
  }
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Accès via l'index de la propriété</title>
    <para>
     Les propriétés de l'objet de données peuvent être accédées via leurs index en utilisant
     la syntaxe de tableaux. L'index de la propriété est la position dont la propriété
     apparaît dans le modèle (dans ce cas, le schéma XML). Nous pouvons voir
     dans le schéma listé ci-dessus que l'attribut du nom de la compagnie
     est la seconde propriété de la compagnie (l'interface SDO ne fait pas de distinction
     entre les attributs XML et les éléments). Ce qui suit va définir le nom de la compagnie
     en <literal>"Acme"</literal>, avec le même résultat que lors de
     l'<link linkend="sdo.examples.propname">accès via le nom de la propriété</link>.
    </para>
    <programlisting role="php" xml:id="sdo.examples.propindex">
<![CDATA[
<?php
  $company[1] = 'Acme';
?>
]]>
    </programlisting>
    <para>
     L'utilisation directe de l'index dans ce cas est fragile. Normalement, la syntaxe
     reposant sur le nom de la propriété est préférable, mais l'index des propriétés
     peut être nécessaire dans des cas très spéciaux.
    </para>
   </example>
  </para>

 </section>

 <section xml:id="sdo.sample.sequence">
  <title>Travailler avec des Objets de Données en Séquence</title>
  <para>
   Des objets de données en Séquence sont des SDOs peuvent tracer l'ordre des
   propriétés à travers les propriétés des objets de données. Ils peuvent
   aussi contenir des éléments de texte non structuré (élément de texte qui
   n'appartient à aucune des propriétés SDO). Des objets de données en Séquence
   sont utiles pour travailler avec des documents XML qui permettent du texte
   non structuré (c'est-à-dire mixed=true) ou si les éléments peuvent être
   intercalée (<![CDATA[<A/><B/><A/>]]>). Ceci peut se produire par exemple
   lorsque le schéma définit maxOccurs>1 sur un élément qui est un
   complexType avec un choix de l'ordre.
  </para>
  <para>
   Les exemples ci-dessous assument qu'un SDO est créé avec le schéma et
   l'information de l'instance montrée ci-dessous, en utilisant le Service
   d'Accès de Données.
  </para>
  <para>
   Le schéma ci-dessous décrit le format d'une lettre. La lettre peut
   optionnellement contenir trois propriétés; date, prenom et nomFamille. Le
   schéma indique <command>mixed="true"</command> qui signifie que le texte
   non structuré peut être entremêlé entre les trois propriétés.
  </para>
  <para>
   <programlisting role="xml">
<![CDATA[
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:letter="http://letterSchema"
  targetNamespace="http://letterSchema">
  <xsd:element name="letters" type="letter:FormLetter"/>
  <xsd:complexType name="FormLetter" mixed="true">
    <xsd:sequence>
      <xsd:element name="date" minOccurs="0" type="xsd:string"/>
      <xsd:element name="firstName" minOccurs="0" type="xsd:string"/>
      <xsd:element name="lastName" minOccurs="0" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
</xsd:schema>
]]>
   </programlisting>
  </para>

  <para>
   L'exemple suivant est une instance du document lettre. Il contient les
   trois propriétés de la lettre; date, prenom et nomFamille, et a des
   éléments de texte non structuré pour l'adresse et le corps de la lettre.
  </para>
  <para>
   <programlisting role="xml">
<![CDATA[
<letter:letters xmlns:letter="http://letterSchema">
  <date>March 1, 2005</date>
  Mutual of Omaha
  Wild Kingdom, USA
  Dear
  <firstName>Casy</firstName>
  <lastName>Crocodile</lastName>
  Please buy more shark repellent.
  Your premium is past due.
</letter:letters>
]]>
   </programlisting>
  </para>
  <para>
   Lorsque chargé, l'objet de données de lettre aura la séquence et les
   indices montrés dans la table ci-dessous :
   <informaltable>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Index de Séquence</entry>
       <entry>Index:Nom</entry>
       <entry>Valeur</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>0</entry>
       <entry>0:date</entry>
       <entry>March 1, 2005</entry>
      </row>
      <row>
       <entry>1</entry>
       <entry>-</entry>
       <entry>Mutual of Omaha</entry>
      </row>
      <row>
       <entry>2</entry>
       <entry>-</entry>
       <entry>Wild Kingdom, USA</entry>
      </row>
      <row>
       <entry>3</entry>
       <entry>-</entry>
       <entry>Dear</entry>
      </row>
      <row>
       <entry>4</entry>
       <entry>1:firstName</entry>
       <entry>Casy</entry>
      </row>
      <row>
       <entry>5</entry>
       <entry>2:lastName</entry>
       <entry>Crocodile</entry>
      </row>
      <row>
       <entry>6</entry>
       <entry>-</entry>
       <entry>Please buy more shark repellent.</entry>
      </row>
      <row>
       <entry>7</entry>
       <entry>-</entry>
       <entry>Your premium is past due.</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>

  <para>
   Pour s'assurer que la séquence des indices soit maintenue, les objets de
   données en séquence devraient être manipulés à travers de l'interface
   SDO_Sequence. Ceci permet à l'instance de l'objet de données à être
   manipulée en tant qu'index de séquence plutôt qu'avec un index de propriété
   (montré dans la table ci-dessus).
   Les exemples suivants assument que l'instance de la lettre a été chargée
   dans l'objet de données référencé par la variable
   <command>$lettre</command>.
   <example>
    <title>Récupération de l'interface SDO_Sequence</title>
    <para>
     Nous obtenons la séquence de l'objet de données en utilisant la méthode
     <function>getSequence</function>. La suite récupère la séquence pour
     l'objet de données de la lettre.
    </para>
    <programlisting role="php" xml:id="sdo.examples.seqinterface">
<![CDATA[ 
<?php
  $letter_seq = $letter->getSequence();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Tous les exemples suivants assument que la variable
   <command>$lettre_seq</command> a été assigné de la séquence pour l'objet
   de données de la lettre.
  </para>

  <para>
   <example>
    <title>Récupère/Fixe des valeurs de séquence</title>
    <para>
     Nous pouvons récupérer et fixer des valeurs individuelles (en incluant
     le texte non structuré) en utilisant les index de séquence. L'exemple
     suivant fixe le prenom à <literal>"Snappy"</literal> et récupère la dernière valeur de
     séquence (le texte non structuré, <literal>"Votre prime est passée date."</literal>).
    </para>
    <programlisting role="php" xml:id="sdo.examples.getsetseq">
<![CDATA[ 
<?php
  $letter_seq[4] = 'Snappy';
  $text = $letter_seq[count($letter_seq) - 1];
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Itération de Séquence</title>
    <para>
     Nous pouvons itérer à travers des valeurs de séquence individuellement
     en utilisant &foreach;. L'exemple suivant passe au travers des valeurs
     individuelles dans l'ordre séquentiel.
    </para>
    <programlisting role="php" xml:id="sdo.examples.seqiter">
<![CDATA[ 
<?php
foreach ($letter->getSequence() as $value) {
    // ...
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Séquence versus Objet de Données</title>
    <para>
     Fixer des valeurs à travers l'interface d'objet de données peut amener à
     ce que les valeurs ne fassent pas partie de la séquence. Une valeur
     fixée avec un objet de données sera seulement accessible avec la
     séquence si la propriété était déjà une partie de la séquence. L'exemple
     suivant fixe le nomFamille à travers de l'objet de données et le
     récupère par la séquence. Ceci est correct puisque nomFamille existe
     déjà dans la séquence. S'il n'avait pas été fixé, alors nomFamille
     devrait être fixé à <literal>"Smith"</literal>, mais ne devrait pas faire partie de la
     séquence.
    </para>
    <programlisting role="php" xml:id="sdo.examples.seqvsdo">
<![CDATA[ 
<?php
  $letter[2] = 'Smith';
  $last_name = $letter_seq[5];
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Ajout à une séquence</title>
    <para>
     Nous pouvons ajouter de nouvelles valeurs à une séquence en utilisant la
     méthode
     <function>SDO_Sequence::insert</function>.
     Les exemples suivants assument que les propriétés <literal>"prenom"</literal> et
     <literal>"nomFamille"</literal> sont non fixées.
    </para>
    <programlisting role="php" xml:id="sdo.examples.seqadd">
<![CDATA[
<?php
  // Ajoute une valeur prenom à la séquence
  // valeur : 'Smith'
  // index séquence : NULL (ajout)
  // identifiant de propriété : 1 (index propriété prenom)
  $lettre_seq->insert('Smith', NULL, 1);

  // Ajoute une valeur nomFamille à la séquence
  // valeur : 'Jones'
  // index séquence : NULL (ajout)
  // identifiant de propriété : 'nomFamille' (nom propriété nomFamille)
  $lettre_seq->insert('Jones', NULL, 'nomFamille');

  // Ajoute du texte non structuré
  // valeur : 'Annule Inscription.'
  // index séquence : absent (ajout)
  // identifiant de propriété : absent (texte non structuré)
  $lettre_seq->insert('Annule Inscription.');

  // Ajoute du nouveau texte non structuré. Les séquence valeurs suivantes
  // d'ordre sont décalées vers le haut
  // valeur : 'À l'attention de :'
  // index séquence : 1 (insert comme second élément)
  // identifiant de propriété : absent (texte non structuré)
  $lettre_seq->insert('À l'attention de :', 1);
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Suppression d'une séquence</title>
    <para>
     Nous pouvons utiliser les fonctions <function>isset</function> et
     <function>unset</function> pour tester et supprimer des items de la
     séquence (Note : <function>unset</function> laisse actuellement les
     valeurs dans l'objet de données, mais ce comportement est devrait
     changer et supprimer les données de l'objet de données).
     Une séquence se comporte comme une liste contiguë; donc, la suppression
     d'un item au milieu de la liste décalera les entrées d'un indice plus
     haut vers le bas. L'exemple suivant teste pour vérifier si la première
     séquence d'élément est fixé et la détruit si elle l'est.
    </para>
    <programlisting role="php" xml:id="sdo.examples.seqremove">
<![CDATA[ 
<?php
  if (isset($letter_seq[0])) {
    unset($letter_seq[0]);
  }
?>
]]>
    </programlisting>
   </example>
  </para>

 </section>


 <section xml:id="sdo.sample.reflection">
  <title>Réflexion sur des Objets de Service de Données</title>
  <para>
   Les SDOs ont une connaissance de la structure qu'ils ont créée pour la
   représentation (le modèle). Par exemple, une Compagnie SDO créée utilisant
   <link linkend="sdo.examples">le schéma de Compagnie XML</link> ci-dessus
   devrait seulement être permis de contenir des objets de données
   DepartementType qui à leur tour devrait contenir seulement des objets de
   données EmployeType.
  </para>
  <para>
   Parfois, il est utile d'être capable d'accéder ces informations de modèle à
   l'exécution. Par exemple, cela pourrait être utilisé pour générer
   automatiquement une interface d'usager pour remplir un objet de données.
   Les informations de modèle sont accédées en utilisant la réflexion.
  </para>

  <para>
   <example>
    <title>Réflexion sur les Objets de Données</title>
    <para>
     L'exemple suivant montre comment nous pouvons utiliser la réflexion sur
     un objet de données vide Employe.
    </para>
    <programlisting role="php" xml:id="sdo.examples.reflection">
<![CDATA[ 
<?php
  // Crée l'objet de données employe (par exemple, à partir de Service d'Accès
  // de données XML)
  $employee = ...;
  $reflection = new SDO_Model_ReflectionDataObject($employee);
  print($reflection);
?>
]]>
    </programlisting>
    &example.outputs;

    <screen>
<![CDATA[
object(SDO_Model_ReflectionDataObject)#4 { - ROOT OBJECT - Type { 
companyNS:EmployeeType[3] { commonj.sdo:String $name; 
commonj.sdo:String $SN; commonj.sdo:Boolean $manager; } }
]]>
   </screen>
   <para>
    L'utilisation de print sur SDO_Model_ReflectionDataObject écrit à
    l'écran les données du modèle de l'objet. Nous pouvons voir à la sortie
    que le type <literal>compagnieNS:EmployeType</literal> a trois propriétés
    et nous pouvons voir le noms de ces propriétés avec leur type. Notez, 
    les types primitifs sont listés en tant que types SDO (par exemple, 
    <literal>commonj.sdo</literal>
    <literal>namespace</literal>, <literal>String type</literal>). 
    Cela vaut la peine de noter que c'est le modèle
    SDO et lorsqu'ils sont utilisés dans l'application, ils peuvent être
    traités comme des types équivalent PHP (par exemple, &string; et
    &boolean;).
    </para>
   </example>
  </para>

  <para>
   <example>
    <title>Accès d'informations de type</title>
    <para>
     Nous pouvons effectuer une requête de type d'informations sur un objet
     de données en utilisant la réflexion. L'exemple suivant vérifie que le
     type corresponde à l'objet de données plutôt qu'à une primitive et alors
     itère à travers des propriétés de type, en affichant le nom de chaque
     propriété ($type et $property sont respectivement des objets
     SDO_Model_Type et SDO_Model_Property).
    </para>
    <programlisting role="php" xml:id="sdo.examples.reflection.type">
<![CDATA[
<?php
    // Crée l'objet de données employe (par exemple, à partir de Service d'Accès
    // de données XML)
    $employee = ...;
    $reflection = new SDO_Model_ReflectionDataObject($employee);
    $type = $reflection->getType();
    if (! $type->isDataType()) {
        foreach ($type->getProperties() as $property) {
            print $property->getName() . "\n";
        }
    }
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
name
SN
manager
]]>
    </screen>
   </example>
  </para>

 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

