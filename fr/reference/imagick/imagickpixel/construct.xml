<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336315 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="imagickpixel.construct">
 <refnamediv>
  <refname>ImagickPixel::__construct</refname>
  <refpurpose>Le constructeur <classname>ImagickPixel</classname></refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <methodname>ImagickPixel::__construct</methodname>
   <methodparam choice="opt"><type>string</type><parameter>color</parameter></methodparam>
  </methodsynopsis>
  &warn.undocumented.func;
  <para>
   Construit un objet <classname>ImagickPixel</classname>. 
   Si une couleur est spécifiée, l'objet
   est construit, puis initialisé avec cette couleur avant d'être retourné.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>color</parameter></term>
     <listitem>
      <para>
       Une chaîne représentant la couleur optionnelle à utiliser comme valeur
       initiale de l'objet.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un objet <classname>ImagickPixel</classname> en cas de succès ou lance
   une exception <classname>ImagickPixelException</classname> si une erreur survient.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>ImagickPixel::construct</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function construct() {

    $columns = 4;
    
    $exampleColors = array(
        "rgba(100%, 0%, 0%, 0.5)",
        "hsb(33.3333%, 100%,  75%)", // vert moyen
        "hsl(120, 255,   191.25)", //vert moyen
        "graya(50%, 0.5)", //  gris moyen, semi-transparent
        "LightCoral", "none", //"cmyk(0.9, 0.48, 0.83, 0.50)",
        "#f00", //  #rgb
        "#ff0000", //  #rrggbb
        "#ff0000ff", //  #rrggbbaa
        "#ffff00000000", //  #rrrrggggbbbb
        "#ffff00000000ffff", //  #rrrrggggbbbbaaaa
        "rgb(255, 0, 0)", //  un entier dans l'intervalle 0—255 pour chaque composant
        "rgb(100.0%, 0.0%, 0.0%)", //  un ombre à virgule flottante, dans l'intervalle 0—100% pour chaque composant
        "rgb(255, 0, 0)", //  intervalle 0 - 255
        "rgba(255, 0, 0, 1.0)", //  pareil, mais avec une valeur alpha explicite
        "rgb(100%, 0%, 0%)", //  intervalle 0.0% - 100.0%
        "rgba(100%, 0%, 0%, 1.0)", //  pareil, mais avec une valeur alpha explicite
    );

    $draw = new \ImagickDraw();
    $count = 0;
    $black = new \ImagickPixel('rgb(0, 0, 0)');

    foreach ($exampleColors as $exampleColor) {
        $color = new \ImagickPixel($exampleColor);

        $draw->setstrokewidth(1.0);
        $draw->setStrokeColor($black);
        $draw->setFillColor($color);
        $offsetX = ($count % $columns) * 50 + 5;
        $offsetY = intval($count / $columns) * 50 + 5;
        $draw->rectangle(0 + $offsetX, 0 + $offsetY, 40 + $offsetX, 40 + $offsetY);
        $count++;
    }

    $image = new \Imagick();
    $image->newImage(350, 350, "blue");
    $image->setImageFormat("png");
    $image->drawImage($draw);
    header("Content-Type: image/png");
    echo $image->getImageBlob();
}

?>
]]>
     </programlisting>
   </example>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
