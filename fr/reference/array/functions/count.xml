<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 346403 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->
<!-- CREDITS: DavidA. -->

<refentry xml:id="function.count" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>count</refname>
  <refpurpose>Compte tous les éléments d'un tableau ou quelque chose d'un objet</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>count</methodname>
   <methodparam><type>mixed</type><parameter>array_or_countable</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>COUNT_NORMAL</initializer></methodparam>
  </methodsynopsis>
  <para>
   Compte tous les éléments d'un tableau ou quelque chose d'un objet.
  </para>
  <para>
   Pour les objets, <function>count</function> retourne le nombre de 
   propriétés non-statiques, sans tenir compte de la visibilité. Si
   <link linkend="ref.spl">SPL</link> est disponible, vous pouvez
   utiliser la fonction <function>count</function> en implémentant
   l'interface <classname>Countable</classname>. Cette interface a exactement
   une méthode, <methodname>Countable::count</methodname>, qui retourne la
   valeur retournée par la fonction <function>count</function>.
  </para>
  <para>
   Reportez-vous à la section sur les  
   <link linkend="language.types.array">Tableaux</link> du manuel, pour plus de
   détails sur le fonctionnement des tableaux en PHP.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array_or_countable</parameter></term>
     <listitem>
      <para>
       Un tableau ou un objet <classname>Countable</classname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Si le paramètre optionnel <parameter>mode</parameter> vaut
       <constant>COUNT_RECURSIVE</constant> (ou 1), <function>count</function>
       va compter récursivement les tableaux. C'est particulièrement pratique
       pour compter le nombre d'éléments d'un tableau.
      </para>
      <caution>
       <para>
        La fonction <function>count</function> peut détecter les récursions
        afin d'éviter les boucles infinies, mais émettra une alerte de type
        <constant>E_WARNING</constant> à chaque fois qu'une boucle infinie surviendra
        (dans le cas où un tableau contient lui-même plus d'une boucle infinie)
        et retournera un compteur plus grand que l'attendu.
       </para>
      </caution>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne le nombre d'éléments dans <parameter>array_or_countable</parameter>.
   Quand le paramètre n'est ni un &array;, ni un &object; qui implémente 
   l'interface <classname>Countable</classname>, <literal>1</literal> sera retourné. 
   Il y a néanmoins une exception
   : si le paramètre <parameter>array_or_countable</parameter> vaut &null;,
   <literal>0</literal> sera retourné.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>count</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$a[0] = 1;
$a[1] = 3;
$a[2] = 5;
var_dump(count($a));

$b[0]  = 7;
$b[5]  = 9;
$b[10] = 11;
var_dump(count($b));

var_dump(count(null));

var_dump(count(false));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
int(3)
int(3)

Warning: count(): Parameter must be an array or an object that implements Countable in … on line 12 // as of PHP 7.2
int(0)

Warning: count(): Parameter must be an array or an object that implements Countable in … on line 14 // as of PHP 7.2
int(1)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple de récursivité avec <function>count</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$food = array('fruits' => array('orange', 'banana', 'apple'),
              'veggie' => array('carrot', 'collard', 'pea'));

// count récursif
echo count($food, COUNT_RECURSIVE); // affiche 8

// count normal
echo count($food); // affiche 2

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.2.0</entry>
      <entry>
       <function>count</function> va maintenant générer un avertissement sur 
       des types dénombrables non valides sont passés au paramètre 
       <parameter>array_or_countable</parameter>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>is_array</function></member>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><function>strlen</function></member>
    <member><function>is_countable</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->