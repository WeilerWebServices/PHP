<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350828 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.imagefilter" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>imagefilter</refname>
  <refpurpose>Applique un filtre à une image</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>imagefilter</methodname>
   <methodparam><type>resource</type><parameter>image</parameter></methodparam>
   <methodparam><type>int</type><parameter>filtertype</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>arg1</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>arg2</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>arg3</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>arg4</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>imagefilter</function> applique le filtre <parameter>filtertype</parameter>
   à l'image en utilisant les paramètres <parameter>args1</parameter>,
   <parameter>args2</parameter> et <parameter>args3</parameter> lorsque 
   cela est nécessaire.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &gd.image.description;
    <varlistentry>
     <term><parameter>filtertype</parameter></term>
     <listitem>
      <para>
       <parameter>filtertype</parameter> peut être l'un des suivants :
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_NEGATE</constant> : Inverse toutes les couleurs
          de l'image.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_GRAYSCALE</constant> : Convertit l'image en
          échelle de gris en changeant les composants rouge, vert et bleu en
          leur somme pondérée à l'aide des mêmes coefficients que le calcul de
          la luminance REC.601 luma (Y'). Les composants alpha sont conservés.
          Pour les images de palette, le résultat peut différer en raison des
          limitations de palette.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_BRIGHTNESS</constant> : Modifie la luminosité de
          l'image. Utilisez <parameter>args1</parameter> pour définir le niveau
          de luminosité. L'intervalle de la luminosité est de -255 à 255.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_CONTRAST</constant> : Modifie le contraste de 
          l'image. Utilisez <parameter>args1</parameter> pour définir le niveau 
          de contraste.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_COLORIZE</constant> : Comme 
          <constant>IMG_FILTER_GRAYSCALE</constant> sauf que vous pouvez
          spécifier la couleur. <parameter>args1</parameter>,
          <parameter>args2</parameter> et <parameter>args3</parameter> sous la
          forme <parameter>red</parameter>, <parameter>green</parameter>,
          <parameter>blue</parameter> et <parameter>arg4</parameter> pour le
          canal <parameter>alpha</parameter>.
          L'intervalle pour chaque couleur est de 0 à 255.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_EDGEDETECT</constant> : Utilise la détection des
          bords pour les mettre en évidence dans l'image.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_EMBOSS</constant> : Grave l'image en relief.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_GAUSSIAN_BLUR</constant> : Trouble l'image en
          utilisant la méthode gaussienne.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SELECTIVE_BLUR</constant> : Trouble l'image.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_MEAN_REMOVAL</constant> : Son utilisation signifie
          le déplacement pour réaliser un effet "peu précis".
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SMOOTH</constant> : Rend l'image lissée
          (<literal>smooth</literal>). Utilisez <parameter>args1</parameter>
          pour définir le degré de lissoir.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_PIXELATE</constant> : Applique un effet de
          pixelisation à l'image; utilise <parameter>arg1</parameter> pour
          indiquer la taille de bloc, et <parameter>arg2</parameter> 
          pour indiquer le mode de pixelisation.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SCATTER</constant>: Applique un effet de
          dispersion à l'image, utilisez <parameter>arg1</parameter> et 
          <parameter>arg2</parameter> pour définir la force de l'effet et
          additionellement <parameter>arg3</parameter> pour appliquer l'effet
          uniquement sur les pixels de couleur sélectionné.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg1</parameter></term>
     <listitem>
      <para>
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_BRIGHTNESS</constant> : degré de luminosité.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_CONTRAST</constant> : degré du contraste.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_COLORIZE</constant> : &gd.value.red;
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SMOOTH</constant> : degré du lissé.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_PIXELATE</constant> : taille de bloc en pixels.
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SCATTER</constant> : Niveau de soustraction d'effet.
          Ceci ne doit pas être plus grand ou égal que le niveau d'addition
          défini avec <parameter>arg2</parameter>.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg2</parameter></term>
     <listitem>
      <para>
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_COLORIZE</constant> : &gd.value.green;
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_PIXELATE</constant> : Utiliser ou non l'effet de
          pixellisation avancé (valeur par défaut &false;).
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SCATTER</constant> : Niveau d'addition d'effet.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg3</parameter></term>
     <listitem>
      <para>
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_COLORIZE</constant> : &gd.value.blue;
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_SCATTER</constant> : Valeurs de couleur indexées
          sur un tableau facultatif auxquelles appliquer l'effet.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg4</parameter></term>
     <listitem>
      <para>
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>IMG_FILTER_COLORIZE</constant> : canal Alpha. Une valeur
          entre 0 et 127. 0 signifie totalement opaque, tandis que 127 signifie
          totalement transparent.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.4.0</entry>
       <entry>
        Support de dispersion (<constant>IMG_FILTER_SCATTER</constant>) ajouté.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>imagefilter</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$im = imagecreatefrompng('dave.png');

if($im && imagefilter($im, IMG_FILTER_GRAYSCALE))
{
    echo 'Image convertie en grayscale.';

    imagepng($im, 'dave.png');
}
else
{
    echo 'La conversion en grayscale a échoué.';
}

imagedestroy($im);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <function>imagefilter</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$im = imagecreatefrompng('sean.png');

if($im && imagefilter($im, IMG_FILTER_BRIGHTNESS, 20))
{
    echo 'La luminosité de l\'image a été modifiée.';
    imagepng($im, 'sean.png');
    imagedestroy($im);
}
else
{
    echo 'Echec lors de la modification de la luminosité.';
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple avec <function>imagefilter</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$im = imagecreatefrompng('philip.png');

/* R, G, B, donc 0, 255, 0 correspond au vert */
if($im && imagefilter($im, IMG_FILTER_COLORIZE, 0, 255, 0))
{
    echo 'L\'image a été ombragée en vert avec succès.';
    imagepng($im, 'philip.png');
    imagedestroy($im);
}
else
{
    echo 'Echec lors de la modification de l\'ombrage.';
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple d'image en négatif avec <function>imagefilter</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Définition de notre fonction "négatif" afin qu'elle soit portable
// également sur les versions de PHP qui n'ont pas la fonction imagefilter()
function negate($im)
{
    if(function_exists('imagefilter'))
    {
        return imagefilter($im, IMG_FILTER_NEGATE);
    }

    for($x = 0; $x < imagesx($im); ++$x)
    {
        for($y = 0; $y < imagesy($im); ++$y)
        {
            $index = imagecolorat($im, $x, $y);
            $rgb = imagecolorsforindex($index);
            $color = imagecolorallocate($im, 255 - $rgb['red'], 255 - $rgb['green'], 255 - $rgb['blue']);

            imagesetpixel($im, $x, $y, $color);
        }
    }

    return(true);
}

$im = imagecreatefromjpeg('kalle.jpg');

if($im && negate($im))
{
    echo 'Image convertie avec succès en couleur négative.';

    imagejpeg($im, 'kalle.jpg', 100);
    imagedestroy($im);
}
else
{
    echo 'Echec lors de la conversion en couleur négative.';
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple de pixelisation avec <function>imagefilter</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Chargement du logo PHP, nous avons besoin de deux instances.
$logo1 = imagecreatefrompng('./php.png');
$logo2 = imagecreatefrompng('./php.png');

// Crée une image sur laquelle nous voulons montrer les différences
$output = imagecreatetruecolor(imagesx($logo1) * 2, imagesy($logo1));

// Applique la pixelisation à chaque instance, avec un bloc de 3
imagefilter($logo1, IMG_FILTER_PIXELATE, 3);
imagefilter($logo2, IMG_FILTER_PIXELATE, 3, true);

// Fusion des différences dans l'image finale
imagecopy($output, $logo1, 0, 0, 0, 0, imagesx($logo1) - 1, imagesy($logo1) - 1);
imagecopy($output, $logo2, imagesx($logo2), 0, 0, 0, imagesx($logo2) - 1, imagesy($logo2) - 1);
imagedestroy($logo1);
imagedestroy($logo2);

// Affichage des différences
header('Content-Type: image/png');
imagepng($output);
imagedestroy($output);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <mediaobject>
     <alt>Affichage de l'exemple : imagefilter() pixélixé</alt>
     <imageobject>
      <imagedata fileref="en/reference/image/figures/imagefilterpixelate.png"/>
     </imageobject>
    </mediaobject>
   </example>
  </para>
  <para>
   <example>
    <title>Exemple de dispersion <function>imagefilter</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Charger l'image
$logo = imagecreatefrompng('./php.png');

// Applique une dispersion très douce à l'image
imagefilter($logo, IMG_FILTER_SCATTER, 3, 5);

// Afficher l'image avec l'effet de dispersion
header('Content-Type: image/png');
imagepng($logo);
imagedestroy($logo);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <mediaobject>
     <alt>Affichage de l'exemple : dispersion de imagefilter()</alt>
     <imageobject>
      <imagedata fileref="en/reference/image/figures/scatter.png"/>
     </imageobject>
    </mediaobject>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    Le résultat de <constant>IMG_FILTER_SCATTER</constant> est toujours aléatoire.
   </simpara>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>imageconvolution</function></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
