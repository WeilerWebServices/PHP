<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341611 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<chapter xml:id="image.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <section xml:id="image.examples-png">
  <title>Création d'une image PNG avec PHP</title>
  <para>
   <example>
    <title>Création d'une image PNG avec PHP</title>
    <programlisting role="php">
<![CDATA[
<?php

header("Content-type: image/png");
$string = $_GET['text'];
$im     = imagecreatefrompng("images/button1.png");
$orange = imagecolorallocate($im, 220, 210, 60);
$px     = (imagesx($im) - 7.5 * strlen($string)) / 2;
imagestring($im, 3, $px, 9, $string, $orange);
imagepng($im);
imagedestroy($im);

?>
]]>
    </programlisting>
   </example>
   Cet exemple doit être appelé depuis une page HTML avec une balise
   image telle que : <literal>&lt;img src=&quot;button.php?text&quot;&gt;</literal>.
   Le script ci-dessus, <filename>button.php</filename>, prend la chaîne
   <literal>&quot;texte&quot;</literal> et l'inscrit
   sur le fond d'image appelé <literal>&quot;images/button1.png&quot;</literal>,
   puis l'affiche. C'est une méthode très pratique pour éviter de redessiner un
   nouveau bouton, dès que vous changez son texte. De cette façon, ils sont
   générés dynamiquement.
  </para>
 </section>
 <section xml:id="image.examples-watermark">
  <title>Ajout d'un tatouage numérique sur des images en utilisant un canal Alpha</title>
  <para>
   <example>
    <title>Ajout d'un tatouage numérique sur des images en utilisant un canal Alpha</title>
    <programlisting role="php">
<![CDATA[
<?php
// Charge le cachet et la photo afin d'y appliquer le tatouage numérique
$stamp = imagecreatefrompng('stamp.png');
$im = imagecreatefromjpeg('photo.jpeg');

// Définit les marges pour le cachet et récupère la hauteur et la largeur de celui-ci
$marge_right = 10;
$marge_bottom = 10;
$sx = imagesx($stamp);
$sy = imagesy($stamp);

// Copie le cachet sur la photo en utilisant les marges et la largeur de la
// photo originale  afin de calculer la position du cachet 
imagecopy($im, $stamp, imagesx($im) - $sx - $marge_right, imagesy($im) - $sy - $marge_bottom, 0, 0, imagesx($stamp), imagesy($stamp));

// Affichage et libération de la mémoire
header('Content-type: image/png');
imagepng($im);
imagedestroy($im);
?>
]]>
    </programlisting>
    <mediaobject>
     <alt>Ajout d'un tatouage numérique à l'image en utilisant un canal alpha</alt>
     <imageobject>
      <imagedata fileref="en/reference/image/figures/watermarks.png" />
     </imageobject>
    </mediaobject>
   </example>
   Cet exemple montre un moyen simple d'appliquer un tatouage numérique
   et un cachet à vos photos et vos images sous licence.
   Notez la présence d'un canal Alpha dans le cachet ainsi que du texte
   anti-aliasé. Ces 2 éléments seront préservés lors de la copie.
  </para>
 </section>
 <section xml:id="image.examples.merged-watermark">
  <title>Exemple avec <function>imagecopymerge</function> pour créer un
  tatouage numérique translucide</title>
  <para>
   <example>
    <title>Exemple avec <function>imagecopymerge</function> pour créer un
    tatouage numérique translucide</title>
    <programlisting role="php">
<![CDATA[
<?php
// Charge le cachet et la photo afin d'y appliquer le tatouage numérique
$im = imagecreatefromjpeg('photo.jpeg');

// Tout d'abord, nous créons un cachet manuellement grâce à GD
$stamp = imagecreatetruecolor(100, 70);
imagefilledrectangle($stamp, 0, 0, 99, 69, 0x0000FF);
imagefilledrectangle($stamp, 9, 9, 90, 60, 0xFFFFFF);
imagestring($stamp, 5, 20, 20, 'libGD', 0x0000FF);
imagestring($stamp, 3, 20, 40, '(c) 2007-9', 0x0000FF);

// Définit les marges du cachet et récupère la largeur et la hauteur du cachet
$marge_right = 10;
$marge_bottom = 10;
$sx = imagesx($stamp);
$sy = imagesy($stamp);

// Fusionne le cachet dans notre photo avec une opacité de 50%
imagecopymerge($im, $stamp, imagesx($im) - $sx - $marge_right, imagesy($im) - $sy - $marge_bottom, 0, 0, imagesx($stamp), imagesy($stamp), 50);

// Sauvegarde l'image dans un fichier et libère la mémoire
imagepng($im, 'photo_stamp.png');
imagedestroy($im);

?>
]]>
    </programlisting>
    <mediaobject>
     <alt>Utilisation d'imagecopymerge() pour créer un tatouage translucide</alt>
     <imageobject>
      <imagedata fileref="en/reference/image/figures/watermark-merged.png" />
     </imageobject>
    </mediaobject>
   </example>
   Cet exemple utilise la fonction <function>imagecopymerge</function>
   pour fusionner le cachet avec notre image original. En utilisant cette
   fonction, nous pouvons définir l'opacité de notre cachet - dans notre
   exemple, nous l'avons défini à 50%. En pratique, il est plus judicieux
   de rendre notre protection semi-transparente, la rendant plus difficile à
   enlever mais permettant également aux visionneuses d'images de la lire sans
   problème.
  </para>
 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

