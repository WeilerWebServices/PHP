<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343888 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="sdo-das-relational.applychanges" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SDO_DAS_Relational::applyChanges</refname>
  <refpurpose>
   Applique les changements effectués au graphique de données à la base de
   données
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type>
   <methodname>SDO_DAS_Relational::applyChanges</methodname>
   <methodparam>
    <type>PDO</type>
    <parameter>database_handle</parameter>
   </methodparam>
   <methodparam>
    <type>SDODataObject</type>
    <parameter>root_data_object</parameter>
   </methodparam>
  </methodsynopsis>

  &warn.experimental.func;

  <para>
   En lui donnant une ressource de base de données PDO et l'objet racine spécial
   d'un graphique de données, la fonction examine les changements dans le
   graphique de données et applique les changements à la base de données
   Les changements qui peut appliquer sont les créations d'objets de données,
   les suppressions des objets de données et les modifications des propriétés
   des objets de données.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>PDO_database_handle</term>
     <listitem>
      <para>
       Construit en utilisant l'extension PDO.
       Une ligne typique pour construire une ressource de base de données PDO
       devrait ressembler à ceci :
       <programlisting role="php" xml:id="sdodasrel.ac.examples.pdo">
<![CDATA[
$dbh = new PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);
]]>
       </programlisting>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>root_data_object</term>
     <listitem>
      <para>
       L'objet racine spécial qui est le sommet de chaque graphique de données
       SDO.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Aucune.
   Notez cependant que le graphique de données qui a été passé est toujours
   intact et utilisable. De plus, si les objets de données ont été créés et
   écrits à une table avec des clés primaires générées automatiquement, alors
   ces clés primaires seront maintenant enregistrées dans les objets de
   données. Si les changements ont été correctement écrits, alors le
   changement associé avec le graphique de données sera supprimé, alors il est
   possible maintenant d'effectuer plus de changement au graphique de données
   et appliquer les changements alternativement. De cette façon, il est
   possible de travailler avec le même graphique de données et appliquer les
   changement à plusieurs reprises.
  </para>
 </refsect1>



 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <function>SDO_DAS_Relational::applyChanges</function>
   peut jeter une exception <classname>SDO_DAS_Relational_Exception</classname>
   si la méthode n'est pas capable d'appliquer tous les changements correctement.
  </para>
  <para>
   Le DAS Relationnel démarre une transaction de base de données avant de
   commencer à appliquer les changements et enverra les transactions seulement
   si celles-ci sont réussies. Le DAS Relationnel génère des requêtes de mises
   à jour et de suppression qualifiées qui contiennent une clause WHERE qui
   spécifie que la ligne à être modifiée ou supprimée doit contenir les mêmes
   valeurs qu'elles avaient lorsque les données ont été préalablement
   récupérées.
   Voici comment la simultanéité optimiste est implantée. Si une des requêtes
   de mises à jour ou de suppression qualifiées échoue à mettre à jour ou à
   supprimer leur ligne, il se peut que cela soit à cause des données altérées
   dans la base de données en attendant. Quoi qu'il arrive, si une mise à jour
   échoue pour n'importe quelle raison, la transaction est retournée en
   arrière et une exception est jetée. Cette exception contiendra la requête
   SQL générée qui a échouée.
  </para>
  
  <para>
   Le DAS Relationnel attrape aussi toutes les exceptions de PDO et obtient
   des informations de diagnostique de PDO qui incluent dans un
   <classname>SDO_DAS_Relational_Exception</classname> qui est lui-même ensuite jeté.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Veuillez voir la section d'<link linkend="sdodasrel.examples">exemples</link>
   dans les informations générales à propos de DAS Relationnel pour plusieurs
   exemples sur l'appel de cette méthode.
   Veuillez voir aussi la section sur le 
   <link linkend="sdodasrel.tracing">suivi</link>
   pour voir comment vous pouvez voir quelles requêtes SQL sont générées par
   le DAS Relationnel.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
