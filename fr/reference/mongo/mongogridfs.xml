<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 329065 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.mongogridfs" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>&class.theclass; <classname>MongoGridFS</classname></title>
 <titleabbrev>MongoGridFS</titleabbrev>
 
 <partintro>
  
  <!-- {{{ Mongogridfs intro -->
  <section xml:id="mongogridfs.intro">
   &reftitle.intro;
   <para>
    Utilitaires de stockage et lecture de fichiers dans la base de données
   </para>
   <para>
    GridFS est une spécification de stockage que tous les pilotes implémentent. 
    Simplement, il définit deux collections: <literal>files</literal>, pour les
    métadonnées du fichier, et <literal>chunks</literal> pour le contenu du fichier.
    Si le fichier est volumineux, il sera automatiquement scindé en sous-parties et
    chacune sera sauvée comme document dans la collection 'chunks' représentant le contenu
    du fichier.
   </para>

   <para>
    Chaque document dans la collection 'files' est caractérisé par un nom, une date
    d'envoi et un hash md5. Il contient aussi un champ unique <literal>_id</literal>,
    qui peut être utilisé pour requêter la collection 'chunks' et obtenir le contenu
    du fichier. Chaque document dans la collection 'chunks' contient des données
    binaires, un champ <literal>files_id</literal> qui correspond au <literal>_id</literal>
    du fichier, et la position de ce document dans le fichier.
   </para>

   <para>
    Par exemple, la collection 'files' ressemble à:
    <programlisting role="php">
<![CDATA[
<?php
array("_id" => 123456789, "filename" => "foo.txt", "chunkSize" => 3, "length" => 12);
?>
]]>
    </programlisting>
    et la collection 'chunks' à:
    <programlisting role="php">
<![CDATA[
<?php
array("files_id" => 123456789, "n" => 0, "data" => new MongoBinData("abc"));
array("files_id" => 123456789, "n" => 1, "data" => new MongoBinData("def"));
array("files_id" => 123456789, "n" => 2, "data" => new MongoBinData("ghi"));
array("files_id" => 123456789, "n" => 3, "data" => new MongoBinData("jkl"));
?>
]]>
    </programlisting>
    Bien sur la taille par défaut des segments est de plusieurs milliers d'octets, non représentatif
    pour notre exemple.
   </para>
  </section>

  <section>
   <title>Compatibilité entre les différentes langages </title>
   <para>
    Vous devriez être capable d'utiliser n'importe quel fichier créé par
    MongoGridFS avec n'importe quel driver et vis versa. Cependant, quelques drivers
    s'attendent à ce que toutes les méta-données associées avec un fichier soivent
    dans un champ "metadata". Si vous souhaitez utiliser un autre langage, ce peut être
    une bonne idée de placer les informations souhaitées dans un champ "metadata". Par
    exemple, au lieu de :
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$grid->storeFile("somefile.txt", array("date" => new MongoDate()));

?>
]]>
   </programlisting>
   <para>
    utilisez quelque chose comme :
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$grid->storeFile("somefile.txt", array("metadata" => array("date" => new MongoDate())));

?>
]]>
   </programlisting>
  </section>

  <section>
   <title>La famille <classname>MongoGridFS</classname></title>

   <para>
    <classname>MongoGridFS</classname> représente les collections 'files' et 'chunks'.
    <classname>MongoGridFS</classname> étend MongoCollection, 
    et une instance de <classname>MongoGridFS</classname> a accès à toutes les méthodes de
    <classname>MongoCollection</classname>, qui agissent sur la collection 'files':
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$grid = $db->getGridFS();
$grid->update(array("filename" => "foo"), $newObj); // update on the files collection

?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Un autre exemple de manipulation des méta-données:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

// Sauvegarde un fichier
$id = $grid->storeFile("game.tgz");
$game = $grid->findOne();

// Ajoute un compteur de téléchargement
$game->file['downloads'] = 0;
$grid->save($game->file);

// Incrémente le compteur
$grid->update(array("_id" => $id), array('$inc' => array("downloads" => 1)));

?>
]]>
    </programlisting>
   </informalexample>
    </para>

   <para>
    Vous pouvez aussi accéder aux objets dans la collection 'chunks'
    depuis une instance de <classname>MongoGridFS</classname>:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

  $chunks = $grid->chunks; // $chunks est une MongoCollection
$chunks->insert(array("x" => 4));

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Il existe des méthodes dans <classname>MongoGridFS</classname> qui ont le même
    no que dans <classname>MongoCollection</classname> mais elles se comportent différement.
    Par exemple, <function>MongoGridFS::remove</function> suppriment les objets qui
    correspondent au critère depuis la collection des fichiers ('files'), ainsi que
    leur contenu depuis la collection des données ('chunks').
   </para>

   <para>
    Pour stocker un nouvel enregistrement dans GridFS, il y a plusieurs options.
    Si vous possédez un nom de fichier, agissez comme cela:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$grid->storeFile($filename, array("whatever" => "metadata", "you" => "want"));

?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Si vous avez une chaine d'octets qui n'est pas un fichier, vous pouvez la stocker
    grâce à <function>MongoGridFS::storeBytes</function>:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$grid->storeBytes($bytes, array("whatever" => "metadata", "you" => "want"));

?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    Requêter une collection <classname>MongoGridFS</classname> retourne un
    <classname>MongoGridFSCursor</classname>, qui se comporte comme un
    <classname>MongoCursor</classname> normal sauf qu'il retourne des
    <classname>MongoGridFSFiles</classname> plutôt que des tableaux associatifs.
   </para>

   <para>
    <classname>MongoGridFSFiles</classname> peut être écrit sur le disque en utilisant
    <function>MongoGridFSFile::write</function> ou récupéré de la mémoire avec
    <function>MongoGridFSFile::getBytes</function>. Il n'y a pas de méthode
    actuellement qui guide les données d'un à l'autre, mais ce n'est pas très
    difficile à écrire en utilisant <literal>$grid->chunks</literal> de la collection.
   </para>

   <para>
    Les objets <classname>MongoGridFSFile</classname> contiennent un champ file
    qui contient les méta-données du fichier.
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="mongogridfs.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoGridFS</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>étend</modifier>
      <classname>MongoCollection</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    
    <classsynopsisinfo role="comment">Fields</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <type>MongoCollection</type>
     <varname>chunks</varname>
     <initializer>&null;</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <type>string</type>
     <varname>filesName</varname>
     <initializer>&null;</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <type>string</type>
     <varname>chunksName</varname>
     <initializer>&null;</initializer>
    </fieldsynopsis>
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongogridfs')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->
   
  </section>

  <section>
   &reftitle.seealso;
   <simplelist>
    <member>Documentation coeur de MongoDB sur <link xlink:href="&url.mongodb.docs.gridfs;">GridFS</link></member>
    <member>Article sur les solutions LightCube sur <link xlink:href="&url.mongodb.gridfs.fileupload;">la sauvegarde des téléchargements utilisateurs</link></member>
    <member>Article sur les solutions LightCube sur <link xlink:href="&url.mongodb.gridfs.metadata;">l'ajout de méta-données aux fichiers</link></member>
   </simplelist>
  </section>
 </partintro>
 
 &reference.mongo.entities.mongogridfs;
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
