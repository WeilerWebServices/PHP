<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351133 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongowritebatch.add" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoWriteBatch::add</refname>
  <refpurpose>Ajoute une opération d'écriture dans un lot</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>MongoWriteBatch::add</methodname>
   <methodparam><type>array</type><parameter>item</parameter></methodparam>
  </methodsynopsis>
  <para>
   Ajoute une opération d'écriture dans un lot.
  </para>
  <para>
   Si le paramètre <parameter>$item</parameter> fait que le lot excède les limites
   <literal>maxWriteBatchSize</literal> ou <literal>maxBsonObjectSize</literal>,
   le driver va, en interne, couper les lots en plusieurs commandes d'écriture
   avant d'appeler la méthode <methodname>MongoWriteBatch::execute</methodname>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>item</parameter></term>
    <listitem>
     <para>
      Un tableau qui décrit une opération d'écriture. La structure de cette valeur
      dépoend du type de l'opération du lot.
      <informaltable>
       <thead>
        <row>
         <entry>Type du lot</entry>
         <entry>Signification</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><constant>MongoWriteBatch::COMMAND_INSERT</constant></entry>
         <entry><simpara>Le document à ajouter.</simpara></entry>
        </row>
        <row>
         <entry><constant>MongoWriteBatch::COMMAND_UPDATE</constant></entry>
         <entry>
          <para>Opération brute de mise à jour.</para>
          <para>
           Les clés requises sont <literal>"q"</literal> et <literal>"u"</literal>,
           qui correspondent aux paramètres
           <link linkend="mongocollection.update.criteria"><parameter>$criteria</parameter></link> et
           <link linkend="mongocollection.update.new_object"><parameter>$new_object</parameter></link> de
           <function>MongoCollection::update</function>, respectivement.
          </para>
          <para>
           Les clés optionnelles sont <literal>"multi"</literal> et <literal>"upsert"</literal>,
           qui correspondent aux options
           <link linkend="mongocollection.update.multiple"><literal>"multiple"</literal></link> et
           <link linkend="mongocollection.update.upsert"><literal>"upsert"</literal></link> pour
           <function>MongoCollection::update</function>, respectivement.
           Si on spécifiés, les deux options vaudront par défaut &false;.
          </para>
         </entry>
        </row>
        <row>
         <entry><constant>MongoWriteBatch::COMMAND_DELETE</constant></entry>
         <entry>
          <para>Opération brute de suppression.</para>
          <para>
           Les clés requises sont : <literal>"q"</literal> et <literal>"limit"</literal>,
           qui correspondent au paramètre
           <link linkend="mongocollection.remove.criteria"><parameter>$criteria</parameter></link> et
           à l'option <link linkend="mongocollection.remove.justone"><literal>"justOne"</literal></link>
           de <function>MongoCollection::remove</function>, respectivement.
          </para>
          <para>
           L'option <literal>"limit"</literal> est de type <type>int</type> ;
           cependant, MongoDB ne supporte que la valeur <literal>0</literal> (i.e. supprime tous
           les documents correspondants) et la valeur <literal>1</literal> (i.e. supprime au moins
           un document correspondant) pour le moment.</para>
         </entry>
        </row>
       </tbody>
      </informaltable>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne &true; en cas de succès, et lance une exception si une erreur survient.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   <member>Une exception <classname>Exception</classname> sur un échec d'analyse du paramètre</member>
   <member>Une exception <classname>Exception</classname> sur une erreur de validation de l'argument (i.e. clés manquantes)</member>
  </simplelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="mongowritebatch.add.example.insert">
   <title>Exemple avec <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Mise en lot de plusieurs opérations d'insertion
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$collection = $mc->selectCollection("test", "test");


$docs = array();
$docs[] = array("my" => "demo");
$docs[] = array("is" => "working");
$docs[] = array("pretty" => "well");

$batch = new MongoInsertBatch($collection);
foreach($docs as $document) {
    $batch->add($document);
}
$batch->execute(array("w" => 1));
?>
]]>
   </programlisting>
  </example>

  <example xml:id="mongowritebatch.add.example.update">
   <title>Exemple avec <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Mise en lot de plusieurs opérations de mise à jour
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$collection = $mc->selectCollection("test", "test");


$item1 = array(
    "q" => array("my" => "demo"),
    "u" => array('$set' => array("try" => 1)),
    "multi"  => false, /* Valeur par défaut */
    "upsert" => false, /* Valeur par défaut */
);
$item2 = array(
    "q" => array("is" => "working"),
    "u" => array('$set' => array("try" => 2)),
    "multi" => true,
);
$item3 = array(
    "q" => array("created" => "new-document"),
    "u" => array('$set' => array("try" => 3)),
    "upsert" => true,
);

$batch = new MongoUpdateBatch($collection);
$batch->add($item1);
$batch->add($item2);
$batch->add($item3);
$batch->execute(array("w" => 1));

?>
]]>
   </programlisting>
  </example>

  <example xml:id="mongowritebatch.add.example.delete">
   <title>Exemple avec <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Mise en lot de plusieurs opérations de suppression
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$collection = $mc->selectCollection("test", "test");


$item1 = array(
    "q" => array("my" => "demo"),
    "limit" => 1,
);
$item2 = array(
    "q" => array("try" => 3),
    "limit" => 1,
);


$batch = new MongoDeleteBatch($collection);
$batch->add($item1);
$batch->add($item2);
$batch->execute(array("w" => 1));
?>
]]>
   </programlisting>
  </example>
 </refsect1>



</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
