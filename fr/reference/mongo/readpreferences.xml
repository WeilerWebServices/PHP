<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 333173 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mongo.readpreferences" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Préférences de lecture</title>
 <para>
  MongoDB 2.2 et la version 1.3.0 du driver ajoutent le support pour les
  <link xlink:href="&url.mongodb.docs.readpreferences;">préférences de lecture</link>,
  qui autorise le contrôle sur la façon dont les requêtes sont dirigées vers les
  instances mongod dans un environnement de jeux de réplication. Les préférences
  de lecture peuvent être spécifiées soit pour chaque connexion, soit par base de
  données, soit par collection. Les préférences définies à un niveau plus élévé
  seront héritées par défaut (i.e. <classname>MongoCollection</classname>
  héritera des préférences définies au niveau correspondant de l'instance
  <classname>MongoDB</classname>).
 </para>
 <para>
  Les préférences de lecture sont spécifiées avec des combinaison de modes
  et de jeu de tags. Les modes déterminent la façon dont les instances mongod sont priorisées,
  alors que les <link xlink:href="&url.mongodb.docs.tagsets;">jeux de tags</link>
  spécifient les critères d'éligibilité des instances mongod. Les instances Mongod
  ne sont éligibles que si le temps du ping n'excède pas une différence de 15 ms
  depuis l'instance mongod la plus proche.
 </para>
 <simplesect xml:id="mongo.readpreferences.modes">
  <title>Les modes des préférences de lecture</title>
  <warning>
   <para>
    Tous les modes des préférences de lecture, excepté <literal>MongoClient::RP_PRIMARY</literal>
    peuvent retourner des données périmées sachant que les opérations de réplication des
    secondaires depuis le primaire peuvent prendre un certain délai. Assurez-vous que votre
    application peut toléler des données périmées si vous choisissez d'utiliser un
    mode autre que le mode <literal>MongoClient::RP_PRIMARY</literal>.
   </para>
  </warning>
  <itemizedlist>
   <listitem>
    <para>
     <literal>MongoClient::RP_PRIMARY</literal>
    </para>
    <para>
     Toutes les opérations de lecture n'utilisent que le jeu primaire de réplication courant.
     C'est le comportement par défaut. Si le primaire n'est pas disponible, les
     opérations de lecture produiront une exception.
    </para>
    <para>
     Ce mode est incompatible avec l'utilisation des jeux de tags. Le fait de spécifier
     un jeu de tags avec le mode <literal>MongoClient::RP_PRIMARY</literal> retournera une
     exception.
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_PRIMARY_PREFERRED</literal>
    </para>
    <para>
     Dans la plupart des situations, les opérations de lecture s'effectuent depuis
     le membre primaire du jeu. Cependant, si le primaire n'est pas disponible, ce qui 
     est le cas lors des situations critiques, les opérations de lecture s'effectuent
     depuis les membres secondaires.
    </para>
    <para>
     Lorsque les préférences de lecture incluent un jeu de tags, le client
     lit tout d'abord en utilisant le primaire, s'il est disponible, puis,
     en utilisant les secondaires qui correspondent aux tags spécifiés.
     Si aucun secondaire ne correspond aux tags spécifiés, l'opération
     de lecture échoue et produit une exception.
    </para>
    <warning>
     <para>
      La version 2.2 de mongo ajoute un support complet des préférences
      de lecture. Lors de la connexion à d'anciennes instances mongo,
      <literal>MongoClient::RP_PRIMARY_PREFERRED</literal>
      enverra les requêtes aux secondaires.
     </para>
    </warning>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_SECONDARY</literal>
    </para>
    <para>
     Les opérations de lecture ne s'effectuent que sur les membres
     secondaires du jeu. Si aucun secondaire n'est disponible,
     les opérations de lecture produiront une exception.
    </para>
    <para>
     La plupart des jeux ont au moins un secondaire, mais il existe
     des situations où il peut ne pas être disponible. Par exemple,
     un jeu avec un primaire, un secondaire, un arbitraire peut ne pas
     avoir de secondaire si un membre est en cours de récupération ou
     indisponible.
    </para>
    <para>
     Lorsque les préférences de lecture incluent un jeu de tags, le client
     tente de trouver des membres secondaires qui correspondent au jeu de
     tags spécifié, et dirige les lectures vers un secondaire pris aléatoirement
     dans le groupe le plus proche. Si aucun secondaire ne correspond aux
     tags, l'opération de lecture produira une exception.
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_SECONDARY_PREFERRED</literal>
    </para>
    <para>
     Dans la plupart des situations, les opérations de lecture s'effectuent
     sur les membres secondaires, mais dans le cas où le jeu contient
     un seul primaire avec aucun autre membre, l'opération de lecture
     utilisera le primaire du jeu.
    </para>
    <para>
     Lorsque les préférences de lecture incluent un jeu de tags, le client
     tente de trouver un membre secondaire qui correspond au jeu de tags
     spécifié, et dirige les lectures vers un secondaire pris aléatoirement
     dans la groupe le plus proche. Si aucun secondaire ne correspond aux tags,
     l'opération de lecture produira une exception.
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_NEAREST</literal>
    </para>
    <para>
     Le driver lit depuis un membre <emphasis>aléatoire</emphasis> du jeu,
     qui a un ping inférieur à 15ms du membre avec le ping le plus bas. Une lecture
     en mode <literal>MongoClient::RP_NEAREST</literal> ne prend pas en compte le
     type du membre, et peut lire depuis les primaires mais aussi depuis les secondaires.
    </para>
    <para>
     Utilisez ce mode pour minimiser les effects de latence du réseau
     lors des opérations de lecture sans préférence pour des données courantes
     ou périmées.
    </para>
    <para>
     Si vous spécifiez un jeu de tags, le client tente de trouver un membre
     qui correspond au jeu de tags spécifié et dirige les lectures
     vers un noeud pris aléatoirement depuis le groupe le plus proche.
    </para>
    <note>
     <para>
      Toutes les opérations lisent depuis le membre le plus proche du jeu
      de réplication qui correspond au mode de préférence de lecture spécifié.
      Le mode <literal>MongoClient::RP_NEAREST</literal> préfère les faibles latences
      lors des lectures sur les membres au statut primaire ou secondaire.
     </para>
    </note>
   </listitem>
  </itemizedlist>
 </simplesect>
 <simplesect xml:id="mongo.readpreferences.tagsets">
  <title>Jeux de tags</title>
  <para>
   Les <link xlink:href="&url.mongodb.docs.tagsets;">jeux de tags</link>
   vous permettent de spécifier des critères indiquant à votre application
   les membres spécifiques à utiliser lors des opérations de lecture,
   en se basant sur des paramètres personnalisés. Les jeux de tags permettent
   cela, permettant ainsi de s'assurer que les opérations de lecture utilisent
   des membres d'un centre de données particulier, ou utilisent des instances
   mongod désignées pour une classe particulière d'opérations, comme les
   rapports ou les analyses.
  </para>
  <para>
   Vous pouvez spécifier des jeux de tags avec les modes de préférence de
   lecture suivants :
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <literal>MongoClient::RP_PRIMARY_PREFERRED</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_SECONDARY</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_SECONDARY_PREFERRED</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_NEAREST</literal>
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Vous ne pouvez pas spécifier de jeux de tags avec le mode de préférence
   de lecture <literal>MongoClient::RP_PRIMARY</literal>. Les tags sont applicables
   que lors de la sélection d'un membre secondaire d'un jeu, excepté
   lors du mode utilisant le plus proche.
  </para>
 </simplesect>
 <simplesect xml:id="mongo.readpreference.usage">
  <title>Spécifier les préférences de lecture</title>
  <para>
   Les préférences de lecture peuvent être spécifiées dans l'URI de connexion
   fourni à la méthode <function>MongoClient::__construct</function>, qui utilise
   une syntaxe de type requête, ou via des méthodes du coeur de la classe,
   qui utilise un tableau pour spécifier les jeux de tags.
  </para>
  <para>
   Lorsque les modes de préférences de lecture sont fournis via une chaîne
   de type requête, les jeux de tags pour la valeur de
   <literal>readPreferenceTags</literal> doivent être une séquence
   délimitée par une virgule de paires clé/valeur séparée par deux points(:).
  </para>
  <note>
   <para>
    Chaque jeu de tags défini dans la chaîne de requête utilisera le nom
    <literal>readPreferenceTags</literal>. Contrairement à la façon dont PHP
    gère les chaînes de type URL, les valeurs successives de
    <literal>readPreferenceTags</literal> n'effaceront pas les précédentes.
    Le driver va collecter les jeux de tags dans l'ordre de leur apparition
    dans la chaîne de requête.
   </para>
  </note>
  <warning>
   <para>
    Si le driver ne trouve pas de jeu de tags correspondant, la lecture
    échoue ! Il en est de votre responsabilité que de fournir un fallback
    valide, comme une valeur vide pour <literal>readPreferenceTags</literal>
    qui voudra dire "aucun jeu de tags de préférence".
   </para>
  </warning>
  <para>
   <example>
    <title>Préférences de lecture via l'URI de connexion avec une syntaxe de type
     requête</title>
    <programlisting role="php">
<![CDATA[
<?php
// Préfère le serveur le plus proche avec aucun tag de préférence
$uri  = 'mongodb://rs1.example.com,rs2.example.com/';
$uri .= '?readPreference=nearest';
$m = new Mongo($uri, array('replicaSet' => 'rs'));

// Sélectionne le serveur le plus proche dans le centre de données "east"
$uri  = 'mongodb://rs1.example.com,rs2.example.com/';
$uri .= '?readPreference=nearest';
$uri .= '&readPreferenceTags=dc:east';
$m = new Mongo($uri, array('replicaSet' => 'rs'));

// Préfère le serveur le plus proche dans le centre de données "east", également
// utilisé pour les rapports, mais utilise le centre de données "west" en cas de problème
$uri  = 'mongodb://rs1.example.com,rs2.example.com/';
$uri .= '?readPreference=nearest';
$uri .= '&readPreferenceTags=dc:east,use:reporting';
$uri .= '&readPreferenceTags=dc:west';
$m = new Mongo($uri, array('replicaSet' => 'rs'));

// Préfère le serveur le plus proche dans le centre de données "east", puis, un
// serveur dans le centre de données "west", et pour terminer, n'avoir aucun
jeu de tags de préférence si une erreur survient
$uri  = 'mongodb://rs1.example.com,rs2.example.com/';
$uri .= '?readPreference=nearest';
$uri .= '&readPreferenceTags=dc:east';
$uri .= '&readPreferenceTags=dc:west';
$uri .= '&readPreferenceTags=';
$m = new Mongo($uri, array('replicaSet' => 'rs'));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Préférences de lecture avec une syntaxe de type tableau pour les jeux de tags</title>
    <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo('mongodb://rs1.example.com,rs2.example.com', array(
    'replicaSet' => 'rs',
));

// Préfère le serveur le plus proche, avec aucun tag de préférence
$m->setReadPreference(MongoClient::RP_NEAREST, array());

// Sélectionne le serveur le plus proche dans le centre de données "east"
$m->setReadPreference(MongoClient::RP_NEAREST, array(
    array('dc' => 'east'),
));

// Préfère le serveur le plus proche dans le centre de données "east" également
// utilisé pour les rapports, mais prend un serveur du centre de données "west"
// en cas d'erreur
$m->setReadPreference(MongoClient::RP_NEAREST, array(
    array('dc' => 'east', 'use' => 'reporting'),
    array('dc' => 'west'),
));

// Préfère le serveur le plus proche dans le centre de données "east", puis un
// serveur dans le centre de données "west", et pour terminer, n'avoir aucun
jeu de tags de préférence si une erreur survient
$m->setReadPreference(MongoClient::RP_NEAREST, array(
    array('dc' => 'east'),
    array('dc' => 'west'),
    array(),
));
?>
]]>
    </programlisting>
   </example>
  </para>
 </simplesect>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->