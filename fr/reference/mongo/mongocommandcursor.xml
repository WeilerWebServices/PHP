<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342988 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<phpdoc:classref xml:id="class.mongocommandcursor" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La Classe MongoCommandCursor</title>
 <titleabbrev>MongoCommandCursor</titleabbrev>

 <partintro>

  <!-- {{{ MongocommandCursor intro -->
  <section xml:id="mongocommandcursor.intro">
   &reftitle.intro;
   <para>
    Un curseur de commande est similaire à un <classname>MongoCursor</classname>
    excepté qu'il est utilisé pour parcourir les résultats d'une commande
    de base de données au lieu d'une requête normale. Les curseurs de commande
    sont utiles pour parcourir de larges jeux de résultats qui peuvent dépasser
    la taille limite d'un document (actuellement de 16MB) d'une seule réponse
    <function>MongoDB::command</function>.
   </para>
   <para>
    Malgré le fait que vous pouvez créer des curseurs de commande en utilisant
    la méthode <function>MongoCommandCursor::__construct</function> ou la méthode
    <function>MongoCommandCursor::createFromDocument</function>,
    vous devriez plutôt utiliser une commande spécifique comme
    <function>MongoCollection::aggregateCursor</function>.
   </para>
   <para>
    Noter que le curseur ne contient pas les résultats de la commande de la
    base de données ; il ne gère que la consultation du résultat. Aussi, si
    vous affichez un curseur (i.e. avec une fonction comme
    <function>var_dump</function> ou <function>print_r</function>), vous verrez
    l'objet curseur, mais vous ne verrez pas les documents résultants.
   </para>
  </section>

  <section>
   <title>Les états d'un Curseur</title>
   <para>
    Un <classname>MongoCommandCursor</classname> possède 2 "périodes de vie" : 
    pré- et post- commande. Lorsqu'un curseur est créé, il n'a pas encore 
    interrogé la base de données, alors il est dans son état pré-commande.
    Lorsque le client tente d'abord de récupérer un résultat
    (en appelant la méthode <function>MongoCommandCursor::rewind</function>,
    directement ou indirectement), le curseur se déplace dans un état de
    post-commande.
   </para>
   <para>
    La taille du lot et la durée maximale d'attente du socket du curseur de
    commande peuvent être configurés dans les deux états pre- et post-.
   </para>
   <para>
    <example xml:id="mongocommandcursor.stages.adding-options">
     <title>Ajout d'options à <classname>MongoCommandCursor</classname></title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = new MongoCommandCursor(...);

$cursor = $cursor->batchSize( 4 );

foreach ($cursor as $result) {
    var_dump($result);
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="mongocommandcursor.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoCommandCursor</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoCommandCursor</classname>
     </ooclass>
     <oointerface>
      <interfacename>MongoCursorInterface</interfacename>
     </oointerface>
     <oointerface>
      <interfacename>Iterator</interfacename>
     </oointerface>
    </classsynopsisinfo>
    <!-- }}} -->
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongocommandcursor')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->

  </section>

  <section role="seealso">
   &reftitle.seealso;
   <simplelist>
    <member><methodname>MongoDB::command</methodname></member>
    <member><methodname>MongoCollection::aggregateCursor</methodname></member>
   </simplelist>
  </section>

 </partintro>

 &reference.mongo.entities.mongocommandcursor;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
