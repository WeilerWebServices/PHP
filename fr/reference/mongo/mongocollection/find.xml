<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 332331 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="mongocollection.find" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::find</refname>
  <refpurpose>Interroge une collection, et retourne comme jeu de résultats un objet <classname>MongoCursor</classname></refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCollection::find</methodname>
   <methodparam choice="opt"><type>array</type><parameter>query</parameter><initializer>array()</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>fields</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;  
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>query</parameter>
     </term>
     <listitem>
      <para>
       Le champ dans lequel la recherche va s'effectuer. Le langage de
       requête Mongo est assez extensible. Le driver PHP passera dans
       la plupart des cas la requête au serveur, aussi, la lecture de
       la documentation coeur de MongoDB sur la fonctionnalité
       <link xlink:href="&url.mongodb.dochub.find;">find</link> pourrait
       être une bonne idée.
      </para>
      <warning>
       <para>
        Assurez-vous que pour tous les opérateurs spéciaux de la requête (commençant
        par <literal>$</literal>) vous utilisez des guillemets simples, et ainsi,
        PHP ne tentera pas de remplacer <literal>"$exists"</literal>
        avec la valeur de la variable <literal>$exists</literal>.
       </para>
      </warning>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>fields</parameter>
     </term>
     <listitem>
      <para>
       Les champs qui devront être retournés dans le résultat. Le tableau
       est au format
       <literal>array('fieldname' => true, 'fieldname2' => true)</literal>.
       Le champ <literal>_id</literal> sera, quant à lui, toujours retourné.
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un curseur pour les résultats de recherche.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
   <example>
   <title>Exemple avec <function>MongoCollection::find</function></title>
   <para>Cet exemple montre l'utilisation des options de recherche
    via un exemple simple.</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'produce');

// recherche des fruits
$fruitQuery = array('Type' => 'Fruit');

$cursor = $collection->find($fruitQuery);
foreach ($cursor as $doc) {
    var_dump($doc);
}

// recherche des produits sucrés. Le goût est un enfant de "Details"
$sweetQuery = array('Details.Taste' => 'Sweet');
echo "Sucré \n";
$cursor = $collection->find($sweetQuery);
foreach ($cursor as $doc) {
    var_dump($doc);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(4) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "50a87dd084f045a19b220dd6"
  }
  ["Name"]=>
  string(5) "Apple"
  ["Type"]=>
  string(5) "Fruit"
  ["Details"]=>
  array(2) {
    ["Taste"]=>
    string(5) "Sweet"
    ["Colour"]=>
    string(3) "Red"
  }
}
array(4) {
  ["_id"]=>
  object(MongoId)#8 (1) {
    ["$id"]=>
    string(24) "50a87de084f045a19b220dd7"
  }
  ["Name"]=>
  string(5) "Lemon"
  ["Type"]=>
  string(5) "Fruit"
  ["Details"]=>
  array(2) {
    ["Taste"]=>
    string(4) "Sour"
    ["Colour"]=>
    string(5) "Green"
  }
}

Sucré :
array(4) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "50a87dd084f045a19b220dd6"
  }
  ["Name"]=>
  string(5) "Apple"
  ["Type"]=>
  string(5) "Fruit"
  ["Details"]=>
  array(2) {
    ["Taste"]=>
    string(5) "Sweet"
    ["Colour"]=>
    string(3) "Red"
  }
}
]]>
   </screen>
   <para>
    Voir la classe <classname>MongoCursor</classname> pour plus d'informations
    sur le fonctionnement des curseurs.
   </para>
  </example>
  <example>
   <title>Exemple avec <function>MongoCollection::find</function></title>
   <para>
    Cet exemple montre comment rechercher un intervalle.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'phpmanual');

// recherche les documents dont l'identifiant est entre 5 < x < 20
$rangeQuery = array('x' => array( '$gt' => 5, '$lt' => 20 ));

$cursor = $collection->find($rangeQuery);
foreach ($cursor as $doc) {
    var_dump($doc);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(2) {
  ["_id"]=>
  object(MongoId)#10 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000000"
  }
  ["x"]=>
  int(12)
}
array(2) {
  ["_id"]=>
  object(MongoId)#11 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000001"
  }
  ["x"]=>
  int(12)
}
]]>
   </screen>
   <para>
    Voyez <classname>MongoCursor</classname> pour plus d'informations sur le
    fonctionnement des curseurs.
   </para>
  </example>
  <example>
   <title>Exemple pour <function>MongoCollection::find</function> en utilisant $where</title>
   <para>Cet exemple montre comment chercher dans une collection en utilisant du code
    javascript pour réduire les résultats retournés.</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'phpmanual');

$js = "function() {
    return this.name == 'Joe' || this.age == 50;
}";
$cursor = $collection->find(array('$where' => $js));
foreach ($cursor as $doc) {
    var_dump($doc);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000002"
  }
  ["name"]=>
  string(3) "Joe"
  ["age"]=>
  int(20)
}
]]>
   </screen>
  </example>
  <example>
   <title>Exemple pour <function>MongoCollection::find</function> utilisant $in</title>
   <para>Cet exemple montre comment chercher dans une collection en utilisant l'opérateur $in.</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'phpmanual');

$cursor = $collection->find(array(
    'name' => array('$in' => array('Joe', 'Wendy'))
));

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000002"
  }
  ["name"]=>
  string(3) "Joe"
  ["age"]=>
  int(20)
}
]]>
   </screen>
  </example>
  
  <example>
   <title>Récupération des résultats sous la forme d'un tableau</title>
   <para>
    Cet exemple retourne un objet <classname>MongoCursor</classname>.
    Lors des débuts, il peut être plus confortable d'utiliser un tableau.
    Pour transformer un curseur en un tableau, utilisez la fonction
    <function>iterator_to_array</function>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'phpmanual');

$cursor = $collection->find();
$array = iterator_to_array($cursor);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(3) {
  ["4ebc40af10b89f5149000000"]=>
  array(2) {
    ["_id"]=>
    object(MongoId)#6 (1) {
      ["$id"]=>
      string(24) "4ebc40af10b89f5149000000"
    }
    ["x"]=>
    int(12)
  }
  ["4ebc40af10b89f5149000001"]=>
  array(2) {
    ["_id"]=>
    object(MongoId)#11 (1) {
      ["$id"]=>
      string(24) "4ebc40af10b89f5149000001"
    }
    ["x"]=>
    int(12)
  }
  ["4ebc40af10b89f5149000002"]=>
  array(3) {
    ["_id"]=>
    object(MongoId)#12 (1) {
      ["$id"]=>
      string(24) "4ebc40af10b89f5149000002"
    }
    ["name"]=>
    string(3) "Joe"
    ["age"]=>
    int(20)
  }
}
]]>
   </screen>
   <para>
    L'utilisation de la fonction <function>iterator_to_array</function> force
    le driver à charger tous les résultats en mémoire, aussi, évitez d'utiliser
    cette fonction sur des jeux de résultats qui peuvent être plus grands que la
    mémoire disponible!
   </para>
   <para>
    Aussi, certaines collections n'ont pas de champ <literal>_id</literal>. Si vous
    manipulez des collections ne possédans pas de champ <literal>_id</literal>,
    passez &false; au second paramètre de <function>iterator_to_array</function>
    (il n'essayera pas d'utiliser les valeurs innexistantes de <literal>_id</literal>
    comme clés).
   </para>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::findOne</function></member>
   <member><function>MongoCollection::insert</function></member>
   <member>Documentation de MongoDB sur <link xlink:href="&url.mongodb.dochub.find;">find</link></member>
  </simplelist>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
