<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342988 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocollection.aggregatecursor" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::aggregateCursor</refname>
  <refpurpose>Exécute une commande d'agrégation, et récupère les résultats via un curseur</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCommandCursor</type><methodname>MongoCollection::aggregateCursor</methodname>
   <methodparam><type>array</type><parameter>command</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   Avec cette méthode, vous pouvez exécuter des commandes d'agrégation et
   récupérer les résultats via un curseur, au lieu de ne récupérer qu'un
   seul document, comme c'est le cas avec la méthode <methodname>MongoCollection::aggregate</methodname>.
   Cette méthode retourne un objet <classname>MongoCommandCursor</classname>.
   Cet objet de type curseur implémente l'interface <classname>Iterator</classname>
   tout comme les objets <classname>MongoCursor</classname> qui sont retournés par la
   méthode <methodname>MongoCollection::find</methodname>.
  </para>
  <note>
   <simpara>
    Le <classname>MongoCommandCursor</classname> résultant va hériter des préférences
    de lecture de cette collection.
    <methodname>MongoCommandCursor::setReadPreference</methodname> peut être utilisé
    pour modifier les préférences de lecture, avant d'avancer sur le curseur.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>pipeline</parameter>
     </term>
     <listitem>
      <para>
       La commande d'agrégation à exécuter.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>Options pour la commande d'agrégation. Les options valides sont :</para>
      <itemizedlist>
       <listitem>
        <para><literal>"allowDiskUse"</literal></para>
        <para>Autorise les étapes d'agrégation d'écrire dans des fichiers temporaires</para>
       </listitem>
       <listitem>
        <para><literal>"cursor"</literal></para>
        <para>
         Il est possible de configurer le nombre de documents initiaux que le
         serveur doit retourner avec le premier jeux de résultats. La taille
         du lot initial par défaut est <literal>101</literal>. Vous pouvez la modifier
         en ajoutant l'option <literal>batchSize</literal> :
        </para>
        <programlisting role="php">
<![CDATA[
<?php
$collection->aggregateCursor( 
    $pipeline,
    [ "cursor" => [ "batchSize" => 4 ] ]
);
]]>
        </programlisting>
        <para>
         Cette option configure uniquement la taille du premier lot. Pour configurer
         la taille des lots suivants, utilisez la méthode
         <methodname>MongoCommandCursor::batchSize</methodname> sur l'objet
         <classname>MongoCommandCursor</classname> retourné.
        </para>
       </listitem>
       <listitem>
        <para><literal>"explain"</literal></para>
        <para>
         Retourne des informations sur l'exécution de la commande. Cette option
         peut faire que la commande va retourner un document résultat qui ne sera
         pas utilisable pour la construction d'un <classname>MongoCommandCursor</classname>.
         Si vous devez utiliser cette option, vous pourriez considérer l'utilisation
         de la méthode <methodname>MongoCollection::aggregate</methodname>.
        </para>
       </listitem>
       &mongo.command.parameters.maxtimems;
      </itemizedlist>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Retourne un objet <classname>MongoCommandCursor</classname>.
   En raison du fait que l'objet implémente l'interface
   <classname>Iterator</classname>, vous pouvez parcourir le jeux de résultats
   tel que retourné par la requête de commande.
   <classname>MongoCommandCursor</classname> implémente également l'interface
   <classname>MongoCursorInterface</classname> qui ajoute les méthodes
   <methodname>MongoCommandCursor::batchSize</methodname>,
   <methodname>MongoCommandCursor::dead</methodname> et
   <methodname>MongoCommandCursor::info</methodname>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCollection::aggregateCursor</function></title>
   <para>
    Trouve toutes les valeurs distinctes pour une clé.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient;
$db = $m->test;
$people = $db->people;
$people->drop();

$people->insert(array("name" => "Joe", "points" => 4));
$people->insert(array("name" => "Molly", "points" => 43));
$people->insert(array("name" => "Sally", "points" => 22));
$people->insert(array("name" => "Joe", "points" => 22));
$people->insert(array("name" => "Molly", "points" => 87));

$ages = $people->aggregateCursor( [
        [ '$group' => [ '_id' => '$name', 'points' => [ '$sum' => '$points' ] ] ],
        [ '$sort' => [ 'points' => -1 ] ],
] );

foreach ($ages as $person) {
    echo "{$person['_id']}: {$person['points']}\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Molly: 130
Joe: 26
Sally: 22
   </screen>
  </example>

  <example>
   <title>Exemple avec <function>MongoCollection::aggregateCursor</function>
    avec différentes tailles de lots initiaux</title>
   <para>
    Trouve toutes les valeurs distinctes pour une clé.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient;
$db = $m->test;
$people = $db->people;
$people->drop();

/* Insertion de données */
$people->insert(array("name" => "Joe", "points" => 4));
$people->insert(array("name" => "Molly", "points" => 43));
$people->insert(array("name" => "Sally", "points" => 22));
$people->insert(array("name" => "Joe", "points" => 22));
$people->insert(array("name" => "Molly", "points" => 87));

/* Exécuter la commande */
$ages = $people->aggregateCursor(
    [
        [ '$group' => [ '_id' => '$name', 'points' => [ '$sum' => '$points' ] ] ],
        [ '$sort' => [ 'points' => -1 ] ],
    ],
    [ "cursor" => [ "batchSize" => 4 ] ]
);

foreach ($ages as $person) {
    echo "{$person['_id']}: {$person['points']}\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Molly: 130
Joe: 26
Sally: 22
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>MongoDB::command</methodname></member>
    <member><classname>MongoCommandCursor</classname></member>
    <member><methodname>MongoCommandCursor::batchSize</methodname></member>
    <member><methodname>MongoCollection::aggregate</methodname></member>
    <member>La documentation MongoDB sur l'<link xlink:href="&url.mongodb.docs.aggregation;">agrégation</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
