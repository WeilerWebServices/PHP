<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351133 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocollection.findandmodify" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::findAndModify</refname>
  <refpurpose>Met à jour un document et le retourne</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>MongoCollection::findAndModify</methodname>
   <methodparam><type>array</type><parameter>query</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>update</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>fields</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   La méthode findAndModify modifie automatiquement un document et le retourne.
   Par défaut, le document retourné n'inclut pas les modifications effectuées
   lors de la mise à jour. Pour retourner le document avec les modifications
   effectuées lors de la mise à jour, utilisez la méthode avec l'option
   <varname>new</varname>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>query</parameter></term>
    <listitem>
     <para>
      Les critères de recherche.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>update</parameter></term>
    <listitem>
     <para>
      Les critères de mise à jour.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>fields</parameter></term>
    <listitem>
     <para>
      Optionnellement, ne retourne que ces champs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      Un tableau d'options à appliquer, comme le fait de supprimer le document
      trouvé depuis la base de données et le retourner.
      <informaltable>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Option</entry>
          <entry>&Description;</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><varname>sort</varname> <type>array</type></entry>
          <entry>
           Détermine le document que l'opération va modifier si
           la requête sélectionne plusieurs documents. findAndModify
           va modifier le premier document suivant l'ordre spécifié
           par cet argument.
          </entry>
         </row>
         <row>
          <entry><varname>remove</varname> <type>bool</type></entry>
          <entry>
           Optionnel si le champ <varname>update</varname> existe.
           Lorsque vaut &true;, le document sélectionné sera supprimé.
           Par défaut, vaut &false;.
          </entry>
         </row>
         <row>
          <entry><varname>update</varname> <type>array</type></entry>
          <entry>
           Optionnel, si le champ <varname>remove</varname> existe.
           Effectue une mise à jour du document sélectionné.
          </entry>
         </row>
         <row>
          <entry><varname>new</varname> <type>bool</type></entry>
          <entry>
           Optionnel. Lorsque vaut &true;, retourne le document modifié
           plutôt que l'original. La méthode findAndModify ignore l'option
           <varname>new</varname> pour les opérations de suppression.
           Par défaut, vaut &false;.
          </entry>
         </row>
         <row>
          <entry><varname>upsert</varname> <type>bool</type></entry>
          <entry>
           Optionnel. Utilisé en conjonction du champ
           <varname>update</varname>. Lorsque vaut &true;,
           la méthode findAndModify crée un nouveau document si la requête
           retourne aucun document. Par défaut, vaut &false;. En
           MongoDB 2.2, la méthode findAndModify retourne &null; 
           lorsque upsert vaut &true;.
          </entry>
         </row>
         <row>
          <entry><varname></varname></entry>
          <entry>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne le document original, ou le document modifié lorsque
   <varname>new</varname> est défini.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoResultException</classname>
   en cas d'échec.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="mongocollection.findandmodify.example.basic">
   <title>Exemple avec <methodname>MongoCollection::findAndModify</methodname></title>
   <programlisting role="php">
<![CDATA[
<?php
$m = new Mongo;
$col = $m->selectDB("test")->jobs;

$col->insert(array(
     "name" => "Next promo",
     "inprogress" => false,
     "priority" => 0,
     "tasks" => array( "select product", "add inventory", "do placement"),
) );

$col->insert(array(
     "name" => "Biz report",
     "inprogress" => false,
     "priority" => 1,
     "tasks" => array( "run sales report", "email report" )
) );

$col->insert(array(
     "name" => "Biz report",
     "inprogress" => false,
     "priority" => 2,
     "tasks" => array( "run marketing report", "email report" )
    ),
    array("w" => 1)
);



$retval = $col->findAndModify(
     array("inprogress" => false, "name" => "Biz report"),
     array('$set' => array('inprogress' => true, "started" => new MongoDate())),
     null,
     array(
        "sort" => array("priority" => -1),
        "new" => true,
    )
);

var_dump($retval);
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(6) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "5091b5b244415e8cc3000002"
  }
  ["inprogress"]=>
  bool(true)
  ["name"]=>
  string(10) "Biz report"
  ["priority"]=>
  int(2)
  ["started"]=>
  object(MongoDate)#8 (2) {
    ["sec"]=>
    int(1351726514)
    ["usec"]=>
    int(925000)
  }
  ["tasks"]=>
  array(2) {
    [0]=>
    string(20) "run marketing report"
    [1]=>
    string(12) "email report"
  }
}
]]>
   </screen>
  </example>
  <example xml:id="mongocollection.findandmodify.example.error">
   <title>Exemple avec <methodname>MongoCollection::findAndModify</methodname>
    et un gestionnaire d'erreur</title>
   <programlisting role="php">
<![CDATA[
<?php
$m = new Mongo;
$col = $m->selectDB("test")->jobs;
try {
    $retval = $col->findAndModify(
         array("inprogress" => false, "name" => "Next promo"),
         array('$pop' => array("tasks" => -1)),
         array("tasks" => array('$pop' => array("stuff"))),
         array("new" => true)
    );
} catch(MongoResultException $e) {
    echo $e->getCode(), " : ", $e->getMessage(), "\n";
    var_dump($e->getDocument());
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
13097 : exception: Unsupported projection option: $pop
array(3) {
  ["errmsg"]=>
  string(46) "exception: Unsupported projection option: $pop"
  ["code"]=>
  int(13097)
  ["ok"]=>
  float(0)
}
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>La documentation MongoDB sur <link xlink:href="&url.mongodb.docs.command;findAndModify/">findAndModify</link></member>
  </simplelist>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
