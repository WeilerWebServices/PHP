<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351075 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="mongocollection.save" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::save</refname>
  <refpurpose>Sauvegarde un document dans une collection</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>MongoCollection::save</methodname>
   <methodparam><type class="union"><type>array</type><type>object</type></type><parameter>document</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   Si l'objet est déjà dans la base, modifie la base et sinon, insère l'objet.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;    
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>document</parameter>
     </term>
     <listitem>
      <para>
       Un tableau ou un objet à sauvegarder. Si un objet est utilisé,
       ces propriétés ne doivent pas être protégées, ni privées.
      </para>
      <note>
       <para>
        Si le paramètre n'a pas de clé <literal>_id</literal>, ni de propriété,
        une nouvelle instance <classname>MongoId</classname> sera créée et utilisée.
        Voir la méthode <function>MongoCollection::insert</function> pour plus d'informations
        quant à ce comportement.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Options pour la sauvegarde.
       <itemizedlist>
        &mongo.writes.parameters.fsync;
        &mongo.writes.parameters.journal;
        &mongo.writes.parameters.sockettimeoutms;
        &mongo.writes.parameters.writeconcern;
        &mongo.writes.parameters.writeconcerntimeout;
        &mongo.writes.parameters.writeconcerntimeoutms;
        &mongo.writes.parameters.safe;
        &mongo.writes.parameters.timeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Si <parameter>w</parameter> est utilisé, retourne un tableau contenant le statut de la sauvegarde.
   Sinon, retourne un booléen si le tableau était non vide (un tableau vide ne sera pas inséré).
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoException</classname> si le document inséré
   est vide, ou s'il contient des clés de valeurs nulles. Tenter d'insérer un objet
   avec des propriétés protégées ou privées causera une erreur de type "clés
   de valeurs nulles".
  </para>
  &mongo.errors.exceptions.writeconcern;
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.5.0</entry>
       <entry>
        <para>
         Ajout de l'option <literal>"wTimeoutMS"</literal>,
         qui remplace l'option <literal>"wtimeout"</literal>.
         Emets une alerte de type <constant>E_DEPRECATED</constant>
         lorsque <literal>"wtimeout"</literal> est utilisée.
        </para>
        <para>
         Ajout de l'option <literal>"socketTimeoutMS"</literal>,
         qui remplace l'option <literal>"timeout"</literal>.
         Emets une alerte de type <constant>E_DEPRECATED</constant>
         lorsque <literal>"timeout"</literal> est utilisée.
        </para>
        <para>
         Emets une alerte de type <constant>E_DEPRECATED</constant>
         lorsque <literal>"safe"</literal> est utilisée.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.2.0</entry>
       <entry>
        Ajout de l'option <literal>"timeout"</literal>.
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.11</entry>
       <entry>
        Se déconnecte lors d'erreurs "not master" si <literal>"safe"</literal>
        est utilisé.
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.9</entry>
       <entry>
        <para>
         Ajout de l'option <literal>"fsync"</literal>.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.5</entry>
       <entry>
        Ajout du paramètre <parameter>options</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCollection::save</function></title>
   <programlisting role="php">
<![CDATA[
<?php

$obj = array('x' => 1);

// insertion de $obj dans la base
$collection->save($obj);
var_dump($obj);

// ajout d'un nouveau champ
$obj['foo'] = 'bar';

// $obj ne peut pas être inséré, car il causerait une duplication
$collection->insert($obj);

// sauvegarde de la modification de $obj
$collection->save($obj);

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(2) {
  ["x"]=>
  int(1)
  ["_id"]=>
  object(MongoId)#4 (1) {
    ["$id"]=>
    string(24) "50b6afe544415ed606000000"
  }
}
]]>
   </screen>
  </example>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
