<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350988 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="mongocollection.findone" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::findOne</refname>
  <refpurpose>Interroge cette collection, retourne un seul élément</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>MongoCollection::findOne</methodname>
   <methodparam choice="opt"><type>array</type><parameter>query</parameter><initializer>array()</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>fields</parameter><initializer>array()</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   Contrairement à la méthode <function>MongoCollection::find</function>,
   cette méthode retournera seulement le <emphasis>premier</emphasis>
   résultat du jeu de données, et non un <classname>MongoCursor</classname>
   sur lequel on aurait pu boucler.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>query</parameter>
     </term>
     <listitem>
      <para>
       Le champ dans lequel la recherche va s'effectuer. Le langage de requête MongoDB
       est relativement extensible. Le driver PHP passera dans la plupart des cas
       la requête au serveur, aussi, nous vous invitons à lire la documentation
       du coeur de MongoDB sur <link xlink:href="&url.mongodb.dochub.find;">find</link>
       pour mieux comprendre le fonctionnement.
      </para>
      <warning>
       <para>
        Assurez-vous que pour tous les opérateurs spéciaux de la requête (ceux commençant par
        <literal>$</literal>) vous utilisez des guillemets simples, ainsi, PHP ne tentera
        pas de remplacer <literal>"$exists"</literal> avec la valeur de la variable
        <literal>$exists</literal>.
       </para>
      </warning>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>fields</parameter>
     </term>
     <listitem>
      <para>
       Les champs de résultat à retourner. Le tableau est au format
       <literal>array('fieldname' => true, 'fieldname2' => true)</literal>.
       Le champ <literal>_id</literal> sera, quant à lui, toujours retourné.
      </para>
     </listitem>
    </varlistentry>  
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Ce paramètre est un tableau associatif sous la forme
       <literal>array("nom" => &lt;valeur&gt;, ...)</literal>. Les options
       actuellement supportées sont :
      </para>
      <itemizedlist>
       &mongo.command.parameters.maxtimems;
      </itemizedlist>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne les enregistrements qui correspondent aux critères, ou bien &null;.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoConnectionException</classname> si l'on
   ne peut joindre la base de données.
  </para>
 </refsect1>

 <refsect1 role="changelog"><!-- {{{ -->
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>PECL mongo 1.5.0</entry>
      <entry>
       Ajout de l'argument optionnel <parameter>options</parameter>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1><!-- }}} -->
 
<refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><methodname>MongoCollection::findOne</methodname> Cherche un document par son id.</title>
   <para>Cet exemple montre comment récupérer un document dans une collection par son id.</para>
   <programlisting role="php">
<![CDATA[
<?php

$articles = $mongo->my_db->articles;

$article = $articles->findOne(array('_id' => new MongoId('47cc67093475061e3d9536d2')));

?>
]]>
   </programlisting>
  </example>
  <example>
   <title><methodname>MongoCollection::findOne</methodname> Cherche un document par condition.</title>
   <para>Cet exemple montre comment récupérer un document dans une collection
    au moyen d'un condition en limitant les champs retournés.</para>
   <programlisting role="php">
<![CDATA[
<?php

$users = $mongo->my_db->users;
$user = $users->findOne(array('username' => 'jwage'), array('password'));
print_r($user);

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Array
(
    [_id] => MongoId Object
        (
        )

    [password] => test
)
]]>
   </screen>
   <para>
    Remarquez que même si le document possède un champ username, nous limitons les résultats
    au seul champ password.
   </para>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::find</function></member>
   <member><function>MongoCollection::insert</function></member>
   <member>Documentation coeur de MongoDB sur <link xlink:href="&url.mongodb.dochub.find;">find</link>.</member>
  </simplelist>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
