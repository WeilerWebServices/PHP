<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350988 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocollection.batchinsert" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::batchInsert</refname>
  <refpurpose>Insère plusieurs documents dans la collection</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>MongoCollection::batchInsert</methodname>
   <methodparam><type>array</type><parameter>a</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;    
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>a</parameter>
     </term>
     <listitem>
      <para>
       Un tableau de tableaux ou d'objets. Si des objets sont utilisés,
       il ne faut pas que leurs propriétés soient protégées ou privées.
      </para>
      <note>
       <para>
        Si le document à insérer n'a pas de clé <literal>_id</literal> ou
        de propriété, une nouvelle instance <classname>MongoId</classname>
        sera créée et utilisée. Voir la méthode <function>MongoCollection::insert</function>
        pour plus d'informations quant à ce comportement.
       </para>
      </note>
     </listitem>
    </varlistentry>     
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Un tableau d'options pour le lot d'opérations d'insertion.
       Actuellement, les options valides sont :
       <itemizedlist>
        <listitem>
         <para>
          <literal>"continueOnError"</literal>
         </para>
         <para>
          Booléen, par défaut, &false;. Si défini, la base de données n'arrêtera
          pas une insertion bulk si une d'entre elles échoue (i.e. en raison d'un
          ID dupliqué). Ceci rend les insertions bulk comme une succession d'insertion
          simple, sauf que lors d'un appel à la méthode
          <function>MongoDB::lastError</function>, un jeu d'erreurs sera retourné
          lors de l'échec d'une insertion, et pas seulement la dernière.
          Si plusieurs erreurs surviennent, seule la plus récente sera rapportée
          par la méthode <function>MongoDB::lastError</function>.
         </para>
         <note>
          <para>
           Veuillez noter que <literal>continueOnError</literal> affecte les erreurs
           côté base de données uniquement. Si vous tentez d'insérer un document
           qui contient des erreurs (par exemple, il contient une clé dont le nom
           est vide), alors le document ne sera pas transféré à la base de données
           car le driver va détecter cette erreur et l'indiquer.
           <literal>continueOnError</literal> n'a aucun effet sur les erreurs détectées
           dans le document par le driver.
          </para>
         </note>
        </listitem>
        &mongo.writes.parameters.fsync;
        &mongo.writes.parameters.journal;
        &mongo.writes.parameters.sockettimeoutms;
        &mongo.writes.parameters.writeconcern;
        &mongo.writes.parameters.writeconcerntimeoutms;
       </itemizedlist>
      </para>
      <para>
       Les options suivantes sont obsolètes, et ne devraient plus être utilisées :
       <itemizedlist>
        &mongo.writes.parameters.safe;
        &mongo.writes.parameters.timeout;
        &mongo.writes.parameters.writeconcerntimeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Si le paramètre <literal>w</literal> est défini pour reconnaître l'écriture,
   retourne un tableau associatif contenant le statut de l'insertion ("ok") ainsi
   que toutes les erreurs survenues ("err"). Sinon, retourne &true; si l'insertion
   a été envoyée avec succès, &false; sinon.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoException</classname> si les documents
   insérés sont vides, ou s'ils contiennent une clé de valeur nulle. Tenter d'insérer
   un objet avec des propriétés protégées et privées causera une erreur de
   type "clé de valeur nulle".
   
   if any inserted documents are
   empty or if they contains zero-length keys. Attempting to insert an object
   with protected and private properties will cause a zero-length key error.
  </para>
  &mongo.errors.exceptions.writeconcern;
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.5.0</entry>
       <entry>
        <para>
         Ajout de l'option <literal>"wTimeoutMS"</literal>, qui remplace
         <literal>"wtimeout"</literal>. Emets une alerte de niveau
         <constant>E_DEPRECATED</constant> lorsque <literal>"wtimeout"</literal>
         est utilisée.
        </para>
        <para>
         Ajout de l'option <literal>"socketTimeoutMS"</literal>, qui remplace
         <literal>"timeout"</literal>. Emets une alerte de niveau
         <constant>E_DEPRECATED</constant> lorsque <literal>"timeout"</literal>
         est utilisée.
        </para>
        <para>
         Emets une alerte de niveau <constant>E_DEPRECATED</constant> lorsque
         <literal>"safe"</literal> est utilisée.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.3.4</entry>
       <entry>Ajout de l'option <literal>"wtimeout"</literal>.</entry>
      </row>
      <row>
       <entry>PECL mongo 1.3.0</entry>
       <entry>Ajout de l'option <literal>"w"</literal>.</entry>
      </row>
      <row>
       <entry>PECL mongo 1.2.7</entry>
       <entry>
        Le drapeau <literal>"continueOnError"</literal> a été ajouté.
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.9</entry>
       <entry>
        <para>
         Ajout de la possibilité de passer des entiers à l'option
         <literal>"safe"</literal> (auparavant, seuls les booléens
         étaient acceptés).
        </para>
        <para>
         Ajout de l'option <literal>"fsync"</literal>.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.5</entry>
       <entry>
        Ajout du paramètre <parameter>options</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCollection::batchInsert</function></title>
   <para>
    L'insertion en masse est un moyen rapide d'insérer rapidement de nombreux
    éléments à la fois dans une base
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$users = array();
for ($i = 0; $i<100; $i++) {
  $users[] = array('username' => 'user'.$i, 'i' => $i);
}

$mongo = new MongoClient();
$collection = $mongo->my_db->users;
$collection->drop();

$collection->batchInsert($users);

foreach ($users as $user) {
  echo $user['_id']."\n"; // peuplé via l'instance de MongoId
}

$users = $collection->find()->sort(array('i' => 1));
foreach ($users as $user) {
    var_dump($user['username']);
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
4bf43ac68ead0e1971000000
4bf43ac68ead0e1971010000
4bf43ac68ead0e1971020000
...
string(5) "user1"
string(5) "user2"
string(5) "user3"
...
]]>
   </screen>
  </example>
  
  <example>
   <title>Exemple avec <function>MongoCollection::batchInsert</function> où l'on ignore
    les erreurs</title>
   <programlisting role="php">
<![CDATA[
<?php

$con = new Mongo;
$db = $con->demo;

$doc1 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010001'),
        'id' => 1,
        'desc' => "ONE",
);
$doc2 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010002'),
        'id' => 2,
        'desc' => "TWO",
);
$doc3 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010002'), // _id identique au précédent
        'id' => 3,
        'desc' => "THREE",
);
$doc4 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010004'),
        'id' => 4,
        'desc' => "FOUR",
);

$c = $db->selectCollection('c');
$c->batchInsert(
    array($doc1, $doc2, $doc3, $doc4),
    array('continueOnError' => true)
);

$docs = $c->find();
foreach ($docs as $doc) {
    var_dump($doc['desc']);
}
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
string(3) "ONE"
string(3) "TWO"
string(4) "FOUR"
]]>
   </screen>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::insert</function></member>
   <member><function>MongoCollection::update</function></member>
   <member><function>MongoCollection::find</function></member>
   <member><function>MongoCollection::remove</function></member>
   <member>Documentation interne MongoDB sur <link xlink:href="&url.mongodb.dochub.insert;">insert</link>.</member>
  </simplelist>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
