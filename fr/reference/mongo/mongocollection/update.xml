<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351075 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocollection.update" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::update</refname>
  <refpurpose>Modifie les enregistrements</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>bool</type><type>array</type></type><methodname>MongoCollection::update</methodname>
   <methodparam><type>array</type><parameter>criteria</parameter></methodparam>
   <methodparam><type>array</type><parameter>new_object</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;  
  <para>
   <variablelist>
    <varlistentry xml:id="mongocollection.update.criteria">
     <term>
      <parameter>criteria</parameter>
     </term>
     <listitem>
      <para>
       Critère de requête pour le document à mettre à jour.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry xml:id="mongocollection.update.new_object">
     <term>
      <parameter>new_object</parameter>
     </term>
     <listitem>
      <para>
       L'objet utilisé pour mettre à jour les documents correspondants.
       Il peut contenir soit les opérateurs de mise à jour (pour la modification
       de champs spécifiques), soit être un remplacement du document.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Un tableau d'options pour l'opération de mise à jour. Les options
       actuellement disponibles sont :
       <itemizedlist>
        <listitem xml:id="mongocollection.update.upsert">
         <para>
          <literal>"upsert"</literal>
         </para>
         <para>
          Si aucun document ne correspond au critère <parameter>$criteria</parameter>,
          un nouveau document sera inséré.
         </para>
         <para>
          Si un nouveau document doit être inséré, et que
          <parameter>$new_object</parameter> contient des modificateurs atomiques
          (i.e. opérateurs <literal>$</literal>), alors ces opérateurs seront appliqués
          au paramètre <parameter>$criteria</parameter> pour créer le nouveau document.
          Si <parameter>$new_object</parameter> ne contient pas de modificateur atomique,
          il sera pris tel quel en tant que document inséré. Voir l'exemple ci-dessous pour plus
          d'informations.
         </para>
        </listitem>
        <listitem xml:id="mongocollection.update.multiple">
         <para>
          <literal>"multiple"</literal>
         </para>
         <para>
          Tous les documents correspondants au $criteria
          seront mis à jour.
          <function>MongoCollection::update</function> a le comportement opposé
          de <function>MongoCollection::remove</function>: elle met à jour un
          document par défaut, pas tous les documents correspondants.
          <emphasis>Il est recommandé de toujours préciser si vous voulez mettre à
           jour un document ou plusieurs</emphasis>, la base de données pouvant
          changer son comportement par défaut dans le futur.
         </para>
        </listitem>
        &mongo.writes.parameters.fsync;
        &mongo.writes.parameters.journal;
        &mongo.writes.parameters.sockettimeoutms;
        &mongo.writes.parameters.writeconcern;
        &mongo.writes.parameters.writeconcerntimeoutms;
       </itemizedlist>
      </para>
      <para>
       Les options suivants sont obsolètes, et ne devraient plus être utilisées :
       <itemizedlist>
        &mongo.writes.parameters.safe;
        &mongo.writes.parameters.timeout;
        &mongo.writes.parameters.writeconcerntimeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un tableau contenant le statut de la mise à jour si l'option
   <literal>"w"</literal> est définie. Sinon, retourne &true;.
  </para>
  <para>
   Les champs du tableau de statut sont décrits dans la documentation
   de la méthode <function>MongoCollection::insert</function>.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  &mongo.errors.exceptions.writeconcern;
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.5.0</entry>
       <entry>
        <para>
         Ajout de l'option <literal>"wTimeoutMS"</literal>, qui remplace
         l'option <literal>"wtimeout"</literal>. Emets une alerte de niveau
         <constant>E_DEPRECATED</constant> lorsque <literal>"wtimeout"</literal>
         est utilisée.
        </para>
        <para>
         Ajout de l'option <literal>"socketTimeoutMS"</literal>, qui remplace
         l'option <literal>"timeout"</literal>. Emets une alerte de niveau
         <constant>E_DEPRECATED</constant> lorsque <literal>"timeout"</literal>
         est utilisée.
        </para>
        <para>
         Emets une alerte de niveau <constant>E_DEPRECATED</constant> lorsque
         <literal>"safe"</literal> est utilisée.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.3.4</entry>
       <entry>Ajout de l'option <literal>"wtimeout"</literal>.</entry>
      </row>
      <row>
       <entry>PECL mongo 1.3.0</entry>
       <entry>
        <para>Ajout de l'option <literal>"w"</literal>.</para>
        <para>
         Le paramètre <parameter>options</parameter> n'accepte plus de booléen
         pour indiquer un upsert. A la place, vous devez utiliser la syntaxe
         <literal>array('upsert' => true)</literal>.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.2.11</entry>
       <entry>
        Lance une alerte de niveau <constant>E_DEPRECATED</constant> lorsque
        le paramètre <parameter>options</parameter> est de type <type>scalar</type>.
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.2.0</entry>
       <entry>
        Ajout de l'option <literal>"timeout"</literal>.
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.11</entry>
       <entry>
        Se déconnecte lors d'erreurs "not master" si <literal>"safe"</literal> est utilisé.
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.9</entry>
       <entry>
        <para>
         Ajout de la possibilité de passer des entiers à l'option
         <literal>"safe"</literal> (auparavant, seuls les booléens étaient acceptés).
        </para>
        <para>
         Ajout de l'option <literal>"fsync"</literal>.
        </para>
        <para>
         Le type retourné a été modifié en un tableau contenant
         les informations de l'erreur si l'option <literal>"safe"</literal> est
         utilisé, sinon, ce sera un booléen comme auparavant.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.5</entry>
       <entry>
        Ajout de l'option <literal>"safe"</literal>.
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.1</entry>
       <entry>
        Le paramètre <parameter>options</parameter> passe de booléen à un tableau.
        En version Pre-1.0.1, le second paramètre était une valeur
        booléenne optionnelle, spécifiant un upsert.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCollection::update</function></title>
   <para>
    Ajout d'un champ adresse à un document.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->insert(array("firstname" => "Bob", "lastname" => "Jones" ));
$newdata = array('$set' => array("address" => "1 Smith Lane"));
$c->update(array("firstname" => "Bob"), $newdata);

var_dump($c->findOne(array("firstname" => "Bob")));

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(4) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["firstname"]=>
  string(3) "Bob"
  ["lastname"]=>
  string(5) "Jones"
  ["address"]=>
  string(12) "1 Smith Lane"
}
]]>
   </screen>
  </example>
  <example>
   <title>Exemples avec <function>MongoCollection::update</function> et upsert</title>
   <para>
    Les Upserts permettent de simplifier le code, vu qu'une simple ligne
    permet de créer le document s'il n'existe pas encore (en se basant sur
    le paramètre <parameter>$criteria</parameter>) ou de le mettre à jour s'il existe.
   </para>
   <para>
    Dans l'exemple suivant, <parameter>$new_object</parameter> contient un modificateur
    atomique. Vu que la collection est vide, l'upsert doit insérer un nouveau document,
    et utilisera les opérateurs de <parameter>$criteria</parameter> pour le créer.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->drop();
$c->update(
    array("uri" => "/summer_pics"),
    array('$inc' => array("page hits" => 1)),
    array("upsert" => true)
);
var_dump($c->findOne());

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#9 (0) {
  }
  ["uri"]=>
  string(12) "/summer_pics"
  ["page hits"]=>
  int(1)
}
]]>
   </screen>
   <para>
    Si <parameter>$new_object</parameter> ne contient pas de modificateurs atomiques
    (i.e. des opérateurs <literal>$</literal>), un upsert utilisera
    <parameter>$new_object</parameter> tel quel comme nouveau document.
    Ceci correspond à une mise à jour normale, vu qu'aucun modificateur atomique n'est
    utilisé, le document sera écrasé.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->drop();
$c->update(
    array("name" => "joe"),
    array("username" => "joe312", "createdAt" => new MongoDate()), 
    array("upsert" => true)
);
var_dump($c->findOne());

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#10 (0) {
  }
  ["username"]=>
  string(6) "joe312"
  ["createdAt"]=>
  object(MongoDate)#4 (0) {
  }
}
]]>
   </screen>
  </example>
  <example>
   <title>Exemple avec plusieurs <function>MongoCollection::update</function></title>
   <para>
    Par défaut, <function>MongoCollection::update</function> met uniquement à jour
    le premier document correspondant aux critères <parameter>$criteria</parameter>
    qu'il trouve. En utilisant l'option "multiple", ce comportement est redéfini.
   </para>
   <para>
    Cet exemple ajoute un champ "gift" à chaque personne possédant un anniversaire
    dans le prochain jour.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$today = array('$gt' => new MongoDate(), '$lt' => new MongoDate(strtotime("+1 day")));
$people->update(
    array("birthday" => $today),
    array('$set' => array('gift' => $surprise)),
    array("multiple" => true)
);

?>
]]>
   </programlisting>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   La <link linkend="mongo.updates">documentation PHP sur les mises à jour</link> et la
   <link xlink:href="&url.mongodb.dochub.update;">documentation core de MongoDB</link>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
