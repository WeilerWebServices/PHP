<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350988 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocursor.doquery" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCursor::doQuery</refname>
  <refpurpose>Exécute la requête Mongo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>protected</modifier> <type>void</type><methodname>MongoCursor::doQuery</methodname>
   <void/>
  </methodsynopsis>
  <warning>
   <para>
    Veuillez ne pas utiliser cette méthode.
   </para>
  </warning>
  <para>
   Cette fonction requête actuellement la base de données. Toutes les requêtes
   et les commandes passent par cette fonction. Aussi, cette fonction peut être
   surchargée pour fournir une gestion personnalisée des requêtes.
  </para>
  <para>
   Ce gestionnaire linéarise votre requête, et l'envoie à la base de données,
   puis, reçoit une réponse et la dé-linéarise. Aussi, si vous souhaitez la surcharger,
   votre code devrait appeler la fonction originale pour utiliser les
   fonctionnalités existantes (voir l'exemple ci-dessous).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;    
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &null;.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoConnectionException</classname> si
   la base de données n'a pu être atteinte.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.2.11</entry>
       <entry>
        Lance une alerte de niveau <constant>E_DEPRECATED</constant>
        lorsqu'utilisé.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples"><!-- {{{ -->
  &reftitle.examples;
  <para>
   <example xml:id="mongocursor.doquery.example.basic"><!-- {{{ -->
    <title>Exemple avec <function>MongoCursor::doQuery</function></title>
    <para>
     Vous pouvez surcharger cette fonction pour effectuer une requête
     sur un secondaire et, si elle échoue, la tenter sur le primaire.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

class MyCursor extends MongoCursor {

    protected function doQuery() {

        $this->slaveOkay();

        try {
            MongoCursor::doQuery();
        }
        catch(MongoCursorException $e) {
            $this->slaveOkay(false);
            MongoCursor::doQuery();
        }
    }
}

?>
]]>
    </programlisting>
   </example><!-- }}} -->
  </para>
 </refsect1><!-- }}} --> 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
