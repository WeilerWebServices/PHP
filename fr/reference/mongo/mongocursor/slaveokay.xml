<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350988 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocursor.slaveokay" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCursor::slaveOkay</refname>
  <refpurpose>Définit si la requête peut être effectuée sur un serveur secondaire (obsolète)</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCursor::slaveOkay</methodname>
   <methodparam choice="opt"><type>bool</type><parameter>okay</parameter><initializer>&true;</initializer></methodparam>
  </methodsynopsis>
  <warning>
   <para>
    Cette méthode est obsolète depuis la version 1.5.0. Veuillez utiliser la
    méthode <methodname>MongoCursor::setReadPreference</methodname> ainsi que
    <xref linkend="mongo.readpreferences" />.
   </para>
  </warning>
  <para>
   L'appel à cette méthode fera que la driver liera sur les secondaires si :
   <itemizedlist>
    <listitem>
     <simpara>
      Vous utilisez un jeu de réplication, et
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Vous avez créé une instance <classname>MongoClient</classname> en utilisant l'option
      <literal>"replicaSet" => "setName"</literal> et
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Il y a un secondaire en bonne santé qui peut être atteint par le driver.
     </simpara>
    </listitem>
   </itemizedlist>
   Vous pouvez savoir quel serveur a été utilisé pour cette requête en appelant
   la méthode <function>MongoCursor::info</function> après l'exécution de la requête.
   L'information sera contenue dans le champ
   <literal>server</literal>.
  </para>
  <para>
   Notez que vous devriez utiliser cette fonction même si vous n'utilisez pas
   la lecture automatique sur les secondaires. Si vous vous connectez directement
   sur un secondaire d'un jeu de réplications, vous devrez continuer d'utiliser
   cette méthode, qui informe la base de données que vous êtes prêt à recevoir
   d'anciennes données. Si vous ne l'appelez pas, vous recevrez une erreur
   de type "not master" lors de l'exécution de la requête.
  </para>
  <para>
   Cette méthode écrasera la variable statique
   <varname>MongoCursor::$slaveOkay</varname>. Elle écrasera aussi
   <function>Mongo::setSlaveOkay</function>,
   <function>MongoDB::setSlaveOkay</function> et
   <function>MongoCollection::setSlaveOkay</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>okay</parameter>
     </term>
     <listitem>
      <para>
       Si l'on peut effectuer la requête sur un serveur secondaire.
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1> 

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Returns this cursor.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoCursorException</classname>
   si le curseur a commencé à être parcouru.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCursor::slaveOkay</function></title>
   <programlisting role="php">
<![CDATA[
<?php

MongoCursor::$slaveOkay = false;

// On ne peut pas faire la requête sur un serveur secondaire
$cursor = $collection->find();

// On peut faire la requête sur un serveur secondaire
$cursor = $collection->find()->slaveOkay();

MongoCursor::$slaveOkay = true;

// On peut faire la requête sur un serveur secondaire
$cursor = $collection->find();

// On ne peut pas faire la requête sur un serveur secondaire
$cursor = $collection->find()->slaveOkay(false);

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso"><!-- {{{ -->
  &reftitle.seealso;
  <simplelist>
   <member><xref linkend="mongo.readpreferences" /></member>
   <member><methodname>MongoCursor::setReadPreference</methodname></member>
   <member><methodname>MongoCursor::getReadPreference</methodname></member>
  </simplelist>
 </refsect1><!-- }}} -->

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.5.0</entry>
       <entry>
        Cette méthode est devenue obsolète, en faveur de la méthode
        <methodname>MongoCursor::setReadPreference</methodname> et <xref
        linkend="mongo.readpreferences" />.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
