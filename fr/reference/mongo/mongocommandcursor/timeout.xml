<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335760 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocommandcursor.timeout" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCommandCursor::timeout</refname>
  <refpurpose>Défini le délai d'attente maximal côté client pour cette commande</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCommandCursor</type><methodname>MongoCommandCursor::timeout</methodname>
   <methodparam><type>int</type><parameter>ms</parameter></methodparam>
  </methodsynopsis>
  <para>
   Un délai d'attente peut être défini à n'importe quel moment, et va impacter
   la récupération des prochaines données associée avec ce curseur, incluant
   la récupération de plus de résultats depuis la base de données.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>ms</parameter>
    </term>
    <listitem>
     <para>
      Le nombre de millisecondes que ce curseur doit attente une réponse.
      Utilisez la valeur <literal>-1</literal> pour attendre indéfiniement.
      Par défaut, le curseur attendra <varname>30000</varname> millisecondes
      (30 secondes).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Ce curseur.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Une exception de type <classname>MongoCursorTimeoutException</classname>
   sera lancée si la récupération des données prend plus de temps
   que le délai spécifié.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoCommandCursor::timeout</function></title>
   <para>
    Dans l'exemple suivant, le driver va attendre 60 secondes la première
    réponse de la commande d'aggrégation. Il va également attendre 60 secondes
    chaque fois que le serveur doit être contacté pour l'obtention d'informations.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient;
$col = $m->database->collection;

$pipeline = [ … ];

$cursor = $col->aggregateCursor( $pipeline );
$cursor->timeout( 60000 ); // 60 secondes

foreach ( $cursor as $result ) {
   …
}

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Ce mécanisme ne va pas annuler les opérations longues du serveur
    MongoDB ; il ne va qu'informer le driver qu'il ne doit plus attendre une
    réponse, et lancer une exception de type <classname>MongoCursorTimeoutException</classname>
    après le délai spécifié. Si vous devez spécifier un délai d'attente maximal
    côté serveur pour une commande, vous devez utiliser l'option
    <literal>maxTimeMS</literal> de la méthode
    <methodname>MongoCollection::aggregateCursor</methodname>.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::aggregateCursor</function></member>
   <member><methodname>MongoCursorInterface::timeout</methodname></member>
   <member>L'option <literal>socketTimeoutMS</literal> de la méthode <function>MongoClient::__construct</function></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
