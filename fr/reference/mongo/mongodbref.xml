<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338645 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<phpdoc:classref xml:id="class.mongodbref" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>&class.theclass; <classname>MongoDBRef</classname></title>
 <titleabbrev>MongoDBRef</titleabbrev>
 
 <partintro>

  <warning>
   &mongo.noalternative.class.note;
   <para>
    Le concept des références de base de données, et par conséquence cette classe,
    est obsolète dans la base de données.
   </para>
  </warning>
  
  <!-- {{{ MongoGridfsCursor intro -->
  <section xml:id="mongodbref.intro">
   &reftitle.intro;
   <para>
    Cette classe sert à créer des liens légers entre des
    objets de différentes colllections.
   </para>
   <para>
    <emphasis>Motivation</emphasis> : Supposez que vous voulez lier un document
    dans une autre collection. La façon la plus facile est de créer un champ
    dans le document courant. Par exemple, si vous avez une collection "people"
    et une collection "addresses", vous devriez vouloir créer un lien entre
    chaque document d'une personne et chaque document d'adresses :
    <example>
     <title>Liage des documents</title>
     <programlisting role="php">
<![CDATA[
<?php

$people = $db->people;
$addresses = $db->addresses;

$myAddress = array("line 1" => "123 Main Street",
    "line 2" => null,
    "city" => "Springfield",
    "state" => "Vermont",
    "country" => "USA");

// Sauvegarde de l'adresse
$addresses->insert($myAddress);

// Sauvegarde une personne avec une référence vers l'adresse
$me = array("name" => "Fred", "address" => $myAddress['_id']);
$people->insert($me);

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Par la suite, vous pouver retrouver l'adresse d'une personne en interrogeant
    la collection "addresses" avec un <classname>MongoId</classname> sauvegardé
    dans la collection "people".
   </para>
   <para>
    Supposez maintenant que vous avez un cas plus général, où vous ne savez
    pas quelle collection (ou bien quelle base de données) contient le document
    référencé. La classe <classname>MongoDBRef</classname> est un bon choix dans ce
    cas, vu qu'elle a un format commun que tous les drivers et bases de données
    comprennent.
   </para>
   <para>
    Si chaque personne a une liste de choses qu'elles aiment, pouvant venir
    de plusieurs collections, comme des "hobbies", "sports", "books", etc.,
    vous pouvez utiliser la classe <classname>MongoDBRef</classname> pour garder
    une trace des collections fournissant ces choses :
    <example>
     <title>Création de lien MongoDBRef</title>
     <programlisting role="php">
<![CDATA[
<?php

$people = $db->selectCollection("people");

// Les modèles de train sont dans la collection "hobbies"
$trainRef = MongoDBRef::create("hobbies", $modelTrains['_id']);
// Le foot dans la collection "sports"
$soccerRef = MongoDBRef::create("sports", $soccer['_id']);

// Maintenant, vous connaissez la collection dont les éléments du tableau "likes"
// proviennent, au moment où vous souhaitez récupérer les documents associés
$people->insert(array("name" => "Fred", "likes" => array($trainRef, $soccerRef)));

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    On peut représenter les références des bases de données comme des liens: elles donnent
    l'adresse unique d'un document, mais elles ne le chargent pas et ne suivent pas les
    lien/référence automatiquement.
   </para>
   <para>
    Une référence de base de données est juste un tableau associatif, pas une instance de
    <classname>MongoDBRef</classname>, cette classe est donc un peu différente des autres
    classes de tyes de données, elle ne contient que des méthodes statiques pour
    manipuler les références de bases de données.
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="mongodbref.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoDBRef</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoDBRef</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongodbref')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->
   
  </section>
  
  <section>
   &reftitle.seealso;
    <para>
     Documentation de MongoDB <link xlink:href="&url.mongodb.dochub.dbrefs;">concernant les
     références de bases de données</link>.
    </para>
  </section>
 </partintro>
 
 &reference.mongo.entities.mongodbref;
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->