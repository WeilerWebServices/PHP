<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350988 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongodb.command" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB::command</refname>
  <refpurpose>Exécute une commande de base de données</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>MongoDB::command</methodname>
   <methodparam><type>array</type><parameter>command</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">hash</parameter></methodparam>
  </methodsynopsis>
  <para>
   Tout ce qui n'est pas une opération CRUD peut être effectué avec une commande
   de base de données. Besoin de connaitre la version de la base de données ?
   Il y a une commande pour cela. Besoin de faire une agrégation ? Il y a une
   commande pour cela. Besoin d'activer l'historisation ? Vous voyez l'idée ?
  </para>
  <para>
   Cette méthode est équivalente à :
   <programlisting role="php">
<![CDATA[
<?php

public function command($data) {
    return $this->selectCollection('$cmd')->findOne($data);
}

?>
]]>
   </programlisting>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>command</parameter>
     </term>
     <listitem>
      <para>
       La requête à envoyer.
      </para>
     </listitem>
    </varlistentry>  
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Un tableau d'options pour la création de l'index.
       Actuellement, les options disponibles sont :
       <itemizedlist>
        &mongo.writes.parameters.sockettimeoutms;
       </itemizedlist>
      </para>
      <para>
       Les options suivantes sont obsolètes et ne doivent plus
       être utilisées :
       <itemizedlist>
        &mongo.writes.parameters.timeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>hash</parameter>
     </term>
     <listitem>
      <para>
       Défini le hash de connexion du serveur qui a exécuté la commande.
       Lorsque le résultat de la commande  permet de créer un
       <classname>MongoCommandCursor</classname>, le hash est prévu pour être
       passé à la méthode <function>MongoCommandCursor::createFromDocument</function>.
      </para>
      <para>
       Le hash peut aussi correspondre à une connexion retournée depuis
       <function>MongoClient::getConnections</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.5.0</entry>
       <entry>
        <para>
         Renommage de l'option <literal>"timeout"</literal>
         en <literal>"socketTimeoutMS"</literal>. Emets une
         alerte de type <constant>E_DEPRECATED</constant>
         lorsque <literal>"timeout"</literal> est utilisée.
        </para>
        <para>
         Ajout du paramètre <literal>hash</literal> par référence.
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.2.0</entry>
       <entry>
        Ajout du paramètre <literal>options</literal> avec une
        seule option : <literal>"timeout"</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Retourne la réponse de la base de données. Toutes les réponses de la
   base de données sont composées d'au maximum un document, ce qui signifie
   que le résultat d'une commande de base de données ne peut jamais excéder
   les 16 Mo. La structure du document résultat dépend de la commande utilisée,
   mais la plupart des résultats auront le champ <literal>ok</literal> pour indiquer
   le succès ou l'échec de l'opération, et le champ <literal>results</literal>
   contenant un tableau de chaque document résultant.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoDB::command</function> et "distinct"</title>
   <para>
    Trouver tous les valeurs distinctes pour une clé.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$people = $db->people;

$people->insert(array("name" => "Joe", "age" => 4));
$people->insert(array("name" => "Sally", "age" => 22));
$people->insert(array("name" => "Dave", "age" => 22));
$people->insert(array("name" => "Molly", "age" => 87));

$ages = $db->command(array("distinct" => "people", "key" => "age"));

foreach ($ages['values'] as $age) {
    echo "$age\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
4
22
87
   </screen>
  </example>
  <example>
   <title>Exemple avec <function>MongoDB::command</function> et "distinct"</title>
   <para>
    Récupère toutes les valeurs distinctes pour une clé, pour laquelle
    la valeur est supérieure ou égale à 18.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$people = $db->people;

$people->insert(array("name" => "Joe", "age" => 4));
$people->insert(array("name" => "Sally", "age" => 22));
$people->insert(array("name" => "Dave", "age" => 22));
$people->insert(array("name" => "Molly", "age" => 87));

$ages = $db->command(
    array(
        "distinct" => "people",
        "key" => "age",
        "query" => array("age" => array('$gte' => 18))
    )
);  

foreach ($ages['values'] as $age) {
    echo "$age\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
22
87
   </screen>
  </example>
  <example>
   <title>Exemple avec <function>MongoDB::command</function> et MapReduce</title>
   <para>
    Récupérer tous les utilisateurs avec au moins un événement "sale",
    et savoir le nombre de fois chacun de ces utilisateurs ont eu une vente.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// Document d'événement simple
$events->insert(array("user_id" => $id,
    "type" => $type,
    "time" => new MongoDate(),
    "desc" => $description));

// Construit les fonctions map et reduce
$map = new MongoCode("function() { emit(this.user_id,1); }");
$reduce = new MongoCode("function(k, vals) { ".
    "var sum = 0;".
    "for (var i in vals) {".
        "sum += vals[i];".
    "}".
    "return sum; }");

$sales = $db->command(array(
    "mapreduce" => "events",
    "map" => $map,
    "reduce" => $reduce,
    "query" => array("type" => "sale"),
    "out" => array("merge" => "eventCounts")));

$users = $db->selectCollection($sales['result'])->find();

foreach ($users as $user) {
    echo "{$user['_id']} had {$user['value']} sale(s).\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
User 47cc67093475061e3d9536d2 had 3 sale(s).
User 49902cde5162504500b45c2c had 14 sale(s).
User 4af467e4fd543cce7b0ea8e2 had 1 sale(s).
   </screen>
   <note>
    <title>Utilisation de <classname>MongoCode</classname></title>
    <para>
     Cet exemple utilise la méthode <classname>MongoCode</classname>,
     qui prend également comme argument le scope. Cependant, actuellement,
     Mongo ne supporte pas l'utilisation d'un scope dans MapReduce. Si vous voulez
     utiliser des variables définies côté client dans les fonctions MapReduce,
     vous pouvez les ajouter au scope global en utilisant le champ optionnel scope
     avec la commande de la base de données. Voir la
     <link xlink:href="&url.mongodb.dochub.mapreduce;">documentation
      de MapReduce</link> pour plus d'informations.
    </para>
   </note>
   <note>
    <title>L'argument <literal>out</literal></title>
    <para>
     Avant la version 1.8.0, l'argument <literal>out</literal> était optionnel.
     Si vous ne l'utilisiez pas, les résultats de MapReduce étaient écrits dans une
     collection temporaire, qui était supprimée lors de la fermeture de la collection.
     En version 1.8.0+, l'argument <literal>out</literal> est obligatoire.
     Reportez-vous à la
     <link xlink:href="&url.mongodb.dochub.mapreduce;">documentation sur MapReduce</link>
     pour plus d'informations.
    </para>
   </note>
  </example>

  <example>
   <title>Exemple avec la commande <function>MongoDB::command</function> "geoNear"</title>
   <para>
    Cet exemple montre l'utilisation de la commande geoNear.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient();
$d = $m->demo;
$c = $d->poiConcat;

$r = $d->command(array(
    'geoNear' => "poiConcat",      // Recherche dans la collection poiConcat
    'near' => array(-0.08, 51.48), // Recherche à proximité de 51.48°N, 0.08°E
    'spherical' => true,           // Active la recherche sphérique
    'num' => 5,                    // Retourne au maximum 5 documents
));
print_r($r);
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>MongoCollection::aggregate</methodname></member>
    <member><methodname>MongoCollection::findAndModify</methodname></member>
    <member><methodname>MongoCollection::group</methodname></member>
   </simplelist>
  </para>
  <para>
   La documentation principale MongoDB sur les
   <link xlink:href="&url.mongodb.docs.command;">commandes de base de
    données</link>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
