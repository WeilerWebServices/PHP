<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350988 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongodb.execute" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB::execute</refname>
  <refpurpose>Exécute le code JavaScript sur la base de données [Obsolète]</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>MongoDB::execute</methodname>
   <methodparam><type>mixed</type><parameter>code</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>args</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <warning>
   <para>
    La commande <link xlink:href="&url.mongodb.docs.command;eval/">eval</link>,
    que cette méthode appelle, est obsolète en MongoDB 3.0 et supérieur.
   </para>
  </warning>
  <para>
   Le serveur de base de données Mongo exécute un moteur Javascript.
   Cette méthode vous permet d'exécuter du Javascript arbitraire sur la base
   de données. Ceci peut être utile si vous voulez toucher un petit
   nombre de collections, ou pour traiter quelques résultats issus de la
   base de données afin de réduire la quantitié de données à envoyer au client.
  </para>
  <para>
   L'exécution de Javascript dans la base de données pose un verrou en
   écriture, signifiant que les autres opérations sont bloquées.
   Gardez-le bien à l'esprit avant d'exécuter un script conséquant.
  </para>
  <para>
   Ceci est un wrapper pour la commande
   <link xlink:href="&url.mongodb.docs.command;eval/">eval</link>
   de base de données. Cette méthode est équivalente à :
   <programlisting role="php">
<![CDATA[
<?php

public function execute($code, $args) {
    return $this->command(array('eval' => $code, 'args' => $args));
}

?>
]]>
   </programlisting>
  </para>
  <para>
   MongoDB implique une instruction de retour si vous avez une requête
   unique sur une seule ligne. Ceci peut causer des comportements
   non-intuitifs. Par exemple, l'exemple suivant retournera "foo" :
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$db->execute('"foo";');

?>
]]>
  </programlisting>
  <para>
   Cependant, ceci retournera &null;:
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$db->execute('"bar"; "foo";'); // plus d'une requête

$db->execute('db.foo.count(
);'); // plus d'une ligne

?>
]]>
  </programlisting>
  <para>
   Afin d'éviter tout comportement non-désiré, il convient de ne pas
   laisser MongoDB choisir ce qu'il doit retourner, mais explicitement
   définir une valeur de retour. Dans l'exemple ci-dessus, nous pouvons
    le modifier comme ceci :
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$db->execute('"bar"; return "foo";');

$db->execute('return db.foo.count(
);');

?>
]]>
  </programlisting>
  <para>
   Maintenant, la première requête retournera "foo", et la seconde
   retournera un comptage de la collection "foo".
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>code</parameter>
     </term>
     <listitem>
      <para>
       un objet <classname>MongoCode</classname> ou une chaîne
       a exécuter.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>args</parameter>
     </term>
     <listitem>
      <para>
       Les arguments à passer à la requête <literal>code</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne le résultat de l'évaluation.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Exemple avec <function>MongoDB::execute</function></title>
   <programlisting role="php">
<![CDATA[
<?php

$response = $db->execute("function() { return 'Bonjour le monde !'; }");
echo $response['retval'];

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Bonjour le monde !
   </screen>
  </example>
  <example>
   <title>Exemple avec <function>MongoDB::execute</function></title>
   <para>
    Le tableau optionnel de paramètres sera passé à la fonction Javascript.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$response = $db->execute("function(greeting, name) { return greeting+', '+name+'!'; }", array("Au revoir", "Joe"));
echo $response['retval'];

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Au revoir, Joe!
   </screen>
  </example>
  <example>
   <title>Exemple de porté</title>
   <para>
    Si un objet <classname>MongoCode</classname> est utilisé à la place d'une chaîne
    comme premier paramètre, un scope peut être passé dans lequel le Javascript
    sera exécuté.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$func =
    "function(greeting, name) { ".
        "return greeting+', '+name+', dit '+greeter;".
    "}";
$scope = array("greeter" => "Fred");

$code = new MongoCode($func, $scope);

$response = $db->execute($code, array("Au revoir", "Joe"));
echo $response['retval'];

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
Au revoir, Joe, dit Fred
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>La documentation MongoDB sur la <link xlink:href="&url.mongodb.docs.command;eval/">commande eval</link></member>
  </simplelist>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.7.0</entry>
       <entry>
        Cette méthode est devenue obsolète, sachant qu'un résultat d'une
        commande <link xlink:href="&url.mongodb.docs.command;eval/">eval</link>
        sous-jacente est devenu obsolète en MongoDB 3.0+.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
