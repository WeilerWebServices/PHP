<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338645 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.mongominkey" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La classe MongoMinKey</title>
 <titleabbrev>MongoMinKey</titleabbrev>

 <partintro>

  <warning>
   &mongo.alternative.class.note;
   <simplelist role="alternatives">
    <member><classname>MongoDB\BSON\MinKey</classname></member>
   </simplelist>
  </warning>

<!-- {{{ MongoBinData intro -->
  <section xml:id="mongominkey.intro">
   &reftitle.intro;
   <para>
    <classname>MongoMinKey</classname> est un type spécial utilisé par la
    base de données qui est évalué comme étant le plus petit des autres types BSON.
    Aussi, si une requête est triée par ce genre de champs dans un ordre
    ascendant, n'importe quel document possédant le type
    <classname>MongoMinKey</classname> sera retourné en premier.
   </para>
   <para>
    <classname>MongoMinKey</classname> n'a pas de champ associé, de méthode ou
    de constante. C'est la plus petite valeur que vous pouvez insérer dans la base
    de données.
   </para>
   <note>
    <simpara>
     <classname>MongoMinKey</classname> est utilisé en interne par MongoDB pour
     l'indexation, et le partage. Il n'y a générallement aucune raison d'utiliser
     cette classe dans une application.
    </simpara>
   </note>
  </section>
<!-- }}} -->

  <section xml:id="mongominkey.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoMinKey</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoMinKey</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="mongominkey.example">
   <title>Exemple avec <classname>MongoMinKey</classname> comme valeur</title>
   <programlisting role="php">
<![CDATA[
<?php

$collection->insert(array("task" => "lunch", "doBy" => new MongoMinKey));
$collection->insert(array("task" => "staff meeting", "doBy" => new MongoDate(strtotime("+4 days"))));

$cursor = $collection->find()->sort(array("doBy" => 1));

?>
]]>
   </programlisting>
   <para>
    Le curseur retournera le document "lunch", puis, le document "staff meeting".
    Le document "lunch" sera toujours retourné en premier, quelque soit les
    autres documents de la collection (tant qu'un autre document n'aura pas
    été ajouté avec un <classname>MongoMinKey</classname> dans le champ "doBy").
   </para>
  </section>

  <simplesect role="seealso">
   &reftitle.seealso;
   <simplelist>
    <member><classname>MongoMaxKey</classname></member>
   </simplelist>
  </simplesect>
 </partintro>

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
