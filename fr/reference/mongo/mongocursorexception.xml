<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334826 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<phpdoc:classref xml:id="class.mongocursorexception" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>&class.theclass; <classname>MongoCursorException</classname></title>
 <titleabbrev>MongoCursorException</titleabbrev>

 <partintro>

  <!-- {{{ MongoCursorException intro -->
  <section xml:id="mongocursorexception.intro">
   &reftitle.intro;
   <para>
    Émise lors d'un accès incorrect à un curseur ou lors de la réception
    d'une erreur au moment de la réponse. Notez que cette exception peut être
    émise par n'importe quelle requête de base de données qui reçoit une réponse,
    et pas uniquement les requêtes. Les commandes d'écriture, et toutes les autres
    opérations qui envoient des informations à la base de données et attendent une
    réponse peuvent émettre une exception de type <classname>MongoCursorException</classname>.
    La seule exception à ce principe est <literal>new MongoClient()</literal> (création d'une
    nouvelle connexion), qui n'émet que des exceptions de type
    <classname>MongoConnectionException</classname>.
   </para>

   <para>
    Cette exception retourne un message d'erreur spécifique pour aider dans le diagnostique
    du problème ainsi qu'un code erreur numérique associé avec la cause de l'exception.
   </para>

   <para>
    Par exemple, supposez que vous tentiez d'insérer 2 documents avec le même _id :
    <programlisting role="php">
<![CDATA[
<?php

try {
    $collection->insert(array("_id" => 1), array("w" => 1));
    $collection->insert(array("_id" => 1), array("w" => 1));
}
catch (MongoCursorException $e) {
    echo "message d'erreur : ".$e->getMessage()."\n";
    echo "code de l'erreur : ".$e->getCode()."\n";
}

?>
]]>
    </programlisting>
    Ceci affichera quelque chose comme :
    <programlisting role="txt">
<![CDATA[
message d'erreur : E11000 duplicate key error index: foo.bar.$_id_  dup key: { : 1 }
code de l'erreur : 11000
]]>
    </programlisting>
    Notez que le code erreur MongoDB (11000) est utilisé pour le code erreur PHP. Le driver
    PHP utilise le code erreur natif lorsque c'est possible.
   </para>

   <para>
    Voici une liste des erreurs, codes et causes survenant le plus fréquemment.
    Les erreurs exactes sont en italiquue, les erreurs dont le message varie 
    sont décrites en oblique.
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <literal>cannot modify cursor after beginning iteration</literal>
     </para>
     <para>
      Code : 0
     </para>
     <para>
      Vous appelez une méthode qui affecte la requête après l'exécuter. Remettez à zéro
      le curseur et rééssayez.
     </para>
     <para>
      Un exemple :
      <programlisting role="php">
<![CDATA[
<?php

try {
    $cursor = $collection->find();
    var_dump($cursor->getNext());

    // getNext() requête la base de données, il est trop tard pour définir une limite
    $cursor->limit(1);
}
catch (MongoCursorException $e) {
    echo "message d'erreur : ".$e->getMessage()."\n";
    echo "code de l'erreur : ".$e->getCode()."\n";
}

// Ceci fonctionnera :
$cursor->getNext();
$cursor->reset();
$cursor->limit(1);

?>
]]>
      </programlisting>
     </para>
    </listitem>
    
    <listitem>
     <para>
      Get next batch send errors
     </para>
     <para>
      Code : 1
     </para>
     <para>
      Ne peut envoyer la requête à la base. Vérifiez l'état su serveur et du réseau.
     </para>
    </listitem>
    
    <listitem>
     <para>
      <literal>cursor not found</literal>
     </para>
     <para>
      Code : 2
     </para>
     <para>
      Le pilote a tenté de récupérer plus de données depuis la base, mais celle-ci n'avait
      pas assez d'enregistrements. Ceci signifie en général que le curseur a expiré coté serveur
      après quelques minutes d'inactivité, la base va détruire un curseur. (Voyez
      <function>MongoCursor::immortal</function> pour plus d'informations).
     </para>
     <para>
      Un exemple :
      <programlisting role="php">
<![CDATA[
<?php

try {
    $cursor = $collection->find();
    $cursor->getNext();

    // attendre pendant 15 minutes
    sleep(60*15);

    while ($cursor->hasNext()) {
        $cursor->getNext();
    }
}
catch (MongoCursorException $e) {
    echo "message d'erreur : ".$e->getMessage()."\n";
    echo "code de l'erreur : ".$e->getCode()."\n";
}

?>
]]>
      </programlisting>
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>cursor->buf.pos is null</literal>
     </para>
     <para>
      Code : 3
     </para>
     <para>
      Ceci peut indiquer que vous n'avez plus de RAM de disponible ou
      bien d'autres circonstances extraordinaires.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't get response header</literal>
     </para>
     <para>
      Code : 4
     </para>
     <para>
      Une erreur commune si la base de données ou le réseau n'est plus disponible.
      Cela signifie que le driver ne peut récupérer une réponse depuis la connexion.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>no db response</literal>
     </para>
     <para>
      Code : 5
     </para>
     <para>
      Ceci n'est pas toujours une erreur, par exemple, la commande
      "shutdown" émise à la base de données ne retourne aucune réponse.
      Cependant, si vous attendez une réponse, cela signifie que
      la base de données n'a pas réussi à la fournir.
     </para>
    </listitem>
    
    <listitem>
     <para>
      <literal>bad response length: %d, did the db assert?</literal>
     </para>
     <para>
      Code : 6
     </para>
     <para>
      Ceci signifie que la base de données dit que sa réponse est 
      inférieure à 0. Cela signifie généralement qu'une erreur
      réseau ou une corruption de la base de données est survenue.
     </para>
    </listitem>
    
    <listitem>
     <para>
      <literal>incomplete header</literal>
     </para>
     <para>
      Code : 7
     </para>
     <para>
      Très peu commun. Apparait si la réponse de la base commence de manière correcte, mais
      échoue en plein milieu. Probablement un problème réseau.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>incomplete response</literal>
     </para>
      <para>
      Code : 8
     </para>
     <para>
      Très rare. Survient si la réponse de la base de données a commencé avec succès,
      mais s'est interrompue avant la fin. Probablement un problème réseau.
     </para>
    </listitem>
    
    <listitem>
     <para>
      <literal>couldn't find a response</literal>
     </para>
     <para>
      Code : 9
     </para>
     <para>
      Si la réponse est en cache mais ne peut être trouvée.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>error getting socket</literal>
     </para>
     <para>
      Code : 10
     </para>
     <para>
      Le socket a été fermé ou a rencontré un problème. Le pilote devrait se reconnecter
      automatiquement (si possible) lors de l'opération suivante.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't find reply, please try again</literal>
     </para>
     <para>
      Code : 11
     </para>
     <para>
      Le pilote sauvegarde toutes les réponses de la base qu'il ne peut associer immédiatement
      à une requête. Cette exception arrive lorsque le pilote a déja passé la réponse à
      votre requête mais ne peut la trouver dans son cache.
     </para>
    </listitem>
    
    <listitem>
     <para>
      <literal>error getting database response: errstr</literal>
     </para>
     <para>
      <literal>WSA error getting database response: errstr</literal>
     </para>
     <para>
      "errstr" est une erreur IO, repporté directement depuis le socket C
      du sous-système. Sous Windows, le message d'erreur est préfixé par "WSA".
     </para>
    </listitem>
    
    <listitem>
     <para>
      <literal>Timeout error</literal>
     </para>
     <para>
      Code : 13
     </para>
     <para>
      Erreur lors de l'attente qu'une requête s'exécute.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't send query: &lt;various&gt;</literal>
     </para>
     <para>
      Code : 14
     </para>
     <para>
      Erreur de socket C à l'envoi.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>max number of retries exhausted, couldn't send query</literal>
     </para>
     <para>
      Code : 19
     </para>
     <para>
      Le driver retentera automatiquement les requêtes (et non les commandes)
      un nombre de fois défini si la première tentative échoue pour certaines raisons.
      Ceci peut produire quelques exceptions lors du jeu de réplication (alors que d'autres
      passeront normalement), ainsi que quelques erreurs réseaux.
     </para>
     <para>
      Ceci peut aussi survenir en raison du driver qui n'arrive pas à se reconnecter
      à la base de données (si, par exemple, la base de données n'est plus joignable).
     </para>
     <para>
      Version 1.2.2+.
     </para>
    </listitem>
   </itemizedlist>
  </section>
  
  <section>
   <title>Erreur de la base de données</title>
   <para>
    Les erreurs de la base devraient toujours déclencher une
    <classname>MongoCursorExceptions</classname>. Les
    messages d'erreur et les codes sont envoyés directement depuis la base et devraient se
    retrouver dans le journal de la base de données.
   </para>

   <para>
    Voici quelques erreurs classiques de base de données:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <literal>E11000 duplicate key error index: foo.bar.$X  dup key: { /* ... */ }</literal>
     </para>
     <para>
      Code: 11000
     </para>
     <para>
      Erreur de clé dupliquée.
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>not master</literal>
     </para>
     <para>
      Codes: 10107, 13435, and 10058
     </para>
     <para>
      Erreurs not master, pipée vers la base. Chacune causera une déconnection du pilote
      et sa recherche d'un nouveau primaire. L'erreur en failover peut ne pas être de type
      "not master", en fonction du déclenchement du changement de primaire.
     </para>
    </listitem>
   </itemizedlist>

  </section>
  <!-- }}} -->

  <section xml:id="mongocursorexception.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoCursorException</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoCursorException</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>MongoException</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->

   </classsynopsis>
   <!-- }}} -->

  </section>

 </partintro>

 &reference.mongo.entities.mongocursorexception;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
