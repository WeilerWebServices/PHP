<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338152 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mongo.tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Tutoriel</title>
 <warning>
  &mongo.deprecated.note;
 </warning>
 <para>
  Voici le driver officiel MongoDB pour PHP.
 </para>
 <para>
  Vous trouverez dans ce chapitre quelques rapides exemples montrant la façon
  de se connecter, d'insérer des documents, de requêter des documents, de traverser
  des jeux de résultats, et de se déconnecter d'une base de données MongoDB.
  Vous trouverez encore plus de détails dans chaque étape de ce tutoriel.
 </para>
 <example xml:id="mongo.tutorial.basics">
  <programlisting role="php">
<![CDATA[
<?php

// connexion
$m = new MongoClient();

// sélection d'une base de données
$db = $m->comedy;

// sélectionne une collection (analogue à une table de base de données relationnelle)
$collection = $db->cartoons;

// ajoute un enregistrement
$document = array( "title" => "Calvin and Hobbes", "author" => "Bill Watterson" );
$collection->insert($document);

// ajoute un autre enregistrement, avec une façon différente d'insertion
$document = array( "title" => "XKCD", "online" => true );
$collection->insert($document);

// récupère tout de la collection
$cursor = $collection->find();

// traverse les résultats
foreach ($cursor as $document) {
    echo $document["title"] . "\n";
}

?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
Calvin and Hobbes
XKCD
]]>
  </screen>
 </example>
 
 
 <section xml:id="mongo.tutorial.connecting">
  <title>Création d'une connexion</title>
  <para>
   Pour se connecter à un serveur de base de données, utilisez une
   des façons suivantes :
  </para>
  
  <example xml:id="mongo.tutorial.connecting-example">
   <programlisting role="php">
<![CDATA[
<?php

$connection = new MongoClient(); // Connexion à localhost:27017
$connection = new MongoClient( "mongodb://example.com" ); // Connexion à un hôte distant (en utilisant le port par défaut : 27017)
$connection = new MongoClient( "mongodb://example.com:65432" ); // connect to a remote host at a given port

?>
]]>
   </programlisting>
  </example>
  <para>
   Vous n'avez pas à vous déconnecter explicitement de la base de données.
   Le driver utilise les connexions persistentes, et ré-utilisera les connexions
   déjà existantes.
  </para>
  <section xml:id="mongo.tutorial.connecting.seealso">
   <title>Voir aussi</title>
   <para>
    La chapitre sur les
    <link linkend="mongo.connecting">connexion</link>
    couvre les différents types de connexions.
   </para>
   <para>
    La documentation de l'API de la classe
    <classname>MongoClient</classname> et de la classe
    <function>MongoClient::__construct</function> permet d'avoir une
    bonne compréhension des options possibles avec bons nombres
    d'exemples.
   </para>
  </section>
 </section>

  <section xml:id="mongo.tutorial.selectdb">
   <title>Sélection d'une base de données</title>
   <para>
    Pour sélectionner une base de données, utilisez :
   </para>
   <example xml:id="mongo.tutorial.selectdb-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$db = $connection->dbname;
?>
]]>
   </programlisting>
   </example>
   <para>
    La base de données n'a pas besoin d'avoir été créée auparavant ;
    vous pouvez simplement créer une nouvelle base de données en tentant
    de la sélectionner.
   </para>
   <para>
    Attention aux fautes de frappe ! Vous pouvez
    par inadvertance créer une nouvelle base de données, ce qui peut
    rendre plus compliqué de trouver la cause d'une erreur
    (ici, <literal>name</literal> est mal écrit :
    <literal>anme</literal> dans la seconde sélection) :
    
    <example xml:id="mongo.tutorial.selectdb.typo">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();

$db = $connection->mybiglongdbname;
// Plus de codes ici...

$db = $connection->mybiglongdbanme;
// Maintenant, vous êtes connecté à une base de données différente !

?>
]]>
    </programlisting>
    </example>
   </para>
   <section xml:id="mongo.tutorial.selectdb.seealso">
    <title>Voir aussi</title>
    <para>
     La documentation de l'API de la classe
     <classname>MongoDB</classname> contient plus d'informations
     sur les objets de bases de données.
    </para>
   </section>
  </section>
  
  <section xml:id="mongo.tutorial.collection">
   <title>Sélection d'une collection</title>
   <para>
    Récupérer une connexion utilise la même syntaxe que de récupérer
    une base de données :
   </para>
   <example xml:id="mongo.tutorial.collection-example">
    <programlisting role="php">
<![CDATA[
<?php

$connection = new MongoClient();
$db = $connection->baz;

// Sélection d'une collection
$collection = $db->foobar;

// ou, sélection direct d'une base de données et d'une collection :
$collection = $connection->baz->foobar;

?>
]]>
   </programlisting>
   </example>
   <para>
    Une collection est similaire à une table (si vous êtes familier avec les
    bases de données relationnelles).
   </para>
   <section xml:id="mongo.tutorial.collection.seealso">
    <title>Voir aussi</title>
    <para>
     La documentation de l'API de la classe
     <classname>MongoCollection</classname> contient
     plus d'informations sur les objets de collection.
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.insert">
   <title>Insertion d'un document</title>
   <para>
    Les tableaux associatifs sont les objets basiques qui peuvent être insérés
    dans une collection d'une base de données. Un document "document" peut
    être :
   </para>
   <example xml:id="mongo.tutorial.insert-data-example">
    <programlisting role="php">
<![CDATA[
<?php
$doc = array(
    "name" => "MongoDB",
    "type" => "database",
    "count" => 1,
    "info" => (object)array( "x" => 203, "y" => 102),
    "versions" => array("0.9.7", "0.9.8", "0.9.9")
);
?>
]]>
   </programlisting>
   </example>
   <para>
    Notez que vous pouvez avoir des tableaux et des objets imbriqués.
    Le driver va toujours stocker un tableau associatif sous forme d'objet
    dans la base de données. Un tableau indexé numériquement est stocké
    sous forme de tableau dans le cas où les clés commencent à 0,
    et ne sont pas interrompues, et sous forme d'objet si les clés du tableau
    ne commencent pas par 0 ou ont une interruption (e.g. : <literal>0, 1, 4, 5</literal>).
   </para>
   <para>
    Pour insérer ce document, utilisez la méthode
    <function>MongoCollection::insert</function> :
   </para>
   <example xml:id="mongo.tutorial.insert-example-2">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$collection->insert( $doc );
?>
]]>
   </programlisting>
   </example>
   <section xml:id="mongo.tutorial.insert.seealso">
    <title>Voir aussi</title>
    <para>
     La documentation de l'API sur la méthode
     <function>MongoCollection::insert</function>
     contient plus d'informations sur l'insertion
     des données.
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.findone">
   <title>
    Trouver un document en utilisant la méthode
    <function>MongoCollection::findOne</function>
   </title>
   <para>
    Pour montrer que le document inséré dans l'étape précédente est bien stocké
    dans la base de données, nous pouvons simplement utiliser la méthode
    <function>MongoCollection::findOne</function> pour récupérer
    une seule document de la collection. Cette méthode est utile dans les cas où
    il n'y a qu'un seul document correspondant aux critères ou bien si vous ne
    souhaitez qu'un seul résultat.
   </para>
   <example xml:id="mongo.tutorial.findone-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$document = $collection->findOne();
var_dump( $document );
?>
]]>
   </programlisting>
    &example.outputs;
   <screen>
<![CDATA[
array(6) {
  ["_id"]=>
  object(MongoId)#8 (1) {
    ["$id"]=>
    string(24) "4e2995576803fab768000000"
  }
  ["name"]=>
  string(7) "MongoDB"
  ["type"]=>
  string(8) "database"
  ["count"]=>
  int(1)
  ["info"]=>
  array(2) {
    ["x"]=>
    int(203)
    ["y"]=>
    int(102)
  }
  ["versions"]=>
  array(3) {
    [0]=>
    string(5) "0.9.7"
    [1]=>
    string(5) "0.9.8"
    [2]=>
    string(5) "0.9.9"
  }
}
]]>
   </screen>
   </example>
   <para>
    Notez qu'il y a un champ <literal>_id</literal> qui a été ajouté automatiquement
    à votre document. <literal>_id</literal> est le champ de la clé primaire.
    Si votre document n'en spécifie pas une, le driver en ajoutera une
    automatiquement.
   </para>
   <para>
    Si vous spécifiez votre propre champ <literal>_id</literal>, il doit être unique
    dans la collection. Par exemple :
   </para>
   <example xml:id="mongo.tutorial.findone-example-2">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$db = $connection->database;

$db->foo->insert(array("_id" => 1));
// ceci émettra une exception
$db->foo->insert(array("_id" => 1));

// ceci est correct, sachant que c'est une collection différente
$db->bar->insert(array("_id" => 1));

?>
]]>
   </programlisting>
   </example>
   <para>
    Par défaut, le driver va s'assurer que le serveur a reconnu l'écriture
    avant de retourner. Vous pouvez optionnellement désactiver ce comportement
    en passant <literal>array("w" => 0)</literal> en tant que second argument.
    Cela signifie que le driver ne va pas attendre la reconnaissance de l'écriture
    par le serveur, et n'émettra pas d'exception sur le duplicata de
    <literal>_id</literal>.
   </para>
   <section xml:id="mongo.tutorial.findone.seealso">
    <title>Voir aussi</title>
    <para>
     La méthode <function>MongoCollection::findOne</function> pour plus
     d'informations sur la recherche de données.
    </para>
    <para>
     La classe <classname>MongoId</classname> vous fournira plus de détails sur
     les identifiants uniques.
    </para>
    <para>
     La section sur les <link linkend="mongo.writes">écritures</link> couvre
     les écritures en profondeur, et le chapitre <xref linkend="mongo.writeconcerns" />
     va dans le détail des options d'écritures.
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.insert.multiple">
   <title>Ajout de plusieurs documents</title>
   <para>
    Afin de faire des requêtes plus intéressantes, commençons par ajouter
    plusieurs documents simples dans notre collection. Ces documents
    seront de la forme <literal>array( "i" => <replaceable>value</replaceable> );</literal>
    et nous pourrons les insérer efficacement via une boucle :
   </para>
   <example xml:id="mongo.tutorial.insert.multiple-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

for ( $i = 0; $i < 100; $i++ )
{
    $collection->insert( array( 'i' => $i, "field{$i}" => $i * 2 ) );
}
?>
]]>
   </programlisting>
   </example>
   
   <para>
    Notez que vous pouvez insérer des tableaux avec des clés différentes
    dans la même collection. Cet aspect correspond à ce que nous avançons
    lorsque nous disons que MongoDB a "un schéma libre". Dans l'exemple ci-dessus,
    chaque document a un champ <literal>i</literal>, mais aussi un nom de champ
    de la forme <literal>field</literal> + <literal>$i</literal>.
   </para>
  </section>

  <section xml:id="mongo.tutorial.counting">
   <title>Comptage des documents dans une collection</title>
   <para>
    Maintenant que nous avons inséré 101 documents (le 100 noté dans la boucle, +1),
    nous pouvons vérifier le nombre de documents dans la collection en utilisant
    la méthode <function>MongoCollection::count</function>.
    <example xml:id="mongo.tutorial.counting-example">
     <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

echo $collection->count();
?>
]]>
    </programlisting>
    </example>
    et vous devriez voir afficher : 101.
   </para>
  </section>

  <section xml:id="mongo.tutorial.cursor">
   <title>Utilisation d'un curseur pour récupérer tous les documents</title>
   <para>
    Afin de récupérer tous les documents d'une collection, vous devez utiliser
    la méthode <function>MongoCollection::find</function>. Cette méthode retourne
    un objet <classname>MongoCursor</classname> qui vous permet de parcourir
    tous les documents correspondant à votre requête. Aussi, pour récupérer tous
    les documents et les afficher, vous pouvez faire ceci :

    <example xml:id="mongo.tutorial.cursor-example">
     <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$cursor = $collection->find();
foreach ( $cursor as $id => $value )
{
    echo "$id: ";
    var_dump( $value );
}
?>
]]>
    </programlisting>
    </example>
    
    ceci affichera les 101 documents de la collection. <literal>$id</literal>
    est le champ <literal>_id</literal>
    du document (sous la forme d'une &string;), et <literal>$value</literal> est le document lui-même.
   </para>
   <section xml:id="mongo.tutorial.cursor.seealso">
    <title>Voir aussi</title>
    <para>
     La documentation de l'API sur la méthode
     <function>MongoCollection::find</function>
     contient plus d'informations sur la recherche de données.
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.criteria">
   <title>Ajout d'un critère à une requête</title>
   <para>
    Nous pouvons créer une requête à passer à la méthode
    <function>MongoCollection::find</function> pour récupérer
    un sous-jeu de documents de notre collection. Par exemple, si vous voulez
    trouver les documents dont le champ <literal>"i"</literal> vaut
    <literal>71</literal>, vous pouvez le faire comme ceci :
   </para>
   <example xml:id="mongo.tutorial.criteria-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$query = array( 'i' => 71 );
$cursor = $collection->find( $query );

while ( $cursor->hasNext() )
{
    var_dump( $cursor->getNext() );
}
?>
]]>
   </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(2) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["i"]=>
  int(71)
  ["_ns"]=>
  "testCollection"
}
]]>
    </screen>
   </example>
  </section>

  <section xml:id="mongo.tutorial.multi.query">
   <title>Récupération de plusieurs documents avec une requête</title>
   <para>
    Vous pouvez utiliser une requête pour récupérer plusieurs documents
    depuis la collection. Par exemple, si vous voulez récupérer tous les
    documents dont le champ <literal>"i"</literal> est plus grand que
    <literal>50</literal>, vous pouvez le faire comme ceci :
   </para>
   <example xml:id="mongo.tutorial.multi.query-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$query = array( "i" => array( '$gt' => 50 ) ); //notez les simples guillemets autour de '$gt'
$cursor = $collection->find( $query );

while ( $cursor->hasNext() )
{
    var_dump( $cursor->getNext() );
}

?>
]]>
   </programlisting>
   <para>
    Ceci devrait afficher les documents dont le champ <literal>"i"</literal>
    est supérieur à <literal>50</literal>. Nous pouvons
    également spécifier un intervalle comme <literal>20 &lt; i &lt;= 30</literal> :
   </para>
   <screen>
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$query = array( 'i' => array( '$gt' => 20, "\$lte" => 30 ) );
$cursor = $collection->find( $query );

while ( $cursor->hasNext() )
{
    var_dump( $cursor->getNext() );
}
?>
]]>
   </screen>
   </example>
   <para>
    Rappelez-vous de toujours échapper le symbole $ ou d'utiliser des guillemets
    simples. Sinon, PHP l'interprétera comme étant la variable
    <varname>$gt</varname>.
   </para>
  </section>

  <section xml:id="mongo.tutorial.indexes">
   <title>Création d'un index</title>
   <para>
    MongoDB supporte les indexes, et il est très simple de les ajouter à une
    collection. Pour créer un index, vous devez spécifier le nom du champ
    ainsi que sa direction : ascendant (1) ou descendant
    (-1). L'exemple suivant va créer un index ascendant sur le champ "i" :
   </para>
   <example xml:id="mongo.tutorial.indexes-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$collection->ensureIndex( array( "i" => 1 ) );  // Création d'un index sur le champ "i"
$collection->ensureIndex( array( "i" => -1, "j" => 1 ) );  // Index descendant sur le champ "i", et ascendant sur le champ "j"

?>
]]>
   </programlisting>
   </example>
   <para>
    L'indexation est une action critique pour les performances en lecture lorsque vos
    données grossissent. Si vous n'êtes pas familier avec l'indexation, reportez-vous à
    la documentation de la méthode <function>MongoCollection::ensureIndex</function> ansi
    que la <link xlink:href="&url.mongodb.dochub.indexes;">documentation du coeur
    de l'indexation MongoDB</link>.
   </para>
  </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->