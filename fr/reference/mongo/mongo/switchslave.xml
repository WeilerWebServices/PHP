<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350988 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongo.switchslave" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Mongo::switchSlave</refname>
  <refpurpose>Choisit un nouvel secondaire pour les lectures slaveOkay</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>string</type><methodname>Mongo::switchSlave</methodname>
   <void/>
  </methodsynopsis>

  <para>
   Cette méthode choisit de façon aléatoire un secondaire pour une
   connexion afin d'y effectuer les lectures. Elle est appelée automatiquement
   par le driver et ne devrait pas être appelée manuellement. Elle
   appelle la méthode <function>MongoClient::getHosts</function> (pour rafraichir les statuts
   des hôtes) et la méthode <function>MongoClient::getSlave</function> (pour récupérer la valeur retournée).
  </para>

  <para>
   Reportez-vous à la <link linkend="mongo.queries">section sur les requêtes</link>
   de ce manuel pour plus d'informations sur la distribution de lecture aux secondaires.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne l'adresse du secondaire utilisé par cette connexion pour les lectures.
   Elle devrait être la même que celle choisie précédemment de façon aléatoire.
   La méthode devrait retourner qu'une seule adresse si un seul serveur secondaire
   (ou un seul primaire) est disponible.
  </para>
  <para>
   Par exemple, si vous avez 3 membres dans le jeu de réplication avec un
   primaire, un secondaire et un arbitraire, cette méthode devrait toujours
   retourner l'adresse du secondaire. Si le secondaire devient indisponible,
   cette méthode devrait toujours retourner l'adresse du primaire. Si le primaire
   devient aussi indisponible, cette méthode lancera une exception, sachant qu'un
   serveur arbitraire ne peut gérer les lectures.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lance une exception <classname>MongoException</classname> (code erreur 15) si
   la méthode est appelée sur une connexion non connue du jeu de réplication.
   Elle lancera également une exception <classname>MongoException</classname>
   si aucun serveur de réplication n'est trouvé (primaire ou secondaire)
   pour la lecture (code erreur 16).
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.2.11</entry>
       <entry>
        Lance une alerte de niveau <constant>E_DEPRECATED</constant>
        lorsqu'utilisé.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="seealso"><!-- {{{ -->
  &reftitle.seealso;
  <simplelist>
   <member><xref linkend="mongo.readpreferences" /></member>
  </simplelist>
 </refsect1><!-- }}} -->

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
