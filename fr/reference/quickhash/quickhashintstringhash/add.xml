<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 321911 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="quickhashintstringhash.add" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>QuickHashIntStringHash::add</refname>
  <refpurpose>Cette méthode ajoute une nouvelle entrée à la table de hachage</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>QuickHashIntStringHash::add</methodname>
   <methodparam><type>int</type><parameter>key</parameter></methodparam>
   <methodparam><type>string</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   Cette méthode ajoute une nouvelle entrée à la table de hachage, et informe
   en retourne si l'entrée a bien été ajoutée. Par défaut, les entrées sont
   toujours ajoutées, à moins que QuickHashIntStringHash::CHECK_FOR_DUPES
   ait été passé lors de la création de la table de hachage.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       La clé de l'entrée à ajouter.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       La valeur de l'entrée à ajouter. Si la valeur passée n'est pas une chaîne,
       elle sera convertie en chaîne automatiquement si cela est possible.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &true; lorsque l'entrée a été ajoutée, et &false; si l'entrée
   n'a pas été ajoutée.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>QuickHashIntStringHash::add</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo "sans vérification de doublon\n";
$hash = new QuickHashIntStringHash( 1024 );
var_dump( $hash->exists( 4 ) );
var_dump( $hash->get( 4 ) );
var_dump( $hash->add( 4, "twenty two" ) );
var_dump( $hash->exists( 4 ) );
var_dump( $hash->get( 4 ) );
var_dump( $hash->add( 4, "twelve" ) );

echo "\navec vérification de doublon\n";
$hash = new QuickHashIntStringHash( 1024, QuickHashIntStringHash::CHECK_FOR_DUPES );
var_dump( $hash->exists( 4 ) );
var_dump( $hash->get( 4 ) );
var_dump( $hash->add( 4, "seventy eight" ) );
var_dump( $hash->exists( 4 ) );
var_dump( $hash->get( 4 ) );
var_dump( $hash->add( 4, "nine" ) );
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
sans vérification de doublon
bool(false)
bool(false)
bool(true)
bool(true)
string(10) "twenty two"
bool(true)

avec vérification de doublon
bool(false)
bool(false)
bool(true)
bool(true)
string(13) "seventy eight"
bool(false)
]]>
    </screen>
   </example>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
