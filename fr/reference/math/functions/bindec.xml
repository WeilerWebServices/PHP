<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351133 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.bindec" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>bindec</refname>
  <refpurpose>Convertit de binaire en décimal</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
   <methodsynopsis>
    <type class="union"><type>int</type><type>float</type></type><methodname>bindec</methodname>
    <methodparam><type>string</type><parameter>binary_string</parameter></methodparam>
   </methodsynopsis>
  <para>
   Retourne la conversion d'un nombre binaire représenté par la chaîne
   <parameter>binary_string</parameter> en décimal.
  </para>
  <para>
   <function>bindec</function> convertie un nombre binaire en un &integer;,
   ou, si nécessaire pour des raisons de taille, en &float;.
  </para>
  <para>
   <function>bindec</function> interprète toutes les valeurs
   <parameter>binary_string</parameter> comme des valeurs non-signées entières.
   Ceci est dû au fait que la fonction <function>bindec</function> voit
   le premier bit comme un autre ordre de grandeur plutôt que comme le
   bit de signe.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>binary_string</parameter></term>
     <listitem>
      <para>
       La chaîne binaire à convertir.
       Tout caractères invalides dans <parameter>binary_string</parameter>
       sont ignorés silencieusement.
       À partir de PHP 7.4.0 fournir des caractères invalides est obsolète.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <warning>
   <para>
    Ce paramètre doit être une &string;.
    L'utilisation d'un autre type de données produit des résultats inattendus.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La valeur décimale de <parameter>binary_string</parameter>
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Passer des caractères invalides génèrera désormais une notice obsolète.
       Le résultat sera toujours calculé comme si les caractères invalides
       n'existaient pas.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>bindec</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo bindec('110011') . "\n";
echo bindec('000110011') . "\n";

echo bindec('111');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
51
51
7
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>bindec</function> interprète l'entrée
     comme un entier non-signé</title>
    <programlisting role="php">
<![CDATA[
<?php
/*
 * Le plus important dans cet exemple est dans la sortie
 * plutôt que dans le code PHP lui-même.
 */

$magnitude_lower = pow(2, (PHP_INT_SIZE * 8) - 2);
p($magnitude_lower - 1);
p($magnitude_lower, 'Avez-vous vu le changement ? Soyez attentif la prochaine fois...');

p(PHP_INT_MAX, 'PHP_INT_MAX');
p(~PHP_INT_MAX, 'interprété comme étant supérieur à PHP_INT_MAX');

if (PHP_INT_SIZE == 4) {
    $note = 'interprété comme étant le plus grand entier non-signé';
} else {
    $note = 'interprété comme étant le plus grand entier non-signé
              (18446744073709551615) mais faussé par la précision de la virgule flottante';
}
p(-1, $note);


function p($input, $note = '') {
    echo "entrée :        $input\n";

    $format = '%0' . (PHP_INT_SIZE * 8) . 'b';
    $bin = sprintf($format, $input);
    echo "binaire :       $bin\n";

    ini_set('precision', 20);  // Pour plus de lisibilité sur les PC 64 bits.
    $dec = bindec($bin);
    echo 'bindec() :     ' . $dec . "\n";

    if ($note) {
        echo "Note :         $note\n";
    }

    echo "\n";
}
?>
]]>
    </programlisting>
    &example.outputs.32bit;
    <screen>
<![CDATA[
entrée :        1073741823
binaire :       00111111111111111111111111111111
bindec() :     1073741823

entrée :        1073741824
binaire :       01000000000000000000000000000000
bindec():     1073741824
Note :         Avez-vous vu le changement ? Soyez attentif la prochaine fois...

entrée :        2147483647
binaire :       01111111111111111111111111111111
bindec():     2147483647
Note :         PHP_INT_MAX

entrée :        -2147483648
binaire :       10000000000000000000000000000000
bindec():     2147483648
Note :         interprété comme étant supérieur à PHP_INT_MAX

entrée :        -1
binaire :       11111111111111111111111111111111
bindec():     4294967295
Note :         interprété comme étant le plus grand entier non-signé
]]>
    </screen>
    &example.outputs.64bit;
    <screen>
<![CDATA[
entrée :        4611686018427387903
binaire :       0011111111111111111111111111111111111111111111111111111111111111
bindec() :     4611686018427387903

entrée :        4611686018427387904
binaire :       0100000000000000000000000000000000000000000000000000000000000000
bindec() :     4611686018427387904
Note :         Avez-vous vu le changement ? Soyez attentif la prochaine fois...

entrée :        9223372036854775807
binaire :       0111111111111111111111111111111111111111111111111111111111111111
bindec() :     9223372036854775807
Note :         PHP_INT_MAX

entrée :        -9223372036854775808
binaire :       1000000000000000000000000000000000000000000000000000000000000000
bindec() :     9223372036854775808
Note :         interprété comme étant supérieur à PHP_INT_MAX

entrée :        -1
binaire :       1111111111111111111111111111111111111111111111111111111111111111
bindec() :     18446744073709551616
Note :         interprété comme étant le plus grand entier non-signé
              (18446744073709551615) mais faussé par la précision de la virgule flottante
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    La fonction peut convertir des nombres qui sont trop larges pour
    tenir dans un type &integer;, dans ce cas, ces valeurs sont retourné
    en tant que &float;.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>decbin</function></member>
    <member><function>octdec</function></member>
    <member><function>hexdec</function></member>
    <member><function>base_convert</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
