<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339748 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.ereg">
 <refnamediv>
  <refname>ereg</refname>
  <refpurpose>Recherche par expression rationnelle standard</refpurpose>
 </refnamediv>
 
 <refsynopsisdiv>
  <warning>
   &warn.deprecated.function.5-3-0.removed.7-0-0.alternatives;
   <simplelist role="alternatives">
    <member><function>preg_match</function></member>
   </simplelist>
  </warning>
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>ereg</methodname>
   <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">regs</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Recherche dans la chaîne <parameter>string</parameter> les séquences
   de caractères qui correspondent au masque <parameter>pattern</parameter>,
   en tenant compte de la casse.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       Expression rationnelle sensible à la casse.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La chaîne d'entrée.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>regs</parameter></term>
     <listitem>
      <para>
       Si au moins une séquence est trouvée
       (éventuellement dans les parenthèses capturantes de
       <parameter>pattern</parameter>), et que la fonction est appelée
       avec un troisième argument <parameter>regs</parameter>, les
       résultats seront enregistrés dans
       <parameter>regs</parameter>.
      </para>
      <para>
       <varname>$regs[1]</varname> contiendra
       la première parenthèse capturante (celle qui commence le
       plus tôt), <varname>$regs[2]</varname> contiendra la deuxième
       parenthèse capturante (celle qui commence après
       la première), et ainsi de suite.
       <varname>$regs[0]</varname> contient une copie de la chaîne.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne la longueur de la chaîne trouvée si une correspondance
   pour le masque <parameter>pattern</parameter> a été trouvée dans
   <parameter>string</parameter>, ou &false; si aucune correspondance
   n'a été trouvée ou si une erreur est survenue.
  </para>
  <para>
   Si le paramètre optionnel <parameter>regs</parameter> n'est pas fourni
   ou si la longueur de la chaîne trouvée vaut <literal>0</literal>, cette fonction
   retourne <literal>1</literal>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.1.0</entry>
       <entry>
        Pour les versions de PHP inférieures ou égales à 4.1.0,
        <varname>$regs</varname> sera rempli d'exactement dix éléments, même
        s'il y a plus ou moins de dix parenthèses capturantes. Cela n'a aucun effet
        sur <function>ereg</function> pour chercher plus de sous-chaînes.
        Si aucun résultat n'est trouvé, <literal>$regs</literal> ne sera pas altéré
        par <function>ereg</function>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>ereg</function></title>
    <para>
     L'exemple suivant prend une date au format ISO (YYYY-MM-DD) et l'affiche sous
     la forme DD.MM.YYYY :
    </para>
    <programlisting role="php">
<![CDATA[
<?php
if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs)) {
    echo "$regs[3].$regs[2].$regs[1]";
} else {
    echo "Format de date invalide : $date";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>eregi</function></member>
    <member><function>ereg_replace</function></member>
    <member><function>eregi_replace</function></member>
    <member><function>preg_match</function></member>
    <member><function>strpos</function></member>
    <member><function>strstr</function></member>
    <member><function>quotemeta</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
