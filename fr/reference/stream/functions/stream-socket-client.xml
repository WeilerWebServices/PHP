<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.stream-socket-client" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_socket_client</refname>
  <refpurpose>Ouvre une connexion socket Internet ou Unix</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>stream_socket_client</methodname>
   <methodparam><type>string</type><parameter>remote_socket</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">errno</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">errstr</parameter></methodparam>
   <methodparam choice="opt"><type>float</type><parameter>timeout</parameter><initializer>ini_get("default_socket_timeout")</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>STREAM_CLIENT_CONNECT</initializer></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>context</parameter></methodparam>
  </methodsynopsis>
  <para>
   Initie un flux ou une connexion datagramme avec la destination
   <parameter>remote_socket</parameter>. Le type de socket créé est déterminé
   par le transport spécifié avec le formatage URL suivant :
   <literal>transport://target</literal>. Pour un socket Internet,
   (AF_INET) comme TCP et UDP, la <literal>cible</literal>
   de <parameter>remote_socket</parameter> sera une adresse IP ou un nom d'hôte.
   Pour un socket Unix, la <literal>cible</literal> doit être un fichier de
   socket du système.
  </para>
  <note>
   <para>
    Le flux sera par défaut ouvert en mode bloquant. Vous pouvez le passer
    en mode non bloquant en utilisant la fonction
    <function>stream_set_blocking</function>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters"><!-- {{{ -->
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>remote_socket</parameter></term>
     <listitem>
      <para>
       L'adresse du socket.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>errno</parameter></term>
     <listitem>
      <para>
       Contiendra le numéro de l'erreur système si la connexion échoue.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>errstr</parameter></term>
     <listitem>
      <para>
       Contiendra le message de l'erreur système si la connexion échoue.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Délai d'expiration, en secondes, pour l'appel système
       <literal>connect()</literal>.
       <note>
        <simpara>
         Ce paramètre n'est appliqué que pour les connexions
         qui ne sont pas asynchrones.
        </simpara>
       </note>
       <note>
        <para>
         Pour définir un délai d'expiration lors de la lecture/écriture de
         données via un socket, utilisez la fonction
         <function>stream_set_timeout</function>, vu que le paramètre
         <parameter>timeout</parameter> n'est appliqué que lors de la connexion
         au socket.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Champ de bits qui peut être la combinaison de n'importe quelles options
       de connexion. Actuellement, les valeurs possibles pour ces options sont
       <constant>STREAM_CLIENT_CONNECT</constant> (défaut),
       <constant>STREAM_CLIENT_ASYNC_CONNECT</constant> et
       <constant>STREAM_CLIENT_PERSISTENT</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       Une ressource de contexte valide, créée par la fonction
       <function>stream_context_create</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   En cas de succès, une ressource de flux est retournée, qui peut être utilisée
   avec d'autres fonctions de fichiers, comme
   <function>fgets</function>, <function>fgetss</function>,
   <function>fwrite</function>, <function>fclose</function>, et
   <function>feof</function>, &false; si une erreur survient.
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Si l'appel échoue, <function>stream_socket_client</function> va retourner
   &false; et si les paramètres optionnels <parameter>errno</parameter> et
   <parameter>errstr</parameter> sont fournis, ils recevront l'erreur
   exacte qui est survenue dans le système lors de l'appel à
   <literal>connect()</literal>. Si la valeur retournée dans
   <parameter>errno</parameter> est &zero; et que la fonction
   a retourné &false;, c'est une indication que l'erreur est survenue
   avant l'appel à <literal>connect()</literal>. Cela est probablement dû
   à un problème d'initialisation du socket. Notez que
   <parameter>errno</parameter> et<parameter>errstr</parameter>
   doivent être passés par référence.
  </para>
 </refsect1><!-- }}} -->
 
 
 <refsect1 role="examples"><!-- {{{ -->
  &reftitle.examples;
  <para>
   <example xml:id="stream-socket-client.example.basic"><!-- {{{ -->
    <title>Exemple avec <function>stream_socket_client</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = stream_socket_client("tcp://www.example.com:80", $errno, $errstr, 30);
if (!$fp) {
    echo "$errstr ($errno)<br />\n";
} else {
    fwrite($fp, "GET / HTTP/1.0\r\nHost: www.example.com\r\nAccept: */*\r\n\r\n");
    while (!feof($fp)) {
        echo fgets($fp, 1024);
    }
    fclose($fp);
}
?>
]]>
    </programlisting>
   </example><!-- }}} -->
   <example xml:id="stream-socket-client.example.daytime"><!-- {{{ -->
    <title>Utilisation de connexions UDP</title>
    <para>
     Lit la date et l'heure sur un service UDP de type
     "<literal>daytime</literal>" (port 13) sur votre propre machine :
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$fp = stream_socket_client("udp://127.0.0.1:13", $errno, $errstr);
if (!$fp) {
    echo "ERREUR : $errno - $errstr<br />\n";
} else {
    fwrite($fp, "\n");
    echo fread($fp, 26);
    fclose($fp);
}
?>
]]>
    </programlisting>
   </example><!-- }}} -->
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="notes"><!-- {{{ -->
  &reftitle.notes;
  <warning>
   <simpara>
    Les sockets UDP sembleront parfois s'ouvrir sans erreur, même si l'hôte
    distant n'est pas accessible. Cette erreur ne deviendra apparente que
    lorsque vous essaierez de lire ou écrire des données avec cet
    socket. La raison à cela est que UDP est un protocole sans connexion,
    ce qui signifie que le système d'exploitation n'a pas à établir de
    lien pour le socket, jusqu'à ce qu'il commence à échanger des données.
   </simpara>
  </warning>
  &ipv6.brackets;
  <note>
   <para>
    Suivant votre environnement, les sockets Unix ou le délai d'expiration
    peuvent ne pas être disponibles. Une liste des transports disponibles
    sur le système est accessible via <function>stream_get_transports</function>.
    Voyez <xref linkend="transports"/> pour une liste de transports natifs.
   </para>
  </note>
 </refsect1><!-- }}} -->

 <refsect1 role="seealso"><!-- {{{ -->
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stream_socket_server</function></member>
    <member><function>stream_set_blocking</function></member>
    <member><function>stream_set_timeout</function></member>
    <member><function>stream_select</function></member>
    <member><function>fgets</function></member>
    <member><function>fgetss</function></member>
    <member><function>fwrite</function></member>
    <member><function>fclose</function></member>
    <member><function>feof</function></member>
    <member><xref linkend="ref.curl" /></member>
   </simplelist>
  </para>
 </refsect1><!-- }}} -->

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->