<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 320512 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="gearmanclient.donormal" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>GearmanClient::doNormal</refname>
  <refpurpose>Exécute une tâche et retourne le résultat</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>string</type><methodname>GearmanClient::doNormal</methodname>
   <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
   <methodparam><type>string</type><parameter>workload</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>unique</parameter></methodparam>
  </methodsynopsis>
  <para>
   Exécute une tâche et retourne une &string; représentant le
   résultat. Il appartient aux classes <classname>GearmanClient</classname>
   et <classname>GearmanWorker</classname> d'accepter le format du résultat.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.functionname;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>workload</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.workload;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>unique</parameter></term>
     <listitem>
      <para>
       &gearman.parameter.unique;
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Une &string; représentant le résultat de la tâche exécutée.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Soumission d'une tâche avec un retour immédiat</title>
    <programlisting role="php">
<![CDATA[
<?php

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

# Code client

echo "Début\n";

# Création de notre objet client.
$gmclient= new GearmanClient();

# Ajout du serveur par défaut (localhost).
$gmclient->addServer();

echo "Envoi de la tâche\n";

$result = $gmclient->doNormal("reverse", "Hello!");

echo "Succès : $result\n";

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

echo "Début\n";

# Création de l'objet worker.
$gmworker= new GearmanWorker();

# Ajout du serveur par défaut (localhost).
$gmworker->addServer();

# Enregistre la fonction "reverse" avec le serveur. Modifie la fonction worker
# en "reverse_fn_fast" pour un worker plus rapide avec aucune sortie.
$gmworker->addFunction("reverse", "reverse_fn");

print "Attente d'une tâche...\n";
while($gmworker->work())
{
  if ($gmworker->returnCode() != GEARMAN_SUCCESS)
  {
    echo "return_code : " . $gmworker->returnCode() . "\n";
    break;
  }
}

function reverse_fn($job)
{
  return strrev($job->workload());
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Début
Envoi de la tâche
Succès : !olleH
]]>
    </screen>
   </example>
   <example>
    <title>Soumission d'une tâche et récupération incrémentale du statut</title>
    <para>
     Une tâche est soumise et le script boucle pour récupérer les informations
     de statut. Le worker a un délai artificiel qui le transforme en une tâche longue
     et envoie le statut et les données lorsque l'exécution survient.
     Chaque sous-appel à la fonction <methodname>GearmanClient::doNormal</methodname>
     produit des informations de statut sur la tâche en cours.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

# Code client

# Création de notre objet client.
$gmclient= new GearmanClient();

# Ajout du srveur par défaut (localhost).
$gmclient->addServer();

echo "Envoi de la tâche\n";

# Envoi de la tâche reverse
do
{
  $result = $gmclient->doNormal("reverse", "Hello!");
  # Vérifie les paquets retournés ainsi que les erreurs.

  switch($gmclient->returnCode())
  {
    case GEARMAN_WORK_DATA:
      echo "Données : $result\n";
      break;
    case GEARMAN_WORK_STATUS:
      list($numerator, $denominator)= $gmclient->doStatus();
      echo "Statut : $numerator/$denominator terminé\n";
      break;
    case GEARMAN_WORK_FAIL:
      echo "Échec\n";
      exit;
    case GEARMAN_SUCCESS:
      break;
    default:
      echo "RET : " . $gmclient->returnCode() . "\n";
      echo "Erreur : " . $gmclient->error() . "\n";
      echo "Errno : " . $gmclient->getErrno() . "\n";
      exit;
  }
}
while($gmclient->returnCode() != GEARMAN_SUCCESS);

echo "Success: $result\n";

?>
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php

# Code du worker

echo "Début\n";

# Création de notre objet worker.
$gmworker= new GearmanWorker();

# Ajout du serveur par défaut (localhost).
$gmworker->addServer();

# Enregistre la fonction "reverse" avec le serveur.
$gmworker->addFunction("reverse", "reverse_fn");

print "Attente d'une tâche...\n";
while($gmworker->work())
{
  if ($gmworker->returnCode() != GEARMAN_SUCCESS)
  {
    echo "return_code : " . $gmworker->returnCode() . "\n";
    break;
  }
}

function reverse_fn($job)
{
  echo "Tâche reçue : " . $job->handle() . "\n";

  $workload = $job->workload();
  $workload_size = $job->workloadSize();

  echo "Workload : $workload ($workload_size)\n";

  # This status loop is not needed, just showing how it works
  for ($x= 0; $x < $workload_size; $x++)
  {
    echo "Envoi du statut : " + $x + 1 . "/$workload_size terminé\n";
    $job->sendStatus($x+1, $workload_size);
    $job->sendData(substr($workload, $x, 1));
    sleep(1);
  }

  $result= strrev($workload);
  echo "Résultat : $result\n";

  # Retourne ce que l'on souhaite retourner au client.
  return $result;
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <para>
     Worker output:
    </para>
    <screen>
<![CDATA[
Début
Attente d'une tâche...
Tâche reçue : H:foo.local:106
Workload : Hello! (6)
1/6 terminé
2/6 terminé
3/6 terminé
4/6 terminé
5/6 terminé
6/6 terminé
Résultat : !olleH
]]>
    </screen>
    <para>
     Sortie client :
    </para>
    <screen>
<![CDATA[
Début
Envoi de la tâche
Statut : 1/6 terminé
Données : H
Statut : 2/6 terminé
Données : e
Statut : 3/6 terminé
Données : l
Statut : 4/6 terminé
Données : l
Status: 5/6 terminé
Données : o
Statut : 6/6 terminé
Données : !
Succè s: !olleH
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>GearmanClient::doHigh</methodname></member>
    <member><methodname>GearmanClient::doLow</methodname></member>
    <member><methodname>GearmanClient::doBackground</methodname></member>
    <member><methodname>GearmanClient::doHighBackground</methodname></member>
    <member><methodname>GearmanClient::doLowBackground</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
