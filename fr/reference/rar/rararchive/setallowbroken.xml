<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 322055 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="rararchive.setallowbroken" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>RarArchive::setAllowBroken</refname>
  <refpurpose>Autorise ou non l'ouverture d'archives corrompues</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop; (méthode) :</para>
   <methodsynopsis>
    <modifier>public</modifier> <type>bool</type><methodname>RarArchive::setAllowBroken</methodname>
    <methodparam><type>bool</type><parameter>allow_broken</parameter></methodparam>
   </methodsynopsis>
  <para>&style.procedural; :</para>
  <methodsynopsis>
   <type>bool</type><methodname>rar_allow_broken_set</methodname>
   <methodparam><type>RarArchive</type><parameter>rarfile</parameter></methodparam>
   <methodparam><type>bool</type><parameter>allow_broken</parameter></methodparam>
  </methodsynopsis>
  <para>
   Cette méthode définit si les archives corrompues peuvent être lues ou bien
   si les opérations qui tentent d'extraire les entrées de l'archive doivent
   échouées. Les archives corrompues sont les archives pour lesquelles aucune
   erreur n'est détectée lorsque le fichier est ouvert mais qu'une erreur
   survient lors de la lecture des entrées.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>rarfile</parameter></term>
     <listitem>
      <para>
       Un objet <type>RarArchive</type>, ouvert avec la fonction
       <function>rar_open</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>allow_broken</parameter></term>
     <listitem>
      <para>
       Si la lecture des archives corrompues est autorisée (&true;)
       ou non (&false;).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne &true; &return.falseforfailure;. La méthode échouera uniquement
   si le fichier a déjà été clos.
  </para>
 </refsect1>
 
  <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>&style.oop;</title>
    <programlisting role="php">
<![CDATA[
<?php
function retnull() { return null; }
$file = dirname(__FILE__) . "/multi_broken.part1.rar";
/* Le 3ème argument évite le message "volume not found" */
$a = RarArchive::open($file, null, 'retnull');
$a->setAllowBroken(true);
foreach ($a->getEntries() as $e) {
    echo "$e\n";
}
var_dump(count($a));
?>
]]>
     </programlisting>
     &example.outputs.similar;
     <screen>
<![CDATA[
RarEntry for file "file1.txt" (52b28202)
int(1)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>&style.procedural;</title>
    <programlisting role="php">
<![CDATA[
<?php
function retnull() { return null; }
$file = dirname(__FILE__) . "/multi_broken.part1.rar";
/* Le 3ème argument évite le message "volume not found" */
$a = rar_open($file, null, 'retnull');
rar_allow_broken_set($a, true);
foreach (rar_list($a) as $e) {
    echo "$e\n";
}
var_dump(count($a));
?>
]]>
     </programlisting>
   </example>
  </para>
 </refsect1>

  <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>RarArchive::isBroken</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
