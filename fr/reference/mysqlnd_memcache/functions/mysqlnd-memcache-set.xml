<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350788 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.mysqlnd-memcache-set" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>mysqlnd_memcache_set</refname>
  <refpurpose>Associe une connexion MySQL avec une connexion Memcache</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type>
   <methodname>mysqlnd_memcache_set</methodname>
   <methodparam><type>mixed</type><parameter>mysql_connection</parameter></methodparam>
   <methodparam choice="opt"><type>Memcached</type><parameter>memcache_connection</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>pattern</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
  <para>
   Associe une connexion <parameter>mysql_connection</parameter> avec une connexion
   <parameter>memcache_connection</parameter> en utilisant le paramètre
   <parameter>pattern</parameter> comme expression rationnelle PCRE, et le paramètre
   <parameter>callback</parameter> comme notification de rappel, ou pour réinitialiser
   l'association de la connexion <parameter>mysql_connection</parameter>.
  </para>
  <para>
   Lors de l'association d'une connexion MySQL avec une connexion Memcache, cette fonction
   va interroger le serveur MySQL pour en connaître sa configuration. Elle va ainsi automatiquement
   détecter si le serveur est configuré pour utiliser le plugin InnoDB Memcache Daemon,
   ou le support MySQL Cluster NDB Memcache. Elle va également interroger le serveur afin
   d'identifier automatiquement les tables exportées, ainsi que d'autres options de
   configuration. Le résultat de cette configuration automatique peut être récupéré
   en utilisant la fonction <function>mysqlnd_memcache_get_config</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>mysql_connection</parameter></term>
    <listitem>
     <para>
      Un gestionnaire de serveur MySQL, en utilisant une des extensions API MySQL de PHP,
      qui sont <link linkend="ref.pdo-mysql">PDO_MYSQL</link>, <link linkend="book.mysqli">mysqli</link> ou
      <link linkend="book.mysql">ext/mysql</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>memcache_connection</parameter></term>
    <listitem>
     <para>
      Une instance <link linkend="book.memcached">Memcached</link>
      avec une connexion au plugin MySQL Memcache Daemon. Si ce paramètre est omis,
      alors <parameter>mysql_connection</parameter> sera dé-associée de toute connexion memcache.
      Et si une précédente association existait, alors elle sera remplacée.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>pattern</parameter></term>
    <listitem>
     <para>
      Une expression rationnelle au format <link linkend="book.pcre">PCRE</link>
      pour identifier les requêtes potentielles Memcache. La requête doit avoir trois
      sous-masques. Le premier contient la liste des champs demandés, le second,
      le nom de la colonne ID depuis la requête, et le troisième, la valeur
      demandée. Si ce paramètre est omis, ou défini à &null;, alors un
      masque par défaut sera utilisé.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>callback</parameter></term>
    <listitem>
     <para>
      Une fonction de rappel qui sera utilisée à chaque fois que la requête
      est envoyée à MySQL. Elle ne reçoit qu'un seul paramètre, un booléen,
      indiquant si la requête a été envoyée via Memcache.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &true; si l'association ou la dé-association a été un succès, ou &false;
   si une erreur survient.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>mysqlnd_memcache_set</function> et
     <function>var_dump</function> comme fonction de rappel de déboguage.</title>

    <programlisting role="php">
<![CDATA[
<?php
$mysqli = new mysqli("host", "user", "passwd", "database");
$memc = new Memcached();
$memc->addServer("host", 11211);
mysqlnd_memcache_set($mysqli, $memc, NULL, 'var_dump');

/* Cette requête sera interceptée et exécutée via le protocole Memcache */
echo "Envoi de la requête pour l'ID via Memcache : ";
$mysqli->query("SELECT f1, f2, f3 FROM test WHERE id = 1");

/* f1 n'est pas configuré comme une clé de champ valide, cette requête ne sera pas envoyée via Memcache */
echo "Envoi de la requête pour f1 via Memcache : ";
$mysqli->query("SELECT id FROM test WHERE f1 = 1");

mysqlnd_memcache_set($mysqli);

/* Maintenant, le protocole régulier MySQL sera utilisé */
echo "var_dump ne sera pas appelé : ";
$mysqli->query("SELECT f1, f2, f3 WHERE id = 1");

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Envoi de la requête pour l'ID via Memcache: bool(true)
Envoi de la requête pour f1 via Memcache: bool(false)
var_dump ne sera pas appelé : 
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     <function>mysqlnd_memcache_get_config</function>
    </member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
