<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341232 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes Maintainer: pmartin -->

<appendix xml:id="classobj.examples">
 &reftitle.examples;
 <para>
  Dans cet exemple, nous commençons par définir une classe
  de base ainsi qu'une extension de cette classe. La classe
  de base décrit un légume, s'il peut être consommé, et qu'elle est sa couleur.
  La sous-classe <varname>Spinach</varname> ajoute une méthode
  pour le cuisiner, et une autre pour déterminer s'il est cuit.
 </para>
 <para>
  <example>
   <title>classes.inc</title>
   <programlisting role="php">
<![CDATA[
<?php

// classe de base, avec des propriétés et des méthodes membres
class Vegetable {

   var $edible;
   var $color;

   function __construct($edible, $color="green")
   {
       $this->edible = $edible;
       $this->color = $color;
   }

   function is_edible()
   {
       return $this->edible;
   }

   function what_color()
   {
       return $this->color;
   }
} // fin de la classe Vegetable

// étend la classe de base
class Spinach extends Vegetable {

   var $cooked = false;

   function __construct()
   {
       parent::__construct(true, "green");
   }

   function cook_it()
   {
       $this->cooked = true;
   }

   function is_cooked()
   {
       return $this->cooked;
   }
} // fin de la classe Spinach

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Nous créons ensuite deux objets depuis ces classes et affichons
  des informations sur ceux-ci, incluant leur classe
  parente. Nous définissons également des fonctions utilitaires,
  principalement afin d'obtenir un affichage plus joli des variables.
 </para>
 <para>
  <example>
   <title>test_script.php</title>
   <programlisting role="php">
<![CDATA[
<pre>
<?php

include "classes.inc";

// fonctions utilitaires

function print_vars($obj)
{
foreach (get_object_vars($obj) as $prop => $val) {
    echo "\t$prop = $val\n";
}
}

function print_methods($obj)
{
$arr = get_class_methods(get_class($obj));
foreach ($arr as $method) {
    echo "\tfonction $method()\n";
}
}

function class_parentage($obj, $class)
{
if (is_subclass_of($GLOBALS[$obj], $class)) {
    echo "L'objet $obj appartient à la classe " . get_class($GLOBALS[$obj]);
    echo ", une sous-classe de $class\n";
} else {
    echo "L'object $obj n'appartient pas à une sous-classe $class\n";
}
}

// instanciation de 2 objets

$veggie = new Vegetable(true, "blue");
$leafy = new Spinach();

// Affiche des informations à propos des objets
echo "veggie: CLASS " . get_class($veggie) . "\n";
echo "leafy: CLASS " . get_class($leafy);
echo ", PARENT " . get_parent_class($leafy) . "\n";

// affichage de la propriété veggie
echo "\nveggie: Propriétés\n";
print_vars($veggie);

// et enfin, les méthodes
echo "\nleafy: Méthodes\n";
print_methods($leafy);

echo "\nClasse parente :\n";
class_parentage("leafy", "Spinach");
class_parentage("leafy", "Vegetable");
?>
</pre>
]]>
   </programlisting>
   <para>
    Une chose importante à noter dans l'exemple ci-dessus est
    que l'objet <varname>$leafy</varname> est une instance
    de la classe <classname>Spinach</classname> qui est une
    sous-classe de <classname>Vegetable</classname>,
    donc la dernière partie de ce script affichera :
   </para>
   <screen>
<![CDATA[
   [...]
Classe parente :
L'object leafy n'appartient pas à la sous-classe Spinach
L'object leafy appartient à la classe spinach, une sous-classe de Vegetable
]]>
   </screen>
  </example>
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

