<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350653 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes Maintainer: pmartin -->

<refentry xml:id="function.get-parent-class" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>get_parent_class</refname>
  <refpurpose>Retourne le nom de la classe parente d'un objet</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>get_parent_class</methodname>
   <methodparam choice="opt"><type>mixed</type><parameter>object</parameter></methodparam>
  </methodsynopsis>
  <para>
   Récupère le nom de la classe parente pour un objet ou une classe.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       L'objet ou le nom de la classe testé. Ce paramètre est optionnel
       s'il est appelé depuis la méthode de l'objet.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne le nom de la classe parente dont
   <parameter>object</parameter> est une instance ou le nom.
  </para>
  <note>
   <para>
    Si l'objet n'a pas de parent ou si la classe fournie
    n'existe pas, &false; sera retourné.
   </para>
  </note>
  <para>
   Si appelée sans paramètre en dehors d'un objet, cette fonction retourne
   &false;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemple avec <function>get_parent_class</function></title>
    <programlisting role="php">
<![CDATA[
<?php

class papa {
    function papa()
    {
    // un peu de code
    }
}

class enfant extends papa {
    function enfant()
    {
        echo "je suis le fils de " , get_parent_class($this) , "\n";
    }
}

class enfant2 extends papa {
    function enfant2()
    {
        echo "Je suis aussi le fils de " , get_parent_class('enfant2') , "\n";
    }
}

$foo = new enfant();
$bar = new enfant2();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
je suis le fils de papa
Je suis aussi le fils de papa
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class</function></member>
    <member><function>is_subclass_of</function></member>
    <member><function>class_parents</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
