<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 347911 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="ev.supportedbackends" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ev::supportedBackends</refname>
  <refpurpose>Retourne le jeu de backends supportés par la configuration courant de libev</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier>
   <modifier>public</modifier>
   <modifier>static</modifier>
   <type>int</type>
   <methodname>Ev::supportedBackends</methodname>
   <void />
  </methodsynopsis>
  <para>
   Retourne le jeu de backends supportés par la configuration courant de libev.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retourne un masque d'octets qui peut contenir les
   <link
   linkend="ev.constants.watcher-backends">drapeaux de backend</link>
   combinés en utilisant l'opérateur <emphasis>OR</emphasis>.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Boucle embarqué créé avec le backend kqueue dans la boucle par défaut</title>
  <programlisting role="php">
<![CDATA[
<?php
/*
* Vérifie si kqueue est disponible (mais non recommandé) et crée un backend kqueue
* pour l'utiliser avec des sockets (ce qui fonctionne avec n'importe quelle implémentation
* kqueue).
* Stocke la boucle d'événements kqueue (utilisable uniquement via des sockets)
* dans loop_socket. (utilisation optionnelle de EVFLAG_NOENV)
*
* Exemple repris depuis l'URL suivante :
* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9
*/
$loop        = EvLoop::defaultLoop();
$socket_loop = NULL;
$embed       = NULL;

if (Ev::supportedBackends() & ~Ev::recommendedBackends() & Ev::BACKEND_KQUEUE) {
 if (($socket_loop = new EvLoop(Ev::BACKEND_KQUEUE))) {
  $embed = new EvEmbed($loop);
 }
}

if (!$socket_loop) {
 $socket_loop = $loop;
}

// Maintenant, utilisation de $socket_loop pour toutes les sockets et $loop pour tout le reste
?>
]]>
  </programlisting>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <classname>EvEmbed</classname>
   </member>
   <member>
    <methodname>Ev::recommendedBackends</methodname>
   </member>
   <member>
    <methodname>Ev::embeddableBackends</methodname>
   </member>
   <member>
    <link linkend="ev.constants.watcher-backends">Les drapeaux de backend</link>
   </member>
   <member>
    <link linkend="ev.examples">Les exemples</link>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
