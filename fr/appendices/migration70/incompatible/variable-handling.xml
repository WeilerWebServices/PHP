<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 344640 Maintainer: jbnahan Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<sect2 xml:id="migration70.incompatible.variable-handling">
 <title>Modifications apportées à la gestion des variables</title>

 <para>
  PHP 7 utilise maintenant une arborescence de syntaxe abstraite lors de l'analyse 
  des fichiers sources. Cela a permis de nombreuses améliorations à la langue 
  qui étaient auparavant impossibles en raison des limitations dans l'analyseur 
  utilisé dans les versions antérieures de PHP, mais a abouti à la suppression 
  de quelques cas spéciaux pour des raisons de cohérence, qui a abouti à casser 
  la rétro-compatibilité. Ces cas sont détaillés dans cette section.
 </para>

 <sect3 xml:id="migration70.incompatible.variable-handling.indirect">
  <title>
   Modifications apportées à la gestion des variables, propriétés et méthodes 
   indirectes
  </title>

  <para>
   L'accès indirect aux variables, propriétés et méthodes sera maintenant évalué 
   strictement dans l'ordre de gauche à droite, par opposition à la combinaison 
   précédente de cas spéciaux. Le tableau ci-dessous montre comment l'ordre 
   d'évaluation a changé.
  </para>

  <para>
   <table>
    <title>Ancienne et nouvelle évaluation des expressions indirectes</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Expression</entry>
       <entry>Interprétation PHP 5</entry>
       <entry>Interprétation PHP 7</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <code>$$foo['bar']['baz']</code>
       </entry>
       <entry>
        <code>${$foo['bar']['baz']}</code>
       </entry>
       <entry>
        <code>($$foo)['bar']['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']()</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']()</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>Foo::$bar['baz']()</code>
       </entry>
       <entry>
        <code>Foo::{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>(Foo::$bar)['baz']()</code>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   Le code qui utilisait l'ancien ordre d'évaluation de droite à gauche 
   doit être réécrit pour utiliser explicitement cet ordre d'évaluation 
   avec des accolades (voir la colonne du milieu ci-dessus). Cela rendra 
   le code compatible avec PHP 7.x et rétrocompatible avec PHP 5.x.
  </para>

  <para>
   Cela affecte également le mot clé &global;. La syntaxe des accolades 
   peut être utilisée pour émuler le comportement précédent si nécessaire :
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function f() {
    // Valide en PHP 5 uniquement.
    global $$foo->bar;

    // Valide en PHP 5 et 7.
    global ${$foo->bar};
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.list">
  <title>Modifications apportées à la gestion des <function>list</function></title>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.order">
   <title>
    la fonction <function>list</function> n'assigne plus de variable dans l'ordre inverse
   </title>

   <para>
    <function>list</function> assignera désormais des valeurs aux variables dans 
    l'ordre dans lequel elles sont définies, plutôt que dans l'ordre inverse. En 
    général, cela affecte uniquement le cas où <function>list</function> est 
    utilisée en conjonction avec l'opérateur de tableau <code>[]</code>, comme 
    illustré ci-dessous :
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list($a[], $a[], $a[]) = [1, 2, 3];
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(3)
  [1]=>
  int(2)
  [2]=>
  int(1)
}
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </informalexample>

   <para>
    En général, il est recommandé de ne pas compter sur l'ordre dans lequel les 
    affectations de la fonction <function>list</function> se produisent, car il s'agit d'un 
    détail d'implémentation qui peut changer à nouveau à l'avenir.
   </para>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.empty">
   <title>Les affectations de <function>list</function> vides ont été supprimées</title>

   <para>
    Les constructions de <function>list</function> ne peuvent plus être vides. 
    Les éléments suivants ne sont plus autorisés :
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list() = $a;
list(,,) = $a;
list($x, list(), $y) = $a;
?>
]]>
    </programlisting>
   </informalexample>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.string">
   <title><function>list</function> ne peut pas défaire &string;</title>

   <para>
    <function>list</function> ne peut plus défaire les variables de &string;.
    <function>str_split</function> devrait être utilisé à la place.
   </para>
  </sect4>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.array-order">
  <title>
   L'ordre des éléments des tableaux a changé lorsque les éléments sont créés 
   automatiquement pendant les affectations de référence
  </title>

  <para>
   L'ordre des éléments dans un tableau a changé lorsque ces éléments ont été 
   créés automatiquement en les référençant dans une assignation par 
   référence. Par exemple :
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.parentheses">
  <title>
   Les parenthèses autour des arguments de fonction n'affectent plus 
   le comportement
  </title>

  <para>
   En PHP 5, l'utilisation de parenthèses redondantes autour d'un argument de 
   fonction peut calmer les avertissements de normes strictes lorsque l'argument 
   de fonction a été passé par référence. L'avertissement est maintenant toujours émis.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function getArray() {
    return [1, 2, 3];
}

function squareArray(array &$a) {
    foreach ($a as &$v) {
        $v **= 2;
    }
}

// Generates a warning in PHP 7.
squareArray((getArray()));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Notice: Only variables should be passed by reference in /tmp/test.php on line 13
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
