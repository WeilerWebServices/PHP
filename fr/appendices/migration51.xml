<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351036 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<appendix xml:id="migration51" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Migration de PHP 5.0.x à PHP 5.1.x</title>
 <para>
  &manual.migration.seealso;
  <link linkend="migration5">5.0.x</link>, 
  <link linkend="migration52">5.2.x</link>,
  <link linkend="migration53">5.3.x</link>,
  <link linkend="migration54">5.4.x</link>,
  <link linkend="migration55">5.5.x</link> et
  <link linkend="migration56">5.6.x</link>.
 </para>

 <section xml:id="migration51.changes">
  <title>Nouvelles fonctionnalités PHP 5.1.x</title>
  <para>
   Ce qui a changé en PHP 5.1.x :
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Réécriture complète de la gestion des dates, avec support des fuseaux horaires.
    </para>
   </listitem>
   <listitem>
    <para>
     Amélioration significative des performances comparés à PHP 5.0.X.
    </para>
   </listitem>
   <listitem>
    <para>
     L'extension PDO est maintenant activée par défaut.
    </para>
   </listitem>
   <listitem>
    <para>
     Plus de 30 nouvelles fonctions dans différentes extensions et fonctions natives.
    </para>
   </listitem>
   <listitem>
    <para>
     Plus de 400 corrections de bogues.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="migration51.references">
  <title>Changement dans la gestion des références</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.references-overview">Présentation</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-fails">Code qui fonctionnait en
      4.3.x, mais qui échoue maintenant</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-error">Code qui fonctionnait en
      4.3.x, mais qui émet une alerte</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-works">Code qui échouait en PHP
      4.3.x, mais qui fonctionne maintenant</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-didnotwork">Code qui
      devrait avoir fonctionné en PHP 5.0.x</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-warnings">Alertes qui vont et viennent</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.references-overview">
   <title>Présentation</title>
   <para>
    Du point de vue du programmeur, le changement qui aura le plus d'impact
    sur le code déjà écrit est la manière avec laquelle les références sont
    gérées dans les versions PHP 4.4.0 et plus récentes.
   </para>
   <para>
    Jusqu'à la version PHP 4.3 incluse, il était possible d'envoyer,
    assigner ou retourner des variables par références, alors qu'elles auraient
    dues être retournées par valeur, comme des constantes, des valeurs temporaires (comme le résultat d'une expression), ou le résultat d'une fonction qui elle-même, retourne une valeur.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = "123";

function return_value() {
    global $foo;
    return $foo;
}

$bar = &return_value();
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    Même si ce code fonctionne tel qu'attendu en PHP 4.3, en général il
    conduit à une situation indéfinie. Le moteur Zend ne peut pas fonctionner
    correctement avec des valeurs passées par références. Ce bogue peut et
    a conduit à des corruptions de mémoire difficiles à reproduire, notamment
    lorsque le code de l'application est compliqué.
   </para>
   <para>
    En PHP 4.4.0, PHP 5.0.4 et toutes les versions plus récentes, le moteur
    Zend a été modifié pour reconnaître les cas où une valeur ne doit pas
    être utilisée par référence. La valeur réelle est maintenant utilisée
    dans ces cas, et une alerte est émise. Cette alerte prend la forme d'un
    message <constant>E_NOTICE</constant> en PHP 4.4.0 et plus récent, et
    <constant>E_STRICT</constant> en PHP 5.0.4 et plus récent.
   </para>
   <para>
    Du code qui pouvait produire des corruptions de mémoire ne peut plus le faire. Cependant, certains codes anciens peuvent fonctionner de manière
    différente.
   </para>
  </section>

  <section xml:id="migration51.references-fails">
   <title>Code qui fonctionnait en 4.3.x, mais qui échoue maintenant</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function func(&$arraykey) {
    return $arraykey; // la fonction retourne par valeur!
}

$array = array('a', 'b', 'c');
foreach (array_keys($array) as $key) {
    $y = &func($array[$key]);
    $z[] =& $y;
}

var_dump($z);
?>
<]]>
    </programlisting>
    <para>
     L'exécution du script ci-dessus dans une version de PHP antérieure à la
     correction du bogue produit ce résultat :
    </para>
    <screen>
<![CDATA[
array(3) {
  [0]=>
  &string(1) "a"
  [1]=>
  &string(1) "b"
  [2]=>
  &string(1) "c"
}
]]>
    </screen>
    <para>
     Après la correction du bogue, cela donne :
    </para>
    <screen>
<![CDATA[
array(3) {
  [0]=>
  &string(1) "c"
  [1]=>
  &string(1) "c"
  [2]=>
  &string(1) "c"
}
]]>
    </screen>
   </informalexample>
   <para>
    Ceci est dû au fait que <literal>func()</literal> effectue une assignation
    par valeur. La valeur de <varname>$y</varname> est réassignée, et que la
    liaison par référence avec <varname>$z</varname> est préservée. Avant la
    correction du bogue, la valeur était assignée par référence, faisant que
    la variable <varname>$y</varname> était réassignée à chaque assignement.    
    La tentative de liaison avec une valeur temporaire est la cause
    de la corruption de la mémoire.
   </para>
   <para>
    Ce code peut être réparé pour fonctionner à l'identique avec des versions
    pré et post-correction. La signature de <literal>func()</literal> peut être
    modifiée pour retourner les valeurs par référence, ou bien l'affectation
    par référence peut être supprimée du résultat de <literal>func()</literal>.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function func() {
    return 'function return';
}

$x = 'original value';
$y =& $x;
$y = &func();
echo $x;
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    En PHP 4.3, <varname>$x</varname> vaudrait 'original value', alors qu'après le changement, il
    vaudrait 'function return' : n'oubliez pas que la fonction ne retourne plus
    par référence, et que la référence est convertie en affectation par valeur.
    Encore une fois, cela peut être corrigé en forçant <literal>func()</literal> à retourner par
    référence, ou bien en éliminant l'affectation par référence.
   </para>
  </section>

  <section xml:id="migration51.references-error">
   <title>Code qui fonctionnait en PHP 4.3.x, mais qui émet maintenant
          une erreur</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {

    function getThis() {
        return $this;
    }

    function destroyThis() {
        $baz =& $this->getThis();
    }
}

$bar = new Foo();
$bar->destroyThis();
var_dump($bar);
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    En PHP 5.0.3, <varname>$bar</varname> vaut <constant>NULL</constant> au
    lieu de l'objet attendu. Cela arrive car <literal>getThis()</literal>
    retourne une valeur, mais que la valeur est assignée par référence.
    Même si cela fonctionne désormais comme attendu, ce code est en
    fait invalide, et émettra une alerte <constant>E_NOTICE</constant> sous
    PHP 4.4 ou <constant>E_STRICT</constant> en PHP 5.0.4 et plus récent.
   </para>
  </section>

  <section xml:id="migration51.references-works">
   <title>Code qui échouaient en PHP 4.3.x, mais qui fonctionne maintenant</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function &f() {
    $x = "foo";
    var_dump($x);
    print "$x\n";
    return($a);
}

for ($i = 0; $i < 3; $i++) {
    $h = &f();
}
?>
]]>
    </programlisting>
    <para>
     En PHP 4.3, le troisième appel à <function>var_dump</function> produit
     <constant>NULL</constant>, à cause d'une correction de la mémoire, causée
     par le retour d'une valeur non initialisée par référence. C'est du code
     valide en PHP 5.0.4 et plus récent, mais il produit une erreur dans les
     versions plus anciennes.
    </para>
   </informalexample>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = array('a1' => array('alfa' => 'ok'));
$arr =& $arr['a1'];
echo '-'.$arr['alfa']."-\n";
?>
]]>
    </programlisting>
    <para>
     Jusqu'en PHP 5.0.5, il n'était pas possible d'assigner un élément de
     tableau par référence de cette manière. C'est corrigé maintenant.
    </para>
   </informalexample>
  </section>

  <section xml:id="migration51.references-didnotwork">
   <title>Code qui <literal>aurait du fonctionner</literal> en PHP 5.0.x</title>
   <para>
    Il y a quelques cas de bogues rapportés en PHP PHP 5.0 avant la correction
    de ce bogue qui 'refonctionnent'. Cependant, dans tous les cas, des erreurs
    sont émises en PHP 5.1.x, car le code est invalide. Retourner des références
    avec <literal>self::</literal> fonctionne maintenant, mais émet une alerte
    <constant>E_STRICT</constant>, et même si votre expérience est différente
    lors de l'assignation d'un objet par référence, vous verrez toujours une
    erreur <constant>E_ERROR</constant> lorsque vous tentez cela même si
    l'assignation semble fonctionner.
   </para>
  </section>

  <section xml:id="migration51.references-warnings">
   <title>Alertes qui vont et viennent</title>
   <para>
    Des appels imbriqués à des fonctions retournant des valeurs par référence
    sont valides en PHP 4.3.x et PHP 5.1.x, mais ils émettent des erreurs
    <constant>E_NOTICE</constant> et <constant>E_STRICT</constant> dans les
    nouvelles versions de PHP.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function & foo() {
    $var = 'ok';
    return $var;
}

function & bar() {
    return foo();
}

$a =& bar();
echo "$a\n";
?>
]]>
    </programlisting>
   </informalexample>
  </section>
 </section>

 <section xml:id="migration51.reading">
  <title>Lecture de []</title>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class XmlTest {

    function test_ref(&$test) {
        $test = "ok";
    }

    function test($test) { }

    function run() {
        $ar = array();
        $this->test_ref($ar[]);
        var_dump($ar);
        $this->test($ar[]);
    }
}

$o = new XmlTest();
$o->run();
?>
]]>
   </programlisting>
  </informalexample>
  <para>
   Ce code va toujours émettre une alerte fatale <constant>E_ERROR</constant>,
   car l'opérateur [] ne peut pas être utilisé pour lire des données. C'est du
   code invalide depuis PHP 4.4.2 et PHP 5.0.5.
  </para>
 </section>

 <section xml:id="migration51.integer-parameters">
  <title>Valeurs entières dans les paramètres de fonction</title>
  <para>
   Avec la venue de PHP 5.0.x, une nouvelle API d'analyse des arguments a
   été introduite entre 5.0.x et 5.1.x. La gestion des entiers est très
   stricte, et rejette tous les nombres qui ne sont pas valides lorsque PHP
   attend un entier. Ces validations ont maintenant été assouplies, pour
   accepter des chaînes telles que " 123" et "123 ", et elles ne les refuseront
   plus comme c'était le cas en PHP 5.0.x. Toutefois, pour faire la promotion de
   la sécurité et de la validation, les fonctions PHP vont désormais émettre
   des alertes <constant>E_NOTICE</constant> lorsque de tels arguments sont donnés.
  </para>
 </section>

 <section xml:id="migration51.oop">
  <title>Changements dans les classes et objets</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.oop-functions"><literal>instanceof</literal>,
      <literal>is_a()</literal>, <literal>is_subclass_of()</literal> et
      <literal>catch</literal></link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-methods">Méthodes privées abstraites</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-modifiers">Options d'accès dans les interfaces</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-inheritance">Changements dans les règles d'héritage</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-constants">Constantes de classe</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.oop-functions">
   <title><literal>instanceof</literal>, <literal>is_a()</literal>,
    <literal>is_subclass_of()</literal> et <literal>catch</literal></title>
   <para>
    En PHP 5.0, <literal>is_a()</literal> a été rendu abandonné et remplacé
    par l'opérateur <literal>instanceof</literal>. Il y a eu des problèmes
    dans les premières implantations
    de <literal>instanceof</literal>, qui se base sur <literal>__autoload()</literal>
    pour rechercher les classes non définies. Si la classe n'est pas définie,
    <literal>instanceof</literal> émettait une erreur fatale
    <constant>E_ERROR</constant>, après l'échec de <literal>__autoload()</literal>.
    Le même comportement apparaissait avec l'opérateur <literal>catch</literal>
    et la fonction <literal>is_subclass_of()</literal>.
   </para>
   <para>
    Aucune de ces instructions n'appelle plus <literal>__autoload()</literal>
    en PHP 5.1.x, et les palliatifs à base de <literal>class_exists()</literal>
    utilisé dans le code écrit en PHP 5.0.x ne sont plus nécessaires.
   </para>
  </section>

  <section xml:id="migration51.oop-methods">
   <title>Méthodes privées abstraites</title>
   <para>
    Les méthodes privées abstraites sont supportées en PHP entre 5.0.0 et
    et 5.0.4, mais elles ont été abandonnées car <literal>private</literal>
    et <literal>abstract</literal> sont mutuellement exclusif.
   </para>
  </section>

  <section xml:id="migration51.oop-modifiers">
   <title>Changements dans les règles d'héritage</title>
   <para>
    Avec PHP 5.0, les déclarations de fonctions dans les interfaces sont
    traitées exactement de la même manière que pour les déclarations de
    fonctions dans les classes. Ce n'est plus le cas depuis octobre 2004,
    au moment où seuls l'option d'accès <literal>public</literal> a été
    autorisée dans les déclarations d'interface. Depuis avril 2005, ce qui
    est antérieur à PHP 5.0b1, l'option <literal>static</literal> a aussi
    été autorisée. Mais les options <literal>protected</literal>
    and <literal>private</literal> émettent désormais une erreur
    <constant>E_ERROR</constant>, tout comme <literal>abstract</literal>.
    Notez que cette modification ne va pas affecter votre code existant,
    car aucune de ces options n'a de sens dans le cadre d'une interface.
   </para>
  </section>

  <section xml:id="migration51.oop-inheritance">
   <title>Changements dans les règles d'héritages</title>
   <para>
    En PHP 5.0, il était possible d'avoir une déclaration de fonction qui
    dérivait d'une classe ayant la même fonction mais pas la même signature.
    Par exemple :
   </para>
   <informalexample>
    <para>
     Ce code va émettre une erreur <constant>E_STRICT</constant> si utilisé
     avec PHP 5.1.x.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
    function &return_by_ref() {
        $r = 1;
        return $r;
    }
}

class Derived extends Base {
    function return_by_ref() {
        return 1;
    }
}
?>
]]>
    </programlisting>
   </informalexample>
  </section>

  <section xml:id="migration51.oop-constants">
   <title>Constantes de classe</title>
   <para>
    En PHP 5.0.x, le code suivant était valide :
   </para>
   <informalexample>
    <para>
     En PHP 5.1.x, la redéfinition d'une constante de classe émet une
     erreur fatale <constant>E_ERROR</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class test {
    const foobar = 'foo';
    const foobar = 'bar';
}

?>
]]>
    </programlisting>
   </informalexample>
  </section>
 </section> <!-- end of migration51.oop -->

 <section xml:id="migration51.extensions">
  <title>Extensions</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.extensions-gone">Extensions qui ont été retirées
     du coeur de PHP</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.extensions-constants">Constantes de classes,
     nouvelles dans les extensions de PHP 5.1.x</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.extensions-gone">
   <title>Extensions qui ont été retirées du coeur de PHP</title>
   <para>
    La première chose que vous remarquerez en chargeant PHP 5.1.x, est que
    plusieurs extensions anciennes ont disparues. Ces extensions sont encore
    supportées, et entretenues dans la bibliothèque PECL, PHP Extension
    Community Library (PECL), accessible à l'URL
    <link xlink:href="&url.pecl;">&url.pecl;</link>.
   </para>
   <table>
    <title>Extensions retirées</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Extension</entry>
       <entry>Remplacement/Statut</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>ext/cpdf</entry>
       <entry>pecl/pdflib</entry>
      </row>
      <row>
       <entry><link linkend="ref.dbx">ext/dbx</link></entry>
       <entry>pecl/dbx</entry>
      </row>
      <row>
       <entry><link linkend="ref.dio">ext/dio</link></entry>
       <entry>pecl/dio</entry>
      </row>
      <row>
       <entry>ext/fam</entry>
       <entry>Sans entretien</entry>
      </row>
      <row>
       <entry><link linkend="ref.ingres">ext/ingres_ii</link></entry>
       <entry>pecl/ingres</entry>
      </row>
      <row>
       <entry>ext/ircg</entry>
       <entry>Sans entretien</entry>
      </row>
      <row>
       <entry>ext/mcve</entry>
       <entry>pecl/mcve</entry>
      </row>
      <row>
       <entry>ext/mnogosearch</entry>
       <entry>Sans entretien</entry>
      </row>
      <row>
       <entry>ext/oracle</entry>
       <entry>
        <link linkend="ref.oci8">ext/oci8</link> or
        <link linkend="ref.pdo-oci">ext/pdo_oci</link>
       </entry>
      </row>
      <row>
       <entry>ext/ovrimos</entry>
       <entry>Sans entretien</entry>
      </row>
      <row>
       <entry>ext/pfpro</entry>
       <entry>Sans entretien</entry>
      </row>
      <row>
       <entry>ext/w32api</entry>
       <entry><link xlink:href="&url.pecl.package;ffi">pecl/ffi</link></entry>
      </row>
      <row>
       <entry>ext/yp</entry>
       <entry>Sans entretien</entry>
      </row>
      <row>
       <entry>ext/activescript</entry>
       <entry>
        <link xlink:href="&url.pecl.package;activescript">pecl/activescript</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    Les modules de PECL qui ne sont plus entretenus (i.e. qui n'ont pas
    été mis à jour depuis longtemps, ou qui n'ont plus de responsable
    déclaré), sont toujours accessible via CVS, à l'adresse
    <link xlink:href="&url.php.svn;pecl">&url.php.svn;pecl</link>.
    Cependant, les modules PHP qui ne sont pas publiés, sont par nature
    sans support, et leur installation est à vos risques et périls.
   </para>
  </section>

  <section xml:id="migration51.extensions-constants">
   <title>Constantes de classes, nouvelles dans les extensions
   de PHP 5.1.x</title>
   <para>
    L'API du moteur Zend 2.1 permet aux développeurs d'extensions de
    déclarer leurs constantes dans les versions orientées objets de leur
    extension. Les nouvelles extensions écrites pour PHP 5.1.x, incluant
    <link linkend="ref.spl">SPL</link>,
    <link linkend="intro.pdo">PDO</link>,
    <link linkend="book.xmlreader">XMLReader</link> et
    <link linkend="ref.datetime">date</link>, dispose de constantes au format
    <constant>PDO::CLASS_CONSTANT</constant> plutôt qu'au format C de type
    <constant>PDO_CLASS_CONSTANT</constant> afin de réduire la pollution des
    espaces de noms globaux de PHP.
   </para>
  </section>
 </section> <!-- end of migration51.extensions -->

 <section xml:id="migration51.datetime">
  <title>Support des dates et heures</title>
  <para>
   Le support des dates et heures a été entièrement réécrit en PHP 5.1.x,
   et n'utilise plus du tout le système pour gérer les opérations sur les
   fuseaux horaires. Désormais, il utilise, dans l'ordre :
  </para>
  <itemizedlist>
   <listitem>
    <para>
     La fuseau horaire configuré avec la fonction
     <function>date_default_timezone_set</function>
    </para>
   </listitem>
   <listitem>
    <para>
     La variable d'environnement TZ si elle n'est pas vide
    </para>
   </listitem>
   <listitem>
    <para>
     une prédiction magique (si le système d'exploitation le supporte)
    </para>
   </listitem>
   <listitem>
    <para>
     Si aucune méthode ci-dessus ne fonctionne, UTC.
    </para>
   </listitem>
  </itemizedlist>
  <informalexample>
   <para>
    Pour s'assurer de la précision, et éviter les alertes
    <constant>E_STRICT</constant>, vous devez
    définir votre fuseau horaire dans le fichier
    <filename>php.ini</filename> avec ce format :
   </para>
   <para>
    date.timezone = Europe/Paris
   </para>
  </informalexample>
  <para>
   Les fuseaux horaires supportés sont listés dans l'annexe de la documentation :
   <link linkend="timezones">annexe des fuseaux horaires</link>.
  </para>
  <para>
   Notez aussi que <function>strtotime</function> retourne désormais &false;
   en cas d'échec, au lieu de -1.
  </para>
 </section>

 <section xml:id="migration51.databases">
  <title>Modifications dans le support des bases de données</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.databases-pdo">extension PDO</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.databases-mysql">Support de MySQL</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.databases-sqlite">Support de SQLite</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.databases-pdo">
   <title>Extension PDO</title>
   <para>
    Les <link linkend="intro.pdo">PHP Data Objects (PDO)</link> ont été introduits
    comme extension PECL en PHP 5.0, et sont devenus partie intégrale de la
    distribution PHP en version 5.1.0. L'extension PDO propose une interface
    constante pour accéder aux bases de données, et est utilisée avec des
    pilotes PDO. Chaque pilote assure le relais avec une base de données
    spécifique, mais l'envoi de requête et la réception des données sont
    fait depuis les fonctions PDO. Le pilote est choisi avec la fonction
    <function>PDO::__construct</function>.
   </para>
   <para>
    Notez que l'extension PDO et ses pilotes sont conçus pour être des
    extensions partagées. Cela permet des mises à jour simples des pilotes
    à partir de PECL, sans forcer la recompilation de PHP.
   </para>
   <para>
    Au moment de la publication de PHP 5.1.x, PDO est fin prêt pour une
    utilisation grand public, et peut être adopté dans la plupart des
    situations. Cependant, il faut bien comprendre que PDO et ses pilotes
    sont relativement jeunes, et manquent encore de certaines fonctionnalités
    spécifiques à une base de données. Faites votre évaluation complète de
    PDO avant de l'adopter pour un projet.
   </para>
   <para>
    L'ancien code aura besoin des extensions spécifiques de base de données,
    qui sont toujours entretenues.
   </para>
  </section>

  <section xml:id="migration51.databases-mysql">
   <title>Support de MySQL</title>
   <para>
    En PHP 4, le support MySQL 3 était automatique. Avec les versions 5.0 de
    PHP, il y a maintenant 2 extensions MySQL, qui portent les noms de
    'mysql' et 'mysqli' : elles sont été conçues pour supporter
    MySQL &lt; 4.1 et MySQL 4.1 et plus récent, respectivement. Avec
    l'introduction de PDO, qui fournit une interface rapide avec toutes
    les bases de données supportées par PHP, le pilote PDO_MYSQL peut supporter
    toutes les versions de MySQL (MySQL 3, 4 or 5) avec du code PHP écrit
    avec PDO, en fonction de la version de la bibliothèque de MySQL compilée
    avec PHP. Les anciennes extensions MySQL restent en place pour assurer la
    compatibilité ascendante, mais elles ne sont plus activées par défaut.
   </para>
  </section>

  <section xml:id="migration51.databases-sqlite">
   <title>Support de SQLite</title>
   <para>
    En PHP 5.0.x, le support de SQLite 2 a été ajouté dans la distribution,
    et a été placé en PECL pour PHP 4.3 et 4.4. Avec l'introduction de PDO,
    l'extension sqlite se dédouble pour servir aussi de pilote PDO. Cela
    est dû au fait que l'extension PDO de PHP 5.1.x dépend de PDO.
   </para>
   <para>
    PHP 5.1.x inclut un grand nombre d'interface alternatives pour sqlite :
   </para>
   <para>
    L'extension sqlite fournit une approche classique procédurale et POO, telle
    que celle qui a été utilisée dans les anciennes versions de PDO. Elle
    fournit aussi un pilote 'sqlite2', qui permet d'accéder au code SQLite2,
    en utilisant PDO.
   </para>
   <para>
    PDO_SQLITE fournit un pilote 'sqlite' version 3. SQLite version 3 est
    nettement supérieur à SQLite version 2, mais les formats de fichiers
    des deux versions sont incompatibles.
   </para>
   <para>
    Si votre projet basé sur SQLite est déjà écrit, et fonctionne avec
    d'anciennes versions de PHP, vous pouvez continuer à utiliser ext/sqlite
    sans problème, mais vous devez explicitement activer PDO et sqlite.
    Les nouveaux projets doivent utiliser PDO et le pilote 'sqlite' version 3,
    car il est plus rapide que le pilote SQLite 2, dispose d'un verrou efficace,
    supporte les commandes préparées et les colonnes binaires natives.
   </para>
   <para>
    Vous devez activer PDO pour utiliser l'extension SQLite. Si vous voulez
    compiler PDO comme extension partagée, alors l'extension SQLite doit être
    aussi une extension partagée. C'est la même chose pour le pilote PDO.
   </para>
  </section>
 </section> <!-- end of migration51.databases -->

 <section xml:id="migration51.errorcheck">
  <title>Vérifier <constant>E_STRICT</constant></title>
  <informalexample>
   <para>
    Si vous n'avez qu'un seul script à vérifier, vous pouvez identifier les
    erreurs <constant>E_STRICT</constant> en utilisant PHP en ligne de commande :
   </para>
   <programlisting role="shell">
    php -d error_reporting=4095 -l script_to_check.php
   </programlisting>
   <para>
    Pour les projets d'envergure, le script Shell ci-dessous sera plus
    efficace :
   </para>
   <programlisting role="shell">
<![CDATA[
#!/bin/sh

directory=$1

shift

# Les extensions suivantes sont vérifiées
extensions="php inc"

check_file ()
{
  echo -ne "Vérification E_STRICT de la syntaxe PHP sur $1 ..."

  # Options:
  ERRORS=`/www/php/bin/php -d display_errors=1 -d html_errors=0 -d error_prepend_string=" " -d error_append_string=" " -d error_reporting=4095 -l $1 | grep -v "No syntax errors detected"`

  if test -z "$ERRORS"; then
    echo -ne "OK."
  else
    echo -e "Erreurs trouvées!\n$ERRORS"
  fi

  echo
}

# test des autres arguments
for FILE in "$@" ; do
  for ext in $extensions; do
     if echo $FILE | grep "\.$ext$" > /dev/null; then
       if test -f $FILE; then
         check_file "$FILE"
       fi
     fi
  done
done
]]>
   </programlisting>
  </informalexample>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax ft=docbkphp fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->