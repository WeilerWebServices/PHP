<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350429 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

 <sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
  <title>Syntaxe de base</title>
  <sect2 xml:id="language.oop5.basic.class">
   <title>class</title>
   <para>
    Une définition de classe basique commence par le mot-clé
    <literal>class</literal>, suivi du nom de la classe.
    Suit une paire d'accolades contenant la définition des propriétés et des
    méthodes appartenant à la classe.
   </para>
   <para>
    Le nom de la classe peut être quelconque à condition que ce ne soit pas un
    <link linkend="reserved">mot réservé</link> en PHP. Un nom de classe valide commence
    par une lettre ou un underscore, suivi de n'importe quel nombre de chiffres, ou de lettres, ou
    d'underscores. Si on devait l'exprimer sous forme d'une expression rationnelle, il s'agirait de
    <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>.
   </para>
   <para>
    Une classe peut contenir ses propres <link linkend="language.oop5.constants">constantes</link>,
    <link linkend="language.oop5.properties">variables</link>
    (appelées "propriétés" ou "attributs"), et fonctions (appelées "méthodes").
   </para>
   <example>
    <title>Définition typique d'une classe</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // déclaration d'une propriété
    public $var = 'une valeur par défaut';

    // déclaration des méthodes
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
    </programlisting>
   </example>
   <para>    
    La pseudo-variable <varname>$this</varname> est disponible
    lorsqu'une méthode est appelée depuis un contexte objet.
    <varname>$this</varname> est une référence à l'objet appelant (habituellement,
    l'objet auquel la méthode appartient, mais ce peut être un autre objet si
    la méthode est appelée de manière
    <link linkend="language.oop5.static">statique</link> depuis le
    contexte d'un autre objet).
    À partir de PHP 7.0.0 appeller une méthode non statique statiquement depuis un
    context incompatible résulte en $this étant indéfini à l'intérieur de la méthode.
    Appeller une méthode non statique statiquement depuis un context incompatible a
    été rendu obsolète à partir de PHP 5.6.0. À partir de PHP 7.0.0 appelller une
    méthode non statique statiquement a été rendu obsolète généralement (même si
    appellé depuis un contexte compatible). Antérieur à PHP 5.6.0 ce genre d'appel
    déclanchaient déjà une notice stricte.
   </para>
   <para>
    <example xml:id="language.oop5.basic.class.this">
     <title>Quelques exemples de la pseudo-variable <varname>$this</varname></title>
     <simpara>
      Nous assumerons que error_reporting est désactivé dans cet exemple ;
      sinon le code suivant déclancherait des notices obsolète et stricte,
      respectivement en fonction de la version de PHP.
     </simpara>
     <programlisting role="php">
<![CDATA[
<?php
class A
{
  function toto()
  {
    if (isset($this)) {
      echo '$this est définie (';
      echo get_class($this);
      echo ")\n";
    } else {
      echo "\$this n'est pas définie.\n";
    }
  }
}

class B
{
  function titi()
  {
    A::toto();
  }
}

$a = new A();
$a->toto();

A::toto();
$b = new B();
$b->titi();

B::titi();
?>
]]>
     </programlisting>
     &example.outputs.5;
     <screen>
<![CDATA[
$this est définie (A)
$this n'est pas définie.
$this est définie (B)
$this n'est pas définie.
]]>
     </screen>
     &example.outputs.7;
     <screen>
<![CDATA[
$this est définie (A)
$this n'est pas définie.
$this n'est pas définie.
$this n'est pas définie.
]]>
     </screen>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.basic.new">
   <title>Le mot-clé <literal>new</literal></title>
   <para>
    Pour créer une instance d'une classe, le mot-clé <literal>new</literal> doit être
    utilisé. Un objet sera alors systématiquement créé, à moins qu'il ait un
    <link linkend="language.oop5.decon">constructeur</link>
    défini qui lance une  <link linkend="language.exceptions">exception</link>
    en cas d'erreur. Les classes devraient être définies avant l'instanciation (dans
    certains cas, c'est impératif).
   </para>
   <para>
    Si une &string; contenant un nom de classe est utilisée avec 
    <literal>new</literal>, une nouvelle instance de cette classe sera créée.
    Si la classe est dans un espace de noms, son nom pleinement qualifié doit être utilisé.
   </para>

   <note>
    <para>
     S'il n'y a pas d'arguments à passer au constructeur de la classe,
     les parenthèses après le nom de la classe peuvent être omises.
    </para>
   </note>
   
   <example>
    <title>Création d'une instance</title>
    <programlisting role="php">
<![CDATA[
<?php
$instance = new SimpleClass();

// Ceci peut également être réalisé avec une variable :
$className = 'SimpleClass';
$instance = new $className(); // new SimpleClass()
?>
]]>
    </programlisting>
   </example>
   <para>
    Dans le contexte de la classe, il est possible de créer un nouvel objet
    avec <literal>new self</literal> et <literal>new parent</literal>.
   </para>
   <para>
    Lors de l'assignation d'une instance déjà créée d'une classe à une variable,
    la nouvelle variable accédera à la même instance que l'objet qui a été assigné.
    Ce comportement est le même lors du passage d'une instance à une fonction.
    Une copie d'un objet déjà créé peut être effectuée par
    <link linkend="language.oop5.cloning">clonage</link>.
   </para>
   <example>
    <title>Assignation d'un objet</title>
    <programlisting role="php">
<![CDATA[
<?php

$instance = new SimpleClass();

$assigned   =  $instance;
$reference  =& $instance;

$instance->var = '$assigned aura cette valeur';

$instance = null; // $instance et $reference deviennent null

var_dump($instance);
var_dump($reference);
var_dump($assigned);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned aura cette valeur"
}
]]>
    </screen>
   </example>
   <para>
    PHP 5.3.0 a introduit de nouvelles manières de créer des objets :
   </para>
   <example>
    <title>Créer de nouveaux objets</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    static public function getNew()
    {
        return new static;
    }
}

class Child extends Test
{}

$obj1 = new Test();
$obj2 = new $obj1;
var_dump($obj1 !== $obj2);

$obj3 = Test::getNew();
var_dump($obj3 instanceof Test);

$obj4 = Child::getNew();
var_dump($obj4 instanceof Child);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
]]>
    </screen>
   </example>

   <para>
    PHP 5.4.0 introduit la possibilité d'accéder un membre d'un objet nouvellement
    créé en une seule expression :
   </para>
   <example>
    <title>Accéder un membre d'un objet nouvellement créé</title>
    <programlisting role="php">
<![CDATA[
<?php
echo (new DateTime())->format('Y');
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
2016
]]>
    </screen>
   </example>

   <note>
    <simpara>
     Antérieur à PHP 7.1, les arguments ne sont pas évalués s'il n'y a pas de
     fonction constructeur définie.
    </simpara>
   </note>
  </sect2>
  
  <sect2 xml:id="language.oop5.basic.properties-methods">
   <title>Propriétés et méthodes</title>
   <para>
    Les propriétes et méthodes de classe vivent dans des "espaces de noms" séparé,
    donc il est possible d'avoir une propriété et une méthode avec le même nom.
    Faire référence à la fois a une propriété ainsi qu'une méthode ont la même
    notation, et le fait qu'une propriété sera accédée ou qu'une méthode sera appelée,
    dépend seulement du contexte, c'est à dire si l'utilisation est un accès variable
    ou un appel de fonction.
   </para>
   <example>
    <title>Accès de propriété contre appel de méthode</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public $bar = 'property';
    
    public function bar() {
        return 'method';
    }
}

$obj = new Foo();
echo $obj->bar, PHP_EOL, $obj->bar(), PHP_EOL;
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
property
method
]]>
    </screen>
   </example>
   <para>
    Ceci signifie qu'appeller une <link linkend="functions.anonymous">fonction
    anonyme</link> qui a été assigné à une propriété n'est pas possible directement.
    Au lieu de cela, la propriété doit d'abord être affectée à une variable.
    À partir de PHP 7.0.0 il est possible d'appeler ce genre de propriété directement
    en la mettant entre parenthèses.
   </para>
   <example>
    <title>Appeller une fonction anonyme enregistré dans une propriété</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public $bar;
    
    public function __construct() {
        $this->bar = function() {
            return 42;
        };
    }
}

$obj = new Foo();

// à partir de PHP 5.3.0:
$func = $obj->bar;
echo $func(), PHP_EOL;

// alternativement, à partir de PHP 7.0.0:
echo ($obj->bar)(), PHP_EOL;
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
42
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.extends">
   <title>Le mot-clé <literal>extends</literal></title>
   <para>
    Une classe peut hériter des méthodes et des membres d'une autre classe en
    utilisant le mot-clé <literal>extends</literal> dans la déclaration.
    Il n'est pas possible d'étendre plusieurs classes : une classe peut
    uniquement hériter d'une seule classe de base.
   </para>
   <para>
    Les méthodes et membres hérités peuvent être surchargés en les redéclarant avec le
    même nom que dans la classe parente. Cependant, si la classe parente a défini
    une méthode comme <link linkend="language.oop5.final">final</link>, alors celle-ci
    ne sera pas surchargeable. Il est possible d'accéder aux
    méthodes ou une propriétés statiques surchargées en y faisant référence avec l'opérateur
    <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>.
   </para>
   <para>
    Lors de la surcharge de méthodes, la signature devrait rester la même ; sinon,
    PHP génèrera une erreur de niveau <constant>E_STRICT</constant>. Ceci ne s'applique pas
    au constructeur, qui accepte la surcharge avec des paramètres différents.
   </para>
   <example>
    <title>Héritage simple d'une classe</title>
    <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
  // Redéfinition de la méthode parente
  function displayVar()
  {
    echo "Classe étendue\n";
    parent::displayVar();
  }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Classe étendue
une valeur par défaut
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.class.class">
   <title>::class</title>

   <para>
    Depuis PHP 5.5, le mot clé <literal>class</literal> est également utilisé
    pour la résolution des noms de classes. Vous pouvez récupérer une chaîne
    contenant le nom qualifié complet de la classe <literal>ClassName</literal>
    en utilisant <literal>ClassName::class</literal>. C'est particulièrement
    pratique avec les classes utilisant des
    <link linkend="language.namespaces">espaces de noms</link>.
   </para>
   <para>
    <example xml:id="language.oop5.basic.class.class.name">
     <title>Résolution de nom de classe</title>
     <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }
    
    echo ClassName::class;
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
NS\ClassName
]]>
     </screen>
    </example>
   </para>
   <note>
    <para>
     La résolution du nom de classe en utilisant <literal>::class</literal> est une
     transformation lors de la compilation. C'est à dire à l'instant où la chaine du
     nom de classe est crée aucun auto-chargement n'a encore eu lieu. Par conséquent,
     les noms de classes sont étendues même si la classe n'existe pas. Aucune erreur
     n'est émise dans ce cas là.
    </para>
   </note>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
