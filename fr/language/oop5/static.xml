<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337875 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

 <sect1 xml:id="language.oop5.static" xmlns="http://docbook.org/ns/docbook">
  <title>Statique</title>

  <tip>
   <simpara>
    Cette page décrit l'utilisation du mot clé <literal>static</literal>
    qui permet de définir des méthodes et des propriétés statiques.
    <literal>static</literal> peut aussi être utilisé pour
    <link linkend="language.variables.scope.static">définir des variables statiques</link>
    et pour
    <link linkend="language.oop5.late-static-bindings">finir des liaisons statiques</link>.
    Reportez-vous à ces pages pour plus d'informations sur la signification de
    <literal>static</literal>.
   </simpara>
  </tip>
  
  <para>
   Le fait de déclarer des propriétés ou des méthodes comme statiques vous
   permet d'y accéder sans avoir besoin d'instancier la classe. On ne peut
   accéder à une propriété déclarée comme statique avec l'objet instancié d'une
   classe (bien que ce soit possible pour une méthode statique).
  </para>

  <para>
   Pour des raisons de compatibilité avec PHP 4, si aucune déclaration de
   <link linkend="language.oop5.visibility">visibilité</link>
   n'est spécifiée, alors la propriété ou la méthode sera automatiquement
   considérée comme <literal>public</literal>.
  </para>
  
  <sect2 xml:id="language.oop5.static.methods">
   <title>Static methods</title>

  <para>
   Comme les méthodes statiques peuvent être appelées sans qu'une instance
   d'objet n'ait été créée, la pseudo-variable <varname>$this</varname> n'est pas
   disponible dans les méthodes déclarées comme statiques.
  </para>

   <caution>
    <simpara>
     En PHP 5, l'appel statique de méthodes non-statiques émet une erreur de niveau
     <constant>E_STRICT</constant>.
    </simpara>
   </caution>

   <warning>
    <simpara>
     En PHP 7, l'appel statique de méthodes non-statiques est déconseillé et 
     génèrera une alerte <constant>E_DEPRECATED</constant>. La prise en charge 
     de l'appel statique de méthodes non-statiques sera supprimé dans le futur.
    </simpara>
   </warning>

   <example>
   <title>Exemple avec une méthode statique</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
$classname = 'Foo';
$classname::aStaticMethod(); // À partir de PHP 5.3.0
?>
]]>
    </programlisting>
  </example> 
  </sect2>
  
  <sect2 xml:id="language.oop5.static.properties">
   <title>Propriétés statiques</title>
     <para>
      On ne peut pas accéder à des propriétés statiques à travers l'objet en
      utilisant l'opérateur <literal>-&gt;</literal>.
     </para>

  <para>
   Comme n'importe quelle autre variable PHP statique, les propriétés statiques ne peuvent être
   initialisées qu'en utilisant un littéral ou une constante ; les expressions ne sont pas
   permises. Ainsi, vous pouvez initialiser une propriété statique avec un
   entier ou un tableau, mais pas avec une autre variable, ni avec la valeur de retour d'une
   fonction, ni avec un objet.
  </para>

  <para>
   Depuis PHP 5.3.0, il est possible de référencer la classe en utilisant
   une variable. La valeur de la variable ne peut être un mot-clé (par exemple <literal>self</literal>,
   <literal>parent</literal> et <literal>static</literal>).
  </para>

  <example>
   <title>Exemple avec une propriété statique</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}

class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}


print Foo::$my_static . "\n";

$foo = new Foo();
print $foo->staticValue() . "\n";
print $foo->my_static . "\n";      // "Propriété" my_static non définie

print $foo::$my_static . "\n";
$classname = 'Foo';
print $classname::$my_static . "\n"; // Depuis PHP 5.3.0

print Bar::$my_static . "\n";
$bar = new Bar();
print $bar->fooStatic() . "\n";
?>
]]>
   </programlisting>
  </example>
  </sect2>
  
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
