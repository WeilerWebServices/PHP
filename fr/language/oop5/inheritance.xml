<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334699 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<sect1 xml:id="language.oop5.inheritance" xmlns="http://docbook.org/ns/docbook">
 <title>Héritage</title>
 <para>
  L'héritage est un des grands principes de la programmation orientée objet (POO), et
  PHP l'implémente dans son modèle objet. Ce principe va affecter la manière dont
  de nombreuses classes sont en relation les unes avec les autres.
 </para>
 <para>
  Par exemple, lorsque vous étendez une classe, la classe fille hérite de toutes
  les méthodes publiques et protégées de la classe parente. Tant qu'une classe n'écrase
  pas ces méthodes, elles conservent leur fonctionnalité d'origine.
 </para>
 <para>
  L'héritage est très utile pour définir et abstraire certaines fonctionnalités
  communes à plusieurs classes, tout en permettant la mise en place de
  fonctionnalités supplémentaires dans les classes enfants, sans avoir à réimplémenter
  en leur sein toutes les fonctionnalités communes.
 </para>
 
 <note>
   <para>
    A moins que l'autoload ne soit utilisé, les classes doivent être connues avant d'être
    utilisées. Les classes mères doivent être définies avant l'écriture d'un héritage. Cette
    règle générale s'applique aussi dans le cas d'héritage ou d'implémentation d'interfaces.
   </para>
  </note>
 
 <sect2 xml:id="language.oop5.inheritance.examples">
  <example xml:id="language.oop5.inheritance.examples.ex1">
   <title>Exemple d'héritage</title>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function printItem($string)
    {
        echo 'Foo: ' . $string . PHP_EOL;
    }
    
    public function printPHP()
    {
        echo 'PHP est super' . PHP_EOL;
    }
}

class Bar extends Foo
{
    public function printItem($string)
    {
        echo 'Bar: ' . $string . PHP_EOL;
    }
}

$foo = new Foo();
$bar = new Bar();
$foo->printItem('baz'); // Affiche : 'Foo: baz'
$foo->printPHP();       // Affiche : 'PHP est super'
$bar->printItem('baz'); // Affiche : 'Bar: baz'
$bar->printPHP();       // Affiche : 'PHP est super'

?>
]]>
   </programlisting>
  </example>
 </sect2>
</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
