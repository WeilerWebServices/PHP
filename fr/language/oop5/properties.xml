<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351133 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Propriétés</title>

 <para>
  Les variables au sein d'une classe sont appelées <emphasis>propriétés</emphasis>.
  On peut également les retrouver sous les dénominations <emphasis>attributs</emphasis>,
  ou <emphasis>champs</emphasis>, mais nous conservons l'appellation
  <emphasis>propriété</emphasis> pour cette documentation.
  Elles sont définies en utilisant un des mots-clés <literal>public</literal>,
  <literal>protected</literal>, ou <literal>private</literal>, suivi
  optionellement d'une déclaration de type, suivi d'une déclaration classique
  de variable. Cette déclaration peut comprendre une initialisation, mais
  celle-ci doit être une valeur constante, c'est à dire qu'elle doit pouvoir
  être évaluée pendant la compilation du code, et qu'elle ne peut pas dépendre
  d'informations déterminées lors de l'exécution de celui-ci pour pouvoir être
  évaluée.
 </para>
 <para>
  Référez-vous à <xref linkend="language.oop5.visibility" /> pour plus
  d'informations sur la signification
  de <literal>public</literal>, <literal>protected</literal>,
  et <literal>private</literal>.
 </para>
 <note>
  <para>
   Afin de maintenir la rétrocompatibilité avec PHP 4, PHP 5 continue d'accepter 
   l'usage du mot-clé <literal>var</literal> pour la déclaration de propriétés en
   remplacement de (ou en plus de) <literal>public</literal>, <literal>protected</literal>,
   et <literal>private</literal>. Cependant, <literal>var</literal> n'est plus requis
   par le modèle objet de PHP 5. Pour les versions allant de PHP 5.0 à 5.1.3, l'usage de
   <literal>var</literal> était considéré comme obsolète et déclenchait un
   avertissement de niveau <constant>E_STRICT</constant>, mais depuis PHP 5.1.3,
   l'usage n'est plus obsolète et ne déclenche plus d'avertissement.
  </para>
  <para>
   Si vous déclarez une propriété en utilisant <literal>var</literal> au lieu
   de <literal>public</literal>, <literal>protected</literal>, ou
   <literal>private</literal>, alors PHP 5 traitera la propriété comme si elle avait
   été déclarée comme <literal>public</literal>.
  </para>
 </note>
 <para>
  
  Au sein des méthodes de classes, les propriétés non statiques peuvent être
  appelées en utilisant la syntaxe <literal>-&gt;</literal> (opérateur de l'objet) :
  <varname>$this-&gt;property</varname> (où <literal>property</literal> est le
  nom de la propriété). Les propriétés statiques peuvent être appelées en
  utilisant la syntaxe <literal>::</literal> (deux doubles points) :
  <varname>self::$property</varname>. Reportez-vous à la documentation sur
  le <link linkend="language.oop5.static">mot clé statique</link> pour plus d'informations
  sur la différence entre les propriétés statiques et non statiques.
 </para>
 <para>
  La pseudo-variable <varname>$this</varname> est disponible au sein de n'importe
  quelle méthode, lorsque cette méthode est appelée depuis un objet.
  <varname>$this</varname> est une référence à l'objet appelant (en général l'objet
  auquel la méthode appartient, mais il peut s'agir d'un autre objet si la méthode
  est appelée de façon <link linkend="language.oop5.static">statique</link> depuis
  le contexte d'un second objet).
 </para>
 
 <para>
  <example>
   <title>Déclarations de propriétés</title>
   <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // À partir de PHP 5.6.0:
   public $var1 = 'hello ' . 'world';
   // Depuis PHP 5.3.0:
   public $var2 = <<<EOD
hello world
EOD;
   // À partir de PHP 5.6.0:
   public $var3 = 1+2;
   // déclaration de propriété invalide :
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // Déclarations valides de propriétés :
   public $var6 = myConstant;
   public $var7 = array(true, false);

   // À partir de PHP 5.3.0 :
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
   </programlisting>   
  </example>
 </para>

 <note>
  <para>
   Il existe des fonctions qui permettent de gérer des classes et des objets.
   Vous voudrez peut-être jeter un coup d'oeil à <link linkend="ref.classobj">Fonctions
   Classes/Objets</link>.
  </para>
 </note>

  <sect2 xml:id="language.oop5.properties.heredoc-nowdoc">
   <title>Heredoc et Nowdoc</title>
   <para>
  Depuis PHP 5.3.0 
  <link linkend="language.types.string.syntax.heredoc">heredoc</link> et 
  <link linkend="language.types.string.syntax.nowdoc">nowdoc</link>
  peuvent être utilisées dans n'importe quel contexte de données statiques,
    y compris la déclaration de propriétés.
  <example>
   <title>Exemple d'utilisation de la syntaxe nowdoc pour initialiser une propriété</title>
   <programlisting role="php">
<![CDATA[
<?php
class foo {
   // Depuis PHP 5.3.0
   public $bar = <<<'EOT'
bar
EOT;
   public $baz = <<<EOT
baz
EOT;
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <note>
  <para>
   Le support de la syntaxe Nowdoc et Heredoc a été ajouté en PHP 5.3.0.
  </para>
 </note>
  </sect2>
  
  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Déclarations des types</title>

  <para>
   À partir de PHP 7.4.0, les définitions de propriétés peuvent inclure une
   déclaration de type, avec l'exception du type <literal>callable</literal>.
   <example>
    <title>Exemple de propriétés typées</title>
    <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(1234)
NULL
]]>
    </screen>
   </example>
  </para>
   <para>
    Les propriétés typés doivent être initialisées avant d'y accéder, sinon,
    une <classname>Error</classname> sera émise.
    <example>
     <title>Accès aux propriétés</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>

   <sect3 xml:id="language.oop5.properties.typed-properties.valid-types">
    <title>Types de propriété valides</title>
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>Type</entry>
        <entry>Description</entry>
        <entry>version PHP minimale</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><type>bool</type></entry>
        <entry>
         La propriété doit être une valeur <type>booléen</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>int</type></entry>
        <entry>
         La propriété doit être une valeur <type>int</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>float</type></entry>
        <entry>
         La propriété doit être une nombre à virgule flottante.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>string</type></entry>
        <entry>
         La propriété doit être une <type>string</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>array</type></entry>
        <entry>
         La propriété doit être un <type>array</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>object</literal></entry>
        <entry>
         La propriété doit être un <type>object</type>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>iterable</literal></entry>
        <entry>
         La propriété doit être soit un <type>array</type> ou un &instanceof;
         <interfacename>Traversable</interfacename>.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>self</literal></entry>
        <entry>
         La propriété doit être un &instanceof; de la même classe
         dans laquelle la propriété a été définie.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>parent</literal></entry>
        <entry>
         La propriété doit être un &instanceof; de la classe parent
         de la classe dans laquelle la propriété a été définie.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry>Nom de la classe/interface</entry>
        <entry>
         La propriété doit être un &instanceof; de la classe ou de l'interface
         fournie.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry>?type</entry>
        <entry>
         La propriété doit être du type spécifié, ou &null;.
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </sect3>
  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
