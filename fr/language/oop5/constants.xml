<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 345616 Maintainer: yannick Status: ready -->
<!-- Reviewed: yes -->

<sect1 xml:id="language.oop5.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Constantes de classe</title>
 <para>
  Il est possible de définir des valeurs constantes à l'intérieur d'une classe,
  qui ne seront pas modifiables. Les constantes diffèrent des variables normales
  du fait que l'on n'utilise pas le symbole <varname>$</varname> pour les déclarer
  ou les utiliser.
  La visibilité par défaut des constantes de classe est <literal>public</literal>.
 </para>
 <para>
  La valeur doit être une expression constante, pas (par exemple) une variable,
  une propriété, ou un appel de fonction.
 </para>
 <para>
  Il est aussi possible pour les interfaces d'avoir des <literal>constantes</literal>. Regardez
   la <link linkend="language.oop5.interfaces">documentation des interfaces</link> pour quelques 
   exemples.
  </para>
  <para>
   Depuis PHP 5.3.0, il est possible de référencer la classe en utilisant une
   variable. La valeur de la variable ne peut pas être un mot-clé (e.g. <literal>self</literal>,
   <literal>parent</literal> et <literal>static</literal>).
  </para>
 <para>
  Notez que les constantes de classe sont allouées une fois par classe, et non 
  pour chaque instance de classe.
 </para>
 
  <example>
   <title>Définition et utilisation d'une constante de classe</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
  const CONSTANT = 'valeur constante';

  function showConstant() {
    echo  self::CONSTANT . "\n";
  }
}

echo MyClass::CONSTANT . "\n";

$classname = "MyClass";
echo $classname::CONSTANT . "\n"; // Depuis PHP 5.3.0

$class = new MyClass();
$class->showConstant();

echo $class::CONSTANT."\n"; // Depuis PHP 5.3.0
?>
]]>
   </programlisting>
  </example>
  
  <example>
   <title>Exemple de données statiques</title>
   <programlisting role="php">
<![CDATA[
<?php
class foo {
    // Depuis PHP 5.3.0
    const BAR = <<<'EOT'
bar
EOT;
    // Depuis PHP 5.3.0
    const BAZ = <<<EOT
baz
EOT;
}
?>
]]>
   </programlisting>
  </example>
  
  <note>
   <para>
    La prise en charge de l'initialisation des constantes avec la syntaxe Heredoc et Nowdoc a été ajoutée dans PHP 5.3.0.
   </para>
  </note>
 <para>
  La constante spéciale <constant>::class</constant> est disponible à partir de PHP 5.5.0, et permet une résolution de nom de classe pleinement qualifié au moment de la compilation, cela est utile pour les classes avec un namespace:
 </para>
 
 <example>
  <title>Exemple d'utilisation de ::class</title>
  <programlisting role="php">
<![CDATA[
<?php
namespace foo {
    class bar {
    }

    echo bar::class; // foo\bar
}
?>
]]>
  </programlisting>
 </example> 
 
 <example>
  <title>Exemple des expressions de constante</title>
  <programlisting role="php">
<![CDATA[
<?php
const ONE = 1;

class foo {
    // Depuis PHP 5.6.0
    const TWO = ONE * 2;
    const THREE = ONE + self::TWO;
    const SENTENCE = 'The value of THREE is '.self::THREE;
}
?>
]]>
  </programlisting>
  <para>
   Il est possible de fournir une expression scalaire impliquant des nombres
   et des chaînes de caractères, et/ou des constantes dans un contexte
   d'une classe.
  </para>
 </example>
 <note>
  <para>
   Le support des expressions de constante a été ajouté en PHP 5.6.0.
  </para>
 </note>
 <example>
  <title>Exemple des expressions de constante</title>
  <programlisting role="php">
<![CDATA[
<?php
class Foo {
    // Depuis PHP 7.1.0
    public const BAR = 'bar';
    private const BAZ = 'baz';
}
echo Foo::BAR, PHP_EOL;
echo Foo::BAZ, PHP_EOL;
?>
]]>
  </programlisting>
   &example.outputs.71;
   <screen>
<![CDATA[
bar

Fatal error: Uncaught Error: Cannot access private const Foo::BAZ in …
]]>
   </screen>
 <note>
  <para>
   À partir de PHP 7.1.0, la visibilité des constantes de classe peut être définie.
  </para>
 </note>
 </example>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
