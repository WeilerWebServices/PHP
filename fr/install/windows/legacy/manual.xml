<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339251 Maintainer: yannick Status: ready -->
<!-- Reviewed: no -->

<sect2 xml:id="install.windows.legacy.manual" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Étapes pour une installation manuelle</title>
 <para>
  Cette section contient les instructions pour installer manuellement
  et configurer PHP sous Microsoft Windows.
 </para>
 <sect3 xml:id="install.windows.legacy.manual.download">
  <title>Sélection et téléchargement de PHP</title>
  <para>
   Téléchargez l'archive PHP depuis
   <link xlink:href="&url.php.win.downloads;">PHP pour Windows: Binaires et sources</link>.
   Il y a plusieurs versions de l'archive zip - pour choisir la bonne version 
   pour vous, suivez le guide détaillé sur la <link xlink:href="&url.php.win.downloads;">page des téléchargements</link>.
  </para>
 </sect3>
 <sect3 xml:id="install.windows.legacy.manual.package">
  <title>La structure et le contenu du paquet PHP</title>
  <para>
   Décompressez le contenu de l'archive zip dans le dossier de votre choix, par
   exemple C:\PHP\. La structure des dossiers et des fichiers extraits depuis
   l'archive zip ressemble à ceci :
   <example>
    <title>Structure d'un paquet PHP 5</title>
    <programlisting>
<![CDATA[

c:\php
   |
   +--dev
   |  |
   |  |-php5ts.lib                 -- php5.lib en version non thread safe
   |
   +--ext                          -- bibliothèques DLLs pour PHP
   |  |
   |  |-php_bz2.dll
   |  |
   |  |-php_cpdf.dll
   |  |
   |  |-...
   |
   +--extras                       -- vide 
   |
   +--pear                         -- copie initiale de PEAR
   |
   |
   |-go-pear.bat                   -- script d'installation de PEAR
   |
   |-...
   |
   |-php-cgi.exe                   -- exécutable CGI
   |
   |-php-win.exe                   -- exécution de scripts sans avoir un prompt de commande ouvert
   |
   |-php.exe                       -- exécutable de ligne de commande (CLI)
   |
   |-...
   |
   |-php.ini-development           -- configuration par défaut du php.ini
   |
   |-php.ini-production            -- configuration recommandée du php.ini
   |
   |-php5apache2_2.dll             -- n'existe pas dans la version non thread safe
   |
   |-php5apache2_2_filter.dll      -- n'existe pas dans la version non thread safe
   |
   |-...
   |
   |-php5ts.dll                    -- bibliothèque DLL coeur de PHP ( php5.dll en version non thread safe)
   | 
   |-...

]]>
    </programlisting>
   </example>
  </para>
  <para>
   Voici la liste des modules et des exécutables inclus dans l'archive
   zip de PHP :
   <itemizedlist spacing="compact">
    <listitem>
     <para>
      <filename>go-pear.bat</filename> - le script de configuration de PEAR. Référez-vous à l'<link xlink:href="&url.pear.installation;">installation de PEAR</link>
      pour plus de détails.
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>php-cgi.exe</filename> - exécutable CGI qui peut être utilisé lors de l'exécution de PHP sous IIS via CGI ou FastCGI.
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>php-win.exe</filename> - l'exécutable PHP pour l'exécution de scripts PHP sans fenêtre de ligne de commande
      (par exemple, des applications PHP qui utilisent un GUI Windows).
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>php.exe</filename> - l'exécutable PHP pour l'exécution de scripts PHP dans une interface de ligne de commande (CLI).
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>php5apache2_2.dll</filename> - module Apache 2.2.X.
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>php5apache2_2_filter.dll</filename> - filtre Apache 2.2.X.
     </para>
    </listitem>
   </itemizedlist>
  </para>
 </sect3>
 <sect3 xml:id="install.windows.legacy.manual.phpini">
  <title>Modification du fichier <filename>php.ini</filename></title>
  <para>
   Après l'extraction du contenu du paquet PHP, copiez le fichier
   <filename>php.ini-production</filename> dans le fichier <filename>php.ini</filename>
   du même dossier. Si nécessaire, il est également possible de placer le
   fichier <filename>php.ini</filename> dans le dossier de votre choix
   mais cela nécessite d'autres étapes de configuration décrites dans la
   <link linkend="configuration.file">configuration de PHP</link>.
  </para>
  <para>
   Le fichier <filename>php.ini</filename> indique à PHP la façon doit il doit se configurer,
   mais aussi la façon dont il doit travailler avec l'environnement sur lequel
   il s'exécute. Voici quelques concfigurations du fichier <filename>php.ini</filename>
   qui aide PHP à fonctionner d'une meilleure façon sous Windows. Quelques-unes sont
   optionnelles. Il y a bien d'autres directives utiles pour votre environnement -
   référez-vous à la <link linkend="ini.list">liste des directives du php.ini</link>
   pour plus d'informations.
  </para>
  <para>
   Directives nécessaires :
   <itemizedlist spacing="compact">
    <listitem>
     <para>
      <varname>extension_dir</varname> = <literal>&lt;chemin vers le dossier des extensions&gt;</literal> - <varname>extension_dir</varname> doit
      pointer vers le dossier contenant les fichiers des extensions PHP. Le chemin peut être
      absolu (e.g. &quot;C:\PHP\ext&quot;) ou relatif (e.g. &quot;.\ext&quot;). Les extensions listées
      ci-dessous dans le fichier <filename>php.ini</filename> doivent se trouver dans le
      dossier <varname>extension_dir</varname>.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>extension</varname> = <literal>xxxxx.dll</literal> - Pour chaque extension que vous voulez activer,
      vous avez besoin d'une directive &quot;extension=&quot; qui indique à PHP quelles extensions du
      dossier <varname>extension_dir</varname> doivent être chargées au démarrage.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>log_errors</varname> = <literal>On</literal> - PHP a une fonctionnalité permettant d'historiser les
      erreurs, pouvant être utilisée pour envoyer les erreurs dans un fichier, ou vers un service
      (i.e. syslog) et fonctionne en conjonction de la directive <varname>error_log</varname> ci-dessous.
      Lors de l'exécution sous IIS, <varname>log_errors</varname> devrait être activée, avec une valeur valide de <varname>error_log</varname>.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>error_log</varname> = <literal>&lt;chemin vers le fichier d'historisation des erreurs&gt;</literal> - error_log doit spécifier
      le chemin absolu ou relatif vers un fichier où les erreurs PHP doivent être écrites. Le fichier doit
      être accessible en écriture par le serveur web. L'endroit commun de ce fichier est le dossier TEMP, par
      exemple, &quot;C:\inetpub\temp\php-errors.log&quot;.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>cgi.force_redirect</varname> = <literal>0</literal> - Cette directive est nécessaire pour le fonctionnement
      sous IIS. Elle est relative à la sécurité et est nécessaire par bons nombres de serveurs web. Cependant, son
      activation sous IIS fera échouer le moteur PHP sous Windows. 
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>cgi.fix_pathinfo</varname> = <literal>1</literal> - Cette directive permet à PHP d'accéder aux informations
      concernant le chemin réel suivi par la spécification CGI. Cette directive est nécessaire lors de l'implémentation de FastCGI
      sous IIS.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>fastcgi.impersonate</varname> = <literal>1</literal> - FastCGI sous IIS supporte la possibilité de rendre
      impersonnels les éléments relatifs à la sécurité lors d'un appel client. Ceci permet à IIS de définir le contexte
      de sécurité sur lequel la demande est effectuée.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>fastcgi.logging</varname> = <literal>0</literal> - L'historisation FastCGI doit être désactivé sous IIS.
      S'il est activé, alors tous les messages de toutes les classes seront traités par FastCGI comme des conditions
      d'erreur, ce qui fera qu'IIS générera des exceptions HTTP 500.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Directives optionnelles
   <itemizedlist spacing="compact">
    <listitem>
     <para>
      <varname>max_execution_time</varname> = <literal>##</literal> - Cette directive demande à PHP un maximum de temps
      afin d'exécuter un script donné. Par défaut, c'est 30 secondes. Augmentez la valeur de cette direction si
      l'application PHP prend plus de temps à s'exécuter.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>memory_limit</varname> = <literal>###M</literal> - La mémoire maximale disponible pour le processus PHP,
      en méga-octets. Par défaut, c'est 128, ce qui est parfait pour la plupart des applications PHP. Pour des applications
      plus complexes, il peut être nécessaire d'augmenter cette valeur.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>display_errors</varname> = <literal>Off</literal> - Cette directive indique à PHP si les messages d'erreur
      doivent être inclus dans le flux retourné au serveur web. Si défini à &quot;On&quot;, alors PHP les enverra, suivants
      les classes d'erreur que vous avez définies avec la directive <varname>error_reporting</varname>, au serveur web
      comme partie du flux d'erreur. Pour des raisons de sécurité, il est recommandé de définir à
      &quot;Off&quot; cette directive sur les serveurs de production afin de ne pas révéler les informations concernant
      la sécurité, qui sont inclues dans les messages d'erreur.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>open_basedir</varname> = <literal>&lt;chemins vers les dossiers, séparés par un point virgule&gt;</literal>, e.g. 
      openbasedir=&quot;C:\inetpub\wwwroot;C:\inetpub\temp&quot;. Cette directive spécifie le chemin vers le dossier où PHP
      est autorisé à effectuer des opérations sur le système de fichiers. Toute opération en dehors de ces chemins retournera
      une erreur. Cette directive est spécialement utile pour cantonner l'installation de PHP dans des environnements partagés
      afin d'éviter que les scripts PHP accèdent à tout fichier se trouvant en dehors du dossier racine du site web.
     </para>
    </listitem>
    <listitem>
     <para>
      <varname>upload_max_filesize</varname> = <literal>###M</literal> et <varname>post_max_size</varname> = <literal>###M</literal> - 
      La taille maximale autorisée, respectivement, d'un fichier téléchargé et des données de type POST. Les valeurs de
      ces directives devraient être augmentées si les applications PHP doivent effectuer de gros téléchargements, comme
      des images ou des fichiers vidéos.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   PHP est maintenant configuré pour votre système. La prochaine étape est de choisir un serveur web et
   de la configurer pour y faire fonctionner PHP. Choisissez un serveur web depuis la table de contenus.
  </para>
  <para>
   En plus de faire fonctionner PHP via un serveur web, PHP peut être exécuté depuis la ligne
   de commande, à la façon des scripts <literal>.BAT</literal>. Reportez-vous au chapitre sur la
   <!--<link linkend="install.windows.legacy.commandline">ligne de commande PHP sous Microsoft
    Windows</link> pour plus d'informations.-->
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->