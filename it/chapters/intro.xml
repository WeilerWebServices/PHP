<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 347419 Maintainer: pastore Status: ready -->
<!-- $Revision$ -->
<!-- CREDITS: perugini,sven -->
 <chapter xml:id="introduction" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info><title>Introduzione</title></info>

  <section xml:id="intro-whatis">
   <info><title>Che cos'è il PHP?</title></info>
   <para>
    <acronym>PHP</acronym> (acronimo ricorsivo per <literal>PHP: Hypertext 
    Preprocessor</literal>) è un linguaggio di scripting general-purpose 
    open source molto utilizzato, è specialmente indicato per lo sviluppo 
    web e può essere integrato nell'HTML. 
   </para>
   <para>
    Bello, ma che cosa significa? Un esempio:
   </para>
   <para>
    <example>
     <info><title>Un esempio introduttivo</title></info>
     <programlisting role="php">
<![CDATA[
<!DOCTYPE html>
<html>
    <head>
        <title>Esempio</title>
    </head>
    <body>

        <?php 
            echo "Ciao, sono uno script PHP!"; 
        ?>

    </body>
</html>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Invece di un sacco di comandi per produrre HTML (come si è visto in C o Perl),
    le pagine PHP contengono HTML con codice incorporato che fa
    "qualcosa" (in questo caso, produce "Ciao, sono uno script PHP!").
    Il codice PHP è delimitato da speciali
    <link linkend="language.basic-syntax.phpmode">istruzioni di elaborazione di inizio
    e fine <code>&lt;?php</code> e <code>?&gt;</code></link>
    che permettono di entrare e uscire dalla "modalità PHP".
   </para>
   <para>
    Ciò che distingue PHP da altri linguaggi di scripting del tipo client-side JavaScript è
    che il codice viene eseguito nel server, generando HTML che sarà dopo
    inviato al client. Il client dovrebbe ricevere
    i risultati dell'esecuzione dello script, ma non potrà
    conoscere qual'è il codice eseguito. Potete persino configurare il vostro web server per processare
    tutte i vostri file HTML con PHP ed allora non ci sarebbe realmente alcun modo per gli
    utenti di sapere cosa avete sul vostro server. 
   </para>
   <para>
   La cosa più interessante nell'uso di PHP è che si tratta di
   un linguaggio estremamente semplice per il neofita, ma che, tuttavia, offre 
   molte prestazioni avanzate al programmatore di professione. Non lasciatevi 
   impressionare dalla lunga lista delle potenzialità di PHP. In poco tempo 
   potrete iniziare a creare  velocemente semplici scripts. 
   </para>
   <para>
   Sebbene lo sviluppo di PHP abbia come obiettivo lo scripting server-side,
   si può fare molto di più con esso. Leggete, e consultate la
   sezione <link linkend="intro-whatcando">Che cosa può fare PHP?</link> 
   oppure andate su <link linkend="tutorial">tutorial
   introduttivo</link> se si è interessati solo alla programmazione web.
   </para>
  </section>

  <section xml:id="intro-whatcando">
   <info><title>Che cosa può fare PHP?</title></info>
   <para>
   Qualsiasi cosa. PHP ha come obiettivo principale lo scripting server-side,
   per cui può fare tutto ciò che può fare un qualunque 
   programma CGI, come raccogliere dati da un form, generare pagine dai contenuti
   dinamici, oppure mandare e ricevere cookies. Ma  PHP può fare molto di più.
   </para>
   <para>
   Esistono tre campi principali in cui vengono usati gli scripts PHP.
    <itemizedlist>
     <listitem>
      <simpara>
       Lo scripting server-side. Questo è il campo più tradizionale 
       ed il maggiore obiettivo di PHP. Per farlo funzionare occorrono
       tre cose: il parser PHP (CGI o server 
       module), un webserver ed un browser web. Occorre avviare
       il server web con un'installazione di PHP attiva. 
       Si può accedere all'output del programma PHP con un browser web
       e vedere la pagina PHP tramite il server. Tutto ciò può 
       essere attivato sul pc di casa se si desidera
       semplicemente provare la programmazione PHP.  Consultate la 
       sezione <link linkend="install">Istruzioni per l'installazione</link>
       per ulteriori informazioni.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Lo scripting di righe di comando. Si può creare uno script
       PHP da usare senza alcun server o browser. 
       Per usarlo in questo modo, l'unica cosa necessaria è un parser PHP. 
       Questo tipo di utilizzo è ideale per gli scripts eseguiti 
       con cron (sui sistemi *nix o Linux) oppure il Task Scheduler (su 
       Windows). Questi script possono essere utilizzati per semplici task di 
       processamento testi. Vedere la sezione
       <link linkend="features.commandline">Uso di righe di comando in PHP</link>
       per maggiori informazioni.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Scrittura di applicazioni desktop. Probabilmente PHP non 
       è il linguaggio più adatto per scrivere 
       applicazioni desktop, con interfaccia grafica, ma, 
       se lo si conosce molto bene, e se se ne vogliono usare delle 
       caratteristiche avanzate in applicazioni client-side, 
       si può anche adoperare PHP-GTK per scrivere questo tipo di pogrammi. Allo stesso 
       modo, c'è anche la possibilità di scrivere applicazioni cross-platform. 
       PHP-GTK è un'estensione di PHP non reperibile nella 
       grande distribuzione. Se vi interessa, visitate
       <link xlink:href="&url.php.gtk;">il sito 
       web</link>.
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    PHP può essere <link linkend="install">usato</link> su tutti i principali sistemi operativi, inclusi 
    Linux, molte varianti di Unix (compresi HP-UX, Solaris e OpenBSD),
    Microsoft Windows, macOS, RISC OS, e probabilmente altri.
    Inoltre supporta anche la maggior parte dei server web esistenti. 
    Ciò comprende Apache, IIS, e molti altri. E questo include qualsiasi
    server web che può utilizzare il binario PHP FastCGI, come lighttpd
    e nginx. PHP funziona sia come un modulo, o sia come un processore CGI.
   </para>
   <para>
    Pertanto, con PHP si ha la libertà di scegliere praticamente qualsiasi
    sistema operativo e qualsiasi server web. Inoltre, si può anche
    scegliere se fare uso di una programmazione procedurale oppure
    orientata agli oggetti (OOP), o una combinazione di entrambe.
   </para>
   <para>
    Con PHP non siete limitati soltanto ad un output in HTML. Le possibilità
    di PHP, infatti, includono l'abilità di generare immagini, files PDF e perfino filmati Flash 
    al volo (utilizzando libswf e Ming). Sarete in grado 
    di generare facilmente qualsiasi testo, come XHTML e qualsiasi altro file XML.
    PHP può autogenerare questi file, e salvarli nel file 
    system, piuttosto che eseguire un printing esterno, o creare server-side
    cache per contenuti dinamici.
   </para>
   <para>
    Una delle caratteristiche più importanti e significative di PHP è 
    la possibilità di supportare una <link linkend="refs.database">completa gamma di database</link>.
    Scrivere una pagina web collegata ad un database è incredibilmente semplice utilizzando una delle
    specifiche estensioni del database (p.e., per <link linkend="book.mysqli">mysql</link>),
    o utilizzando un abstraction layer come <link linkend="book.pdo">PDO</link>, o connettendosi
    a qualsiasi database che supporta lo standard Open Database Connection tramite l'
    estensione <link linkend="book.uodbc">ODBC</link>. Altri database possono utilizzare
    <link linkend="book.curl">cURL</link> o <link linkend="book.sockets">i socket</link>,
    come CouchDB.
   </para>
   <para>
    PHP fa anche da supporto per dialogare con altri servizi utilizzando i protocolli 
    del tipo LDAP, IMAP, SNMP, NNTP, POP3, HTTP, COM (in Windows) e
    innumerevoli altri. Potete anche aprire network sockets ed
    interagire usando qualsiasi altro protocollo. Inoltre supporta l'interscambio di dati complessi WDDX
    tra, virtualmente, tutti i linguaggi di programmazione web. 
    A proposito di interconessioni, PHP supporta 
    l'istanziazione dei Java Objects e l'utilizzo di questi 
    come oggetti PHP in modo trasparente.
   </para>
   <para>
    PHP possiede utili caratteristiche per l'<link linkend="refs.basic.text">elaborazione testi</link>,
    che includono la compatibilità alle espressioni regolari di Perl (<link linkend="book.pcre">PCRE</link>),
    e molte estensioni e strumenti per <link linkend="refs.xml">analizzare e accedere ai documenti XML</link>.
    PHP standardizza tutte le estensioni XML sulla solida base di <link linkend="book.libxml">libxml2</link>,
    ed estende le caratteristiche aggiungendo il supporto <link linkend="book.simplexml">SimpleXML</link>,
    <link linkend="book.xmlreader">XMLReader</link> e <link linkend="book.xmlwriter">XMLWriter</link>.
   </para>
   <para>
    E molte altre estensioni interessanti esistono, e sono categorizzate sia
    <link linkend="extensions">in ordine alfabetico</link> che per <link linkend="funcref">categoria</link>.
    E ci sono latre estensioni PECL che possono essere o no documentate
    all'interno del manuale PHP, come <link xlink:href="&url.xdebug;">XDebug</link>.
   </para>
   <para>
    Come si può notare, questa pagina non è sufficiente per elencare
    tutte le funzioni e i benefici che PHP offre. Continua a leggere, 
    consultando le sezioni <link linkend="install">Installazione di
    PHP</link>, e guarda la parte sul <link linkend="funcref">riferimento 
    alle funzioni</link> per delle spiegazioni sulle estensioni 
    menzionate qui.
   </para>
  </section>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
