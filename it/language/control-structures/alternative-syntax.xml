<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 333913 Maintainer: pastore Status: ready -->
<!-- CREDITS: butera -->
<sect1 xml:id="control-structures.alternative-syntax"  xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Sintassi alternativa per le strutture di controllo</title>
 <?phpdoc print-version-for="control-structures.alternative-syntax"?>
 <para>
  PHP offre una sintassi alternativa per alcune delle sue strutture di controllo,
  ovvero: <literal>if</literal>,
  <literal>while</literal>, <literal>for</literal>,
  <literal>foreach</literal>, e <literal>switch</literal>.
  In ognuno di questi casi, l'approccio di base della sintassi alternativa è quello di cambiare
  la parentesi graffa aperta con il segno di duepunti (:) e la parentesi graffa chiusa
  rispettivamente con <literal>endif;</literal>, <literal>endwhile;</literal>,
  <literal>endfor;</literal>, <literal>endforeach;</literal>, o
  <literal>endswitch;</literal>.
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php if ($a == 5): ?>
A è uguale a 5
<?php endif; ?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Nell'esempio presentato, il blocco HTML "A è uguale a 5" è inserito all'interno in un blocco
  <literal>if</literal> scritto con la sintassi alternativa.  Il
  blocco HTML sarà visualizzato solo se <varname>$a</varname> è uguale a 5.
 </simpara>
 <para>
  La sintassi alternativa si applica nello stesso modo anche ad <literal>else</literal> e ad
  <literal>elseif</literal>. Quanto segue è un esempio della struttura
  <literal>if</literal> con sezioni <literal>elseif</literal> ed
  <literal>else</literal> nel formato alternativo:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
if ($a == 5):
    echo "a è uguale a 5";
    echo "...";
elseif ($a == 6):
    echo "a è uguale a 6";
    echo "!!!";
else:
    echo "a è diverso sia da 5 che da 6";
endif;
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <note>
  <para>
   L'utilizzo delle due sintassi all'interno dello stesso blocco non è supportato.
  </para>
 </note>
 <warning>
  <para>
   Qualsiasi output (inclusi gli spazi bianchi) tra un'istruzione
   <literal>switch</literal> e il primo <literal>case</literal> risulterà in un errore
   sintattico. Per esempio, questo non è valido:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php switch ($foo): ?>
    <?php case 1: ?>
    ...
<?php endswitch ?>
]]>
   </programlisting>
  </informalexample>
  <para>
   Mentre questo è valido, poichè la nuova riga dopo
   l'istruzione <literal>switch</literal> è considerata parte della chiusura
   <literal>?&gt;</literal> e quindi non viene scritto niente in output tra lo
   <literal>switch</literal> e il <literal>case</literal>:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php switch ($foo): ?>
<?php case 1: ?>
    ...
<?php endswitch ?>
]]>
   </programlisting>
  </informalexample>
 </warning>
 <para>
  Vedere anche <link linkend="control-structures.while">while</link>,
  <link linkend="control-structures.for">for</link>, ed <link
  linkend="control-structures.if">if</link> per ulteriori esempi.
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
