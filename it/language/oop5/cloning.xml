<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 337312 Maintainer: pastore Status: ready -->
<!-- CREDITS: butera -->
 <sect1 xml:id="language.oop5.cloning" xmlns="http://docbook.org/ns/docbook">
  <title>Clonazione di oggetti</title>
  
  <para>
   Creare una copia di un oggetto con tutte le proprietà replicate non è
   sempre il comportamento desiderato. Un esempio della necessità di
   costruttori per la copia, è che quando si ha un oggetto che rappresenta una finestra GTK e
   l'oggetto detiene le risorse di questa finestra GTK, quando si crea un duplicato
   si può voler creare una nuova finestra con le stesse proprietà e fare in modo che il
   nuovo oggetto detenga le risorse della nuova finestra. Un ulteriore esempio è il caso in cui un
   oggetto ha un riferimento ad un altro oggetto che utilizza e quando si 
   replica il l'oggetto padre si vuole creare una nuova istanza di questo altro
   oggetto in modo che la replica ne abbia una propria copia separata dall'originale.
  </para>

  <para>
   La copia di un oggetto viene creata utilizzando la parola chiave <emphasis>clone</emphasis> (che chiama se possibile
   il metodo <link linkend="object.clone">__clone()</link> dell'oggetto).
   Il metodo <link linkend="object.clone">__clone()</link> di un oggetto
   non può essere invocato direttamente.
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
$copy_of_object = clone $object;
]]>
   </programlisting>
  </informalexample>

  <para>
   Quando un oggetto viene clonato, PHP 5 esegue una copia superficiale di tutte le
   proprietà dell'oggetto. Ogni proprietà che sia un riferimento ad altre variabili
   rimarrà un riferimento.
  </para>

  <methodsynopsis xml:id="object.clone">
   <type>void</type><methodname>__clone</methodname>
   <void/>
  </methodsynopsis>

  <para>
   Completata la clonazione, se esiste un metodo <link linkend="object.clone">__clone()</link>, 
   viene chiamato il metodo <link linkend="object.clone">__clone()</link> dell'oggetto appena creato per consentire
   l'aggiornamento di tutte le proprietà che necessitano di essere modificate.
  </para>

  <example>
   <title>Clonazione di un oggetto</title>
   <programlisting role="php">
<![CDATA[
<?php
class SubObject
{
    static $instances = 0;
    public $instance;

    public function __construct() {
        $this->instance = ++self::$instances;
    }

    public function __clone() {
        $this->instance = ++self::$instances;
    }
}

class MyCloneable
{
    public $object1;
    public $object2;

    function __clone()
    {
        // forza la copia di $this->object1, che altrimenti
        // punterebbe alla stessa istanza.
        $this->object1 = clone $this->object1;
    }
}

$obj = new MyCloneable();

$obj->object1 = new SubObject();
$obj->object2 = new SubObject();

$obj2 = clone $obj;


print("Oggetto originale:\n");
print_r($obj);

print("Oggetto clonato:\n");
print_r($obj2);

?> 
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
Oggetto orginale:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 1
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
Oggetto clonato:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 3
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
]]>

   </screen>

  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
