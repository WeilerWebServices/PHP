<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 342186 Maintainer: pastore Status: ready -->
<!-- CREDITS: khelaz,cucinato -->
<refentry xml:id="closure.bindto" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Closure::bindTo</refname>
  <refpurpose>
   Duplica la closure con una nuova associazione all'oggetto e alla visibilità della classe
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>Closure</type><methodname>Closure::bindTo</methodname>
   <methodparam><type>object</type><parameter>newthis</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>newscope</parameter>
   <initializer>"static"</initializer></methodparam>
  </methodsynopsis>
  <para>
   Crea e restituisce una nuova <link linkend="functions.anonymous">funzione
   anonima</link> come questa con lo stesso corpo e con le stesse variabili associate, ma
   possibilmente con un altro oggetto associato e una nuova visibilità della classe.
  </para>

  <para>
   “L'oggetto associato” determina il valore che avrà <literal>$this</literal>
   nel corpo della funzione e la “visibilità della classe” rappresenta una classe
   che determina a quali membri private e protected la funzione
   sarà in grado di accedere. Ossia, i membri che saranno
   visibili sono gli stessi che sarebbero se la funzione anonima fosse un metodo della
   classe data come valore dal parametro
   <parameter>newscope</parameter>.
  </para>

  <para>
   Le closure statiche non possono avere nessun oggetto associato (il valore del parametro
   <parameter>newthis</parameter> deve essere &null;), ma questa funzione può
   comunque essere utilizzata per cambiare la loro visibilità.
  </para>

  <para>
   Questa funzione si assicurerà che per una closure non-statica, avere un'istanza
   associata implicherà essere convertita e viceversa. A tal fine,
   le closure non-statiche a cui sono date una visibilità diversa da un'istanza &null; sono rese
   statiche e le closure non-statiche senza visibilità a cui sono date un'istanza
   non null sono convertite in una classe non specificata.
  </para>

  <note>
   <para>
    Se hai soltanto intenzione di duplicare la funzione anonima, invece puoi usare la
    <link linkend="language.oop5.cloning">clonazione</link>.
   </para>
  </note>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>newthis</parameter></term>
    <listitem>
     <para>
      L'oggetto al quale la funzione anonima data dovrebbe essere associata, o
      &null; per le closure da dissociare. 
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>newscope</parameter></term>
    <listitem>
     <para>
      La visibilità della classe al quale associare la closure deve essere associata, o
      'static' per mantenere il corrente. Se invece viene dato un oggetto, verrà usato
      il tipo dell'oggetto. Questo determina la visibilità dei metodi
      protected e private dell'oggetto associato.
      Non è consentito passare (un oggetto di) una classe interna come valore di questo parametro.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Restituisce un nuovo oggetto <classname>Closure</classname> creato.
   &return.falseforfailure;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <parameter>newscope</parameter> non può più essere (un oggetto di) una classe
        interna, cosa che era possibile prima di questa versione.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Esempio di <function>Closure::bindTo</function></title>
   <programlisting role="php">
<![CDATA[
<?php

class A {
    function __construct($val) {
        $this->val = $val;
    }
    function getClosure() {
        //restituisce la closure associata con il suo oggetto e con la sua visibilità
        return function() { return $this->val; };
    }
}

$ob1 = new A(1);
$ob2 = new A(2);

$cl = $ob1->getClosure();
echo $cl(), "\n";
$cl = $cl->bindTo($ob2);
echo $cl(), "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
1
2
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="functions.anonymous">Funzioni anonime</link></member>
   <member><methodname>Closure::bind</methodname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
