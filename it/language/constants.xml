<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 337760 Maintainer: pastore Status: ready -->
<!-- CREDITS: cortesi -->
 <chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Costanti</title>

  <simpara>
   Una costante è un identificatore (nome) per un valore. Come si può intuire,
   tale valore non può cambiare durante l'esecuzione dello script
   (fanno eccezione le <link linkend="language.constants.predefined">costanti magiche</link>,
   che, in realtà, non sono costanti). Una costante è
   "case-sensitive" per default. È convenzione comune che i nomi di costante
   siano sempre maiuscoli.
  </simpara>
  <para>
   In PHP il nome di una costante segue le regole di qualsiasi "etichetta".
   Un nome di costante valido inizia con una lettera o underscore, seguita
   da un numero qualsiasi di caratteri alfanumerici o underscore.
   L'espressione regolare che esprime questa convenzione è:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>
  </para>
  &tip.userlandnaming;
  <para>
   <example>
    <title>Nomi di costanti validi ed errati</title>
    <programlisting role="php">
<![CDATA[
<?php

// Nomi validi
define("FOO",     "something");
define("FOO2",    "something else");
define("FOO_BAR", "something more")

// Nomi di costante errati
define("2FOO",    "something");

// Nomi validi, ma da evitare:
// un domani potrebbero essere utilizzati dal PHP per fornire costanti magiche
// e quindi si avrebbero problemi nello script
define("__FOO__", "something");

?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <simpara>
    In questo contesto una lettera è a-z, A-Z e i caratteri ASCII
    dal 127 al 255 (0x7f-0xff).
   </simpara>
  </note>

  <simpara>
   Come le &link.superglobals;, costante è sempre globale.
   Si può accedere alle costanti da qualsiasi punto dello script senza tenere conto della
   visibilità. Per maggiori dettagli sulla visibilità, leggere la sezione
   <link linkend="language.variables.scope">variable scope</link>.
  </simpara>

  <sect1 xml:id="language.constants.syntax">
   <title>Sintassi</title>
   <simpara>
    È possibile definire una variabile utilizzando la funzione
    <function>define</function> o utilizzando la
    parola chiave <literal>const</literal> all'esterno di una definizione di una classe in
    PHP 5.3.0. Una volta definita una costante, non è possibile
    cambiare il valore o renderlo indefinito.
   </simpara>
   <simpara>
    Le costanti possono contenere solo dati di tipo scalare
    (<type>boolean</type>, <type>integer</type>, <type>float</type> e <type>string</type>)
    prima di PHP 5.6. Da PHP 5.6 in poi, è anche possibile
    definire una costante come un'espressione scalare, ed è anche possibile
    definire una costante come <type>array</type>. È anche possibile definire
    costanti come una <type>resource</type>, ma questo dovrebbe essere evitato, perchè può
    causare risultati inaspettati.
   </simpara>
   <simpara>
    Per ottenere il valore di una costante è sufficiente specificarne il nome.
    A differenza delle variabili, <emphasis>non</emphasis> è necessario
    anteporre il simbolo <literal>$</literal> al nome di una variabile.
    Si può anche utilizzare la funzione  <function>constant</function>
    per leggere il valore di una costante, nel caso in cui se ne volesse ottenere il nome
    dinamicamente.
    Si utilizzi <function>get_defined_constants</function> per ottenere
    una lista delle variabili definite.
   </simpara>
   <note>
    <simpara>
     Costanti e variabili (globali) si trovano in un "namespace" differente.
     Questo implica che generalmente &true; e
     <varname>$TRUE</varname> sono differenti.
    </simpara>
   </note>
   <simpara>
    Se si utilizza una costante indefinita, PHP assume che si intendesse
    il nome della costante stessa, come se si fosse chiamata come
    una <type>string</type> (COSTANTE vs "COSTANTE").  Un errore di livello
    <link linkend="ref.errorfunc">E_NOTICE</link> verrà rilasciato
    quando questo accade.  Leggere anche la voce del manuale sul perchè 
    <link linkend="language.types.array.foo-bar">$foo[bar]</link> è
    errato (a meno che prima non si definisca <literal>bar</literal> come costante con
    <function>define</function>).  Questo non si applica alle <link
    linkend="language.namespaces.rules">costanti qualificate (completamente)</link>,
    che solleveranno un errore fatale se non definite. Per sapere se una costante è definita,
    si può utilizzare la funzione <function>defined</function>.
   </simpara>
   <para>
    Di seguito sono riportate le principali differenze rispetto le variabili:
     <itemizedlist>
      <listitem>
       <simpara>
        Le costanti non iniziano con il segno del dollaro
        (<literal>$</literal>);
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Prima di PHP 5.3, le costanti possono essere definite solo con la funzione
        <function>define</function> e non tramite assegnazione;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Le costanti possono essere definite e utilizzate ovunque
        senza seguire le regole di visibilità;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Una volta impostate, le costanti non posso essere redefinite
        e né annullate;
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Le costanti possono essere valutate solo come valori scalari. In PHP 5.6 è possibile 
        definire array costanti usando la keyword <literal>const</literal> e in
        PHP 7 gli array costanti possono anche essere definiti usando <function>define</function>
        Si possono usare gli array in espressioni scalari costanti
        (per esempio, <literal>const FOO = array(1,2,3)[0];</literal>),
        ma il risultato deve essere un valore di un tipo permesso.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>

   <para>
    <example>
     <title>Definizione di costanti</title>
     <programlisting>
<![CDATA[
<?php
define("COSTANTE", "Ciao mondo.");
echo COSTANTE; // stampa "Ciao mondo."
echo Costante; // stampa "Costante" e genera una notice.
?>
]]>
     </programlisting>
    </example>
   </para>

   <para>
    <example>
     <title>Definizione di Costanti utilizzando la parola chiave <literal>const</literal></title>
     <programlisting role="php">
<![CDATA[
<?php
// Funzionamento in PHP 5.3.0
const CONSTANT = 'Hello World';

echo CONSTANT;

// Funzionamento in PHP 5.6.0
const ANOTHER_CONST = CONSTANT.'; Goodbye World';
echo ANOTHER_CONST;

const ANIMALS = array('dog', 'cat', 'bird');
echo ANIMALS[1]; // visualizza "cat"

// Funzionamento in PHP 7
define('ANIMALS', array(
    'dog',
    'cat',
    'bird'
));
echo ANIMALS[1]; // visualizza "cat"
?>
]]>
     </programlisting>
    </example>
   </para>

   <note>
    <para>
     Al contrario di definire costanti utilizzando <function>define</function>,
     le costanti definite utilizzando la parola chiave <literal>const</literal> devono essere
     dichiarate nella scope del livello superiore perchè sono definite in fase di compilazione.
     Questo significa che non possono essere dichiarate all'interno di funzioni, cicli,
     istruzioni <literal>if</literal> oppure blocchi
     <literal>try</literal>/ <literal>catch</literal>.
    </para>
   </note>

   <simpara>
    Leggere anche <link linkend="language.oop5.constants">Le Costanti delle Classi</link>.
   </simpara>
  </sect1>
  
  <sect1 xml:id="language.constants.predefined">
   <title>Costanti magiche</title>

   <simpara>
    PHP fornisce un grande numero di <link
    linkend="reserved.constants">costanti predefinite</link> per qualsiasi script
    che viene eseguito. Molte di queste costanti, comunque, sono create da
    varie estensioni, e saranno presenti solo quando queste estensioni
    sono disponibili, sia perchè vengono caricate dinamicamente e sia perchè
    sono state compilati in PHP.
   </simpara>
   
   <para>
    Ci sono otto costanti magiche che cambiano in base a
    dove vengono utilizzate.  Per esempio, il valore di
    <constant>__LINE__</constant> dipende dalla linea che sta
    utilizzando nel tuo script. Queste costanti speciali sono 
    case-insensitive e sono le seguenti:
   </para>
   <para>
    <table>
     <title>Alcune costanti "magiche" di PHP</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Nome</entry>
        <entry>Descrizione</entry>
       </row>
      </thead>
      <tbody>
       <row xml:id="constant.line">
        <entry><constant>__LINE__</constant></entry>
        <entry>
         Il numero della riga corrente del file.
        </entry>
       </row>
       <row xml:id="constant.file">
        <entry><constant>__FILE__</constant></entry>
        <entry>
         Il percorso completo e il nome del file con i link simbolici risolti. Se utilizzato all'interno di un'inclusione,
         viene restituito il nome del file incluso.
        </entry>
       </row>
       <row xml:id="constant.dir">
        <entry><constant>__DIR__</constant></entry>
        <entry>
         La cartella del file.  Se utilizzato all'interno di un'inclusione,
         viene restituita la cartella del file incluso. Questo è equivalente
         a <literal>dirname(__FILE__)</literal>. Il nome della cartella
         non ha slash a meno che non sia la directory root.
        </entry>
       </row>
       <row xml:id="constant.function">
        <entry><constant>__FUNCTION__</constant></entry>
        <entry>
         Il nome della funzione.
        </entry>
       </row>
       <row xml:id="constant.class">
        <entry><constant>__CLASS__</constant></entry>
        <entry>
         Il nome della classe. Il nome della classe include il namespace
         in cui è stata dichiarata (es. <literal>Foo\Bar</literal>).
         Notare che da PHP 5.4 __CLASS__ funziona anche nei traits. Quando usata
         in un metodo trait, __CLASS__ è il nome della classe in cui il trait
         è usato.
        </entry>
       </row>
       <row xml:id="constant.trait">
        <entry><constant>__TRAIT__</constant></entry>
        <entry>
         Il nome del trait. Il nome del trait include il namespace
         in cui è stato dichiarato (es. <literal>Foo\Bar</literal>).
        </entry>
       </row>
       <row xml:id="constant.method">
        <entry><constant>__METHOD__</constant></entry>
        <entry>
         Il nome del metodo della classe. 
        </entry>
       </row>
       <row xml:id="constant.namespace">
        <entry><constant>__NAMESPACE__</constant></entry>
        <entry>
         Il nome del namespace corrente.
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Vedere anche
    <function>get_class</function>,
    <function>get_object_vars</function>,
    <function>file_exists</function>&listendand;
    <function>function_exists</function>.
   </para>
   
   <sect2 xml:id="language.constants.predefined.changelog">
    &reftitle.changelog;

    <para>
     <informaltable>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>&Version;</entry>
         <entry>&Description;</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>5.4.0</entry>
         <entry>
          Aggiunta la costante <constant>__TRAIT__</constant>
         </entry>
        </row>
        <row>
         <entry>5.3.0</entry>
         <entry>
          Aggiunte le costanti <constant>__DIR__</constant> e <constant>__NAMESPACE__</constant>
         </entry>
        </row>
        <row>
         <entry>5.0.0</entry>
         <entry>
          Aggiunta la costante <constant>__METHOD__</constant>
         </entry>
        </row>
        <row>
         <entry>5.0.0</entry>
         <entry>
          Prima di questa versione i valori di alcune costanti magiche erano sempre minuscoli.
          Ora tutti sono case-sensitive (contengono i nomi come essi sono stati dichiarati).
         </entry>
        </row>
        <row>
         <entry>4.3.0</entry>
         <entry>
          Aggiunte le costanti <constant>__FUNCTION__</constant> e <constant>__CLASS__</constant>
         </entry>
        </row>
        <row>
         <entry>4.0.2</entry>
         <entry>
          <constant>__FILE__</constant> contiene sempre un percorso assoluto con link simbolici
          risolti laddove nelle precedenti versioni essa conteneva percorsi relativi
          in alcune circostanze
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </sect2>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
