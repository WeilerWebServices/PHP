<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 351365 Maintainer: pastore Status: ready -->

<sect1 xml:id="migration70.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuove funzionalità</title>

 <sect2 xml:id="migration70.new-features.scalar-type-declarations">
  <title>Dichiarazioni di tipi scalari</title>

  <para>
   Le
   <link linkend="language.types.declarations">dichiarazioni di tipi</link> scalari
   sono disponibili in due versioni: coercitivo (predefinito) e rigoroso. I seguenti tipi
   per i parametri possono ora essere forzati (o coercitivo o rigoroso): stringhe
    (<type>string</type>), interi (<literal>int</literal>), numeri con virgola
    mobile (<type>float</type>), e booleani (<literal>bool</literal>). Questi
    aumentano gli altri tipi introdotti in PHP 5: nomi delle classi, interfacce,
    <type>array</type> e <type>callable</type>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Modalità coercitiva
function sumOfInts(int ...$ints)
{
    return array_sum($ints);
}

var_dump(sumOfInts(2, '3', 4.1));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(9)
]]>
   </screen>
  </informalexample>

  <para>
   Per abilitare la modalità rigorosa, una singola direttiva &declare; deve essere posizionata
   nella parte superiore del file. Questo significa che la severità della tipizzazione per i valori scalari è
   configurata su una base per-file. Questa direttiva interessa non solo le dichiarazioni
   di tipi di parametri, ma anche il tipo di ritorno di una funzione (vedere
   <link linkend="language.types.declarations">dichiarazioni dei tipi di ritorno</link>,
   le funzioni interne di PHP, e le funzioni delle estensioni
   caricate.
  </para>

  <para>
   La documentazione completa e gli esempi sulle dichiarazioni dei tipi scalari si possono trovare
   nel riferimento 
   <link linkend="language.types.declarations">dichiarazione del
   tipo</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.return-type-declarations">
  <title>Dichiarazioni del tipo di ritorno</title>

  <para>
   PHP 7 aggiunge il supporto per le 
   <link linkend="language.types.declarations">dichiarazioni del tipo di ritorno</link>.
   Analogamente alle
   <link linkend="language.types.declarations">dichiarazioni dei tipi degli argomenti</link>,
   le dichiarazioni del tipo di ritorno specificano il tipo del valore che sarà
   restituito da una funzione. Per le dichiarazioni del tipo di ritorno
   sono disponibili gli stessi <link linkend="language.types.declarations">tipi</link>
   che sono disponibili per le dichiarazioni
   del tipo degli argomenti.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function arraysSum(array ...$arrays): array
{
    return array_map(function(array $array): int {
        return array_sum($array);
    }, $arrays);
}

print_r(arraysSum([1,2,3], [4,5,6], [7,8,9]));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => 6
    [1] => 15
    [2] => 24
)
]]>
   </screen>
  </informalexample>

  <para>
   La documentazione completa e gli esempi sulle dichiarazioni del tipo di ritorno si possono trovare
   nel riferimento
   <link linkend="language.types.declarations">le dichiarazioni
   del tipo di ritorno</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.null-coalesce-op">
  <title>Operatore null coalesce</title>

  <para>
   L'operatore null coalesce (<literal>??</literal>) è stato aggiunto come
   zucchero sintattico per il caso comune di dover utilizzare una ternaria in
   congiunzione con <function>isset</function>. Esso restituisce il suo primo operando
   se esiste e non è &null;; altrimenti restituisce il suo secondo operando.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Legge il valore di $_GET['user'] e restituisce 'nobody'
// se esso non esiste.
$username = $_GET['user'] ?? 'nobody';
// Questo è equivalente a:
$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';

// Più Coalesce possono essere incatenati: questo restituirà il primo
// valore definito tra $_GET['user'], $_POST['user'], e
// 'nobody'.
$username = $_GET['user'] ?? $_POST['user'] ?? 'nobody';
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: non necessitiamo ulteriori dettagli qui, ma questo deve ancora essere
       aggiunto alla tabella di precedenza degli operatori -->
 </sect2>

 <sect2 xml:id="migration70.new-features.spaceship-op">
  <title>L'operatore spaceship</title>
  <para>
   L'operatore spaceship è usato per confrontare due espressioni. Restituisce -1, 0
   o 1 quando <varname>$a</varname> è rispettivamente minore, uguale, o maggiore
   di <varname>$b</varname>. I confronti sono eseguiti secondo le consuete 
   <link linkend="types.comparisons">regole di confronto dei tipi</link> di PHP.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Interi
echo 1 <=> 1; // 0
echo 1 <=> 2; // -1
echo 2 <=> 1; // 1

// Numeri decimali
echo 1.5 <=> 1.5; // 0
echo 1.5 <=> 2.5; // -1
echo 2.5 <=> 1.5; // 1
 
// Stringhe
echo "a" <=> "a"; // 0
echo "a" <=> "b"; // -1
echo "b" <=> "a"; // 1
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: non necessitiamo ulteriori dettagli qui, ma questo deve ancora essere
       aggiunto alla tabella di precedenza degli operatori -->
 </sect2>

 <sect2 xml:id="migration70.new-features.define-array">
  <title>Array costanti che usano <function>define</function></title>

  <para>
   Ora possono essere definiti <type>Array</type> costanti con
   <function>define</function>. In PHP 5.6, potevano essere definiti solo con
   &const;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
define('ANIMALS', [
    'dog',
    'cat',
    'bird'
]);

echo ANIMALS[1]; // visualizza "cat"
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.anonymous-classes">
  <title>Classi anonime</title>

  <para>
   Il supporto per le classi anonime è stato aggiunto via <literal>new
   class</literal>. Queste possono essere usate al posto di definizioni di classi complete per
   oggetti usa e getta:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
interface Logger {
    public function log(string $msg);
}

class Application {
    private $logger;

    public function getLogger(): Logger {
         return $this->logger;
    }

    public function setLogger(Logger $logger) {
         $this->logger = $logger;
    }
}

$app = new Application;
$app->setLogger(new class implements Logger {
    public function log(string $msg) {
        echo $msg;
    }
});

var_dump($app->getLogger());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(class@anonymous)#2 (0) {
}
]]>
   </screen>
  </informalexample>

  <para>
   La documentazione completa può essere trovata nel 
   <link linkend="language.oop5.anonymous">riferimento delle classi anonime</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.unicode-codepoint-escape-syntax">
  <title>Sintassi dell'escape del codepoint Unicode</title>

  <para>
   Questo ha come input un codepoint Unicode in una forma esadecimale, e restituisce quel
   codepoint in UTF-8 in una stringa con doppi apici oppure un heredoc. Qualsiasi codepoint
   valido è accettato, con gli iniziali 0 opzionali.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
echo "\u{aa}";
echo "\u{0000aa}";
echo "\u{9999}";
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ª
ª (stesso di prima ma con gli iniziali 0 opzionali)
香
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.closure-call-method">
  <title><methodname>Closure::call</methodname></title>

  <para>
   <methodname>Closure::call</methodname> è un modo più performante e abbreviato
   di effettuare un binding temporaneo dello scope di un oggetto ad una closure e di invocarla.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {private $x = 1;}

// Codice prima di PHP 7
$getX = function() {return $this->x;};
$getXCB = $getX->bindTo(new A, 'A'); // closure intermedia
echo $getXCB();

// Codice PHP 7+
$getX = function() {return $this->x;};
echo $getX->call(new A);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
1
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.filtered-unserialize">
  <title><function>unserialize</function> filtrata</title>

  <para>
   Questa funzionalità cerca di fornire una miglior sicurezza quando si deserializzano oggetti su
   dati non attendibili. Previene possibili iniezioni di codice, consentendo agli
   sviluppatori di inserire nella whitelist le classi che possono essere deserializzate.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// converte tutti gli oggetti in oggetti __PHP_Incomplete_Class
$data = unserialize($foo, ["allowed_classes" => false]);

// converte tutti gli oggetti in oggetti __PHP_Incomplete_Class eccetto quelli di MyClass e MyClass2
$data = unserialize($foo, ["allowed_classes" => ["MyClass", "MyClass2"]]);

// comportamento predefinito (lo stesso che si ha omettendo il secondo argomento) che accetta tutte le classi
$data = unserialize($foo, ["allowed_classes" => true]);
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.intlchar">
  <title><classname>IntlChar</classname></title>

  <para>
   La nuova classe <classname>IntlChar</classname> cerca di esporre funzionalità ICU
   addizionali. La classe stessa definisce un numero di metodi statici e
   costanti che possono essere usati per manipolare i caratteri unicode.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

printf('%x', IntlChar::CODEPOINT_MAX);
echo IntlChar::charName('@');
var_dump(IntlChar::ispunct('!'));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
10ffff
COMMERCIAL AT
bool(true)
]]>
   </screen>
  </informalexample>

  <para>
   Per poter utilizzare questa classe, l'estensione <link linkend="book.intl">Intl</link> deve essere installata.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.expectations">
  <title>Aspettative</title>

  <para>
   Le <link linkend="function.assert.expectations">aspetattive</link> sono dei
   miglioramenti retrocompatibili alla vecchia funzione
   <function>assert</function>. Permettono asserzioni a costo zero nel codice di produzione, e
   forniscono la possibilità di lanciare eccezioni personalizzate quando l'asserzione fallisce.
  </para>

  <para>
   Mentre la vecchia API continua ad essere mantenuta per compatibilità,
   <function>assert</function> è ora un costrutto del linguaggio, consentendo al primo
   parametro di essere un'espressione piuttosto che solo una <type>string</type> da essere
   valutata o un valore <type>bool</type> da essere testato.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
ini_set('assert.exception', 1);

class CustomError extends AssertionError {}

assert(false, new CustomError('Qualche messaggio di errore'));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught CustomError: Qualche messaggio di errore
]]>
   </screen>
  </informalexample>

  <para>
   Tutti i dettagli su questa funzione, incluso come configurarla sia in
   ambienti di sviluppo che di produzione, possono essere trovati nella
   <link linkend="function.assert.expectations">sezione aspettative</link>
   del riferimento <function>assert</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.group-use-declarations">
  <title>Raggruppare le dichiarazioni <literal>use</literal></title>

  <para>
   Classi, funzioni e costanti importati dallo stesso &namespace;
   possono ora essere raggruppati insieme in una singola istruzione &use.namespace;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Codice prima di PHP 7
use some\namespace\ClassA;
use some\namespace\ClassB;
use some\namespace\ClassC as C;

use function some\namespace\fn_a;
use function some\namespace\fn_b;
use function some\namespace\fn_c;

use const some\namespace\ConstA;
use const some\namespace\ConstB;
use const some\namespace\ConstC;

// Codice PHP 7+
use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.generator-return-expressions">
  <title>Generatore di espressioni di ritorno</title>

  <para>
   Questa caratteristica si basa sulle funzionalità del generatore introdotte in PHP 5.5.
   Si abilita per un'istruzione <literal>return</literal> per essere usata all'interno di un
   generatore per abilitare per una espressione final per essere restituita (il ritorno per
   referenza non è permesso). Questo valore può essere preso usando il nuovo
   metodo <literal>Generator::getReturn()</literal>, che può solo essere usato
   una volta che il generatore ha finito di effettuare lo yield dei valori.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$gen = (function() {
    yield 1;
    yield 2;

    return 3;
})();

foreach ($gen as $val) {
    echo $val, PHP_EOL;
}

echo $gen->getReturn(), PHP_EOL;
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
]]>
   </screen>
  </informalexample>

  <para>
   Essere in grado di restituire esplicitamente un valore final da un generatore è un'abilità
   comoda da avere. Questo perchè abilita per un valore final da essere restituito
   da un generatore (forse da qualche forma di routine di computazione) che può essere
   specificamente gestito dal codice client eseguendo il generatore. Questo è molto più
   semplice rispetto a forzare il codice del client a controllare prima che il valore
   final sia stato yieldato, e in quel caso, gestire il valore specificamente.
  </para>
 </sect2>
 <sect2 xml:id="migration70.new-features.generator-delegation">
  <title>Delegazione del generatore</title>

  <para>
   I generatori possono ora delegare ad un altro generatore,
   oggetti <classname>Traversable</classname> o <type>array</type>
   automaticamente, senza la necessita di scrivere boilerplate nel generatore
   più esterno usando il costrutto &yield.from;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function gen()
{
    yield 1;
    yield 2;
    yield from gen2();
}

function gen2()
{
    yield 3;
    yield 4;
}

foreach (gen() as $val)
{
    echo $val, PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
4
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.intdiv">
  <title>Divisione intera con <function>intdiv</function></title>

  <para>
   La nuova funzione <function>intdiv</function> esegue una divisione intera
   dei suoi operandi e la restituisce.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(intdiv(10, 3));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.session-options">
  <title>Opzioni di sessione</title>

  <para>
   <function>session_start</function> ora accetta un <type>array</type> di
   opzioni che sovrascrivono le
   <link linkend="session.configuration">direttive di configurazione della sessione</link>
   normalmente impostate nel php.ini.
  </para>

  <para>
   Queste opzioni sono state inoltre ampliate per supportare
   <link linkend="ini.session.lazy-write">session.lazy_write</link>, che è
   attivo di default e fa in modo che PHP possa solo sovrascrivere qualsiasi file di sessione se i
   dati di sessione sono cambiati, e <literal>read_and_close</literal>, che è
   un'opzione che può solo essere passata a <function>session_start</function> per
   indicare che i dati di sessione dovrebbero essere letti e quindi che la sessione deve
   essere immediatamente chiusa senza cambiamenti.
  </para>

  <para>
   Per esempio, impostare
   <link linkend="ini.session.cache-limiter">session.cache_limiter</link> a
   <literal>private</literal> e chiudere immediatamente la sessione dopo averla
   letta:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
session_start([
    'cache_limiter' => 'private',
    'read_and_close' => true,
]);
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.preg-repace-callback-array-function">
  <title><function>preg_replace_callback_array</function></title>

  <para>
   La nuova funzione <function>preg_replace_callback_array</function> abilita
   il codice per essere scritto in maniera più pulita quando si usa la funzione
   <function>preg_replace_callback</function>. Prima di PHP 7,
   le callback che avevano bisogno di essere eseguite per espressioni regolari richiedevano che
   la funzione di callback venisse sporcata con un sacco di ramificazione.
  </para>

  <para>
   Ora, le callback possono essere registrate ad ogni espressione regolare usando un
   array associativo, dove la chiave è un'espressione regolare e il valore è una
   callback.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.csprng-functions">
  <title><link linkend="book.csprng">CSPRNG</link> Functions</title>

  <para>
   Due nuove funzioni sono state aggiunte per generare interi e stringhe
   crittograficamente sicuri in modo cross-platform:
   <function>random_bytes</function> e <function>random_int</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.list-arrayaccess">
  <title>
   <function>list</function> può sempre spacchettare oggetti implementando
   <classname>ArrayAccess</classname>
  </title>

  <para>
   Precedentemente, non era garantito che <function>list</function> operasse
   correttamente con gli oggetti che implementavano <classname>ArrayAccess</classname>.
   Questo è stato risolto.
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.others">
  <title>Altre Caratteristiche</title>
  <itemizedlist>
   <listitem>
    <simpara>
     È stato aggiunto l'accesso ai membri della classe in fase di clonazione,
     per esempio <literal>(clone $foo)-&gt;bar()</literal>.
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
