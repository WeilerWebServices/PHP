<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 351036 Maintainer: pastore Status: ready -->
<appendix xml:id="migration51" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Migrazione da PHP 5.0.x a PHP 5.1.x</title>
 <para>
  &manual.migration.seealso;
  <link linkend="migration5">5.0.x</link>, 
  <link linkend="migration52">5.2.x</link>,
  <link linkend="migration53">5.3.x</link>,
  <link linkend="migration54">5.4.x</link>,
  <link linkend="migration55">5.5.x</link> e
  <link linkend="migration56">5.6.x</link>.
 </para>

 <section xml:id="migration51.changes">
  <title>Caratteristiche chiave di PHP 5.1.x</title>
  <para>
   Alcune delle caratteristiche chiave di PHP 5.1.x includono:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Una riscrittura completa del codice di gestione della data, con supporto migliorato del fuso orario.
    </para>
   </listitem>
   <listitem>
    <para>
     Miglioramento delle prestazioni paragonato a PHP 5.0.X.
    </para>
   </listitem>
   <listitem>
    <para>
     L'estensione PDO è ora abilitata per impostazione predefinita.
    </para>
   </listitem>
   <listitem>
    <para>
     Oltre 30 nuove funzioni in varie estensioni e funzionalità built-in.
    </para>
   </listitem>
   <listitem>
    <para>
     Oltre 400 bug vari fixati.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="migration51.references">
  <title>Cambiamenti nella gestione dei riferimenti</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.references-overview">Panoramica</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-fails">Il codice che funzionava in PHP
      4.3.x, ma che ora non funziona</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-error">Il codice che funzionava in PHP
      4.3.x, ma che ora genera un errore</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-works">Il codice che non funzionava in PHP
      4.3.x, ma che ora funziona</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-didnotwork">Il codice che doveva funzionare
      in PHP 5.0.x</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-warnings">Messaggi d'avviso 
     che andavano e venivano</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.references-overview">
   <title>Panoramica</title>
   <para>
    Dal punto di vista di chi scrive script PHP, il cambiamento più importante
    rispetto al codice obsoleto è nel modo in cui vengono gestiti i riferimenti in tutte le versioni
    di PHP dopo il rilascio di PHP 4.4.0.
   </para>
   <para>
    Fino a PHP 4.3, era possibile inviare, assegnare o restituire
    variabili per riferimento che in realtà dovevano essere restituite per valore, come
    una costante, un valore temporaneo (ad esempio il risultato di un'espressione), o il
    risultato di una funzione che era stato a sua volta ritornato per valore, come in questo caso:
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = "123";

function return_value() {
    global $foo;
    return $foo;
}

$bar = &return_value();
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    Anche se il codice di solito funziona come previsto sotto PHP 4, nel
    caso generale il risultato è indefinito. Il Zend Engine potrebbe non agire
    correttamente su questi valori come riferimenti. Questo bug poteva e ha portato a
    diversi problemi di corruzione della memoria difficili da riprodurre, in particolare
    quando il codice era di grandi dimensioni.
   </para>
   <para>
    In PHP 4.4.0, PHP 5.0.4 e tutte le versioni di PHP successive, il motore è stato
    sistemato in modo da 'sapere' quando l'operazione di riferimento viene utilizzata su un valore
    che non deve essere referenziato.  Il valore reale viene ora utilizzato in tali
    casi, e viene emesso un avvertimento. L'avvertimento assume la forma di un
    <constant>E_NOTICE</constant> in PHP 4.4.0 o versione superiore, and
    <constant>E_STRICT</constant> in PHP 5.0.4 o versione superiore.
   </para>
   <para>
    Il codice che potrebbe portare ad una corruzione della memoria non può più
    farlo. Tuttavia, alcuni script obsoleti potrebbero funzionare in modo diverso come risultato.
   </para>
  </section>

  <section xml:id="migration51.references-fails">
   <title>Il codice che funzionava in PHP 4.3, ma ora non più</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function func(&$arraykey) {
    return $arraykey; // la funzione restituisce per valore!
}

$array = array('a', 'b', 'c');
foreach (array_keys($array) as $key) {
    $y = &func($array[$key]);
    $z[] =& $y;
}

var_dump($z);
?>
<]]>
    </programlisting>
    <para>
     L'esecuzione dello script precedente sotto qualsiasi versione di PHP che precede la
     correzione di riferimento produrrebbe questo output:
    </para>
    <screen>
<![CDATA[
array(3) {
  [0]=>
  &string(1) "a"
  [1]=>
  &string(1) "b"
  [2]=>
  &string(1) "c"
}
]]>
    </screen>
    <para>
     Dopo la correzione di riferimento, lo stesso codice riporterebbe come output:
    </para>
    <screen>
<![CDATA[
array(3) {
  [0]=>
  &string(1) "c"
  [1]=>
  &string(1) "c"
  [2]=>
  &string(1) "c"
}
]]>
    </screen>
   </informalexample>
   <para>
    Questo perchè, a seguito delle modifiche,  <literal>func()</literal>
    assegna per valore. Il valore di <varname>$y</varname> è riassegnato,
    e il riferimento al binding è preservato da  <varname>$z</varname>. Prima
    della correzione, il valore era assegnato per riferimento, portando <varname>$y</varname> 
    ad essere ri-bound-ato su ogni assegnazione. Il tentativo di effettuare il binding ad un valore
    temporaneo per riferimento era la causa della corruzione della memoria.
   </para>
   <para>
    Tale codice può essere fatto funzionare in modo identico in entrambe le versioni PHP prima della correzione e
    dopo la correzione. La signature di <literal>func()</literal> può
    essere modificata per restituire per riferimento, o l'assegnazione di riferimento può essere
    rimossa dal risultato di <literal>func()</literal>.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function func() {
    return 'function return';
}

$x = 'original value';
$y =& $x;
$y = &func();
echo $x;
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    In PHP 4.3 <varname>$x</varname> sarebbe 'original value', mentre dopo
    i cambiamenti sarebbe stato 'function return' - ricordando che dove la
    funzione non restituisce per riferimento, l'assegnazione di riferimento viene
    convertita in una regolare assegnazione. Ancora una volta, questo può essere portato ad una base
    comune, sia forzando <literal>func()</literal> a restituire per riferimento
    o eliminando l'assegnazione per riferimento.
   </para>
  </section>

  <section xml:id="migration51.references-error">
   <title>Il codice che funzionava in PHP 4.3.x, ma che ora genera un errore</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {

    function getThis() {
        return $this;
    }

    function destroyThis() {
        $baz =& $this->getThis();
    }
}

$bar = new Foo();
$bar->destroyThis();
var_dump($bar);
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    In PHP 5.0.3, <varname>$bar</varname> veniva valutato in <constant>NULL</constant>
    invece di restituire un oggetto. Questo accadeva perchè 
    <literal>getThis()</literal> restituisce per valore, ma il valore qui viene
    assegnato per riferimento. Anche se ora funziona nel modo previsto, questo è
    in realtà un codice invalido che lancerà un avviso <constant>E_NOTICE</constant>
    sotto PHP 4.4 o un avviso <constant>E_STRICT</constant> sotto PHP 5.0.4 e successivi.
   </para>
  </section>

  <section xml:id="migration51.references-works">
   <title>Il codice che non funzionava in PHP 4.3.x, ma che ora funziona</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function &f() {
    $x = "foo";
    var_dump($x);
    print "$x\n";
    return($a);
}

for ($i = 0; $i < 3; $i++) {
    $h = &f();
}
?>
]]>
    </programlisting>
    <para>
     In PHP 4.3 la terza chiamata a <function>var_dump</function> produce
     <constant>NULL</constant>, a causa della corruzione della memoria causata dalla
     restituzione di un valore non inizializzato per riferimento. Questo codice è valido
     in PHP 5.0.4 e successivo, ma lanciava errori nelle precedenti versioni di PHP.
    </para>
   </informalexample>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = array('a1' => array('alfa' => 'ok'));
$arr =& $arr['a1'];
echo '-'.$arr['alfa']."-\n";
?>
]]>
    </programlisting>
    <para>
     Fino a PHP 5.0.5, non era possibile assegnare un elemento di un array per
     riferimento in questo modo. Ora invece è possibile.
    </para>
   </informalexample>
  </section>

  <section xml:id="migration51.references-didnotwork">
   <title>Codice che <literal>dovrebbe aver funzionato</literal> sotto PHP 5.0.x</title>
   <para>
    Ci sono un paio di casi di bug riportati sotto PHP 5.0 prima delle
    correzioni di riferimento sul quale ora 'funziona'. Tuttavia, in entrambi i casi vengono 
    generati degli errori da PHP 5.1.x, perché il codice non è valido, in primo luogo. 
    Ritornando i valori per riferimento utilizzando <literal>self::</literal> ora funziona
    in casi generali,  ma genera un avvertimento <constant>E_STRICT</constant>,
    e anche se la propria situazione può variare durante l'assegnazione per riferimento ad un
    oggetto sovraccaricato, si continuerà a vedere un <constant>E_ERROR</constant>
    quando si proverà, anche quando l'assegnazione stessa sembra funzionare.
   </para>
  </section>

  <section xml:id="migration51.references-warnings">
   <title>Avvertimenti che andavano e venivano</title>
   <para>
    Chiamate annidate a funzioni che ritornano per riferimento sono codice valido sia sotto
    PHP 4.3.x che sotto PHP 5.1.x, ma lanciano un messaggio
    <constant>E_NOTICE</constant> o <constant>E_STRICT</constant> ingiustificato sotto le versioni
    di PHP intermedie.
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function & foo() {
    $var = 'ok';
    return $var;
}

function & bar() {
    return foo();
}

$a =& bar();
echo "$a\n";
?>
]]>
    </programlisting>
   </informalexample>
  </section>
 </section>
 <section xml:id="migration51.reading">
  <title>Leggere []</title>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class XmlTest {

    function test_ref(&$test) {
        $test = "ok";
    }

    function test($test) { }

    function run() {
        $ar = array();
        $this->test_ref($ar[]);
        var_dump($ar);
        $this->test($ar[]);
    }
}

$o = new XmlTest();
$o->run();
?>
]]>
   </programlisting>
  </informalexample>
  <para>
   Questo dovrebbe sempre lanciare un <constant>E_ERROR</constant> fatale,
   perché [] non può essere utilizzato per la lettura in PHP. Il codice non è valido in
   PHP 4.4.2 e da PHP 5.0.5 in sù.
  </para>
 </section>

 <section xml:id="migration51.integer-parameters">
  <title>Valori interi nei parametri della funzione</title>
  <para>
   Con l'avvento di PHP 5.0.x, un nuovo parametro di parsing API è stato introdotto e 
   viene utilizzato da un gran numero di funzioni PHP. In tutte le versioni di PHP
   dalla 5.0.x e 5.1.x, la gestione dei valori interi era molto rigida e 
   avrebbe respinto i valori numerici non ben formati quando una funzione PHP si aspettava un
   numero intero. Questi controlli sono stati ora ammorbiditi per supportare stringhe numeriche
   non ben formati, come " 123" e "123 ", e non ci sarano fallimenti come
   sotto PHP 5.0.x. Tuttavia, per promuovere la sicurezza del codice e la validazione dell'input,
   le funzioni di PHP non emetteranno un <constant>E_NOTICE</constant> quando tali stringhe 
   vengono passate come interi.
  </para>
 </section>

 <section xml:id="migration51.oop">
  <title>Cambiamenti di classi e oggetti</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.oop-functions"><literal>instanceof</literal>,
      <literal>is_a()</literal>, <literal>is_subclass_of()</literal> e
      <literal>catch</literal></link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-methods">Metodi privati astratti</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-modifiers">Modificatori di accesso nelle
      interfacce</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-inheritance">Cambiamenti nelle regole di
      ereditarietà</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-constants">Costanti delle classi</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.oop-functions">
   <title><literal>instanceof</literal>, <literal>is_a()</literal>,
    <literal>is_subclass_of()</literal> e <literal>catch</literal></title>
   <para>
    In PHP 5.0, <literal>is_a()</literal> è stata deprecata e sostituita dall'
    operatore <literal>instanceof</literal>. Ci sono stati alcuni problemi 
    con l'implementazione iniziale di <literal>instanceof</literal>, che si basava su
    <literal>__autoload()</literal> per eseguire la ricerca delle classi mancanti.
    Se la classe non era presente, <literal>instanceof</literal> avrebbe lanciato un
    <constant>E_ERROR</constant> fatale a causa del fallimento di
    <literal>__autoload()</literal> per scoprire quella classe. Lo stesso comportamento
    si è verificato nell'operatore <literal>catch</literal> e nella
    funzione <literal>is_subclass_of()</literal>, per la stessa ragione.
   </para>
   <para>
    Nessuna di queste funzioni o operatori richiama <literal>__autoload()</literal>
    in PHP 5.1.x, e i workaround di <literal>class_exists()</literal> usati
    nel codice scritto per PHP 5.0.x, pur non problematici in alcun modo, non sono
    più necessari.
   </para>
  </section>

  <section xml:id="migration51.oop-methods">
   <title>Metodi privati astratti</title>
   <para>
    I metodi privati astratti sono stati supportati tra PHP 5.0.0 e PHP 5.0.4,
    ma sono stati poi non consentiti sulla base del fatto che i comportamenti di 
    <literal>private</literal> e <literal>abstract</literal> si escludono
    reciprocamente.
   </para>
  </section>

  <section xml:id="migration51.oop-modifiers">
   <title>Modificatori di accesso nelle interfacce</title>
   <para>
    Sotto PHP 5.0, le dichiarazioni di funzioni nelle interfacce sono state trattate esattamente 
    nello stesso modo come le dichiarazioni di funzioni nelle classi. Questo non è stato il
    caso dall'Ottobre del 2004, quando solo il modificatore di accesso
    <literal>public</literal> è stato consentito in dichiarazioni di funzione di interfaccia. Dal
    mese di Aprile del 2005 - che precede la release PHP 5.0b1 - anche il
    modificatore <literal>static</literal> è stato permesso. Tuttavia, i
    modificatori <literal>protected</literal> e <literal>private</literal> non 
    generanno un <constant>E_ERROR</constant>, così come
    <literal>abstract</literal>. Si noti che questo cambiamento non dovrebbe interessare il proprio
    codice esistente, come nessuno di questi modificatori ha senso nel contesto delle
    interfacce comunque.
   </para>
  </section>

  <section xml:id="migration51.oop-inheritance">
   <title>Cambiamenti nelle regole di ereditarietà</title>
   <para>
    Sotto PHP 5.0, era possibile avere una dichiarazione di funzione in una classe
    derivata che non corrispondeva con la dichiarazione della stessa funzione nella classe
    base, ad esempio
   </para>
   <informalexample>
    <para>
     Questo codice causerà un errore <constant>E_STRICT</constant> emesso
     sotto PHP 5.1.x.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
    function &return_by_ref() {
        $r = 1;
        return $r;
    }
}

class Derived extends Base {
    function return_by_ref() {
        return 1;
    }
}
?>
]]>
    </programlisting>
   </informalexample>
  </section>

  <section xml:id="migration51.oop-constants">
   <title>Costanti delle classi</title>
   <para>
    Sotto PHP 5.0.x, il codice seguente era valido:
   </para>
   <informalexample>
    <para>
     Sotto PHP 5.1.x, la ridefinizione di una costante di classe lancerà un
     <constant>E_ERROR</constant> fatale.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class test {
    const foobar = 'foo';
    const foobar = 'bar';
}

?>
]]>
    </programlisting>
   </informalexample>
  </section>
 </section> 

 <section xml:id="migration51.extensions">
  <title>Estensioni</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.extensions-gone">Estensioni tolte
      dal core PHP</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.extensions-constants">Costanti delle classi nelle nuove
      estensioni di PHP 5.1.x</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.extensions-gone">
   <title>Estensioni tolte dal core PHP</title>
   <para>
    Una delle prime cose che è molto probabile che si noti quando si scarica PHP 5.1.x 
    è che molte delle estensioni più vecchie sono scomparse. Quelle estensioni
    che sono ancora mantenute attivamente sono disponibili nel PHP Extension
    Community Library (PECL), all'indirizzo 
    <link xlink:href="&url.pecl;">&url.pecl;</link>.
   </para>
   <table>
    <title>Estensioni rimosse</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Estensione</entry>
       <entry>Alternativa/Stato</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>ext/cpdf</entry>
       <entry>pecl/pdflib</entry>
      </row>
      <row>
       <entry><link linkend="ref.dbx">ext/dbx</link></entry>
       <entry>pecl/dbx</entry>
      </row>
      <row>
       <entry><link linkend="ref.dio">ext/dio</link></entry>
       <entry>pecl/dio</entry>
      </row>
      <row>
       <entry>ext/fam</entry>
       <entry>Non attivamente mantenuta</entry>
      </row>
      <row>
       <entry><link linkend="ref.ingres">ext/ingres_ii</link></entry>
       <entry>pecl/ingres</entry>
      </row>
      <row>
       <entry>ext/ircg</entry>
       <entry>Non attivamente mantenuta</entry>
      </row>
      <row>
       <entry>ext/mcve</entry>
       <entry>pecl/mcve</entry>
      </row>
      <row>
       <entry>ext/mnogosearch</entry>
       <entry>Non attivamente mantenuta</entry>
      </row>
      <row>
       <entry>ext/oracle</entry>
       <entry>
        <link linkend="ref.oci8">ext/oci8</link> or
        <link linkend="ref.pdo-oci">ext/pdo_oci</link>
       </entry>
      </row>
      <row>
       <entry>ext/ovrimos</entry>
       <entry>Non attivamente mantenuta</entry>
      </row>
      <row>
       <entry>ext/pfpro</entry>
       <entry>Non attivamente mantenuta</entry>
      </row>
      <row>
       <entry>ext/w32api</entry>
       <entry><link xlink:href="&url.pecl.package;ffi">pecl/ffi</link></entry>
      </row>
      <row>
       <entry>ext/yp</entry>
       <entry>Non attivamente mantenuta</entry>
      </row>
      <row>
       <entry>ext/activescript</entry>
       <entry>
        <link xlink:href="&url.pecl.package;activescript">pecl/activescript</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    I moduli in PECL che non sono mantenuti attivamente (ovvero che non sono stati
    supportati da tempo, non hanno mantenitori attivi che lavorano su di loro
    attualmente, e non hanno alcun pacchetto release PECL), sono ancora disponibili
    su SVN al <link xlink:href="&url.php.svn;pecl">&url.php.svn;pecl</link>.
    Tuttavia, i moduli PHP inediti sono per loro natura non supportati, e l'
    utilità potrebbe essere diversa quando si tenta di installarli o usarli.
   </para>
  </section>

  <section xml:id="migration51.extensions-constants">
   <title>Costanti delle classi in nuove estensioni PHP 5.1.x</title>
   <para>
    Lo Zend Engine 2.1 API consente agli sviluppatori di estensioni di dichiarare le costanti
    di classi nelle estensioni orientate agli oggetti. Nuove estensioni scritte per PHP
    5.1.x, tra cui <link linkend="ref.spl">SPL</link>,
    <link linkend="intro.pdo">PDO</link>,
    <link linkend="book.xmlreader">XMLReader</link> e
    <link linkend="ref.datetime">date</link>, hanno le loro costanti
    nel formato <constant>PDO::CLASS_CONSTANT</constant> piuttosto che nel formato
    C <constant>PDO_CLASS_CONSTANT</constant> al fine di ridurre al minimo
    l'inquinamento del namespace globale in PHP.
   </para>
  </section>
 </section>

 <section xml:id="migration51.datetime">
  <title>Supporto data/ora</title>
  <para>
   Il supporto data/ora è stato completamente riscritto in PHP 5.1.x, e non utilizza più
   le impostazioni di sistema per 'conoscere' il fuso orario in operazione. Utilizzerà invece,
   nel seguente ordine:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Il set di fuso orario utilizzando la funzione
     <function>date_default_timezone_set</function> (se presente)
    </para>
   </listitem>
   <listitem>
    <para>
     La variabile di ambiente TZ (se non è vuota)
    </para>
   </listitem>
   <listitem>
    <para>
     ipotesi "magical" (se il sistema operativo lo supporta)
    </para>
   </listitem>
   <listitem>
    <para>
     Se nessuna delle opzioni di cui sopra ha esito positivo, UTC
    </para>
   </listitem>
  </itemizedlist>
  <informalexample>
   <para>
    Per garantire la precisione (e per evitare un avviso <constant>E_STRICT</constant>),
    è necessario definire il fuso orario nel proprio <filename>php.ini</filename>
    utilizzando il seguente formato:
   </para>
   <para>
    date.timezone = Europe/London
   </para>
  </informalexample>
  <para>
   I fusi orari supportati sono elencati, in questo formato, nell'
   <link linkend="timezones">appendice dei fusi orari</link>.
  </para>
  <para>
   Notare inoltre che <function>strtotime</function> ora restituisce &false; in caso di 
   fallimento, invece di -1.
  </para>
 </section>

 <section xml:id="migration51.databases">
  <title>Cambiamenti nel supporto del database</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.databases-pdo">Panoramica PDO</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.databases-mysql">Cambiamenti nel supporto MySQL</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.databases-sqlite">Cambiamenti nel supporto SQLite</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.databases-pdo">
   <title>Panoramica PDO</title>
   <para>
    I <link linkend="intro.pdo">PHP Data Objects (PDO)</link> furono introdotti come
    un'estensione PECL sotto PHP 5.0, e diventarono parte della distribuzione di PHP di base
    in PHP 5.1.x. L'estensione PDO fornisce un'interfaccia coerente per l'accesso
    al database, ed è usato insieme ai driver PDO specifici del database. Ogni driver
    può anche avere funzioni specifiche del database proprio, ma le funzionalità di base
    di accesso ai dati, come l'emissione di query e il recupero dei dati sono coperte
    dalle funzioni PDO, utilizzando il driver denominato
    <function>PDO::__construct</function>.
   </para>
   <para>
    Si noti che l'estensione PDO, ed i suoi driver, sono destinati ad essere costruiti
    come estensioni condivise. Ciò consentirà aggiornamenti del driver semplici da
    PECL, senza costringere a rifare la build di PHP.
   </para>
   <para>
    Al punto di rilascio della release di PHP 5.1.x, PDO è più che pronto per il test
    diffuso e può essere adottato in molte situazioni. Tuttavia, è importante
    capire che PDO ed i suoi driver sono relativamente giovani e possono
    mancare alcune caratteristiche specifiche del database; valutare PDO con attenzione prima
    di usarlo in nuovi progetti.
   </para>
   <para>
    Il codice obsoleto in genere fa affidamento sulle estensioni database preesistenti,
    che sono ancora mantenute.
   </para>
  </section>

  <section xml:id="migration51.databases-mysql">
   <title>Cambiamenti nel supporto MySQL</title>
   <para>
    In PHP 4, il supporto MySQL 3 era built-in. Con il rilascio di PHP 5.0 c'erano
    due estensioni MySQL, denominate 'mysql' e 'mysqli', che sono state progettate
    per supportare MySQL &lt; 4.1 e MySQL 4.1 in sù, rispettivamente. Con
    l'introduzione di PDO, che fornisce un'interfaccia molto veloce per tutte 
    le API dei database supportati da PHP, il driver PDO_MYSQL può supportare qualsiasi 
    delle versioni correnti (MySQL 3, 4 o 5) in codice PHP scritto per PDO,
    a seconda della versione della libreria MySQL usata durante la compilazione. Le estensioni
    più vecchie di MySQL rimangono in vigore per motivi di retrocompatibilità, ma
    non sono abilitate per impostazione predefinita.
   </para>
  </section>

  <section xml:id="migration51.databases-sqlite">
   <title>Cambiamenti nel supporto di SQLite</title>
   <para>
    In PHP 5.0.x, il supporto di SQLite 2 era fornito dalle funzioni built-in dell'estensione 
    sqlite, che era anche disponibile come estensione PECL in PHP 4.3 e PHP
    4.4. Con l'introduzione di PDO, l'estensione sqlite raddoppia per agire
    come un driver 'sqlite2' per PDO; è a causa di questo che l'estensione sqlite 
    in PHP 5.1.x ha una dipendenza sull'estensione PDO.
   </para>
   <para>
    PHP 5.1.x. è equipaggiato con un numero di interfacce alternative a sqlite:
   </para>
   <para>
    L'estensione sqlite fornisce le "classiche" API procedurali/OO di sqlite che
    potrebbero essere state utilizzate nelle versioni precedenti di PHP. Fornisce inoltre il driver
    PDO 'sqlite2', che consente di accedere a database SQLite 2 legacy
    utilizzando l'API PDO.
   </para>
   <para>
    PDO_SQLITE fornisce il driver 'sqlite' versione 3. SQLite versione 3 è
    di gran lunga superiore a SQLite versione 2, ma i formati dei file delle due
    versioni non sono compatibili.
   </para>
   <para>
    Se il proprio progetto basato su SQLite è già scritto e sta funzionando nelle
    versioni di PHP precedenti, allora è possibile continuare ad utilizzare ext/sqlite senza
    problemi, ma sarà necessario attivare in modo esplicito sia PDO che sqlite. I nuovi
    progetti dovrebbero utilizzare PDO e il driver 'sqlite' (versione 3), in quanto questo è
    più veloce rispetto a SQLite 2, ha migliorato il blocco della concorrenza, e supporta sia
    le istruzioni preparate, sia le colonne binarie nativamente.
   </para>
   <para>
    È necessario attivare PDO per utilizzare l'estensione SQLite. Se si vuole fare il build
    dell'estensione PDO come estensione condivisa, allora anche l'estensione SQLite deve
    essere buildata in modo condiviso. Lo stesso vale per qualsiasi estensione che fornisce un driver
    PDO
   </para>
  </section>
 </section> <!-- end of migration51.databases -->

 <section xml:id="migration51.errorcheck">
  <title>Controllo per <constant>E_STRICT</constant></title>
  <informalexample>
   <para>
    Se si dispone di un solo script per controllare, si possono prendere
    gli errori <constant>E_STRICT</constant> usando la commandline lint
    facility di PHP:
   </para>
   <programlisting role="shell">
    php -d error_reporting=4095 -l script_to_check.php
   </programlisting>
   <para>
    Per i progetti più grandi, lo script di shell sotto raggiungerà lo stesso scopo:
   </para>
   <programlisting role="shell">
<![CDATA[
#!/bin/sh

directory=$1

shift

# These extensions are checked
extensions="php inc"

check_file ()
{
  echo -ne "Doing PHP syntax check on $1 ..."

  # Options:
  ERRORS=`/www/php/bin/php -d display_errors=1 -d html_errors=0 -d error_prepend_string=" " -d error_append_string=" " -d error_reporting=4095 -l $1 | grep -v "No syntax errors detected"`

  if test -z "$ERRORS"; then
    echo -ne "OK."
  else
    echo -e "Errors found!\n$ERRORS"
  fi

  echo
}

# loop over remaining file args
for FILE in "$@" ; do
  for ext in $extensions; do
     if echo $FILE | grep "\.$ext$" > /dev/null; then
       if test -f $FILE; then
         check_file "$FILE"
       fi
     fi
  done
done
]]>
   </programlisting>
  </informalexample>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
