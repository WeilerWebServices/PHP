<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 339895 Maintainer: cucinato Status: ready -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.print">
 <refnamediv>
  <refname>print</refname>
  <refpurpose>Visualizza una stringa</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>print</methodname>
   <methodparam><type>string</type><parameter>arg</parameter></methodparam>
  </methodsynopsis>
  <para>
   Visualizza <parameter>arg</parameter>. 
  </para>
  <para>
   In realtà <literal>print</literal> non è una funzione (è un
   costrutto del linguaggio) pertanto non sono richieste le parentesi
   per la lista degli argomenti.
  </para>
  <para>
   La sola differenza rispetto a <literal>echo</literal> è il fatto che
   <literal>print</literal> accetta un elemento singolo.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>arg</parameter></term>
     <listitem>
      <para>
       I dati in ingresso.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Restituisce sempre <literal>1</literal>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Esempio di uso di <function>print</function></title>
    <programlisting role="php">
<![CDATA[
<?php
print("Ciao Mondo");

print "print() funziona anche senza parentesi.";

print "Questo print() si
ripartisce su più linee. Anche i ritorni a capo
sono visualizzati";

print "Questo print() si\nripartisce su più linee. Anche i ritorni a capo\nsono visualizzati.";

print "l'escape dei caratteri si fa \"in questo modo\".";

// Si possono usare variabili all'interno di istruzioni print
$foo = "foobar";
$bar = "barbaz";

print "foo è $foo"; // foo è foobar

// Si possono usare le matrici
$bar = array("chiave" => "foo");

print "questo è {$bar['chiave']} !"; // questo è foo !

// Utilizzando l'apice singolo sarà visualizzato il nome della variabile e non il contenuto
print 'foo è $foo'; // foo è $foo

// Se non si usa altri caratteri, si può semplicemente visualizzare il contenuto della variabile
print $foo;          // foobar

print <<<END
Questo esempio usa la sintassi "here document" per visualizzare
linee multiple con interpolazione delle $variabili. Si noti
che il terminatore deve apparire su una
riga con solo un punto e virgola e senza spazi!
END;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>echo</function></member>
    <member><function>printf</function></member>
    <member><function>flush</function></member>
    <member><link linkend="language.types.string.syntax.heredoc">sintassi Heredoc</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
