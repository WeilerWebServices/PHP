<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: darvina Status: ready -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry xml:id="function.parse-str" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>parse_str</refname>
    <refpurpose>Suddivide una stringa in variabili</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>void</type><methodname>parse_str</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>arr</parameter></methodparam>
     </methodsynopsis>
    <para>
     Suddivide la stringa <parameter>str</parameter> come se fosse una stringa di query
     passata via URL ed imposta le variabili con visibilità locale. Se si indica
     il secondo parametro <parameter>arr</parameter>, 
     la variabili sono memorizzate come elementi della matrice <parameter>arr</parameter>.
    </para>
    <note>
     <para>
      Il supporto per il secondo parametro, opzionale, è stato aggiunto in PHP 4.0.3.
     </para>
    </note>
    <note>
     <para>
      Per avere la <emphasis>QUERY_STRING</emphasis> corrente occorre utilizzare la variabile
      <link linkend="reserved.variables.server">$_SERVER['QUERY_STRING']</link>.
      Inoltre è opportuno leggere la sezione sulle 
      <link linkend="language.variables.external">variabili esterne al PHP</link>.
     </para>
    </note>
    <note>
     <para>
      L'impostazione <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>
      influisce sull'output di questa funzione, poiché <function>parse_str</function> utilizza
      lo stesso meccanismo che usa il PHP per compilare le variabili
      <literal>$_GET</literal>, <literal>$_POST</literal>, ecc.
     </para>
    </note>
    <para>
     <example>
      <title>Esempio di uso di  <function>parse_str</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$str = "first=value&arr[]=foo+bar&arr[]=baz";
parse_str($str);
echo $first;  // value
echo $arr[0]; // foo bar
echo $arr[1]; // baz

parse_str($str, $output);
echo $output['first'];  // value
echo $output['arr'][0]; // foo bar
echo $output['arr'][1]; // baz

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Vedere anche <function>parse_url</function>, <function>pathinfo</function>,
     <function>get_magic_quotes_gpc</function> e <function>urldecode</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
