<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 297028 Maintainer: cucinato Status: ready -->
<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>
   Crea un valore PHP a partire da una rappresentazione archiviata
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   La funzione <function>unserialize</function> prende il formato serializzato di
   una variabile (vedere <function>serialize</function>) e la riporta al valore PHP.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       La stringa serializzata.
      </para>
      <para>
       Se la variabile da ripristinare è un oggetto, dopo avere ricostruito
       l'oggetto, il PHP cercherà di eseguire la funzione membro 
       <function>__wakeup</function> (se esiste).
      </para>
      <para>
       <note>
        <title>Direttiva unserialize_callback_func</title>
        <para>
         E' possibile impostare una funzione di callback che possa essere richiamata
         se, durante la fase di deserializzazione, occorre istanziare una classe indefinita.
         (per evitare di ottenere un tipo <type>object</type> incompleto "__PHP_Incomplete_Class".)
         Per definire il parametro 'unserialize_callback_func' si può agire sul
         &php.ini;, o usare <function>ini_set</function> oppure con &htaccess;.
         Verrà utilizzata questa funzione ogni volta che occorre istanziare una classe indefinita.
         Per disabilitare questa opzione, lasciare vuota questa impostazione.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Il valore convertito è restituito, e può essere un <type>boolean</type>,
   <type>integer</type>, <type>float</type>, <type>string</type>,
   <type>array</type> oppure <type>object</type>.
  </para>
  <para>
   Nel caso in cui la stringa passata non sia deserializzabile la funzione restituisce &false; e genera
   un <constant>E_NOTICE</constant>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.2.0</entry>
       <entry>
        La direttiva unserialize_callback_func è disponibile.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Esempio di uso di <function>unserialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// In questo esempio si usa unserialize() per caricare i dati nell'array
// $session_data dalla stringa estratta da un database.
// Questo esempio è complementare a quello descritto in serialize().

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {
    // se odbc_execute o odbc_fetch_into generano un errore, si predispone un array vuoto
    $session_data = array();
} else {
    // ora abbiamo i dati serializzati in $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
       // qualcosa non ha funzionato, si predispone un array vuoto
       $session_data = array();
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Esempio di unserialize_callback_func</title>
    <programlisting role="php">
<![CDATA[
<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

// direttiva unserialize_callback_func disponibile da PHP 4.2.0
ini_set('unserialize_callback_func', 'mycallback'); // imposta la callback_function

function mycallback($classname) 
{
    // includere un file contenente la definizione di classe
    // $classname indica la classe da usare
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    &false; è restituito sia in caso di errore e sia in caso di de-serializzazione 
    del valore &false;. Questo caso particolare può essere intercettato
    confrontando <parameter>str</parameter> con
    <literal>serialize(false)</literal> o rilevando il 
    <constant>E_NOTICE</constant> generato.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>serialize</function></member>
    <member><link linkend="language.oop5.autoload">Autoloading Objects</link></member>
    <member><link linkend="unserialize-callback-func">unserialize_callback_func</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
