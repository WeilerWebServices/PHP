<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: cucinato Status: ready -->
<!-- splitted from ./it/functions/array.xml, last change in rev 1.1 -->
<!-- last change to 'array-filter' in en/ tree in rev 1.62 -->
<!-- OLD-Revision: 1.173/EN.1.62 -->
  <refentry xml:id="function.array-filter" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>array_filter</refname>
    <refpurpose>
      Filtra gli elementi di un array usando una funzione callback
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descrizione</title>
     <methodsynopsis>
      <type>array</type><methodname>array_filter</methodname>
      <methodparam><type>array</type><parameter>input</parameter></methodparam>
      <methodparam choice="opt"><type>callback</type><parameter>callback</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>array_filter</function> esegue un'iterazione su ogni valore
     nell' array <parameter>input</parameter> passandolo alla
     <parameter>funzione</parameter>. Se <parameter>
     funzione</parameter> restituisce &true;, il valore corrente
    di <parameter>input</parameter> viene restituito nell'array
    risultato. Le chiavi sono mantenute.
    </para>
    <para>
     <example>
      <title>Esempio di <function>array_filter</function></title>
      <programlisting role="php">
<![CDATA[
<?php
function dispari($var) 
{
    return($var % 2 == 1);
}

function pari($var) 
{
    return($var % 2 == 0);
}

$array1 = array("a"=>1, "b"=>2, "c"=>3, "d"=>4, "e"=>5);
$array2 = array(6, 7, 8, 9, 10, 11, 12);

echo "Dispari :\n";
print_r(array_filter($array1, "dispari");
echo "Pari :\n";
print_r(array_filter($array2, "pari");
?>
]]>
      </programlisting>
      &example.outputs;
      <screen role="php">
<![CDATA[
Dispari :
Array
(
    [a] => 1
    [c] => 3
    [e] => 5
)
Pari:
Array
(
    [0] => 6
    [2] => 8
    [4] => 10
    [6] => 12
)
]]>
      </screen>
     </example>
    </para>
    <para>
     Gli utenti non possono modificare l'array attraverso la funzione
     di callback, ad esempio aggiungere/togliere un elemento, o cancellare l'array su cui
     <function>array_filter</function> è applicata. Se l'array viene
     cambiato, il comportamento di questa funzione non è definito.
    </para>
    <para>
     Se la funzione <parameter>callback</parameter> non viene indicata,
     <function>array_filter</function> rimuoverà tutti gli elementi di
     <parameter>input</parameter> che siano uguali a &false;. Vedere <link
     linkend="language.types.boolean.casting">conversione a boolean</link>
     per ulteriori informazioni.
    </para>
    <para>
     <example>
      <title><function>array_filter</function> senza
      <parameter>callback</parameter></title>
      <programlisting role="php">
<![CDATA[
<?php

$entry = array(
             0 => 'pippo',
             1 => false,
             2 => -1,
             3 => null,
             4 => ''
          );

print_r(array_filter($entry));
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Array
(
    [0] => pippo
    [2] => -1
)
]]>
      </screen>
     </example>
    </para>
    <para>
     Vedere anche <function>array_map</function> e
     <function>array_reduce</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
