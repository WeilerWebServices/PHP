<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 331477 Maintainer: cucinato Status: ready -->
<refentry xml:id="function.array-multisort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_multisort</refname>
  <refpurpose>Ordina array multipli o multidimensionali</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_multisort</methodname>
   <methodparam><type>array</type><parameter role="reference">array1</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>array1_sort_order</parameter><initializer>SORT_ASC</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>array1_sort_flags</parameter><initializer>SORT_REGULAR</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis> 
  <para>
   <function>Array_multisort</function> Può essere usata per ordinare parecchi
   array allo stesso tempo, oppure un array multidimensionale, rispetto a una o
   più dimensioni.
  </para>
  <para>
   Mantiene le chiavi associative (tipo <type>string</type>), mentre le chiavi
   numeriche vengono reindicizzate.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
   <para>
    <variablelist>
     <varlistentry>
      <term><parameter>array1</parameter></term>
      <listitem>
       <para>
        L'<type>array</type> da ordinare.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><parameter>array1_sort_order</parameter></term>
      <listitem>
       <para>
        L'ordinamento da applicare al precedente argomento <type>array</type>. Può essere
        <constant>SORT_ASC</constant> per un ordinamento crescente o <constant>SORT_DESC</constant>
        per un ordinamento decrescente.
       </para>
       <para>
        Questo argomento può essere scambiato con <parameter>array1_sort_flags</parameter>
        o completamente omesso, nel qual caso si usa per default <constant>SORT_ASC</constant>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><parameter>array1_sort_flags</parameter></term>
      <listitem>
       <para>
        Opzioni di ordinamento per il precedente argomento <type>array</type>:
       </para>
       <para>
        Flag di tipo:
        <itemizedlist>
         <listitem>
          <simpara><constant>SORT_REGULAR</constant> - confronta gli elementi in modo normale
           (non cambiare il tipo)</simpara>
         </listitem>
         <listitem>
          <simpara><constant>SORT_NUMERIC</constant> - confronta gli elementi numericamente</simpara>
         </listitem>
         <listitem>
          <simpara><constant>SORT_STRING</constant> - confronta gli elementi come stringhe</simpara>
         </listitem>
         <listitem>
          <simpara>
           <constant>SORT_LOCALE_STRING</constant> - confronta gli elementi come
           stringhe, basandosi sull'attuale impostazione di localizzazione. Usa la localizzazione,
           che può essere cambiata con <function>setlocale</function>
          </simpara>
         </listitem>
         <listitem>
          <simpara>
           <constant>SORT_NATURAL</constant> - confronta gli elementi come stringhe
           usando l'"ordinamento naturale" come <function>natsort</function>
          </simpara>
         </listitem>
         <listitem>
          <simpara>
           <constant>SORT_FLAG_CASE</constant> - può essere combinato
           (OR binario) con
           <constant>SORT_STRING</constant> o
           <constant>SORT_NATURAL</constant> per ordinare le stringhe senza tener conte delle maiuscole/minuscole
          </simpara>
         </listitem>
        </itemizedlist>
       </para>
       <para>
        Questo argomento può essere scambiato con <parameter>array1_sort_order</parameter>
        o completamente omesso, nel qual caso si usa per default <constant>SORT_REGULAR</constant>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><parameter>...</parameter></term>
      <listitem>
       <para>
        Altri array, opzionalmente seguiti da opzioni di ordinamento e flag di tipo.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.4.0</entry>
       <entry>
        Le costanti <constant>SORT_NATURAL</constant> e <constant>SORT_FLAG_CASE</constant>
        sonon state aggiunte a <parameter>array1_sort_flags</parameter> come flag di tipo.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        La costante <constant>SORT_LOCALE_STRING</constant> è stata aggiunta a 
        <parameter>array1_sort_flags</parameter> come flag di tipo.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Sorting multiple arrays</title>
    <programlisting role="php">
<![CDATA[
<?php
$ar1 = array("10", 100, 100, "a");
$ar2 = array(1, 3, "2", 1);
array_multisort($ar1, $ar2);

var_dump($ar1);
var_dump($ar2);
?>
]]>
    </programlisting>
    <para>
     In questo esempio, dopo l'ordinamento, il primo array conterrà 0,
     10, 100, 100. Il secondo array conterrà 4, 1, 2, 3. Gli
     elementi del secondo array corrispondenti a quelli, identici, del
     primo array (100 e 100), vengono pure ordinati.
    </para>
    <screen>
<![CDATA[
array(4) {
  [0]=> int(0)
  [1]=> int(10)
  [2]=> int(100)
  [3]=> int(100)
}
array(4) {
  [0]=> int(4)
  [1]=> int(1)
  [2]=> int(2)
  [3]=> int(3)
}
]]>     
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ordinamento di array multidimensionali</title>
    <programlisting role="php">
<![CDATA[
<?php
$ar = array(
       array("10", 11, 100, 100, "a"),
       array(   1,  2, "2",   3,   1)
      );
array_multisort($ar[0], SORT_ASC, SORT_STRING,
                $ar[1], SORT_NUMERIC, SORT_DESC);
var_dump($ar);
?>
]]>
      </programlisting>
      <para>
       In questo esempio, dopo l'ordinamento, il primo array conterrà 
       "10", 100, 100, 11, "a" (ordinato come stringhe ordine 
       crescente), e il secondo conterrà 1, 3, "2", 2, 1 (ordinati come numeri,
       in ordine decrescente).
      </para>
      <screen>
<![CDATA[
array(2) {
  [0]=> array(5) {
    [0]=> string(2) "10"
    [1]=> int(100)
    [2]=> int(100)
    [3]=> int(11)
    [4]=> string(1) "a"
  }
  [1]=> array(5) {
    [0]=> int(1)
    [1]=> int(3)
    [2]=> string(1) "2"
    [3]=> int(2)
    [4]=> int(1)
  }
}
]]>
      </screen>
     </example>
  </para>
  <para>
   <example>
    <title>Ordinamento dei risultati di un database</title>
    <para>
     In questo esempio, ogni elemento nell'array <varname>data</varname>
     rappresenta un record della tabella. Questo genere di dato è tipico
     dei record di database.
    </para>
    <para>
     Esempio di dati:
    </para>
    <screen>
<![CDATA[
volume | edition
-------+--------
    67 |       2
    86 |       1
    85 |       6
    98 |       2
    86 |       6
    67 |       7
]]>
      </screen>
      <para>
       I dati sono in un array, chiamato <varname>data</varname>. Di solito
       questo si ottiene ciclando, ad esempio, con <function>mysql_fetch_assoc</function>.
      </para>
      <programlisting role="php">
<![CDATA[
<?php
$data[] = array('volume' => 67, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 1);
$data[] = array('volume' => 85, 'edition' => 6);
$data[] = array('volume' => 98, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 6);
$data[] = array('volume' => 67, 'edition' => 7);
?>
]]>
      </programlisting>
      <para>
       In questo esempio ordineremo <varname>volume</varname> in senso discendente,
       <varname>edition</varname> in senso ascendente.
      </para>
      <para>
       Abbiamo un array di record, ma <function>array_multisort</function>
       richiede un array di colonne, quindi usiamo il codice qui sotto per ottenerlo,
       quindi eseguiremo l'ordinamento.
      </para>
      <programlisting role="php">
<![CDATA[
<?php
// Ottiene un array di colonne
foreach ($data as $key => $row) {
    $volume[$key]  = $row['volume'];
    $edition[$key] = $row['edition'];
}

// Ordina 'volume' in senso discendente, 'edition' in senso ascendente
// Aggiungere $data come ultimo parametr per ordinare sulla chiave comune
array_multisort($volume, SORT_DESC, $edition, SORT_ASC, $data);
?>
]]>
      </programlisting>
      <para>
       Il set di dati è ora ordinato, e apparirà così:
      </para>
      <screen>
<![CDATA[
volume | edition
-------+--------
    98 |       2
    86 |       1
    86 |       6
    85 |       6
    67 |       2
    67 |       7
]]>
      </screen>
     </example>
  </para>
  <para>
   <example>
    <title>Ordinamento senza distinzione tra maiuscole e minuscole</title>
    <para>
     Sia <constant>SORT_STRING</constant> che
     <constant>SORT_REGULAR</constant> tengono conto delle maiuscole, le stringhe
     che iniziano con una maiuscola vengono prima di quelle che iniziano con
     una minuscola.
    </para>
    <para>
     Per ottenere un ordinamento che ignori le maiuscole, forzarlo in modo
     che sia determnato da una copia dell'array originale formata da sole minuscole.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$array = array('Alpha', 'atomic', 'Beta', 'bank');
$array_lowercase = array_map('strtolower', $array);

array_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);

print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Alpha
    [1] => atomic
    [2] => bank
    [3] => Beta
)
]]>
      </screen>
     </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>usort</function></member>
    <member>&seealso.array.sorting;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
