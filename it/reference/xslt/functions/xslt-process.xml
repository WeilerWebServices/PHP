<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 327484 Maintainer: pastore Status: ready -->
<!-- CREDITS: curcio_it -->
<refentry xml:id="function.xslt-process" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>xslt_process</refname>
  <refpurpose>Esegue una trasformazione <acronym>XSLT</acronym></refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>xslt_process</methodname>
   <methodparam><type>resource</type><parameter>xh</parameter></methodparam>
   <methodparam><type>string</type><parameter>xmlcontainer</parameter></methodparam>
   <methodparam><type>string</type><parameter>xslcontainer</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>resultcontainer</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>arguments</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>parameters</parameter></methodparam>
  </methodsynopsis>
  <para>
   La funzione <function>xslt_process</function> è il punto cruciale dell'estensione
   <acronym>XSLT</acronym>.  Essa permette di eseguire una trasformazione <acronym>XSLT</acronym> utilizzando
   quasi qualsiasi tipo di sorgente come input - i contenitori.  Questo si realizza
   attraverso l'utilizzo di buffer argomento -- un concetto preso dal processore <acronym>XSLT</acronym>
   <productname>Sablotron</productname> (attualmente l'unico processore <acronym>XSLT</acronym> che questa estensione supporta).
   I contenitori predefiniti di input ad un nome di file 'contenente' il documento da
   elaborare. 
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &xslt.parameter.xh;
    <varlistentry>
     <term><parameter>xmlcontainer</parameter></term>
     <listitem>
      <para>
       Percorso al file <acronym>XML</acronym> o un segnaposto per l'argomento
       <acronym>XML</acronym>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>xslcontainer</parameter></term>
     <listitem>
      <para>
       Percorso al file <acronym>XSL</acronym>o un segnaposto per l'argomento
       <acronym>XML</acronym>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>resultcontainer</parameter></term>
     <listitem>
      <para>
       Il container risultato predefinito ad un nome di file per il documento
       trasformato. Se il container risultato non è specificato - p.e. &null;
       - allora viene restituito il risultato.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arguments</parameter></term>
     <listitem>
      <para>
       Invece di file <acronym>XML</acronym> e <acronym>XSLT</acronym> come argomenti alla funzione
       <function>xslt_process</function>, puoi specificare &quot;argomenti segnaposto&quot; che sono poi sostituiti dai valori
       dati nell'array <parameter>arguments</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameters</parameter></term>
     <listitem>
      <para>
       Un array per qualsiasi parametro di primo livello che sarà passato al documento
       XSLT.  Dopo si può accedere a questi parametri all'interno dei file XSL
       utilizzando l'istruzione <literal>&lt;xsl:nome del parametro=&quot;nome_parametro&quot;&gt;</literal>.
       I parametri devono essere codificati con UTF-8 e i loro valori saranno
       interpretati come stringhe dal processore <productname>Sablotron</productname>.
       In altre parole - non si possono passare <literal>set di nodi</literal> come parametri
       al documento <acronym>XSLT</acronym>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   I container possono anche essere impostati attraverso l'array <parameter>arguments</parameter>
   (vedi di seguito).
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success; Se il contenitore risultato non è specificato - p.e.
   &null; - allora viene restituito il risultato.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.6</entry>
       <entry>
        Questa funzione non prende più stringhe XML in
        <parameter>xmlcontainer</parameter> o 
        <parameter>xslcontainer</parameter>. Il passaggio di una stringa contenente XML
        ad uno di questi parametri si tradurrà in un errore di segmentazione nelle
        versioni di Sablotron fino a 0.95.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Il più semplice tipo di trasformazione con la funzione
   <function>xslt_process</function> è la trasformazione di un file
   <acronym>XML</acronym> con un file <acronym>XSLT</acronym>, mettendo il risultato
   in un terzo file contenente il nuovo documento <acronym>XML</acronym> (o HTML).  Fare
   questo con <productname>Sablotron</productname> è davvero molto semplice...
  </para>
  <example>
   <title>Utilizzare la funzione <function>xslt_process</function> per trasformare un file <acronym>XML</acronym>
   ed un file <acronym>XSL</acronym> in un nuovo file <acronym>XML</acronym></title>
   <programlisting role="php">
<![CDATA[
<?php

// Allocazione di un nuovo processore XSLT
$xh = xslt_create();

// Elaborazione del documento
if (xslt_process($xh, 'sample.xml', 'sample.xsl', 'result.xml')) {
    echo "SUCCESS, sample.xml was transformed by sample.xsl into result.xml";
    echo ", result.xml has the following contents\n<br />\n";
    echo "<pre>\n";
    readfile('result.xml');
    echo "</pre>\n";
} else {
    echo "Sorry, sample.xml could not be transformed by sample.xsl into";
    echo "  result.xml the reason is that " . xslt_error($xh) . " and the ";
    echo "error code is " . xslt_errno($xh);
}

xslt_free($xh);

?>
]]>
   </programlisting>
  </example>
  <para>
   Anche se questa funzione è ottima, molte volte, soprattutto in un ambiente web, si vuole
   essere in grado di stampare direttamente i risultati.  Pertanto, se si omette il terzo argomento della
   funzione <function>xslt_process</function> (o si fornisce un valore NULL value per l'argomento), sarà
   automaticamente restituito il valore della trasformazione <acronym>XSLT</acronym>, invece di scriverla direttamente in un
   file...
  </para>
  <para>
   <example>
   <title>Utilizzare la funzione <function>xslt_process</function> per trasformare un file <acronym>XML</acronym>
   ed un file <acronym>XSL</acronym> in una variabile che contiene i dati XML risultanti</title>
   <programlisting role="php">
<![CDATA[
<?php

// Allocazione di un nuovo processore XSLT
$xh = xslt_create();

// Elaborazione del documento, restituendo il risultato nella variabile $result
$result = xslt_process($xh, 'sample.xml', 'sample.xsl');
if ($result) {
    echo "SUCCESS, sample.xml was transformed by sample.xsl into the \$result";
    echo " variable, the \$result variable has the following contents\n<br />\n";
    echo "<pre>\n";
    echo $result;
    echo "</pre>\n";
} else {
    echo "Sorry, sample.xml could not be transformed by sample.xsl into";
    echo "  the \$result variable the reason is that " . xslt_error($xh);
    echo " and the error code is " . xslt_errno($xh);
}

xslt_free($xh);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   I due casi mostrati sopra sono i due casi più semplici che ci possono essere quando si tratta di trasformazione XSLT
   e si oserebbe dire che sono i casi più comuni, tuttavia, a volte si ottiene il codice <acronym>XML</acronym> e
   <acronym>XSLT</acronym> da fonti esterne, come un database o un socket.  In questi casi si avranno
   i dati <acronym>XML</acronym> e/o <acronym>XSLT</acronym> in una variabile -- e nelle applicazione di produzione il sovraccarico di operazioni di dumping
   per questi file potrebbe essere troppo.  Questo è il caso in cui la sintassi dell'&quot;argomento&quot; di <acronym>XSLT</acronym>, viene in
   soccorso.  Invece di file come argomenti <acronym>XML</acronym> e <acronym>XSLT</acronym> alla funzione
   <function>xslt_process</function>, si possono specificare &quot;segnaposto degli argomenti&quot; che vengono poi sostituiti da valori
   dati negli argomenti array (5° parametro della funzione <function>xslt_process</function>).
   Di seguito è riportato un esempio di trasformazione <acronym>XML</acronym> e <acronym>XSLT</acronym> in una variabile risultato senza l'utilizzo
   di file.
  </para>
  <para>
   <example>
   <title>Utilizzare la funzione <function>xslt_process</function> per trasformare una variabile contenente dati <acronym>XML</acronym>
   e una variabile contenente dati <acronym>XSL</acronym> in una variabile contenente i dati <acronym>XML</acronym> risultanti</title>
   <programlisting role="php">
<![CDATA[
<?php
// $xml e $xsl contengono i dati XML e XSL

$arguments = array(
     '/_xml' => $xml,
     '/_xsl' => $xsl
);

// Allocazione di un nuovo processore XSLT
$xh = xslt_create();

// Elaborazione del documento
$result = xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, $arguments);
if ($result) {
    echo "SUCCESS, sample.xml was transformed by sample.xsl into the \$result";
    echo " variable, the \$result variable has the following contents\n<br />\n";
    echo "<pre>\n";
    echo $result;
    echo "</pre>\n";
} else {
    echo "Sorry, sample.xml could not be transformed by sample.xsl into";
    echo "  the \$result variable the reason is that " . xslt_error($xh);
    echo " and the error code is " . xslt_errno($xh);
}
xslt_free($xh);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Passare variabili PHP ai file XSL</title>
    <programlisting role="php">
<![CDATA[
<?php

// stringa XML
$xml = '<?xml version="1.0"?>
<para>
 change me
</para>';

// stringa XSL
$xsl = '
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html" encoding="ISO-8859-1" indent="no"
 omit-xml-declaration="yes"  media-type="text/html"/>
 <xsl:param name="myvar"/>
 <xsl:param name="mynode"/>
 <xsl:template match="/">
My PHP variable : <xsl:value-of select="$myvar"/><br />
My node set : <xsl:value-of select="$mynode"/>
 </xsl:template>
</xsl:stylesheet>';


$xh = xslt_create();

// il secondo parametro sarà interpretato come una stringa
$parameters = array (
  'myvar' => 'test',
  'mynode' => '<foo>bar</foo>'
);

$arguments = array (
  '/_xml' => $xml,
  '/_xsl' => $xsl
);

echo xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, $arguments, $parameters);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
My PHP variable : test<br>
My node set : &lt;foo&gt;bar&lt;/foo&gt;
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  &note.xslt.windows;
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
