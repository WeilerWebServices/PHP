<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: darvina Status: ready -->
<!-- splitted from ./it/functions/pcre.xml, last change in rev 1.1 -->
<article xml:id="reference.pcre.pattern.modifiers" xmlns="http://docbook.org/ns/docbook">
 <title>Modificatori di criterio (Pattern Modifiers)</title>
 <titleabbrev>Questo capitolo descrive i possibili modificatori applicabili ad una espressione regolare</titleabbrev>
  <para>
   Di seguito saranno elencati i valori attualmente previsti. I nomi
   posti tra parentesi si riferiscono ai corrispettivi nomi usati
   internamente da PCRE.
  </para>
  <para>
   <blockquote>
    <variablelist>
     <varlistentry>
      <term><emphasis>i</emphasis> (<literal>PCRE_CASELESS</literal>)</term>
      <listitem>
       <simpara>
        Se si attiva questo modificatore, l'espressione regolare viene
        riconosciuta senza distinguere tra le lettere maiuscole e minuscole.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>m</emphasis> (<literal>PCRE_MULTILINE</literal>)</term>
      <listitem>
       <simpara>
        Per default, PCRE tratta il testo su cui fare la ricerca come
        una "singola linea" di caratteri (anche se in realtà può
        contenere diversi "a capo" (newline)). Il carattere di "inizio riga"
        (^) indica solamente l'inizio del testo passato. Analogamente il
        carattere di "fine riga" ($) indica la fine del testo o prima
        se vi sono dei caratteri di "a capo" (a meno che
        non sia attivato il modificatore <emphasis>D</emphasis>).
        In questo modo si comporta anche Perl.
       </simpara>
       <simpara>
        Invece quando viene indicato questo modificatore, "inizio riga"
        e "fine riga" vengono identificati in base ai caratteri di "a capo"
        presenti nel testo (rispettivamente subito dopo e subito prima di
        questo carattere). Questo comportamento è equivalente
        al modificatore /m di Perl. Se nel testo passato non vi sono
        caratteri di "a capo" o non vi sono occorrenze dei caratteri
        ^ o $ nell'espressione regolare, l'uso di questo modificatore non ha effetto.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>s</emphasis> (<literal>PCRE_DOTALL</literal>)</term>
      <listitem>
       <simpara>
        Se si attiva questo modificatore, il carattere . usato
        nell'espressione regolare indica tutti i possibili caratteri compreso il carattere di "a capo" (newline). Senza questo
        modificatore il carattere "a capo" viene escluso.
        Questo modificare è equivalente a /s di Perl. Una espressione
        regolare contenente una forma negativa, come [^a], riconosce
        sempre un "a capo" a prescindere da questo modificatore.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>x</emphasis> (<literal>PCRE_EXTENDED</literal>)</term>
      <listitem>
       <simpara>
        Se si attiva questo modificatore, verranno ignorati gli spazi
        presenti nell'espressione regolare, tranne quelli preceduti dal
        carattere di escape (\) o posti all'interno di una classe
        di caratteri. Saranno, inoltre, ignorati i caratteri posti
        tra il simbolo # (se non è preceduto dall'escape, ed è posto al
        di fuori di una classe di caratteri) ed il successivo carattere
        di "a capo" (newline). Questo comportamento equivale al flag /x
        di Perl e consente di inserire dei commenti all'interno di
        espressioni regolari complesse. Gli spazi bianchi non devono
        mai comparire all'interno di sequenze speciali di caratteri,
        come, ad esempio, la sequenza (?( che introduce ad un criterio condizionale.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>e</emphasis> (<literal>PREG_REPLACE_EVAL</literal>)</term>
      <listitem>
       <simpara>
        Se viene specificato questo modificatore, la funzione <function>preg_replace</function>
        attua la sostituzione dei riferimenti all'indietro nella
        stringa di sostituzione, la interpreta come codice PHP, quindi utilizza il risultato
        come testo da sostituire alle stringhe cercate.
        Gli apici singoli e doppi  backslash (<literal>\</literal>) e i caratteri NULL sono
        preceduti dal backslash nei riferimenti sostituiti.
       </simpara>
       <caution>
        <para>
         Ma funzione <function>addslashes</function> viene eseguita su ogni riferimento prima che
         la sostituzione venga attuata. Quindi, quando il riferimento all'indietro
         è utilizzato come una stringa tra apici, i caratteri con escape saranno convertiti
         nella loro version letterale. Comunque i caratteri con escape che 
         normalmente non sono tradotti manterranno il loro backslash. Questo rende
         molto complicato l'utilizzo di questo modificatore.
        </para>
       </caution>
       <caution>
        <para>
         Assicurarsi che <parameter>replacement</parameter> costituisca una stringa di codice PHP valido,
         altrimenti PHP emetterà un errore alla linea che contiene
         <function>preg_replace</function>.
        </para>
       </caution>
       <caution>
        <para>
         L'uso di questo modificatore <emphasis>non è raccomandato</emphasis>, dal momento che può facilmente
         introdurre delle vulnerabilità:
        </para>
        <informalexample>
         <programlisting role="php">
<![CDATA[
<?php
$html = $_POST['html'];

// uppercase headings
$html = preg_replace(
    '(<h([1-6])>(.*?)</h\1>)e',
    '"<h$1>" . strtoupper("$2") . "</h$1>"',
    $html
);
]]>
         </programlisting>
        </informalexample>
        <para>
         L'esempio qui sopra può essere facilmente sfruttato passando una stringa come
         <literal>&lt;h1&gt;{${eval($_GET[php_code])}}&lt;/h1&gt;</literal>. Questo dà
         all'attaccante la possibiltà di eseguire codice PHP arbitrario e ciò gli permette
         un access quasi totale al server.
        </para>
        <para>
         Per evitare questo tipo di vulnerabilità, la funzione
         <function>preg_replace_callback</function> deve essere utilizzata al suo posto:
        </para>
        <informalexample>
         <programlisting role="php">
<![CDATA[
<?php
$html = $_POST['html'];

// uppercase headings
$html = preg_replace_callback(
    '(<h([1-6])>(.*?)</h\1>)',
    function ($m) {
        return "<h$m[1]>" . strtoupper($m[2]) . "</h$m[1]>";
    },
    $html
);
]]>
         </programlisting>
        </informalexample>
       </caution>
       <note>
        <para>
         Soltanto <function>preg_replace</function> utilizza questo modificatore;
         le altre funzioni di PCRE lo ignorano.
        </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>A</emphasis> (<literal>PCRE_ANCHORED</literal>)</term>
      <listitem>
       <simpara>
        Se si specifica questo modificatore, si forza un 'ancoraggio'
        del criterio di ricerca. In pratica questo viene costretto
        a riconoscere il testo su cui si fa la ricerca solo dall'inizio.
        Questo effetto può essere ottenuto anche con particolari
        costruzioni dell'espressione regolare, che rappresentano gli
        unici modi utilizzabili in Perl per ottenere il medesimo scopo.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>D</emphasis> (<literal>PCRE_DOLLAR_ENDONLY</literal>)</term>
      <listitem>
       <simpara>
        L'uso di questo modificatore forza il carattere $ dell'espressione
        regolare a indicare la fine della stringa oggetto della ricerca.
        Senza questo modificatore il carattere $ indica la posizione subito
        prima dell'ultimo carattere se questo è un "a capo" (ma comunque
        non prima di ogni altro "a capo"). Questo modificatore viene ignorato
        se è attivato il modificatore <emphasis>m</emphasis>. Non vi sono
        flag equivalenti in Perl.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>S</emphasis></term>
      <listitem>
       <simpara>
        Quando una espressione regolare è destinata ad essere utilizzata
        diverse volte, vale la pena dedicare del tempo ad ottimizzare
        la velocità di riconoscimento. L'uso di questo modificatore permette
        questa analisi. Al momento lo studio della velocità è significativo
        per i criteri di ricerca "non ancorati", cioè espressioni che non
        hanno un carattere di partenza fisso.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>U</emphasis> (<literal>PCRE_UNGREEDY</literal>)</term>
      <listitem>
       <simpara>
        Questo modificatore inverte la "golosità" delle occorrenze, in modo
        da non essere golose per default, ma lo tornano ad essere se
        seguiti da <literal>?</literal>. Questo flag non è compatibile con Perl.
        Questo comportamento può anche essere settato dalla sequenza (<literal>?U</literal>)
        <link linkend="regexp.reference.internal-options">settaggio dei modificatori
        all'interno del criterio di ricerca</link> o da un punto di domanda vicino ad un quantificatore (es.
        <literal>.*?</literal>).
       </simpara>
       <note>
        <para>
         Normalmente non è possibile eseguire una corrispondenza con più di <link
         linkend="ini.pcre.backtrack-limit">pcre.backtrack_limit</link>
         caratteri in modalità non golosa.
        </para>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>X</emphasis> (<literal>PCRE_EXTRA</literal>)</term>
      <listitem>
       <simpara>
        Questo modificatore attiva funzionalità addizionali di PCRE
        che sono incompatibili con Perl. Ogni backslash (\) posto
        nell'espressione regolare che non sia seguito da una lettera
        con significato speciale causa un errore, ciò per riservare
        queste sequenze a future espansioni. Per default, Perl
        considera il backslash (\) seguito da una lettera priva di
        significato speciale come un qualsiasi testo. Al momento non
        vi sono altre caratteristiche gestite tramite questo modificatore.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>J</emphasis> (<literal>PCRE_INFO_JCHANGED</literal>)</term>
      <listitem>
       <simpara>
        L'opzione di configurazione interna (?J) cambia l'opzione locale <literal>PCRE_DUPNAMES</literal>
        Permette la duplicazione dei nomi per le sottoregole.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis>u</emphasis> (<literal>PCRE_UTF8</literal>)</term>
      <listitem>
       <simpara>
        Questo modificatore attiva funzionalità di PCRE che sono
        incompatibili con Perl. Le stringhe di ricerca sono considerate
        come UTF-8. Questo modificatore è disponibile dalla versione
        4.1.0 di PHP di Unix e dalla versione 4.2.3 sulla piattaforma win32.
        La validità UTF-8 della regola è controllata da PHP 4.3.5.
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </blockquote>
  </para>
</article>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
