<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 306351 Maintainer: pastore Status: ready -->
<!-- CREDITS: darvina -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.xml-set-object">
 <refnamediv>
  <refname>xml_set_object</refname>
  <refpurpose>Utilizza il parser XML all'interno di un oggetto</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>xml_set_object</methodname>
   <methodparam><type>resource</type><parameter>parser</parameter></methodparam>
   <methodparam><type>object</type><parameter role="reference">object</parameter></methodparam>
  </methodsynopsis>
  <para>
   Questa funzione permette l'uso del <parameter>parser</parameter> all'interno
   di un <parameter>object</parameter>. Tutte le funzioni di callback possono essere indicate con
   <function>xml_set_element_handler</function> e simili, e sono assunte come metodi
   dell'<parameter>object</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>parser</parameter></term>
     <listitem>
      <para>
       Un riferimento al parser XML da utilizzare all'interno dell'oggetto.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>object</parameter></term>
     <listitem>
      <para>
       L'oggetto in cui utilizzare il parser XML.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Esempio di uso di <function>xml_set_object</function></title>
    <programlisting role="php">
<![CDATA[
<?php
class xml  {
    var $parser;

    function xml() 
    {
        $this->parser = xml_parser_create();

        xml_set_object($this->parser, $this);
        xml_set_element_handler($this->parser, "tag_open", "tag_close");
        xml_set_character_data_handler($this->parser, "cdata");
    }

    function parse($data) 
    {
        xml_parse($this->parser, $data);
    }

    function tag_open($parser, $tag, $attributes) 
    {
        var_dump($parser, $tag, $attributes); 
    }

    function cdata($parser, $cdata) 
    {
        var_dump($parser, $cdata);
    }

    function tag_close($parser, $tag) 
    {
        var_dump($parser, $tag);
    }

} // end of class xml

$xml_parser = new xml();
$xml_parser->parse("<A ID='hallo'>PHP</A>");
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
