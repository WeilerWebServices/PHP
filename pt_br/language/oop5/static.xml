<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 337875 Maintainer: ae Status: ready --><!-- CREDITS: narigone, thiago, felipe, ae, fabioluciano -->
 <sect1 xml:id="language.oop5.static" xmlns="http://docbook.org/ns/docbook">
  <title>Palavra-Chave 'static'</title>

  <tip>
   <simpara>
    Esta página descreve o uso da palavra-chave <literal>static</literal> na
    definição de métodos e propriedades estáticas. A palavra-chave <literal>static</literal> também pode
    ser utilizada para
    <link linkend="language.variables.scope.static">definir variáveis estáticas</link>
    e em
    <link linkend="language.oop5.late-static-bindings">late static bindings</link>.
    Veja essas páginas para informações desses outros usos de
    <literal>static</literal>.
   </simpara>
  </tip>

  <para>
   Declarar propriedades ou métodos de uma classe como estáticos faz deles
   acessíveis sem a necessidade de instanciar a classe. Um membro declarados como
   estático não pode ser acessado com um objeto instanciado da classe (embora
   métodos estáticos podem).
  </para>

  <para>
   Por compatibilidade com o PHP 4, se nenhuma declaração de <link
   linkend="language.oop5.visibility">visibilidade</link> for utilizada,
   a propriedade ou método será tratado
   como se declarado como <literal>public</literal>.
  </para>

  <sect2 xml:id="language.oop5.static.methods">
   <title>Métodos estáticos</title>

   <para>
    Como métodos estáticos podem ser chamados sem uma instancia
    do objeto criada, a pseudo-variável <varname>$this</varname> não
    está disponível dentro de um método declarado como estático.
   </para>

   <caution>
    <simpara>
     No PHP 5, chamar métodos não estáticos estaticamente gerará um alerta
     de nível <constant>E_STRICT</constant>.
    </simpara>
   </caution>

   <warning>
    <simpara>
     No PHP 7, chamar métodos não estáticos estaticamente foi depreciado, e gerará
     um alerta de nível <constant>E_DEPRECATED</constant>. O suporte a
     chamada de métodos não estáticos estaticamente pode ser removido no futuro.
    </simpara>
   </warning>

   <example>
    <title>Exemplo de método estático</title>
     <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
$classname = 'Foo';
$classname::aStaticMethod(); // As of PHP 5.3.0
?>
]]>
     </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.static.properties">
   <title>Propriedades estáticas</title>

   <para>
    Propriedades estáticas não podem ser acessadas através do
    operador -&gt;.
   </para>

   <para>
    Como qualquer outra variável estática do PHP, propriedades estáticas podem ser
    inicializadas, até o PHP 5.6, somente usando um valor literal ou constante; expressões não são
    permitidas. No PHP 5.6 e em versões superiores, as mesmas regras aplicadas a expressões
    &const;: algumas expressões limitadas são possíveis, se fornecidas serão
    avaliadas em tempo de compilação.
   </para>

   <para>
    A partir do 5.3.0, é possível referenciar a classe usando uma variável.
    O valor da variável não pode ser uma palavra chave (por exemplo, <literal>self</literal>,
    <literal>parent</literal> e <literal>static</literal>).
   </para>

   <example>
    <title>Exemplo de propriedade estática</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static $meu_estatico = 'foo';

    public function valorEstatico() {
        return self::$meu_estatico;
    }
}

class Bar extends Foo
{
    public function fooEstatico() {
        return parent::$meu_estatico;
    }
}


print Foo::$meu_estatico . "\n";

$foo = new Foo();
print $foo->valorEstatico() . "\n";
print $foo->$meu_estatico . "\n";      // "Propriedade" Indefinida $meu_estatico

print $foo::$meu_estatico . "\n";
$classname = 'Foo';
print $classname::$meu_estatico . "\n"; // No PHP 5.3.0

print Bar::$meu_estatico . "\n";
$bar = new Bar();
print $bar->fooEstatico() . "\n";
?>
]]>
    </programlisting>
   </example>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
