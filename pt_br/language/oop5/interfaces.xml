<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 339625 Maintainer: fabioluciano Status: ready --><!-- CREDITS: felipe, narigone, fabioluciano -->
 <sect1 xml:id="language.oop5.interfaces" xmlns="http://docbook.org/ns/docbook">
  <title>Interfaces de Objetos</title>
  <para>
   Interfaces de objetos permitem a criação de códigos que especificam quais métodos
   uma classe deve implementar, sem definir como esses
   métodos serão tratados.
  </para>
  <para>
   Interfaces são definidas da mesma forma que classes, mas com a palavra-chave <literal>interface</literal>
   substituindo <literal>class</literal> e com nenhum dos métodos tendo
   seu conteúdo definido.
  </para>
  <para>
   Todos os métodos declarados em uma interface devem ser públicos, essa é a natureza
   de uma interface.
  </para>
  <sect2 xml:id="language.oop5.interfaces.implements">
   <title><literal>implements</literal></title>
   <para>
    Para implementar uma interface, o operador <literal>implements</literal> é utilizado.
    Todos os métodos na interface devem ser implementados na classe; não fazê-lo
    resultará em um erro fatal. Classes podem implementar mais de uma interface se
    assim for desejado, separando cada interface com uma vírgula.
   </para>
   <note>
    <para>
     Em versões anteriores ao PHP 5.3.9, uma classe não poderia implementar duas interfaces que
     especificassem um método com o mesmo nome, pois causaria ambiguidade.
     Versões mais recentes do PHP, isso é permitido, desde que os métodos duplicados
     tenham a mesma assinatura.
    </para>
   </note>
   <note>
    <para>
     Interfaces podem ser estendidas como as classes, usando o operador <link linkend="language.oop5.inheritance">
     extends</link>.
    </para>
   </note>
   <note>
    <para>
     A classe que implementa a interface precisa ter as mesmas assinaturas de
     método como definidas na interface. Não fazê-lo
     resultará em um erro fatal
     </para>
    </note>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.constants">
   <title><literal>Constantes</literal></title>
   <para>
    É possível ter constantes em interfaces. Constantes de interfaces funcionam exatamente
    como <link linkend="language.oop5.constants">constantes de classes</link>, com exceção de
    não poderem ser sobrescritas por uma classe/interface herdeira.
   </para>
  </sect2>
  <sect2 xml:id="language.oop5.interfaces.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.interfaces.examples.ex1">
    <title>Exemplo de Interface</title>
     <programlisting role="php">
<![CDATA[
<?php

// Declara a interface 'iTemplate'
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implementa a interface
// Isso funcionará
class Template implements iTemplate
{
    private $vars = array();

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }

    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }

        return $template;
    }
}

// Isso NÃO funcionará
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();

    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex2">
    <title>Interfaces estendíveis</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b extends a
{
    public function baz(Baz $baz);
}

// Isto irá funcionar
class c implements b
{
    public function foo()
    {
    }

    public function baz(Baz $baz)
    {
    }
}

// Isto não irá funcionar e resultará em um erro fatal
class d implements b
{
    public function foo()
    {
    }

    public function baz(Foo $foo)
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex3">
    <title>Interface com herança múltipla</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b
{
    public function bar();
}

interface c extends a, b
{
    public function baz();
}

class d implements c
{
    public function foo()
    {
    }

    public function bar()
    {
    }

    public function baz()
    {
    }
}
?>
]]>
     </programlisting>
   </example>
   <example xml:id="language.oop5.interfaces.examples.ex4">
    <title>Interfaces com constantes</title>
     <programlisting role="php">
<![CDATA[
<?php
interface a
{
    const b = 'Interface constant';
}

// Imprime: Interface constant
echo a::b;


// Isto não funcionará porque não é permitido
// sobreescrever constantes.
class b implements a
{
    const b = 'Class constant';
}
?>
]]>
    </programlisting>
   </example>
   <para>
     Uma interface, juntamente com a declaração de tipo, fornecem uma boa maneira de garantir
     que um objeto em particular possua determinados métodos. Veja o operador
     <link linkend="language.operators.type">instanceof</link> e
     <link linkend="language.oop5.typehinting">declaração de tipo</link>.
   </para>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
