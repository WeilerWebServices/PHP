<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 339308 Maintainer: fabioluciano Status: ready --><!-- CREDITS: ae, amandavale, narigone, fabioluciano -->

 <sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
  <title>O básico</title>

  <sect2 xml:id="language.oop5.basic.class">
   <title>class</title>
   <para>
    A definição de uma classe começa com a
    palavra chave <literal>class</literal>, seguida do nome da classe,
    seguido de um par de colchetes que englobam as definições
    de propriedades e métodos pertecentes à classe.
   </para>
   <para>
    O nome de uma classe tem de ser válido, que não seja
    uma <link linkend="reserved">palavra reservada do PHP</link>. Um nome de classe válido
    começa com uma letra ou sublinhado, seguido de qualquer sequência de
    letras, números e sublinhados. Como uma expressão regular,
    pode ser expressada assim:
    <literal>^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$</literal>.
   </para>
   <para>
    Uma classe pode conter suas
    próprias <link linkend="language.oop5.constants">constantes</link>, <link linkend="language.oop5.properties">variáveis</link>
    (chamadas de "propriedades") e funções (chamadas de "métodos").
   </para>
   <example>
    <title>Definição Simples de uma Classe</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // declaração de propriedade
    public $var = 'um valor padrão';

    // declaração de método
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
    </programlisting>
   </example>
   <para>
    A pseudo-variável <varname>$this</varname> está disponível quando um
    método é chamado a partir de um contexto de
    objeto. <varname>$this</varname> é uma referência ao objeto
    chamado (normalmente o objeto ao qual o método pertence, mas
    possivelmente outro objeto, se o método é chamado
    <link linkend="language.oop5.static">estaticamente</link> a partir do contexto
    de um objeto secundário).
   </para>
   <para>
    <example xml:id="language.oop5.basic.class.this">
     <title>Alguns exemplos da pseudo variável <varname>$this</varname></title>
     <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this está definida (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this não está definida.\n";
        }
    }
}

class B
{
    function bar()
    {
        // Nota: a próxima linha pode lançar um warning E_STRICT.
        A::foo();
    }
}

$a = new A();
$a->foo();

// Nota: a próxima linha pode lançar um warning E_STRICT.
A::foo();
$b = new B();
$b->bar();

// Nota: a próxima linha pode lançar um warning E_STRICT.
B::bar();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
$this está definida (A)
$this não está definida.
$this está definida (B)
$this não está definida.
]]>
     </screen>
    </example>
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.basic.new">
   <title>new</title>
   <para>
    Para criar uma instância de uma classe, a instrução <literal>new</literal> deve
    ser utilizada. Um objeto sempre será criado a não ser que a classe tenha um
    <link linkend="language.oop5.decon">construtor</link> definido que dispare uma
    <link linkend="language.exceptions">exceção</link> em caso de erro. Classes
    devem ser definidas antes de instanciadas (e em alguns casos isso é
    obrigatório).
   </para>
   <para>
    Se uma <type>string</type> contendo o nome da classe é utilizado com
    <literal>new</literal>, uma nova instância da classe será criada. Se
    a classe estiver dentro de um namespace, o nome completo e qualificado deve ser utilizado
    para fazer isso.
   </para>
   <example>
    <title>Criando uma instância</title>
    <programlisting role="php">
<![CDATA[
<?php
$instance = new SimpleClass();

// Também pode ser feito com uma variável:
$className = 'SimpleClass';
$instance = new $className(); // new SimpleClass()
?>
]]>
    </programlisting>
   </example>
   <para>
    No contexto da classe, é possível criar um novo objeto com
    <literal>new self</literal> e <literal>new parent</literal>.
   </para>
   <para>
    Ao atribuir uma instância de uma classe já criada, a uma variável nova,
    a variável nova irá acessar a mesma instância do objeto que foi atribuído. Este
    comportamento se mantém ao se passar instâncias a uma função. Uma cópia
    de um objeto criado pode ser feita
    <link linkend="language.oop5.cloning">clonando</link> o mesmo.
   </para>
   <example>
    <title>Atribuição de Objetos</title>
    <programlisting role="php">
<![CDATA[
<?php

$instance = new SimpleClass();

$assigned   =  $instance;
$reference  =& $instance;

$instance->var = '$assigned terá esse valor';

$instance = null; // $instance e $reference tornam-se nulos

var_dump($instance);
var_dump($reference);
var_dump($assigned);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned terá esse valor"
}
]]>
    </screen>
   </example>
   <para>
    O PHP 5.3.0 introduziu algumas novas formas de criar instâncias de
    um objeto:
   </para>
   <example>
    <title>Criando novos objetos</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    static public function getNew()
    {
        return new static;
    }
}

class Child extends Test
{}

$obj1 = new Test();
$obj2 = new $obj1;
var_dump($obj1 !== $obj2);

$obj3 = Test::getNew();
var_dump($obj3 instanceof Test);

$obj4 = Child::getNew();
var_dump($obj4 instanceof Child);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.properties-methods">
   <title>Propriedades e métodos</title>
   <para>
    Propriedades e métodos de classe vivem em "namespaces" separados, de forma que é
    possível ter uma propriedade e método com mesmos nomes. A referência a
    propriedades e métodos tem a mesma notação, e a decisão de se uma propriedade será acessada
    ou uma chamada a um método feita, depende somente do contexto,
    ou seja, se está tentando acessar uma variável ou chamar um método.
   </para>
   <example>
    <title>Acesso a propriedade vs. chamar um método</title>
    <programlisting role="php">
<![CDATA[
class Foo
{
    public $bar = 'propriedade';

    public function bar() {
        return 'métod';
    }
}

$obj = new Foo();
echo $obj->bar, PHP_EOL, $obj->bar(), PHP_EOL;
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
propriedade
método
]]>
    </screen>
   </example>
   <para>
    Isto significa que chamar diretamente uma <link linkend="functions.anonymous">função
    anônima</link> atribuída a uma propriedade não é possível.
    Em vez disso, por exemplo, a propriedade deve primeiro ser atribuída a uma
    variável. A partir do PHP 7.0.0, é possível chamar uma propriedade diretamente
    a colocando entre parênteses.
   </para>
   <example>
    <title>Chamando uma função anônima armazenada em uma propriedade</title>
    <programlisting role="php">
<![CDATA[
class Foo
{
    public $bar;

    public function __construct() {
        $this->bar = function() {
            return 42;
        };
    }
}

$obj = new Foo();

// a partir do PHP 5.3.0:
$func = $obj->bar;
echo $func(), PHP_EOL;

// alternativamente, a partir do PHP 7.0.0:
echo ($obj->bar)(), PHP_EOL;
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
42
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.extends">
   <title>extends</title>
   <para>
    Uma classe pode herdar métodos e propriedades de outra classe usando a
    palavra-chave <literal>extends</literal> na declaração
    da classe. Não é possível herdar múltiplas classes; uma
    classe só pode herdar uma classe base.
   </para>
   <para>
    Os métodos e propriedades herdados podem ser sobrescritos
    redeclarando-os com o mesmo nome definido na classe
    base. Entretanto, se o método foi definido na classe base
    como <link linkend="language.oop5.final">final</link> esse método
    não poderá ser sobrescrito. É possível acessar os métodos sobrescritos
    ou propriedades estáticas referenciado-os
    com <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>.
  </para>
   <para>
    Ao sobrescrever métodos, a assinatura de parâmetros deve permanecer a mesma ou
    o PHP gerará um erro de nível <constant>E_STRICT</constant>. Isto não se
    aplica ao construtor, que permite a sobrescrita com parâmetros
    diferentes.
   </para>
   <example>
    <title>Herança da Classe Simples</title>
    <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // Redefine o método pai
    function displayVar()
    {
        echo "Classe Herdeira\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Classe Herdeira
um valor padrão
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.class.class">
   <title>::class</title>

   <para>
    Desde o PHP 5.5, a palavra-chave <literal>class</literal> também pode ser utilizada para resolução
    de nome de classes. Pode-se obter uma string contendo o nome completo e qualificado
    da classe <literal>ClassName</literal> utilizando
    <literal>ClassName::class</literal>. Isso é particularmente útil em classes com
    <link linkend="language.namespaces">namespaces</link>.
   </para>
   <para>
    <example xml:id="language.oop5.basic.class.class.name">
     <title>Resolução de nome da classe</title>
     <programlisting role="php">
<![CDATA[
<?php
namespace NS {
    class ClassName {
    }

    echo ClassName::class;
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
NS\ClassName
]]>
     </screen>
    </example>
   </para>
   <note>
    <para>A resolução de nomes de classe através de <literal>::class</literal> é uma
     transformação em tempo de compilação. Significando que a string com nome
     é criada antes que o autoloading tenha acontecido. Como consequência, os nomes de classe
     são expandidos mesmo que a classe não exista. Neste caso, nenhum erro
     será emitido.
    </para>
   </note>
  </sect2>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
