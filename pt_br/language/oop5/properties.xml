<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 339448 Maintainer: fabioluciano Status: ready --><!-- CREDITS: fabioluciano -->
 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>Propriedades</title>

  <para>
   Variáveis membros de uma classe são chamadas "propriedades". Pode-se
   também observar serem referidas utilizando outros termos como "atributos" ou
   "campos", mas para o propósito desta referência, usaremos
   "propriedades". São definidas usando uma das
   palavras-chave <literal>public</literal>, <literal>protected</literal>,
   or <literal>private</literal>, seguidas de uma declaração normal de
   variável. Esta declaração pode incluir sua inicialização, porém
   esta inicialização deve ser um valor constante--isso é, deve ser
   possível avaliá-lo em tempo de compilação e não deve-se depender de
   informações de tempo de execução.
  </para>
  <para>
   See <xref linkend="language.oop5.visibility" /> for more
   information on the meanings
   of <literal>public</literal>, <literal>protected</literal>,
   and <literal>private</literal>.
  </para>
  <note>
   <para>
    Para manter a retrocompatibilidade com o PHP 4, o PHP 5 continuará
    aceitando o uso da palavra-chave <literal>var</literal> na
    declaração de propriedades ao invés de (ou em adição
    a) <literal>public</literal>, <literal>protected</literal>,
    ou <literal>private</literal>. Entretanto, <literal>var</literal> não
    é mais obrigatório. Em versões entre o PHP 5.0 e 5.1.3, o uso
    de <literal>var</literal> era considerado obsoleto e
    emitiria um aviso <constant>E_STRICT</constant>, mas desde o PHP
    5.1.3, seu uso não é mais obsoleto e não será emitido um aviso.
   </para>
   <para>
    Caso declare uma propriedade usando <literal>var</literal> ao invés de
    <literal>public</literal>, <literal>protected</literal>,
    ou <literal>private</literal>, o PHP 5 tratará a propriedade
    como se tivesse declarada como <literal>public</literal>.
   </para>
  </note>
  <para>
   Métodos dentro de classes podem acessar propriedades não estáticas usando
   <literal>-&gt;</literal> (Operador de Objeto): <varname>$this-&gt;property</varname>
   (onde <literal>property</literal> é o nome da propriedade).
   Propriedades estáticas são acessadas utilizando os <literal>::</literal> (Dois pontos dublo):
   <varname>self::$property</varname>. Veja <link linkend="language.oop5.static">Palavra-chave Static</link>
   para mais informações sobre a diferente entre propriedades estáticas e não estáticas.
  </para>
  <para>
   A pseudo-variável <varname>$this</varname> está disponível dentro
   de métodos de qualquer classe quando o método é chamado dentro do
   contexto do objeto. <varname>$this</varname> faz referência ao objeto
   chamado (geralmente o objeto o qual o método pertence, mas
   possível outro objeto, se o método é chamado
   <link linkend="language.oop5.static">estaticamente</link> do contexto
   de um segundo objeto).
  </para>

  <para>
   <example>
    <title>declaração de propriedades</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // valid as of PHP 5.6.0:
   public $var1 = 'hello ' . 'world';
   // valid as of PHP 5.3.0:
   public $var2 = <<<EOD
hello world
EOD;
   // valid as of PHP 5.6.0:
   public $var3 = 1+2;
   // invalid property declarations:
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // valid property declarations:
   public $var6 = myConstant;
   public $var7 = array(true, false);

   // valid as of PHP 5.3.0:
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <note>
   <para>
    Existem algumas funções interessantes para manipulação de classes e objetos. Se
    desejar dê uma olhada nas
    <link linkend="ref.classobj">funções de Classes/Objetos</link>.
   </para>
  </note>

  <para>
   Diferentemente,
   <link linkend="language.types.string.syntax.heredoc">heredocs</link>,
   <link linkend="language.types.string.syntax.nowdoc">nowdocs</link>
   podem ser utilizados em qualquer contexto de dados estáticos, incluindo assim, declaração
   de propriedades.
   <example>
    <title>Exemplo de uso do nowdoc para inicializar uma propriedade</title>
    <programlisting role="php">
<![CDATA[
<?php
class foo {
   // As of PHP 5.3.0
   public $bar = <<<'EOT'
bar
EOT;
   public $baz = <<<EOT
baz
EOT;
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    O suporte ao nowdoc foi adicionado no PHP 5.3.0.
   </para>
  </note>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
