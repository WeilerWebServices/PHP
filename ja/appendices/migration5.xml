<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351137 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi,mumumu -->
 <appendix xml:id="migration5" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>PHP 4 から PHP 5.0.x への移行</title>
  <para>
   &manual.migration.seealso;
   <link linkend="migration51">5.1.x</link>、
   <link linkend="migration52">5.2.x</link>、
   <link linkend="migration53">5.3.x</link>、
   <link linkend="migration54">5.4.x</link>、
   <link linkend="migration55">5.5.x</link> および
   <link linkend="migration56">5.6.x</link>。
  </para>

  <section xml:id="migration5.changes">
   <title>PHP 5.0.x における変更点</title>
   <para>
    PHP 5 および PHP 5 に組み込まれた Zend Engine 2 は、
    PHP の性能と機能を著しく向上させました。
    同時に既存のコードへの影響を最小限とするよう配慮されているため、
    PHP 4 から 5 への移行は非常に簡単なはずです。
    多くの既存の PHP 4 用のコードは、変更せずに動作するはずです。
    しかし、<link linkend="migration5.incompatible">若干の差異</link>に
    ついても知っておく必要があります。
    また、実運用環境のバージョンを変更する前にあなたのコードを十分にテストする
    必要があります。
   </para>
  </section>

  <section xml:id="migration5.incompatible">
   <title>下位互換性のない変更点</title>
   <para>
    多くの既存の PHP 4 のコードは変更無しで動作するはずですが、
    以下の下位互換性がない変更点について注意する必要があります。
   </para>
   <itemizedlist>
    <listitem>
     <simpara>
      <link linkend="reserved.keywords">新たな予約キーワード</link>がいくつか
      あります。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>strrpos</function> と <function>strripos</function> は、
      needle として文字列全体を使用するようになりました。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      文字列オフセットの不正な使用は、<constant>E_WARNING</constant> ではなく
      <constant>E_ERROR</constant> を発生します。不正な使用の例は、次のようなものです。
      <literal>$str = 'abc'; unset($str[0]);</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_merge</function> は、配列のみを指定できるよう
      変更されました。配列以外の変数を指定した場合は、各パラメータ毎に
      <constant>E_WARNING</constant> が発生します。あなたのコードで
      突然 <constant>E_WARNING</constant> が発生し始める可能性が
      あるため注意してください。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      サーバー変数 <constant>PATH_TRANSLATED</constant> は、Apache2 SAPI では暗黙のうちに設定されません。
      この動作は、Apache により設定されていない場合に <constant>SCRIPT_FILENAME</constant> と同じ値に
      設定する PHP 4 と異なります。
      この変更は、<link xlink:href="&url.rfc;3875">CGI/1.1 の規約</link>に従うためのものです。
      詳細については、
      <link xlink:href="&url.php.bugs;23610">bug #23610</link> を参照してください。
      また、マニュアルの
      <varname>$_SERVER['PATH_TRANSLATED']</varname> についての記述も参照してください。
      この問題は、PHP のバージョン &gt;= 4.3.2 でも影響を及ぼします。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      定数 <constant>T_ML_CONSTANT</constant> は、
      <link linkend="ref.tokenizer">Tokenizer</link>エクステンションで
      定義されなくなりました。error_reporting に<constant>E_ALL</constant>
      を指定した場合、PHPは通知(notice)を生成します。
      <constant>T_ML_CONSTANT</constant>は、全く使用されていませんが、
      PHP 4 では定義されていました。PHP 4とPHP 5の両方において、
      // と /* */ は、共に <constant>T_COMMENT</constant> 定数と
      解釈されます。
      しかし、PHP5からPHPにより解釈されるようになった
      PHPDoc形式のコメント <literal>/** */</literal>  は、<constant>T_DOC_COMMENT</constant>
      と認識されます。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="ini.variables-order">variables_order</link> に
      "S"が含まれる場合に、<varname>$_SERVER</varname> が
      <varname>argc</varname> および <varname>argv</varname> と共に設定されます。
      $_SERVERを作成しないような特別な設定を行った場合、
      当然、<varname>argc</varname> および <varname>argv</varname> は
      設定されません。
      この変更は、CLI 版において
      <link linkend="ini.variables-order">variables_order</link> の
      設定によらず常に <varname>argc</varname> および
      <varname>argv</varname> を作成するために行われました。
      これにより、CLI 版では、常にグローバル変数 <varname>$argc</varname> および
      <varname>$argv</varname> が設定されるようになりました。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      プロパティを持たないオブジェクトはもはや"空"とはみなされません。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      クラスを使用する前に宣言する必要がある場合もあります。
      これは、PHP 5 の新機能 (たとえば <link
      linkend="language.oop5.interfaces">interfaces</link> など) 
      を使用する場合にのみ生じます。
      その他の場合の動作は従来と同じです。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>get_class</function>, <function>get_parent_class</function>
      および <function>get_class_methods</function> は、
      ケース依存（大文字小文字を区別）で
      宣言時に使用されたクラス/メソッドの名前を返すようになっています
      これにより、以前の動作（クラス名は小文字で返される）に依存している古いスクリプト
      では問題を発生する可能性があります。
      解決策としては、全てのスクリプトでこれらの関数を検索し、
      <function>strtolower</function>を使用するというものが考えられます。
     </simpara>
     <simpara>
      このケース依存性に関する変更は、
      <link linkend="language.constants.predefined">
       自動的に定義される定数</link> <constant>__CLASS__</constant>, 
      <constant>__METHOD__</constant>, および
      <constant>__FUNCTION__</constant>にも適用されます。
      これらの値は、宣言時と同様に（ケース依存で）返されます。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ip2long</function> は、
      無効なIPアドレスが関数の引数として渡された場合、
      <literal>-1</literal>ではなく、&false; を返すようになりました。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      読み込まれるファイルの中で関数が宣言されている場合、それが
      <function>return</function> の前もしくは後のどちらにあるかにかかわらず、
      メインファイルの中でその関数を使用可能です。
      このファイルが二度読み込まれると、関数が既に宣言済みであるため、
      PHP 5 は致命的なエラーを発生します。一方、PHP 4 ではエラーを発生しません。
      ファイルが読み込み済であるかどうかを調べて
      読みこまれたファ入ルの内容を条件分岐でかえすのではなく、
      <function>include_once</function> を使用することを推奨します。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Windows上で、
      <function>include_once</function> と <function>require_once</function>
      は、まず、読みこまれるファイルのパスを正規化します。
      これにより、A.php と a.php を読みこむ場合でもファイルは一度だけ読みこまれます。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      関数に配列を値渡ししたときに、
      関数の中で配列の内部ポインタが移動してもそれをリセットしなくなりました。
      PHP 4 では、関数に配列を渡したときに、関数内での配列の内部ポインタがリセットされていました。
      一方 PHP 5 では、配列を関数に渡すと、
      関数内での配列の内部ポインタの位置は配列が関数に渡されたときのままとなります。
     </simpara>
    </listitem>
   </itemizedlist>

   <para>
    <example>
     <title><function>strrpos</function> と <function>strripos</function> は、
      needleとして文字列全体を使用する</title>
     <programlisting role="php">
<![CDATA[
<?php
var_dump(strrpos('ABCDEF','DEF')); //int(3)

var_dump(strrpos('ABCDEF','DAF')); //bool(false)
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>プロパティを持たないオブジェクトはもはや"空"とはみなされない</title>
     <programlisting role="php">
<![CDATA[
<?php
class test { }
$t = new test();

var_dump(empty($t)); // echo bool(false)

if ($t) {
    // 実行される
}
?>

]]>
     </programlisting>
    </example>
   </para>
   <para>
    以下の例はPHP 4では有効でしたが、PHP 5では致命的なエラーを
    発生します。
   </para>
   <para>
    <example>
     <title>クラスは使用前に宣言する必要がある</title>
     <programlisting role="php">
<![CDATA[
<?php
$test = new fubar();
$test->barfu();

class fubar {
    function barfu() {
        echo 'fubar';
    }
}
?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section xml:id="migration5.cli-cgi">
   <title>CLI と CGI</title>
   <para>
    PHP 5 では、CLI および CGI のファイル名にいくつかの変更があります。
    PHP 5 では、CGI版は <literal>php-cgi.exe</literal> に変更されました。
    (以前は <literal>php.exe</literal>) CLI版はメインディレクトリに
    置かれるようになりました。(以前は、<literal>cli/php.exe</literal>))
   </para>
   <para>
    PHP 5では、新しいモード <literal>php-win.exe</literal> が追加されました。
    これは、CLI版と同じですが、php-win は出力を行わず、コンソールを提供しない
    ところが異なります。("DOS窓"は現れません。)
    この動作は、php-gtk に似ています。
   </para>
   <para>
    PHP 5では、CLI版は常にグローバル変数$argv と $argcを設定します。
   </para>
  </section>

  <section xml:id="migration5.configuration">
   <title>設定ファイルの移行</title>
   <para>
    SAPIモジュールの名前がphp4xxxからphp5xxxに変更されたため、
    設定ファイルを変更する必要があります。
    また、CLIおよびCGIのファイル名も変更されています。詳細については、
    <link linkend="migration5.cli-cgi">対応するセクション</link>を
    参照してください。
   </para>
   <para>
    Apache の設定の移行は非常に簡単です。必要な変更については、
    以下の例を参照してください。
    <informalexample>
     <programlisting role="apache-conf">
<![CDATA[
# change this line:    
LoadModule php4_module /php/sapi/php4apache2.dll

# with this one:
LoadModule php5_module /php/php5apache2.dll
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    サーバー上でCGIモードでPHPを実行している場合、
    CGI版の名前がphp.exeからphp-cgi.exeに変更されたことに注意する必要があります。
    Apacheでは、以下のようにする必要があります。
    <informalexample>
     <programlisting role="apache-conf">
<![CDATA[
# change this line:    
Action application/x-httpd-php "/php/php.exe" 

# with this one:
Action application/x-httpd-php "/php/php-cgi.exe" 
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    他のWebサーバーの場合、CGIまたはSAPIモジュールのファイル名を変更する
    必要があります。
   </para>
  </section>

  <section xml:id="migration5.functions">
   <title>新しい関数</title>
   <para>
    PHP 5 では、新しい関数がいくつかあります。
    以下にそれらのリストを示します。
   </para>
   <para><link linkend="ref.array">配列</link>:</para>
   <itemizedlist>
    <listitem><simpara>
      <function>array_combine</function> - 
      配列１つをキー、他の配列をその値として指定し、配列を作成する
     </simpara></listitem>
    <listitem><simpara>
      <function>array_diff_uassoc</function> - 
      ユーザーが定義したコールバック関数により添字のチェックを行ない、
      配列の差異を計算する。
    </simpara></listitem>
    <listitem><simpara>
      <function>array_udiff</function> - 
      データ比較用のコールバック関数を用いて配列の比較を行う
    </simpara></listitem>
    <listitem><simpara>
      <function>array_udiff_assoc</function> - 
      添字の確認を行いつつ配列の比較を行う。データは、コールバック関数により
      比較される。
    </simpara></listitem>
    <listitem><simpara>
      <function>array_udiff_uassoc</function> - 
      添字の確認を行いつつ配列の比較を行う。データは、コールバック関数により
      比較される。添字確認もコールバック関数により行われる。
    </simpara></listitem>
    <listitem><simpara>
      <function>array_walk_recursive</function> - 
      配列の各メンバにユーザー関数を再帰的に適用する。
    </simpara></listitem>
    <listitem>
     <simpara>
      <function>array_uintersect_assoc</function> -
      添字の確認も含め、配列の共通項を計算する。
      データの比較にはコールバック関数を使用する。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_uintersect_uassoc</function> -
      添字の確認も含め、配列の共通項を計算する。
      データおよび添字の比較には、それぞれ個別のコールバック関数を使用する。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>array_uintersect</function> -
      添字の確認も含め、配列の共通項を計算する。
      データの比較にはコールバック関数を使用する。
     </simpara>
    </listitem>
   </itemizedlist>

   <para><link linkend="ref.ibase">InterBase</link>:</para>
   <itemizedlist>
    <listitem><simpara>
      <function>ibase_affected_rows</function> - 
      直近のクエリにより作用された行の数を返す
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_backup</function> - 
      サービスマネージャのバックアップタスクを起動し、
      ただちに戻る
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_commit_ret</function> - 
      トランザクションを閉じることなくコミットする
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_db_info</function> - 
      データベースに関する統計情報を得る
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_drop_db</function> - 
      データベースを破棄する
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_errcode</function> - エラーコードを返す
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_free_event_handler</function> - 
      登録されているイベントハンドラをキャンセルする
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_gen_id</function> - 
      ジェネレータIDをインクリメントし、新しい値を返す
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_maintain_db</function> - 
      データベースサーバー上で管理用コマンドを実行する
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_name_result</function> - 
      結果セットに名前を付ける
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_num_params</function> - 
      プリペアドクエリのパラメータの数を返す
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_param_info</function> - 
      プリペアドクエリのパラメータに関する情報を返す
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_restore</function> - 
      サービスマネージャのリストアタスクを起動し、
      ただちに戻る
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_rollback_ret</function> - 
      トランザクションをロールバックし、
      トランザクションコンテキストに留まる
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_server_info</function> - 
      データベースサーバーについての統計情報を得る
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_service_attach</function> - サービスマネージャに
      接続する
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_service_detach</function> - サービスマネージャとの接続を切る
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_set_event_handler</function> - 
      イベントがポストされた時にコールされる
      コールバック関数を登録する
    </simpara></listitem>
    <listitem><simpara>
      <function>ibase_wait_event</function> - 
      データベースによりポストされるイベントを待つ
    </simpara></listitem>
   </itemizedlist>

   <para><link linkend="ref.iconv">iconv</link>:</para>
   <itemizedlist>
    <listitem><simpara>
      <function>iconv_mime_decode</function> - MIMEヘッダフィールドをデコードする
    </simpara></listitem>
    <listitem><simpara>
      <function>iconv_mime_decode_headers</function> - 複数のMIMEヘッダフィールドを一度にデコードする
    </simpara></listitem>
    <listitem><simpara>
      <function>iconv_mime_encode</function> - MIMEヘッダフィールドを構築する
    </simpara></listitem>
    <listitem><simpara>
      <function>iconv_strlen</function> - 文字列の文字数を返す
    </simpara></listitem>
    <listitem><simpara>
      <function>iconv_strpos</function> - 
      対象文字列の中で指定した文字列が最初に表れる場所をみつける
    </simpara></listitem>
    <listitem><simpara>
      <function>iconv_strrpos</function> - 
      対象文字列の中で指定した文字列が最後に表れる場所をみつける
    </simpara></listitem>
    <listitem><simpara>
      <function>iconv_substr</function> - 
      文字列の一部を切り出す
    </simpara></listitem>
   </itemizedlist>

   <para><link linkend="ref.stream">ストリーム</link>:</para>
   <itemizedlist>
    <listitem><simpara>
      <function>stream_copy_to_stream</function> - 一つのストリームから
      別のストリームにデータをコピーする
    </simpara></listitem>
    <listitem><simpara>
      <function>stream_get_line</function> - 
      ストリームリソースから指定したデリミタまで行を取得する
    </simpara></listitem>
    <listitem><simpara>
      <function>stream_socket_accept</function> - 
      <function>stream_socket_server</function>により作成されたソケット上の
      接続を受け入れる
    </simpara></listitem>
    <listitem><simpara>
      <function>stream_socket_client</function> - インターネットまたは
      Unixドメインソケット接続を受け入れる
    </simpara></listitem>
    <listitem><simpara>
      <function>stream_socket_get_name</function> - 
      ローカルまたはリモートソケットの名前を取得する
    </simpara></listitem>
    <listitem><simpara>
      <function>stream_socket_recvfrom</function> - 
      接続の有無によらずソケットからデータを受信する
    </simpara></listitem>
    <listitem><simpara>
      <function>stream_socket_sendto</function> - 
      接続の有無によらずソケットにメッセージを送信する
    </simpara></listitem>
    <listitem><simpara>
      <function>stream_socket_server</function> - 
      インターネットまたはUnixドメインソケットを作成する
    </simpara></listitem>
   </itemizedlist>

   <para><link linkend="ref.datetime">日付・時刻関連</link>:</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>idate</function> - ローカルの時刻/日付を整数値としてフォーマットする
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>date_sunset</function> - 指定した日付および場所での日没時刻
    </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>date_sunrise</function> - 指定した日付および場所での日の出時刻
    </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>time_nanosleep</function> - 指定した秒/ナノ秒の待機
    </simpara>
    </listitem>
   </itemizedlist>

   <para><link linkend="ref.strings">文字列</link>:</para>
   <itemizedlist>
    <listitem>
     <simpara>
      <function>str_split</function> - 文字列を配列に変換する
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>strpbrk</function> - 文字列の中で一連の文字のどれかを探す
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>substr_compare</function> -
      オフセット、最大文字長を指定して二つの文字列を比較を行う。
      バイナリ対応で、オプションで大文字/小文字を無視できる。
     </simpara>
    </listitem>
   </itemizedlist>

   <para>その他:</para>
   <itemizedlist>
    <listitem><simpara>
      <function>convert_uudecode</function> - UUエンコードされた文字列を
      デコードする
    </simpara></listitem>
    <listitem><simpara>
      <function>convert_uuencode</function> - 文字列をUUエンコードする
    </simpara></listitem>
    <listitem>
     <simpara>
      <function>curl_copy_handle</function> - cURL ハンドルを、
      その設定も含めてコピーする
     </simpara>
    </listitem>
    <listitem><simpara>
      <function>dba_key_split</function> - 
      文字列表現されたキーを配列表現に分割する
    </simpara></listitem>
    <listitem><simpara>
      <function>dbase_get_header_info</function> - 
      dBaseデータベースのヘッダ情報を取得する
    </simpara></listitem>
    <listitem><simpara>
      <function>dbx_fetch_row</function> - 
      <constant>DBX_RESULT_UNBUFFERED</constant>
      フラグがセットされたクエリ結果からレコードを取得する
    </simpara></listitem>
    <listitem>
     <simpara>
      <function>fbsql_set_password</function> -
      指定したユーザーのパスワードを変更する
     </simpara>
    </listitem>
    <listitem><simpara>
      <function>file_put_contents</function> - 
      文字列をファイルに書き込む
    </simpara></listitem>
    <listitem><simpara>
      <function>ftp_alloc</function> - 
      アップロードされるファイル用の領域を確保する
    </simpara></listitem>
    <listitem><simpara>
      <function>get_declared_interfaces</function> - 
      宣言済みの全インターフェイスを配列として返す
    </simpara></listitem>
    <listitem><simpara>
      <function>get_headers</function> - 
      HTTPリクエストへのレスポンスとしてサーバーに送信されたヘッダを
      全て取得する
    </simpara></listitem>
    <listitem><simpara>
      <function>headers_list</function> - 
      送信された(または送信準備ができた)レスポンスヘッダのリストを返す
    </simpara></listitem>
    <listitem><simpara>
      <function>http_build_query</function> - URLエンコードされた
      クエリ文字列を生成する
    </simpara></listitem>
    <listitem><simpara>
      <function>image_type_to_extension</function> - 
      <function>getimagesize</function>,
      <function>exif_read_data</function>,
      <function>exif_thumbnail</function>,
      <function>exif_imagetype</function>により返されるイメージ型の
      ファイル拡張子を得る
    </simpara></listitem>
    <listitem><simpara>
      <function>imagefilter</function> - 
      カスタム引数を用いてイメージにフィルタを適用する
    </simpara></listitem>
    <listitem><simpara>
      <function>imap_getacl</function> - 
      指定したメールボックスのACLを取得する
    </simpara></listitem>
    <listitem><simpara>
      <function>ldap_sasl_bind</function> - SASLによりLDAPディレクトリにバインドする
    </simpara></listitem>
    <listitem><simpara>
      <function>pcntl_getpriority</function> - プロセスの優先度を取得する
    </simpara></listitem>
    <listitem>
     <simpara>
      <function>mb_list_encodings</function> -
      サポートされる全てのエンコーディングの配列を返す
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>pcntl_getpriority</function> -
      任意のプロセスの優先度を取得する
     </simpara>
    </listitem>
    <listitem><simpara>
      <function>pcntl_wait</function> -
      <literal>waitpid()</literal> システムコールにより定義され、フォークされた子プロセスを
      待つか、またはステータスを返す
    </simpara></listitem>
    <listitem><simpara>
      <function>pg_version</function> -
      クライアント、プロトコル、サーバーのバージョン(取得可能な場合)を配列として返す
    </simpara></listitem>
    <listitem><simpara>
      <function>php_check_syntax</function> - 指定したファイルの構文を確認する
    </simpara></listitem>
    <listitem><simpara>
      <function>php_strip_whitespace</function> - コメントと
      空白を除いたソースを返す
    </simpara></listitem>
    <listitem><simpara>
      <function>proc_nice</function> - 
      カレントプロセスの優先度を変更する
    </simpara></listitem>
    <listitem><simpara>
      <function>pspell_config_data_dir</function> - 言語データファイルの
      位置を変更する
    </simpara></listitem>
    <listitem><simpara>
      <function>pspell_config_dict_dir</function> - 主単語リストの位置を
      変更する
    </simpara></listitem>
    <listitem><simpara>
      <function>setrawcookie</function> - 値を URL エンコードせずにクッキーを送信する
    </simpara></listitem>
    <listitem>
     <simpara>
      <function>scandir</function> - 指定したパス内のファイルとディレクトリを一覧表示する
     </simpara>
    </listitem>
    <listitem><simpara>
      <function>snmp_read_mib</function> - 
      MIB ファイルを読み込み、アクティブなMIBツリーとしてパースする
    </simpara></listitem>
    <listitem><simpara>
      <function>sqlite_fetch_column_types</function> - 
      指定したテーブルのカラム型を配列として返す
    </simpara></listitem>
   </itemizedlist>
   <note>
    <para>
     <link linkend="ref.tidy">Tidy</link> 拡張モジュールの API も、
     完全に変わりました。
    </para>
   </note>
  </section>


  <section xml:id="migration5.newconf">
   <title>新しいディレクティブ</title>
   <para>
    &php.ini; にも変更が行われており、PHP 5でディレクティブが
    追加されています。以下のそのリストを示します。
   </para>
   <itemizedlist>
    <listitem><simpara>
     <link linkend="ini.mail.force_extra_parameters">mail.force_extra_parameters</link> -
      指定されたパラメータをextraパラメータとしてsendmailバイナリに強制的に追加
      します。これらのパラメータは、セーフモードの場合でも 
      <function>mail</function> の5番目のパラメータの値を置換します。
   </simpara></listitem>
    <listitem><simpara>
     <link linkend="ini.register-long-arrays">register_long_arrays</link> -
      は、古い <varname>$HTTP_*_VARS</varname> をPHPが登録するかどうかを設定します。
   </simpara></listitem>
    <listitem><simpara>
      <link linkend="ini.session.hash-function">session.hash_function</link> -
      は、ハッシュ関数を選択します。(MD5またはSHA-1)
   </simpara></listitem>
    <listitem><simpara>
      <link
       linkend="ini.session.hash-bits-per-character">session.hash_bits_per_character</link>
      - は、バイナリハッシュデータを可読な形式に変換する際に各文字に保存するビット数
      (4 から 6 まで)を指定します。
   </simpara></listitem>
    <listitem><simpara>
     zend.ze1_compatibility_mode - Zend Engine 1 (PHP 4)互換モードを有効にします。
   </simpara></listitem>
   </itemizedlist>
  </section>

  <section xml:id="migration5.databases">
   <title>データベース</title>
   <para>
    PHP 5では、データベースに関していくつかの変更があります。(MySQL および SQLite).
   </para>
   <para>
    PHP 5では、ライセンス上の問題やメンテナンスの問題により、MySQLクライアントライブラリはバンドルされていません。
    MySQL をサポートしていること自体は変わりませんが、PHP 5 以降では MySQL サポートが
    <emphasis>デフォルトでは</emphasis> 有効ではなくなりました。
    これはつまり、PHP の <link linkend="configuration">configure</link>
    の際に <option role="configure">--with-mysql</option>
    オプションを含めなくなったということです。有効にするには、PHP をコンパイルする際に
    <option role="configure">--with-mysql</option> オプションを明示的に指定する必要があります。
    Windows ユーザーは、&php.ini; を編集して <filename>php_mysql.dll</filename>
    を有効にしなければいけません。この DLL は PHP 4 には存在しませんでした。
    Windows 版の PHP バイナリに組み込まれていたのです。
   </para>
   <para>
    新しい拡張モジュールとして、MySQL 4.1以降で動作するよう設計された
    <link linkend="ref.mysqli">MySQLi (Improved
     MySQL)</link> もあります。
   </para>
   <para>
    PHP 5 以降、SQLite 拡張モジュールが
    PHPに組み込まれています。
    SQLiteは、組み込み可能なSQLデータベースエンジンで、
    (MySQLまたはPostgreSQLのような)
    大きなデータベースサーバーへの接続に使用されるクライアントライブラリでは
    ありません。SQLiteは組み込み可能なSQLデータベースエンジンで、
    クライアントライブラリではなく、ディスク上のデータベースファイルから
    直接読み書きします。
   </para>
  </section>

  <section xml:id="migration5.oop">
   <title>新しいオブジェクトモデル</title>
   <para>
    PHP 5 では、新しいオブジェクトモデルが採用されています。
    PHP におけるオブジェクトの処理は完全に書き直され、性能と機能が向上しています。
    以前のバージョンでは、(integer や string といった)
    通常の型と同じようにオブジェクトを扱っていました。
    この方式の欠点は、変数にオブジェクトを代入したり
    メソッドのパラメータとしてオブジェクトを渡した場合に
    オブジェクト全体がコピーされてしまうということでした。
    新しい方式では、オブジェクトを指すハンドルを用いてオブジェクトを管理します。
    値そのものを管理するのではなくなります (ハンドルというのは、
    要はそのオブジェクトの ID のことです)。
   </para>
   <para>
    Many PHP programmers aren't even aware of the copying quirks of the old
    object model and, therefore, the majority of PHP applications will work
    out of the box, or with very few modifications.
   </para>
   <para>
    新しいオブジェクトモデルについては <link
     linkend="language.oop5">言語リファレンス</link> を参照ください。
   </para>
   <para>
    PHP 5 では、クラス名と同じ名前の関数がそのクラス内で定義されている場合にのみ
    それがコンストラクタとしてコールされます。
    PHP 4 では、同じクラスだけでなく親クラスで定義されている場合にもコールされていました。
   </para>
   <para>
    PHP 4 との互換性については、
    <link linkend="ini.zend.ze1-compatibility-mode">
    zend.ze1_compatibility_mode</link> ディレクティブも参照ください。
   </para>
  </section>

  <section xml:id="migrating5.errorrep">
   <title>エラー報告</title>
   <para>
    PHP 5 以降、エラー報告定数 <constant>E_STRICT</constant> が追加されました。値は <literal>2048</literal> です。
    有効にすると、非推奨であったり将来の互換性が保証されていなかったりするコードを書いたときにメッセージが表示されます。
   </para>
   <note>
    <simpara>
     <constant>E_ALL</constant> には <constant>E_STRICT</constant> は含まれないので、デフォルトでは有効にはなりません。
     これらのメッセージを表示させるには、エラー報告レベルに
     <constant>E_STRICT</constant> を含めるよう設定しなければなりません。
    </simpara>
   </note>
  </section>

 </appendix>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
