<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 340765 Maintainer: takagi Status: ready -->
<appendix xml:id="userlandnaming" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>ユーザーレベルでの命名の手引き</title>
 <para>
  これは、あなたが書く PHP コード中の識別子によりよい名前をつけるための手引きです。
  グローバル名前空間のシンボルを作成するコードでシンボルの名前を決める際には、
  以下のガイドラインを考慮することが重要です。これにより、
  PHP の将来のバージョンとの衝突を避けることができます。
 </para>

 <section xml:id="userlandnaming.globalnamespace">
  <title>グローバル名前空間</title>
  <para>
   グローバル名前空間に属する言語構造には、このようなものがあります。
  </para>

  <itemizedlist>
   <listitem><para>関数</para></listitem>
   <listitem><para>クラス</para></listitem>
   <listitem><para>インターフェイス</para></listitem>
   <listitem><para>定数 (クラス定数以外)</para></listitem>
   <listitem>
    <para>関数/メソッド の外部で定義された変数</para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.rules">
  <title>ルール</title>
  <para>
   以下のリストは、PHP プロジェクトで新たな内部識別子を作成する際に
   どのような基準で名前を決めているのかを
   おおまかにまとめたものです。完全な規約は、公式の
   <link xlink:href="&url.userlandnaming.cs;">コーディング規約</link>
   を参照ください。
  </para>

  <itemizedlist>
   <listitem>
    <para>
     PHP はトップレベルの名前空間を所有していますが、
     きちんとしたわかりやすい名前をつけるようにこころがけ、
     衝突が起こらないようにしています。
    </para>
   </listitem>
   <listitem>
    <para>
     関数名では、単語の間にアンダースコアを使用します。クラスの場合は、
     キャメルケース (<literal>camelCase</literal>) 形式や
     パスカルケース (<literal>PascalCase</literal>) 形式を使います。
    </para>
   </listitem>
   <listitem>
    <para>
     PHP の拡張モジュールのグローバルシンボルには、
     その拡張モジュールの名前を先頭につけます
     (過去には、この原則を守っていない例が大量にありました)。
     たとえば次のようになります。
    </para>

    <itemizedlist>
     <listitem><para><function>curl_close</function></para></listitem>
     <listitem><para><function>mysql_query</function></para></listitem>
     <listitem><para>PREG_SPLIT_DELIM_CAPTURE</para></listitem>
     <listitem><para>new DOMDocument()</para></listitem>
     <listitem>
      <para>
       <function>strpos</function> (過去に間違えた例)
      </para>
     </listitem>
     <listitem><para>new SplFileObject()</para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     しかし、イテレータや例外については、単純に最後に
     "<literal>Iterator</literal>" および "<literal>Exception</literal>"
     を追加するようにします。例えば次のようになります。
    </para>
    <itemizedlist>
     <listitem><para><classname>ArrayIterator</classname></para></listitem>
     <listitem><para><classname>LogicException</classname></para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     PHP では、<literal>__</literal> で始まるシンボルを特殊なものとして予約済みです。
     以下にあげるような文書化されている機能を使用する場合を除き、
     <literal>__</literal> で始まるシンボルを作成しないことを推奨します。
    </para>
    <itemizedlist>
     <listitem><para><link linkend="object.get">__get()</link></para></listitem>
     <listitem><para><function>__autoload</function></para></listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.tips">
  <title>Tips</title>
  <para>
   将来もそのまま使用できるようなコードを書くためには、
   グローバル名前空間にあまり多くの変数や関数やクラスを置かないことをおすすめします。
   そうしておけば、サードパーティのコードと名前が衝突したり
   PHP 自体に追加された機能と名前が衝突したりする可能性を減らせます。
  </para>
  <para>
   関数やクラスの名前が衝突することを防ぐ手としてよくあるのが、
   それ専用の
   <link linkend="language.namespaces">namespace</link>
   を用意することです。
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

namespace MyProject;

function my_function() {
    return true;
}

\MyProject\my_function();
]]>
   </programlisting>
  </informalexample>
  <para>
   既存の名前空間と名前が重複してしまわないように気をつける必要はありますが、
   いったん名前空間を用意してしまえば、そこに関数やクラスを追加するときには
   名前が衝突する心配をせずに済むようになります。
  </para>
  <para>
   サードパーティのコードとの名前の衝突を防ぐという意味で、
   グローバル名前空間への変数の追加をできるだけ避けるというのはよい習慣だと考えられています。
  </para>
  <note>
   <title>変数のスコープ</title>
   <para>
    PHP の <link linkend="language.variables.scope">変数のスコープのルール</link>
    では、関数やメソッドの内部で定義した変数はグローバルスコープにはなりません。
    そのため、グローバルスコープで定義された変数との名前の衝突を気にする必要はありません。
   </para>
  </note>
 </section>

</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
