<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337270 Maintainer: takagi Status: ready -->

<sect1 xml:id="migration56.incompatible">
 <title>下位互換性のない変更点</title>
 <simpara>
  既存の PHP 5 のコードのほとんどは変更なしで動作するはずですが、
  以下の下位互換性のない変更点については注意しましょう。
 </simpara>

 <sect2 xml:id="migration56.incompatible.array-keys">
  <title>配列リテラルを用いてクラスのプロパティに配列を設定した場合、配列のキーが上書きされない</title>

  <para>
   以前のバージョンでは、クラスのプロパティとして宣言されている配列で明示的なキーと暗黙のキーが混在している場合に、
   明示的に指定したキーと暗黙の数値キーが重複すると、黙って上書きされていました。以下に、例を示します。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class C {
    const ONE = 1;
    public $array = [
        self::ONE => 'foo',
        'bar',
        'quux',
    ];
}

var_dump((new C)->array);
?>
]]>
   </programlisting>
   &example.outputs.55;
   <screen>
<![CDATA[
array(2) {
  [0]=>
  string(3) "bar"
  [1]=>
  string(4) "quux"
}

]]>
   </screen>
   &example.outputs.56;
   <screen>
<![CDATA[
array(3) {
  [1]=>
  string(3) "foo"
  [2]=>
  string(3) "bar"
  [3]=>
  string(4) "quux"
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.incompatible.json-decode">
  <title><function>json_decode</function> が、より厳格に</title>

  <para>
   <function>json_decode</function> は、JSON リテラル
   <literal>true</literal>、<literal>false</literal> および
   <literal>null</literal> について、すべて小文字のものしか受け付けなくなりました。
   これは、JSON の仕様に基づくものです。小文字以外の場合は、<function>json_last_error</function> にエラーが設定されます。
   以前のバージョンの <function>json_decode</function> は、大文字が混ざっているものでも受け付けていました。
  </para>

  <para>
   この変更の影響を受けるのは、無効な形式の JSON を
   <function>json_decode</function> に渡していた場合だけです。
   妥当な形式の JSON は、この変更の影響を受けず、通常通りに処理されます。
  </para>
 </sect2>

 <sect2 xml:id="migration56.incompatible.peer-verification">
  <title>ストリームラッパーが、SSL/TLS を使っている場合のピア証明書とホスト名の検証にデフォルトで対応</title>

  &migration56.openssl.peer-verification;
 </sect2>

 <sect2 xml:id="migration56.incompatible.gmp">
  <title><link linkend="book.gmp">GMP</link> リソースがオブジェクトに</title>

  <para>
   <link linkend="book.gmp">GMP</link> リソースがオブジェクトになりました。
   GMP 拡張モジュールに実装されている API に変更はなく、コードに手を加えなくてもそのまま動作します。
   しかし、<function>is_resource</function> などでリソースかどうかを明示的に調べている場合は注意が必要です。
  </para>
 </sect2>

 <sect2 xml:id="migration56.incompatible.mcrypt">
  <title><link linkend="book.mcrypt">Mcrypt</link> 関数は、有効なキーと IV を要求する</title>

  <para>
   <function>mcrypt_encrypt</function>、<function>mcrypt_decrypt</function>、
   <function>mcrypt_cbc</function>、<function>mcrypt_cfb</function>、
   <function>mcrypt_ecb</function>、<function>mcrypt_generic</function> および
   <function>mcrypt_ofb</function> は、無効なサイズのキーや IV を受け付けなくなりました。
   IV が必要なブロック暗号化モードで IV が指定されていない場合にも、処理が失敗するようになりました。
  </para>
 </sect2>
 
 <sect2 xml:id="migration56.incompatible.curl">
  <title><link linkend="book.curl">cURL</link> でのファイルアップロード</title>

  <para>
   @file 構文によるファイルアップロードを行う際には、CURLOPT_SAFE_UPLOAD を &false; に設定しなければいけなくなりました。
   この機能を使うのではなく、<classname>CURLFile</classname> を使うべきです。
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
