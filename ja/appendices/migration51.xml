<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351036 Maintainer: takagi Status: ready -->
<!-- Credits: mumumu -->
<appendix xml:id="migration51" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>PHP 5.0.x から PHP 5.1.x への移行</title>
 <para>
  &manual.migration.seealso;
  <link linkend="migration5">5.0.x</link>、
  <link linkend="migration52">5.2.x</link>、
  <link linkend="migration53">5.3.x</link>、
  <link linkend="migration54">5.4.x</link>、
  <link linkend="migration55">5.5.x</link> および
  <link linkend="migration56">5.6.x</link>。
 </para>

 <section xml:id="migration51.changes">
  <title>PHP 5.1.x における変更点</title>
  <para>
   PHP 5.1.x では以下のような点が変更されています。
  </para>
  <itemizedlist>
   <listitem>
    <para>
     日付処理用のコードを完全に書き直し、タイムゾーンのサポートを改善しました。
    </para>
   </listitem>
   <listitem>
    <para>
     PHP 5.0.x と比較してパフォーマンスが大幅に向上しました。
    </para>
   </listitem>
   <listitem>
    <para>
     PDO 拡張モジュールがデフォルトで組み込まれるようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     さまざまな拡張モジュールや組み込みの機能で、30 を超える新しい関数が追加されました。
    </para>
   </listitem>
   <listitem>
    <para>
     400 を超えるバグを修正しました。
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="migration51.references">
  <title>参照に関する処理の変更</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.references-overview">概要</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-fails">PHP 4.3.x
      では動作するものの、現在は動作しないコード</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-error">PHP 4.3.x
      では動作するものの、現在はエラーとなるコード</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-works">PHP 4.3.x
      では動作しなかったが、現在は動作するコード</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-didnotwork">本来は
      PHP 5.0.x で正常に動作すべきだったコード</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.references-warnings">現れて、
      そしていなくなった警告</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.references-overview">
   <title>概要</title>
   <para>
    PHP スクリプトの開発者としての観点から見ると、
    既存のコードに与える影響がもっとも大きいのは、
    PHP 4.4.0 以降での参照に関する扱いの変更です。
   </para>
   <para>
    PHP 4.3 を含むそれ以前のバージョンでは、本来は値を返すべき場所、
    たとえば定数・一時的な値 (例: 式の結果)・値を返す関数の結果
    などで参照を使用することが可能でした。以下がその例です。
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$foo = "123";

function return_value() {
    global $foo;
    return $foo;
}

$bar = &return_value();
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    このコードは PHP 4.3 以下では通常通り動作しますが、一般的に結果は未定義となります。
    Zend エンジンはこれらの値を参照として正しく扱えません。このバグにより、
    再現不可能な問題が数多く発生していました。特に大規模なコードになるほどこの問題は深刻でした。
   </para>
   <para>
    PHP 4.4.0、PHP 5.0.4 以降のリリースでは Zend エンジンが修正され、
    参照を使用すべきでない場面で参照の操作が行われた場合はそれを「知る」
    ことができるようになりました。今ではそのような場合には実際の値が使用されるようになり、
    警告を発生するようになりました。この警告の形式は、
    PHP 4.4.0 以降では <constant>E_NOTICE</constant>、
    PHP 5.0.4 以降では <constant>E_STRICT</constant> となります。
   </para>
   <para>
    これまでメモリ破壊を起こす可能性のあったコードは、もはやその心配はなくなりました。
    しかし、既存のコードの中にはこれまでと挙動が変わってしまうものもあります。
   </para>
  </section>

  <section xml:id="migration51.references-fails">
   <title>PHP 4.3.x では動作するものの、現在は動作しないコード</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function func(&$arraykey) {
    return $arraykey; // 関数は値を返します!
}

$array = array('a', 'b', 'c');
foreach (array_keys($array) as $key) {
    $y = &func($array[$key]);
    $z[] =& $y;
}

var_dump($z);
?>
<]]>
    </programlisting>
    <para>
     参照に関する修正が行われる前の PHP で上のスクリプトを実行すると、このような結果になります。
    </para>
    <screen>
<![CDATA[
array(3) {
  [0]=>
  &string(1) "a"
  [1]=>
  &string(1) "b"
  [2]=>
  &string(1) "c"
}
]]>
    </screen>
    <para>
     修正後は、同じコードの結果が次のようになります。
    </para>
    <screen>
<![CDATA[
array(3) {
  [0]=>
  &string(1) "c"
  [1]=>
  &string(1) "c"
  [2]=>
  &string(1) "c"
}
]]>
    </screen>
   </informalexample>
   <para>
    理由は、今回の変更によって <literal>func()</literal>
    の結果が値として代入されるようになったことです。
    <varname>$y</varname> の値は代入しなおされ、そして、<varname>$z</varname>
    では <varname>$y</varname> への参照が残り続けます。
    この修正が行われる前は、<literal>func()</literal> の結果が参照として代入され、
    先頭の <varname>$y</varname> は毎回代入されてしまっていました。
    一時的な変数を参照で渡そうとすることが、メモリ破壊の原因となっていました。
   </para>
   <para>
    修正前のバージョンの PHP と修正後のバージョンの PHP とで、
    このようなコードの挙動を同じにすることは可能です。
    <literal>func()</literal> の定義を変更して参照を返すようにするか、あるいは
    <literal>func()</literal> が返す結果を参照として代入する処理を取り除けばよいのです。
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function func() {
    return '関数の返す値';
}

$x = 'original value';
$y =& $x;
$y = &func();
echo $x;
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    PHP 4.3 では <varname>$x</varname> は 'もとの値' となりますが、
    この変更以降のバージョンでは
    '関数の返す値' となります。関数は参照を返さず、
    値が直接代入されることを覚えておきましょう。もう一度いいます。
    このような挙動の違いをなくすには、<literal>func()</literal> が参照を返すようにするか、
    関数の返す値を直接参照として代入することをやめるかのどちらかを行います。
   </para>
  </section>

  <section xml:id="migration51.references-error">
   <title>PHP 4.3.x では動作するものの、現在はエラーとなるコード</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {

    function getThis() {
        return $this;
    }

    function destroyThis() {
        $baz =& $this->getThis();
    }
}

$bar = new Foo();
$bar->destroyThis();
var_dump($bar);
?>
]]>
    </programlisting>
   </informalexample>
   <para>
    PHP 5.0.3 では、<varname>$bar</varname> はオブジェクトを返さずに
    <constant>NULL</constant> と評価されます。
    なぜなら、<literal>getThis()</literal> が値を返しているにもかかわらず、
    それを参照として代入しているからです。
    現在ではこれは期待通りに動作しますが、実際のところこれは不正なコードです。
    PHP 4.4 では <constant>E_NOTICE</constant>、
    PHP 5.0.4 以降では <constant>E_STRICT</constant> をスローします。
   </para>
  </section>

  <section xml:id="migration51.references-works">
   <title>PHP 4.3.x では動作しなかったが、現在は動作するコード</title>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function &f() {
    $x = "foo";
    var_dump($x);
    print "$x\n";
    return($a);
}

for ($i = 0; $i < 3; $i++) {
    $h = &f();
}
?>
]]>
    </programlisting>
    <para>
     PHP 4.3 では <function>var_dump</function> を 3 度目にコールした際に
     <constant>NULL</constant> を返し、
     初期化されていない値への参照を返すことでメモリの破壊を引き起こしてしまいます。
     このコードは PHP 5.0.4 以降では動作しますが、
     それより前のバージョンの PHP ではエラーとなります。
    </para>
   </informalexample>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$arr = array('a1' => array('alfa' => 'ok'));
$arr =& $arr['a1'];
echo '-'.$arr['alfa']."-\n";
?>
]]>
    </programlisting>
    <para>
     PHP 5.0.5 より前のバージョンでは、
     このようにして配列の要素に参照を代入することができませんでした。
     現在はできるようになっています。
    </para>
   </informalexample>
  </section>

  <section xml:id="migration51.references-didnotwork">
   <title>本来は PHP 5.0.x で<literal>正常に動作すべきだった</literal>コード</title>
   <para>
    参照関連の修正が行われるより前の PHP 5.0 ではいくつかのバグが報告されていましたが、
    それらは今では正常に「動作します」。しかし、いずれの場合についても PHP 5.1.x
    ではエラーがスローされます。なぜなら、まず第一にそのコードが不正なものだからです。
    現在では <literal>self::</literal>
    を使用して値を参照で返すことができるようになりましたが、
    <constant>E_STRICT</constant> レベルの警告をスローします。
    また、オーバーロードされたオブジェクトに参照を代入しようとすると、
    たとえ代入自体は正常に動作していても <constant>E_ERROR</constant>
    に遭遇することになるでしょう。
   </para>
  </section>

  <section xml:id="migration51.references-warnings">
   <title>現れて、そしていなくなった警告</title>
   <para>
    参照を返す関数をネストしてコールすることは、PHP 4.3.x および PHP 5.1.x
    のどちらでも有効です。しかし、それらの間のバージョンの PHP では、
    <constant>E_NOTICE</constant> あるいは <constant>E_STRICT</constant>
    が間違って発生してしまいます。
   </para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function & foo() {
    $var = 'ok';
    return $var;
}

function & bar() {
    return foo();
}

$a =& bar();
echo "$a\n";
?>
]]>
    </programlisting>
   </informalexample>
  </section>
 </section><!-- end of migration51.references -->
 <section xml:id="migration51.reading">
  <title>[] の読み込み</title>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class XmlTest {

    function test_ref(&$test) {
        $test = "ok";
    }

    function test($test) { }

    function run() {
        $ar = array();
        $this->test_ref($ar[]);
        var_dump($ar);
        $this->test($ar[]);
    }
}

$o = new XmlTest();
$o->run();
?>
]]>
   </programlisting>
  </informalexample>
  <para>
   これは常に <constant>E_ERROR</constant>
   レベルの致命的なエラーを発生します。なぜなら、PHP では []
   を読み込みに使用できないからです。PHP 4.4.2 および PHP 5.0.5 以降で、
   これは不正なコードとなりました。
  </para>
 </section>

 <section xml:id="migration51.integer-parameters">
  <title>関数のパラメータとしての整数値</title>
  <para>
   PHP 5.0 の登場に伴い、パラメータのパース用の新しい API が公開されました。
   多くの PHP 関数でこの API が使用されています。PHP 5.0.x から 5.1.x
   までの間のすべてのバージョンではこの API での整数の処理が非常に厳しいものとなっており、
   パラメータとして整数を受け付けている PHP 関数に不正な値を渡せないようになっていました。
   このチェックは現在ではより緩やかなものとなっており、" 123" や "123 "
   といった不正な値でも受け付けるように変更されています。これは PHP 5.0.x
   でも同様です。しかし、コードの安全性の確保や入力内容の検証を促進するため、
   そのような文字列が整数として渡された際には PHP 関数は
   <constant>E_NOTICE</constant> を発行します。
  </para>
 </section>

 <section xml:id="migration51.oop">
  <title>クラスとオブジェクトの変更点</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.oop-functions"><literal>instanceof</literal>、
      <literal>is_a()</literal>、<literal>is_subclass_of()</literal> および
      <literal>catch</literal></link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-methods">抽象 private メソッド</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-modifiers">インターフェイスのアクセス修飾子</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-inheritance">継承規則の変更</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.oop-constants">クラス定数</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.oop-functions">
   <title><literal>instanceof</literal>、<literal>is_a()</literal>、
    <literal>is_subclass_of()</literal> および <literal>catch</literal></title>
   <para>
    PHP 5.0 で <literal>is_a()</literal> は非推奨となり、<literal>instanceof</literal>
    演算子に置き換えられました。
    <literal>instanceof</literal> の初期の実装にはいくつかの問題があり、クラスを探すために
    <literal>__autoload()</literal> に頼っていました。もしクラスが存在しなかった場合、
    <literal>__autoload()</literal> に失敗するために <literal>instanceof</literal>
    は致命的な <constant>E_ERROR</constant> をスローしていました。
    同じ理由で、<literal>catch</literal> 演算子や <literal>is_subclass_of()</literal>
    関数でも同様の現象が発生していました。
   </para>
   <para>
    PHP 5.1 では、これらの関数や演算子は <literal>__autoload()</literal> をコールしません。
    また、PHP 5.0.x ではこの問題の回避策として <literal>class_exists()</literal> が使用可能です。
    大きな問題ではありませんが、この回避策はもはや必要ありません。
   </para>
  </section>

  <section xml:id="migration51.oop-methods">
   <title>抽象 private メソッド</title>
   <para>
    PHP 5.0.0 から PHP 5.0.4 まででは抽象 private メソッドがサポートされていましたが、
    これは禁止されました。なぜなら <literal>private</literal>
    と <literal>abstract</literal> とは決して両立することのない概念だからです。
   </para>
  </section>

  <section xml:id="migration51.oop-modifiers">
   <title>インターフェイスのアクセス修飾子</title>
   <para>
    PHP 5.0 では、インターフェイス内での関数定義はクラス内での関数定義と同じように扱われました。
    2004 年 10 月以降はそうではなくなり、インターフェイス内での関数定義では
    <literal>public</literal> 以外のアクセス修飾子を指定できなくなりました。
    そして 2005 年 4 月、PHP 5.0b1 のリリース前に、<literal>static</literal>
    修飾子も許可されるようになりました。しかし、<literal>protected</literal> 修飾子や
    <literal>private</literal> 修飾子を指定しようとすると
    <constant>E_ERROR</constant> をスローします。
    <literal>abstract</literal> も同様です。
    この変更が既存のコードに影響を及ぼすことはないはずです。
    結局のところ、インターフェイス内でこれら (protected, private, abstract)
    を指定してもそれは意味のないものだからです。
   </para>
  </section>

  <section xml:id="migration51.oop-inheritance">
   <title>継承規則の変更</title>
   <para>
    PHP 5.0 では、基底クラスの同名の関数定義と一致しない関数を
    派生クラスの中で定義することが可能でした。たとえば以下のようなものです。
   </para>
   <informalexample>
    <para>
     PHP 5.1.x では、このコードは <constant>E_STRICT</constant> エラーを発生させます。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
    function &return_by_ref() {
        $r = 1;
        return $r;
    }
}

class Derived extends Base {
    function return_by_ref() {
        return 1;
    }
}
?>
]]>
    </programlisting>
   </informalexample>
  </section>

  <section xml:id="migration51.oop-constants">
   <title>クラス定数</title>
   <para>
    PHP 5.0.x では、以下のコードは正しいものでした。
   </para>
   <informalexample>
    <para>
     PHP 5.1.x では、クラス定数を再定義すると、致命的なエラー
     <constant>E_ERROR</constant> がスローされます。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class test {
    const foobar = 'foo';
    const foobar = 'bar';
}

?>
]]>
    </programlisting>
   </informalexample>
  </section>
 </section> <!-- end of migration51.oop -->

 <section xml:id="migration51.extensions">
  <title>拡張モジュール</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.extensions-gone">PHP コアから削除された拡張モジュール</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.extensions-constants">PHP 5.1.x の新しい拡張モジュールのクラス定数</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.extensions-gone">
   <title>PHP コアから削除された拡張モジュール</title>
   <para>
    PHP 5.1.x をダウンロードして最初に気づくことのひとつは、
    いくつかの古い拡張モジュールがなくなっていることでしょう。
    これらの拡張モジュールのうち、現在も使用可能で活発にメンテナンスが続けられているものについては
    PHP Extension Community Library (PECL) <link xlink:href="&url.pecl;">&url.pecl;</link>
    で入手可能です。
   </para>
   <table>
    <title>削除された拡張モジュール</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>拡張モジュール</entry>
       <entry>代替モジュール/開発状況</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>ext/cpdf</entry>
       <entry>pecl/pdflib</entry>
      </row>
      <row>
       <entry><link linkend="ref.dbx">ext/dbx</link></entry>
       <entry>pecl/dbx</entry>
      </row>
      <row>
       <entry><link linkend="ref.dio">ext/dio</link></entry>
       <entry>pecl/dio</entry>
      </row>
      <row>
       <entry>ext/fam</entry>
       <entry>メンテナンスが滞っています</entry>
      </row>
      <row>
       <entry><link linkend="ref.ingres">ext/ingres_ii</link></entry>
       <entry>pecl/ingres</entry>
      </row>
      <row>
       <entry>ext/ircg</entry>
       <entry>メンテナンスが滞っています</entry>
      </row>
      <row>
       <entry>ext/mcve</entry>
       <entry>pecl/mcve</entry>
      </row>
      <row>
       <entry>ext/mnogosearch</entry>
       <entry>メンテナンスが滞っています</entry>
      </row>
      <row>
       <entry>ext/oracle</entry>
       <entry>
        <link linkend="ref.oci8">ext/oci8</link> あるいは
        <link linkend="ref.pdo-oci">ext/pdo_oci</link>
       </entry>
      </row>
      <row>
       <entry>ext/ovrimos</entry>
       <entry>メンテナンスが滞っています</entry>
      </row>
      <row>
       <entry>ext/pfpro</entry>
       <entry>メンテナンスが滞っています</entry>
      </row>
      <row>
       <entry>ext/w32api</entry>
       <entry><link xlink:href="&url.pecl.package;ffi">pecl/ffi</link></entry>
      </row>
      <row>
       <entry>ext/yp</entry>
       <entry>メンテナンスが滞っています</entry>
      </row>
      <row>
       <entry>ext/activescript</entry>
       <entry>
        <link xlink:href="&url.pecl.package;activescript">pecl/activescript</link>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    PECL モジュールのうち、メンテナンスが滞っているもの 
    (いつの間にかサポートされなくなっていたり、現在メンテナがいなかったり、
    PECL パッケージとしてリリースされていなかったりするもの) は、
    <link xlink:href="&url.php.svn;pecl">&url.php.svn;pecl</link>
    の SVN から取得可能です。しかし、これらのモジュールはサポートされておらず、
    インストールして使用するのは大変かもしれません。
   </para>
  </section>

  <section xml:id="migration51.extensions-constants">
   <title>PHP 5.1.x の新しい拡張モジュールのクラス定数</title>
   <para>
    Zend Engine 2.1 の API では、拡張モジュールの開発者が
    クラス定数を定義することが可能となりました。PHP 5.1.x
    用に書かれた新しい拡張モジュールである
    <link linkend="ref.spl">SPL</link> や
    <link linkend="intro.pdo">PDO</link>、
    <link linkend="book.xmlreader">XMLReader</link> そして
    <link linkend="ref.datetime">date</link> などはこの形式の定数を使用しており、
    C 言語風の <constant>PDO::CLASS_CONSTANT</constant> ではなく
    <constant>PDO_CLASS_CONSTANT</constant> のようになっています。
    これは、PHP のグローバル名前空間の汚染を最小限に抑えるためです。
   </para>
  </section>
 </section> <!-- end of migration51.extensions -->

 <section xml:id="migration51.datetime">
  <title>日付/時刻のサポート</title>
  <para>
   PHP 5.1.x では日付/時刻のサポートが完全に書き直され、
   タイムゾーンを「知る」ためにシステムの設定を使用しないようになりました。
   そのかわりに、以下の順番でタイムゾーンを取得します。
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <function>date_default_timezone_set</function> 関数を使用して設定したタイムゾーン
     (もし設定されていれば)
    </para>
   </listitem>
   <listitem>
    <para>
     環境変数 TZ の値 (もし空でなければ)
    </para>
   </listitem>
   <listitem>
    <para>
     "magical" な推測 (もし OS がそれをサポートしていれば)
    </para>
   </listitem>
   <listitem>
    <para>
     これらのいずれの項目も存在しない場合は、UTC
    </para>
   </listitem>
  </itemizedlist>
  <informalexample>
   <para>
    正確性を保証する (そして警告 <constant>E_STRICT</constant>
    を出さないようにする) ためには、<filename>php.ini</filename>
    の中に以下の形式でタイムゾーンを定義する必要があります。
   </para>
   <para>
    date.timezone = Europe/London
   </para>
  </informalexample>
  <para>
   サポートされるタイムゾーンをこの形式で並べた一覧表が、PHP マニュアルの
   <link linkend="timezones">付録</link>
   にあります。
  </para>
  <para>
   また、<function>strtotime</function> 関数は、失敗時に -1 ではなく
   &false; を返すようになったことにも注意しましょう。
  </para>
 </section>

 <section xml:id="migration51.databases">
  <title>データベースサポートの変更</title>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="migration51.databases-pdo">PDO の概要</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.databases-mysql">MySQL サポートの変更</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="migration51.databases-sqlite">SQLite サポートの変更</link>
    </para>
   </listitem>
  </itemizedlist>

  <section xml:id="migration51.databases-pdo">
   <title>PDO の概要</title>
   <para>
    <link linkend="intro.pdo">PHP Data Objects (PDO)</link> は PHP 5.0 の時に
    PECL 拡張モジュールとして公開され、その後 PHP 5.1.x で
    PHP のコア配布物に組み込まれるようになりました。
    PDO 拡張モジュールはデータベースへのアクセスのための一貫したインターフェイスを提供し、
    データベース固有の PDO ドライバとともに使用します。
    各ドライバはデータベース固有の関数を保持していることもありますが、
    クエリの発行やデータの取得といった基本的な機能については PDO 関数がカバーしています。
    この関数は、
    <function>PDO::__construct</function>
    で指定したドライバを使用します。
   </para>
   <para>
    PDO 拡張モジュールやドライバは、
    共有モジュールとしてのビルドを想定していることに注意しましょう。
    これにより、PECL からドライバをアップグレードする際に
    PHP そのものを再ビルドする必要がなくなります。
   </para>
   <para>
    PHP 5.1.x のリリース時点では、PDO は広範囲に及ぶテストを済ませており
    ほとんどの環境でうまく動作するはずです。しかし、PDO やそのドライバは比較的歴史が浅く、
    データベース固有の機能のいくつかを実装できていないということを理解しておくことが大切です。
    新しいプロジェクトで PDO を使用する際には、事前に動作検証を十分に行うようにしましょう。
   </para>
   <para>
    既存のコードは、一般的にはこれまで存在したデータベース拡張モジュールに依存しています。
    これらについてもメンテナンスが続けられます。
   </para>
  </section>

  <section xml:id="migration51.databases-mysql">
   <title>MySQL サポートの変更</title>
   <para>
    PHP 4 では、MySQL 3 のサポートが組み込まれていました。
    PHP 5.0 のリリース時には「mysql」および「mysqli」という 2 つの
    MySQL 拡張モジュールがありました。これらは、それぞれ MySQL &lt; 4.1 および
    MySQL 4.1 以降をサポートするように設計されていました。
    PHP でサポートされるあらゆるデータベースの API への高速なインターフェイスを提供する
    PDO が公開されたことに伴い、PDO を使用して書かれた PHP コードでは、
    PDO_MYSQL ドライバによって現行のいずれのバージョン (MySQL 3、4 あるいは 5)
    でもサポートすることが可能となりました。これは、コンパイル時に使用した MySQL
    ライブラリのバージョンに依存します。
    後方互換性を確保するためにこれまでの MySQL 拡張モジュールも残されていますが、
    デフォルトでは有効になりません。
   </para>
  </section>

  <section xml:id="migration51.databases-sqlite">
   <title>SQLite サポートの変更</title>
   <para>
    PHP 5.0.x では、組み込みの sqlite 拡張モジュールで SQLite 2 がサポートされていました。
    PHP 4.3 および PHP 4.4 でも、PECL 拡張モジュールとして同じものが使用可能でした。
    PDO が公開されたことで、sqlite 拡張モジュールは 'sqlite2' という名前の
    PDO ドライバとして機能するようになりました。このため、PHP 5.1.x での
    sqlite 拡張モジュールは PDO 拡張モジュールに依存しています。
   </para>
   <para>
    PHP 5.1.x では、sqlite への接続用にいろいろなインターフェイスを公開しています。
   </para>
   <para>
    sqlite 拡張モジュールでは "classic" な 手続き型/オブジェクト指向 API を提供しており、
    これは以前のバージョンの PHP と同じように使用できます。
    またこれとは別に PDO 'sqlite2' ドライバを提供しており、こちらは PDO API を使用して
    SQLite 2 データベースにアクセスします。
   </para>
   <para>
    さらに、PDO_SQLITE は 'sqlite' バージョン 3 ドライバを提供します。
    SQLite バージョン 3 は SQLite バージョン 2 に比べて非常に優れていますが、
    2 つのバージョンの間でファイルフォーマットに互換性がありません。
   </para>
   <para>
    以前のバージョンの PHP で動作している SQLite ベースのプロジェクトがあるのなら、
    ext/sqlite を使用し続ければ何の問題もありません。しかし、PDO および sqlite
    を明示的に有効にする必要があります。新しいプロジェクトの場合は、PDO および
    'sqlite' (バージョン 3) ドライバを使用すべきです。
    これは SQLite 2 に比べて高速で、ロック処理が改善されており、
    プリペアドステートメントやバイナリ列をネイティブにサポートしています。
   </para>
   <para>
    SQLite 拡張モジュールを使用するには、PDO を有効にする必要があります。
    もし PDO を共有モジュールとしてビルドしたのなら、
    SQLite 拡張モジュールも同様に共有モジュールとする必要があります。
    これは、PDO ドライバを提供している他のすべての拡張モジュールについても同様です。
   </para>
  </section>
 </section> <!-- end of migration51.databases -->

 <section xml:id="migration51.errorcheck">
  <title><constant>E_STRICT</constant> のチェック</title>
  <informalexample>
   <para>
    ひとつのスクリプトについてのみチェックしたいのであれば、
    PHP コマンドラインの文法チェック機能を使用して
    <constant>E_STRICT</constant> エラーを抜き出すことができます。
   </para>
   <programlisting role="shell">
    php -d error_reporting=4095 -l script_to_check.php
   </programlisting>
   <para>
    大量のファイルをチェックするのなら、以下のシェルスクリプトで同様のことが可能です。
   </para>
   <programlisting role="shell">
<![CDATA[
#!/bin/sh

directory=$1

shift

# チェックする拡張子を指定します
extensions="php inc"

check_file ()
{
  echo -ne "Doing PHP syntax check on $1 ..."

  # オプション
  ERRORS=`/www/php/bin/php -d display_errors=1 -d html_errors=0 -d error_prepend_string=" " -d error_append_string=" " -d error_reporting=4095 -l $1 | grep -v "No syntax errors detected"`

  if test -z "$ERRORS"; then
    echo -ne "OK."
  else
    echo -e "Errors found!\n$ERRORS"
  fi

  echo
}

# loop over remaining file args
for FILE in "$@" ; do
  for ext in $extensions; do
     if echo $FILE | grep "\.$ext$" > /dev/null; then
       if test -f $FILE; then
         check_file "$FILE"
       fi
     fi
  done
done
]]>
   </programlisting>
  </informalexample>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax ft=docbkphp fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
