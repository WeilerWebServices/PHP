<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 344640 Maintainer: takagi Status: ready -->

<sect2 xml:id="migration70.incompatible.variable-handling">
 <title>変数の取り扱いの変更</title>

 <para>
  PHP 7 では、抽象構文木を使ってソースファイルをパースするようになりました。
  そのおかげで言語としてのさまざまな改良ができるようになりました。
  これまでの PHP が使っていたパーサーでは不可能だったこともできるようになったからです。
  しかしその結果、一貫性を保つために一部の機能を削除することになりました。
  これは、下位互換性を損ねるものです。
  このセクションでは、それらについて説明します。
 </para>

 <sect3 xml:id="migration70.incompatible.variable-handling.indirect">
  <title>
   変数やプロパティ、メソッドへの間接的なアクセスの扱いの変更
  </title>

  <para>
   変数やプロパティそしてメソッドへの間接的なアクセスを、厳密に左から右の順で評価するようになりました。
   以前のバージョンでは、場合によって評価の順が逆転することもありました。
   評価順の変更を、以下の表にまとめます。
  </para>

  <para>
   <table>
    <title>間接的なアクセスの評価順の変更</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>式</entry>
       <entry>PHP 5 での解釈</entry>
       <entry>PHP 7 での解釈</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <code>$$foo['bar']['baz']</code>
       </entry>
       <entry>
        <code>${$foo['bar']['baz']}</code>
       </entry>
       <entry>
        <code>($$foo)['bar']['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']()</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']()</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>Foo::$bar['baz']()</code>
       </entry>
       <entry>
        <code>Foo::{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>(Foo::$bar)['baz']()</code>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   今までのバージョンにおける右から左の評価を想定しているコードは、
   波括弧を使って評価順を明示するように
   (表の中央列のように) 書き直す必要があります。
   そうすれば、PHP 7.x との互換性を保ちつつ、PHP 5.x との下位互換性も維持できます。
  </para>

  <para>
   これは、&global; キーワードにも影響します。
   必要であれば、波括弧構文を使えばこれまでのバージョンでの挙動を再現できます。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function f() {
    // PHP 5 でしか使えません
    global $$foo->bar;

    // PHP 5 と PHP 7 の両方で使えます
    global ${$foo->bar};
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.list">
  <title><function>list</function> の取り扱いの変更</title>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.order">
   <title>
    <function>list</function> での変数の代入が、逆順ではなくなる
   </title>

   <para>
    <function>list</function> における変数への代入が定義された順番どおりに行われるようになりました。
    今までのように逆順にはなりません。
    この変更の影響を受けるのは、<function>list</function> を
    <code>[]</code> 演算子と組み合わせて使うときくらいでしょう。その例を示します。
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list($a[], $a[], $a[]) = [1, 2, 3];
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(3)
  [1]=>
  int(2)
  [2]=>
  int(1)
}
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </informalexample>

   <para>
    一般論として、
    <function>list</function> での代入がどの順で行われるかに依存するコードは書かないことを推奨します。
    代入の順番は、実装の都合によって今後も変わる可能性があるからです。
   </para>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.empty">
   <title>空の <function>list</function> の廃止</title>

   <para>
    空の <function>list</function> を作ることはできなくなりました。
    次のようなコードは PHP 7 では使えません。
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list() = $a;
list(,,) = $a;
list($x, list(), $y) = $a;
?>
]]>
    </programlisting>
   </informalexample>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.string">
   <title><function>list</function> は文字列を展開しない</title>

   <para>
    <function>list</function> は文字列変数を展開できなくなりました。
    かわりに <function>str_split</function> を使いましょう。
   </para>
  </sect4>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.array-order">
  <title>
   参照による代入で自動的に作成した配列要素の並び順の変更
  </title>

  <para>
   参照による代入で配列の要素を自動的に作成した場合の、
   要素の並び順が変更されました。
   以下に例を示します。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.parentheses">
  <title>
   関数のパラメータを括弧で囲んでもその振る舞いは変わらない
  </title>

  <para>
   PHP 5 では、関数のパラメータを冗長な括弧で囲んでおくと、
   関数のパラメータを参照渡しにした場合の警告を抑止することができました。
   PHP 7 では、たとえ括弧で囲んでも警告が常に発生します。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function getArray() {
    return [1, 2, 3];
}

function squareArray(array &$a) {
    foreach ($a as &$v) {
        $v **= 2;
    }
}

// PHP 7 では警告が発生します
squareArray((getArray()));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Notice: Only variables should be passed by reference in /tmp/test.php on line 13
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
