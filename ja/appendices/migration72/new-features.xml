<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343545 Maintainer: takagi Status: ready -->

<sect1 xml:id="migration72.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新機能</title>

 <sect2 xml:id="migration72.new-features.object-type">
  <title>object 型</title>

  <para>
   <type>object</type> 型が新たに導入されました。
   任意のオブジェクトに対する (反変) パラメータの型付けや (共変) 返り値の型付けで使えます。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function test(object $obj) : object
{
    return new SplQueue();
}

test(new StdClass());
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.ext-loading-by-name">
  <title>名前指定による拡張モジュールのロード</title>

  <para>
   読み込む共有モジュールを指定する際に、拡張子
   (Unix なら <literal>.so</literal>、Windows なら <literal>.dll</literal> など)
   を指定する必要がなくなりました。php.ini ファイルでの指定だけでなく
   <function>dl</function> 関数による指定でも同様です。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.abstract-method-overriding">
  <title>抽象メソッドのオーバーライド</title>

  <para>
   ある抽象クラスが別の抽象クラスを継承しているときに、
   継承元クラスの抽象メソッドをオーバーライドできるようになりました。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

abstract class A
{
    abstract function test(string $s);
}
abstract class B extends A
{
    // オーバーライドしましたが、パラメータの反変性や戻り値の共変性は維持しています。
    abstract function test($s) : int;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.sodium">
  <title><link linkend="book.sodium">Sodium</link> がコアモジュールに</title>

  <para>
   モダンな暗号ライブラリである Sodium が PHP コアモジュールに含まれるようになりました。
  </para>
  <para>
   関数のリファレンスは <link linkend="book.sodium">Sodium</link> を参照ください。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.pws-hashing-with-argon2">
  <title>Argon2 によるパスワードハッシュ</title>

  <para>
   <link linkend="book.password">パスワードハッシュ API</link>
   に Argon2 が追加されました。次の定数が公開されています。
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2I</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2_DEFAULT_MEMORY_COST</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2_DEFAULT_TIME_COST</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PASSWORD_ARGON2_DEFAULT_THREADS</constant>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.pdo-extended-str-types">
  <title><link linkend="book.pdo">PDO</link> の拡張文字列型</title>

  <para>
   PDO の文字列型が拡張され、
   プリペアをエミュレートする際に NCHAR 型をサポートするようになりました。
   以下の定数が追加されています。
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <constant>PDO::PARAM_STR_NATL</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PDO::PARAM_STR_CHAR</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>PDO::ATTR_DEFAULT_STR_PARAM</constant>
    </simpara>
   </listitem>
  </itemizedlist>

  <para>
   これらの定数を使うには、
   <constant>PDO::PARAM_STR</constant> とビット <literal>OR</literal>
   で連結します。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$db->quote('über', PDO::PARAM_STR | PDO::PARAM_STR_NATL);
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.additional-emulated-prepares-debugging-info">
  <title><link linkend="book.pdo">PDO</link> のデバッグ情報にプリペアのエミュレートの内容を追加</title>

  <para>
   <function>PDOStatement::debugDumpParams</function> メソッドが改良されて、
   データベースに送信される SQL を表示できるようになりました。
   これは、プレースホルダの内容をバインド変数の値で置き換えた後の生のクエリです。
   この機能は、プリペア機能のエミュレートをデバッグしやすくするために用意されました
   (そのため、プリペア機能のエミュレートが有効になっているときしか使えません)。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.extended-ops-in-ldap">
  <title><link linkend="book.ldap">LDAP</link> における拡張オペレーションのサポート</title>

  <para>
   LDAP 拡張モジュールが EXOP をサポートするようになりました。
   以下の関数や定数が追加されています。
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>ldap_parse_exop</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>ldap_exop</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>ldap_exop_passwd</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>ldap_exop_whoami</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_START_TLS</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_MODIFY_PASSWD</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_REFRESH</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_WHO_AM_I</constant>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>LDAP_EXOP_TURN</constant>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.addr-info-in-sockets">
  <title><link linkend="book.sockets">ソケット</link> 拡張モジュールでのアドレス情報の対応</title>

  <para>
   ソケット拡張モジュールが、アドレス情報のルックアップや
   接続、バインド、explainに対応するようになりました。
   新しく追加されたのは、以下の四つの関数です。
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>socket_addrinfo_lookup</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>socket_addrinfo_connect</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>socket_addrinfo_bind</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>socket_addrinfo_explain</function>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.param-type-widening">
  <title>パラメータの型の拡大変換</title>

  <para>
   メソッドをオーバーライドしたりインターフェイスを実装したりする際に、
   元のパラメータの型指定を省略できるようになりました。
   それでもリスコフの置換原則には違反していません。
   パラメータの型は反変だからです。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

interface A
{
    public function Test(array $input);
}

class B implements A
{
    public function Test($input){} // $input の型指定を省略
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.trailing-comma-in-grouped-namespaces">
  <title>名前空間のグループ指定における最後のカンマの許可</title>

  <para>
   PHP 7.0 で導入されたグループ指定構文で、最後にカンマを付けられるようになりました。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

use Foo\Bar\{
    Foo,
    Bar,
    Baz,
};
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.new-features.proc_nice-windows-support">
  <title>Windows での <function>proc_nice</function> のサポート</title>

  <para>
   <function>proc_nice</function> 関数が Windows でも使えるようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.pack-unpack-endian-support">
  <title><function>pack</function> と <function>unpack</function> でのエンディアンのサポート</title>

  <para>
   <function>pack</function> と <function>unpack</function> が、
   リトルエンディアンとビッグエンディアンの両方の float や double に対応するようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.exif-features">
  <title><link linkend="book.exif">EXIF</link> 拡張モジュールの機能追加</title>

  <para>
   EXIF 拡張モジュールがより多くのフォーマットに対応するようになりました。
   <function>exif_read_data</function> 関数で画像をパースするときに、
   今までよりも多くの独自タグが適切に変換されるようになります。
   新たにサポートするようになったフォーマットは以下のとおりです。
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     Samsung
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     DJI
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Panasonic
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Sony
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Pentax
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Minolta
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Sigma/Foveon
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     AGFA
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Kyocera
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Ricoh
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Epson
    </simpara>
   </listitem>
  </itemizedlist>

  <para>
   また、<function>exif_read_data</function> と <function>exif_thumbnail</function>
   の第一引数にストリームを渡せるようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.pcre">
  <title><link linkend="book.pcre">PCRE</link> の新機能</title>

  <itemizedlist>
   <listitem>
    <simpara>
     <literal>J</literal> 修飾子で PCRE_DUPNAMES を設定できるようになりました。
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.new-features.sqlite3">
  <title><link linkend="book.sqlite3">SQLite3</link> での BLOB の書き込み</title>

  <para>
   <methodname>SQLite3::openBlob</methodname> が、BLOB
   フィールドを書き込みモードでオープンできるようになりました。
   これまでは読み込みモードにしか対応していませんでした。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.oci8">
  <title><link linkend="book.oci8">Oracle OCI8</link> Transparent Application Failover コールバック</title>

  <para>
   <link linkend="oci8.taf">Oracle Database Transparent Application Failover (TAF) コールバック</link>
   のサポートが追加されました。
   TAF を使うと、データベースとの接続が切れたときに、
   提議済みのデータベースに自動的に再接続できます。
   TAF コールバックを使うと、
   フェイルオーバー時の再接続を PHP アプリケーションから監視したり制御したりできるようになります。
  </para>
 </sect2>

 <sect2 xml:id="migration72.new-features.zip">
  <title><link linkend="book.oci8">ZIP</link> 拡張モジュールの機能追加</title>

  <para>
   暗号化されたアーカイブの読み書きができるようになりました
   (libzip 1.2.0 以降が必要です)。
  </para>
  <para>
   <classname>ZipArchive</classname> クラスが <interfacename>Countable</interfacename>
   インターフェイスを実装するようになりました。
  </para>
  <para>
   <literal>zip://</literal> ストリームのコンテキストオプションに
   <literal>'password'</literal> を使えるようになりました。
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
