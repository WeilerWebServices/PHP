<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351129 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka,mumumu -->

<sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
 <title>マジックメソッド</title>
 <para>
    以下の関数名
   <link linkend="object.construct">__construct()</link>,
   <link linkend="object.destruct">__destruct()</link>,
   <link linkend="object.call">__call()</link>,
   <link linkend="object.callstatic">__callStatic()</link>,
   <link linkend="object.get">__get()</link>,
   <link linkend="object.set">__set()</link>,
   <link linkend="object.isset">__isset()</link>,
   <link linkend="object.unset">__unset()</link>,
   <link linkend="object.sleep">__sleep()</link>,
   <link linkend="object.wakeup">__wakeup()</link>,
   <link linkend="object.serialize">__serialize()</link>,
   <link linkend="object.unserialize">__unserialize()</link>,
   <link linkend="object.tostring">__toString()</link>,
   <link linkend="object.invoke">__invoke()</link>,
   <link linkend="object.set-state">__set_state()</link>,
   <link linkend="object.clone">__clone()</link> および
   <link linkend="object.debuginfo">__debugInfo()</link>
  は、PHP クラスにおける特殊関数の名前です。
  これらの関数に関連する特別な機能を使用する場合を除き、
  クラス内にこれらの名前を有する関数を作成してはいけません。
 </para>

 <note>
  <simpara>
   全てのマジックメソッドは 
   <literal>public</literal> として宣言されていなければ
   <emphasis>なりません</emphasis> 
  </simpara>
 </note>

 <caution>
  <simpara>
   PHP は、__ で始まる関数名を特殊関数として取り置きしてあります。
   このページに記載されているような特殊な機能を必要としないのであれば、
   関数名を __ で始めないほうが良い。
  </simpara>
 </caution>

 <sect2 xml:id="language.oop5.magic.sleep">
   <title>
    <link linkend="object.sleep">__sleep()</link> と
    <link linkend="object.wakeup">__wakeup()</link>
   </title>
   
   <methodsynopsis xml:id="object.sleep">
    <modifier>public</modifier> <type>array</type><methodname>__sleep</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.wakeup">
    <modifier>public</modifier> <type>void</type><methodname>__wakeup</methodname>
    <void/>
   </methodsynopsis>
   
  <para>
   <function>serialize</function> は、クラスに特殊な名前
   <link linkend="object.sleep">__sleep()</link> の関数があるかどうかを調べます。
   もしあれば、シリアル化の前にその関数を実行します。
   この関数で、オブジェクトをクリアすることができます。
   またこの関数は、シリアル化するオブジェクトについて、
   すべての変数の名前を配列で返すことが前提となっています。
   このメソッドが何も返さなかった場合は、&null;
   がシリアル化され、<constant>E_NOTICE</constant> が発生します。
  </para>
   <note>
    <para>
     <link linkend="object.sleep">__sleep()</link> で、親クラスの private
     プロパティの名前を返すことはできません。
     そうしようとすると <constant>E_NOTICE</constant> レベルのエラーとなります。
     この場合は、かわりに <classname>Serializable</classname>
     インターフェイスを使います。
    </para>
   </note>
  <para>
   典型的な <link linkend="object.sleep">__sleep()</link> の使用法は、
   途中のデータをコミットしたり、
   似たようなタスクのクリアを行うといったものです。
   また、オブジェクトが非常に大きく、かつ、完全に保存する必要がない場合、
   この関数が有用です。
  </para>
  <para>
   逆に、<function>unserialize</function> は、
   特殊な名前 <link linkend="object.wakeup">__wakeup()</link> を有する
   関数の存在を調べます。
   もし存在する場合、この関数は、オブジェクトが有する可能性が
   あるあらゆるリソースを再構築することができます。
  </para>
  <para>
    <link linkend="object.wakeup">__wakeup()</link> の使用目的は、
   シリアル化の際に失われたデータベース接続を再度確立したり、
   その他の再初期化を行うことです。
  </para>
   <example>
    <title>sleep および wakeup</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;
    
    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }
    
    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }
    
    public function __sleep()
    {
        return array('dsn', 'username', 'password');
    }
    
    public function __wakeup()
    {
        $this->connect();
    }
}?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.serialize">
   <title>
    <link linkend="object.serialize">__serialize()</link> と
    <link linkend="object.unserialize">__unserialize()</link>
   </title>

   <methodsynopsis xml:id="object.serialize">
    <modifier>public</modifier> <type>array</type><methodname>__serialize</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.unserialize">
    <modifier>public</modifier> <type>void</type><methodname>__unserialize</methodname>
    <methodparam><type>array</type><parameter>data</parameter></methodparam>
   </methodsynopsis>

   <para>
    <function>serialize</function> は、クラスが
    特殊な名前 <link linkend="object.serialize">__serialize()</link> を持つかを調べます。
    もしあれば、シリアル化の前にその関数を実行します。
    この関数は、オブジェクトをシリアル化した状態を示すキー/値のペアを連想配列にして返さなければなりません。
    配列を返さなかった場合、<classname>TypeError</classname> がスローされます。
   </para>
   <note>
    <para>
     <link linkend="object.serialize">__serialize()</link> と <link linkend="object.sleep">__sleep()</link>
     が両方同じオブジェクトに定義されていた場合、
     <link linkend="object.serialize">__serialize()</link> だけが呼び出されます。
     <link linkend="object.sleep">__sleep()</link> は無視されます。
     オブジェクトが <link linkend="class.serializable">Serializable</link>
     インターフェイスを実装していた場合、
     インターフェイスの <literal>serialize()</literal> メソッドは無視され、 
     <link linkend="object.serialize">__serialize()</link> が代わりに使われます。
    </para>
   </note>
   <para>
    <link linkend="object.serialize">__serialize()</link> の目的は、
    任意のオブジェクトの表現をシリアライズしやすいように定義することです。
    配列の要素はオブジェクトのプロパティに対応していても構いませんが、必須ではありません。
   </para>
   <para>
    逆に、<function>unserialize</function> は
    特殊な名前 <link linkend="object.serialize">__unserialize()</link> を持つかを調べます。
    もしあれば、<link linkend="object.serialize">__serialize()</link> が返した配列を復元し、この関数に渡します。
    この関数では、その配列から必要に応じてオブジェクトのプロパティを復元して構いません。
   </para>
   <note>
    <para>
     <link linkend="object.unserialize">__unserialize()</link> と <link linkend="object.wakeup">__wakeup()</link>
     が両方同じオブジェクトに定義されていた場合、
     <link linkend="object.unserialize">__unserialize()</link> だけが呼び出されます。
     <link linkend="object.wakeup">__wakeup()</link> は無視されます。
    </para>
   </note>
   <note>
    <para>
     この機能は PHP 7.4.0 以降で利用できます。
    </para>
   </note>
   <example>
    <title>Serialize および unserialize</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;

    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }

    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }

    public function __serialize(): array
    {
        return [
          'dsn' => $this->dsn,
          'user' => $this->username,
          'pass' => $this->password,
        ];
    }

    public function __unserialize(array $data): void
    {
        $this->dsn = $data['dsn'];
        $this->username = $data['user'];
        $this->password = $data['pass'];

        $this->connect();
    }
}?>
]]>
    </programlisting>
   </example>
 </sect2>

 <sect2 xml:id="language.oop5.magic.tostring">
   <title><link linkend="object.tostring">__toString()</link></title>
   <methodsynopsis xml:id="object.tostring">
    <modifier>public</modifier> <type>string</type><methodname>__toString</methodname>
    <void/>
   </methodsynopsis>
  <para>
   <link linkend="object.tostring">__toString()</link> メソッドにより、
   クラスが文字列に変換される際の動作を決めることができます。たとえば
   <literal>echo $obj;</literal> としたときに何を表示させるかといったことです。
   このメソッドは文字列を返さなければなりません。それ以外の場合は
   <constant>E_RECOVERABLE_ERROR</constant>
   レベルの致命的なエラーが発生します。
  </para>
   <warning>
    <simpara>
     PHP 7.4.0 より前のバージョンでは、<link linkend="object.tostring">__toString()</link> メソッド内から例外を投げることはできません。そうした場合、致命的なエラーが発生します。
    </simpara>
   </warning>  <example>
   <title>簡単な例</title>
   <programlisting role="php">
<![CDATA[
<?php
// 簡単なクラスを宣言
class TestClass
{
    public $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    public function __toString()
    {
        return $this->foo;
    }
}

$class = new TestClass('Hello');
echo $class;
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello
]]>
   </screen>
  </example>
   <para>
    注意が必要なのは、PHP 5.2.0 より前では、
    <link linkend="object.tostring">__toString()</link> メソッドは
    <function>echo</function> または <function>print</function>
    と直接結合された場合のみコールされていたということです。
    PHP 5.2.0 以降では、これはすべての文字列コンテキスト
    (たとえば <function>printf</function> における <literal>%s</literal> 修飾子)
    でコールされます。しかし、その他の型のコンテキスト
    (たとえば <literal>%d</literal> 修飾子) ではコールされません。
    PHP 5.2.0 以降では、<link linkend="object.tostring">__toString()</link>
    メソッドを持っていないオブジェクトを文字列に変換しようとすると
    <constant>E_RECOVERABLE_ERROR</constant> が発生します。
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.magic.invoke">
   <title><link linkend="object.invoke">__invoke()</link></title>
   <methodsynopsis xml:id="object.invoke">
    <type>mixed</type><methodname>__invoke</methodname>
    <methodparam rep="repeat"><parameter>values</parameter></methodparam>
   </methodsynopsis>
   <para>
    <link linkend="object.invoke">__invoke()</link> メソッドは、
    スクリプトがオブジェクトを関数としてコールしようとした際にコールされます。
   </para>
   <note>
    <para>
     この機能は PHP 5.3.0 以降で使用可能です。
    </para>
   </note>
   <example>
    <title><link linkend="object.invoke">__invoke()</link> の使用</title>
    <programlisting role="php">
<![CDATA[
<?php
class CallableClass
{
    public function __invoke($x)
    {
        var_dump($x);
    }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(5)
bool(true)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.set-state">
   <title><link linkend="object.set-state">__set_state()</link></title>
   <methodsynopsis xml:id="object.set-state">
    <modifier>static</modifier> <type>object</type><methodname>__set_state</methodname>
    <methodparam><type>array</type><parameter>properties</parameter></methodparam>
   </methodsynopsis>
   <para>
    この <link linkend="language.oop5.static">static</link> メソッドは、
    PHP 5.1.0 以降で <function>var_export</function> によって
    エクスポートされたクラスのためにコールされます。
   </para>
   <para>
    このメソッドの唯一のパラメータは、エクスポートされたプロパティを
    <literal>array('property' => value, ...)</literal> の形式で保持する配列です。
   </para>
   <example>
    <title><link linkend="object.set-state">__set_state()</link> の使用法 (PHP 5.1.0 以降)</title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array) // PHP 5.1.0 以降
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

eval('$b = ' . var_export($a, true) . ';'); // $b = A::__set_state(array(
                                            //    'var1' => 5,
                                            //    'var2' => 'foo',
                                            // ));
var_dump($b);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
   <note>
    <simpara>
     <function>var_export</function> でオブジェクトをエクスポートする際に、そのオブジェクトのクラスが
     <link linkend="object.set-state">__set_state()</link> を実装しているかどうかは確認しません。
     一部の内部クラスを扱う際に、この影響が出てきます。
    </simpara>
    <simpara>
     エクスポートしたオブジェクトをインポートする際に、
     __set_state() を実装するクラスのものだけをインポートさせるようにするのは、プログラマーの責務となります。
    </simpara>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.magic.debuginfo">
   <title><link linkend="object.debuginfo">__debugInfo()</link></title>
   <methodsynopsis xml:id="object.debuginfo">
    <type>array</type><methodname>__debugInfo</methodname>
    <void/>
   </methodsynopsis>
   <para>
    このメソッドは、<function>var_dump</function> がオブジェクトをダンプするときに、
    プロパティの情報を取得するために呼ばれます。
    もしオブジェクトにこのメソッドが定義されていなければ、
    すべての public, protected, private プロパティを表示します。
   </para>
   <para>
    この機能は PHP 5.6.0 で追加されました。
   </para>
   <example>
    <title><link linkend="object.debuginfo">__debugInfo()</link> の使用法</title>
    <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
