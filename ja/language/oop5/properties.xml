<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351133 Maintainer: takagi Status: ready -->
<!-- CREDITS: mumumu -->

 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>プロパティ</title>

  <para>
   クラスのメンバ変数のことを <emphasis>プロパティ</emphasis> といいます。
   それ以外に <emphasis>属性</emphasis> や <emphasis>フィールド</emphasis> などという呼びかたを見たことがあるかもしれません。
   しかし、このマニュアルでは <emphasis>プロパティ</emphasis> と呼ぶことにします。
   プロパティを定義するには <literal>public</literal>、<literal>protected</literal>
   あるいは <literal>private</literal>
   のいずれかのキーワードのあとに、オプションの型宣言を続け、
   そして通常の変数の宣言を続けます。
   宣言時に初期値を設定することもできますが、初期値は定数値でなければなりません。
   つまり、コンパイル時に評価可能な値でなければならず、
   実行時の情報がないと評価できない値であってはいけないということです。
  </para>
  <para>
   <literal>public</literal>、<literal>protected</literal>
   そして <literal>private</literal> についての詳しい情報は
   <xref linkend="language.oop5.visibility" /> を参照ください。
  </para>
  <note>
   <para>
    PHP 4 との互換性を考慮して、PHP 5 でも <literal>var</literal>
    を使ったプロパティの宣言が可能です。これは
    <literal>public</literal> や <literal>protected</literal>、
    <literal>private</literal> と組み合わせて使うこともできます。
    しかし、もはや <literal>var</literal> は必須ではありません。
    PHP 5.0 から 5.1.3 までのバージョンでは、
    <literal>var</literal> の使用は非推奨とされており、
    <constant>E_STRICT</constant> 警告が発生していました。
    しかし PHP 5.1.3 以降は非推奨ではなくなり、警告も出なくなっています。
   </para>
   <para>
    <literal>public</literal> や <literal>protected</literal>、
    <literal>private</literal> のかわりに <literal>var</literal>
    を使ってプロパティを宣言した場合、PHP 5 はそれを
    <literal>public</literal> と同等とみなします。
   </para>
  </note>
  <para>
   クラスメソッドから静的でないプロパティにアクセスするには
   <literal>-&gt;</literal> (オブジェクト演算子) を使って
   <varname>$this-&gt;property</varname> のようにします
   (<literal>property</literal> のところにプロパティ名を指定します)。
   静的なプロパティへのアクセスには <literal>::</literal> (ダブルコロン)
   を使って <varname>self::$property</varname> のようにします。
   静的なプロパティとそうでないプロパティの違いについては、
   <link linkend="language.oop5.static">static キーワード</link> を参照ください。
  </para>
  <para>
   クラスメソッドがオブジェクトのコンテキストからコールされたときには、
   擬似変数 <varname>$this</varname> が常に使えます。
   <varname>$this</varname> は、呼び出し元のオブジェクト
   (通常はそのメソッドが属するオブジェクトですが、別のオブジェクトになる可能性もあります。
   別のオブジェクトのコンテキストから <link linkend="language.oop5.static">静的に</link>
   コールされた場合などです) への参照となります。
  </para>

  <para>
   <example>
    <title>プロパティの宣言</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // PHP 5.6.0 以降で使える方式
   public $var1 = 'hello ' . 'world';
   // PHP 5.3.0 以降で使える方式
   public $var2 = <<<EOD
hello world
EOD;
   // PHP 5.6.0 以降で使える方式
   public $var3 = 1+2;
   // 無効なプロパティ宣言
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // 有効なプロパティ宣言
   public $var6 = myConstant;
   public $var7 = array(true, false);

   // PHP 5.3.0 以降で使える方式
   public $var8 = <<<'EOD'
hello world
EOD;
}
?>
]]>
    </programlisting>   
   </example>
  </para>

  <note>
   <para>
    クラスやオブジェクトを操作するための便利な関数が用意されています。
    <link linkend="ref.classobj">クラス/オブジェクト関数</link>
    を参照ください。
   </para>
  </note>

  <sect2 xml:id="language.oop5.properties.heredoc-nowdoc">
   <title>ヒアドキュメント と Nowdoc</title>
   <para>
   PHP 5.3.0 以降、
   <link linkend="language.types.string.syntax.heredoc">ヒアドキュメント</link> や
   <link linkend="language.types.string.syntax.nowdoc">Nowdoc</link>
   は任意の静的データコンテキストで使えます。プロパティの宣言時にも使用可能です。
   <example>
    <title>Nowdoc を使ったプロパティの初期化</title>
     <programlisting role="php">
<![CDATA[
<?php
class foo {
   // PHP 5.3.0 以降
   public $bar = <<<'EOT'
bar
EOT;
   public $baz = <<<EOT
baz
EOT;
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Nowdoc とヒアドキュメントは PHP 5.3.0 以降で使用可能です。
    </para>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>型宣言</title>
  <para>
   PHP 7.4.0 以降は、プロパティの定義に型宣言を含めることができます。
   但し、<literal>callable</literal> 型を除きます。
   <example>
    <title>型付きプロパティの例</title>
    <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
    </screen>
   </example>
  </para>

  <para>
    型付きプロパティは、アクセスする前に初期化しなければいけません。
    初期化しないと、<classname>Error</classname> がスローされます。
    <example>
     <title>プロパティにアクセスする</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>

   <sect3 xml:id="language.oop5.properties.typed-properties.valid-types">
    <title>有効なプロパティの型</title>
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>型</entry>
        <entry>説明</entry>
        <entry>必要なPHPのバージョン</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><type>bool</type></entry>
        <entry>
         プロパティの値は <type>bool</type> 型でなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>int</type></entry>
        <entry>
         プロパティの値は <type>int</type> 型でなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>float</type></entry>
        <entry>
         プロパティの値は <type>float</type> (浮動小数点型の数値) 型でなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>string</type></entry>
        <entry>
         プロパティの値は <type>string</type> 型でなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><type>array</type></entry>
        <entry>
         プロパティの値は <type>array</type> 型でなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>object</literal></entry>
        <entry>
         プロパティの値は <type>object</type> 型でなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>iterable</literal></entry>
        <entry>
         プロパティの値は、<type>array</type> 型か、
         <interfacename>Traversable</interfacename> のインスタンスでなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>self</literal></entry>
        <entry>
         プロパティの値は、プロパティが定義されたクラスのインスタンスでなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry><literal>parent</literal></entry>
        <entry>
         プロパティの値は、プロパティが定義されたクラスの親クラスのインスタンスでなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry>Class/interface name</entry>
        <entry>
         プロパティの値は、指定したクラスまたはインターフェイスのインスタンスでなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
       <row>
        <entry>?type</entry>
        <entry>
         プロパティの値は、指定された型か、 &null; でなければなりません。
        </entry>
        <entry>PHP 7.4.0</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </sect3>
  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
