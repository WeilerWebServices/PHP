<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330340 Maintainer: takagi Status: ready -->
<!-- CREDITS: shimooka -->
<!-- State: experimental -->
 
<book xml:id="book.sdodasrel" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>SDO リレーショナルデータアクセスサービス</title>
 <titleabbrev>SDO-DAS-Relational</titleabbrev>
 
 <!-- {{{ preface -->
 <preface xml:id="intro.sdodasrel">
  &reftitle.intro;
  <para>
   <!-- This warns that the extension is experimental -->
    &warn.experimental;
  </para>
  <para>
   SDO でリレーショナルデータアクセスサービスを使用するには、
   SDO の元となっている概念を理解しておく必要があります。例えば
   データグラフ、データオブジェクト、切断された動作、変更履歴、
   XPath およびプロパティの表現方法などです。これらの考え方に
   なじみがない場合は、まず最初に
   <link linkend="ref.sdo">SDO の節</link> を参照したほうがよいでしょう。
   さらに、リレーショナル DAS では、バックエンドのデータベース固有の
   実装を意識せずに使用させるために PDO 拡張モジュールを使用しています。
   リレーショナル DAS を使用するには、PDO データベース接続を作成して
   渡す必要があります。そのため、
   <link linkend="intro.pdo">PDO の節</link> も参照したほうがよいでしょう。
  </para>

  <para>
   リレーショナル DAS の役割は、リレーショナルデータベースと
   アプリケーションの間でのデータのやり取りを行うことです。
   これを行うためには、データベースのエンティティ
   - テーブル、カラム、主キー、外部キー -
   および SDO モデルの要素
   - 型、プロパティ、包含関係など
   の対応関係をリレーショナル DAS が知っておく必要があります。
   リレーショナル DAS を作成する際に、これらの情報をメタデータとして
   指定します。
  </para>
     
  <procedure xml:id="overview">
   <title>操作の概要</title>
   <step>
    <para>
     まずはじめに リレーショナル DAS のコンストラクタをコールし、
     データベースと SDO モデルの関連付けを定義したメタデータを渡します。
     以下でいくつかの例を示します。
    </para>
   </step>

   <step>
    <para>
     次に行うことは、リレーショナル DAS の
     <function>executeQuery</function> メソッドをコールして
     実行する SQL 文を渡すか、あるいは
     <function>executePreparedQuery</function> メソッドをコールして
     プレースホルダつきのプリペアドステートメントと挿入する値のリストを
     渡すことでしょう。また、実行するクエリ自身についてのメタデータも
     指定する必要があります。DAS は、このメタデータによって
     データベースからどんなカラムがどんな順番で返ってくるのかを
     知ります。そのほか、PDO データベース接続も渡さなければなりません。
    </para>
         
    <para>
     <function>executeQuery</function> あるいは
     <function>executePreparedQuery</function> から返される値は、
     結果セットのすべてのデータを含む正規化されたデータグラフです。
     複数のテーブルから取得したデータを返すクエリの場合、このグラフには
     複数のデータオブジェクトが含まれ、それらは SDO の包含関係で
     連結されています。データの中には、SDO の (包含関係ではない)
     参照も含まれるかもしれません。
    </para>

    <para>
     クエリが実行されてデータグラフが作成された後は、リレーショナル
     DAS やデータベース接続のインスタンスは必要ありません。
     データベース上でロックを保持することはありません。
     リレーショナル DAS および PDO データベース接続は、それぞれ
     メモリから削除されます。
    </para>
   </step>
   <step>
    <para>
     データグラフの中のデータに変更が加えられることも大いにありえるでしょう。
     データグラフは PHP のセッション内にシリアライズすることが可能で、
     いちどきりのクライアント - サーバーのやり取りだけではなく複数に
     またがって使用できます。データオブジェクトを作成してグラフに
     追加する・グラフ内の既存のデータオブジェクトを削除する・
     グラフ内のデータオブジェクトを変更するなどが可能です。
    </para>
   </step>
   <step>
    <para>
     最後に、リレーショナル DAS の <function>applyChanges</function>
     メソッドを使用して、データグラフに対する変更内容をデータベースに
     書き戻します。そのためには、先ほどと同じメタデータを使用して
     リレーショナル DAS の新しいインスタンスを作成する必要があります。
     また、データベースへの接続も確立しなければなりません。
     接続およびデータグラフが、<function>applyChanges</function>
     に渡されます。ここで、リレーショナル DAS は変更の内容を吟味して
     INSERT、UPDATE および DELETE のうち適切な SQL 文を作成します。
     UPDATE および DELETE 文を実行するには、データベース内のデータが
     もとのままでなけれあｂなりません。そのため、もしデータベース内の
     データが変更されていた場合は、それが検出されます。ここでは
     そのような衝突は発生しなかったことにしましょう。これにより、
     変更内容がデータベースに適用されました。この後は、
     データグラフにさらに変更を加えて再度適用することもできますし、
     あるいはデータグラフを削除することもできます。
    </para>
   </step>
  </procedure>
  <para>
   別の方法でデータベース内のデータを扱うこともできます。
   例えば、事前に <function>executeQuery</function> をコールせずに、
   単にデータオブジェクトを作成してそれをデータベースに書き戻すことができるのです。
   この方法については、下の
   <link linkend="sdodasrel.examples">例</link>
   で説明します。
  </para>
 </preface>
 <!-- }}} -->
 
 &reference.sdodasrel.setup;
 &reference.sdodasrel.constants;
 &reference.sdodasrel.examples;
 &reference.sdodasrel.limitations;
 &reference.sdodasrel.reference;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

