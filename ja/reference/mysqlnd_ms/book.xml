<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334879 Maintainer: takagi Status: ready -->

<book xml:id="book.mysqlnd-ms" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Mysqlnd レプリケーションおよびロードバランシング用プラグイン</title>
 <titleabbrev>mysqlnd_ms</titleabbrev>

 <preface xml:id="intro.mysqlnd-ms">
  &reftitle.intro;
  <para>
   このプラグインは、MySQL のレプリケーション機能を <link linkend="book.mysqlnd">mysqlnd</link>
   を使うすべての PHP MySQL 拡張モジュールで容易に使えるようにします。
  </para>
  <para>
   PHP 5.3.3 以降で、PHP の MySQL Native Driver
   (<literal>mysqlnd</literal>) は C の内部プラグイン API を提供するようになりました。
   レプリケーションおよびロードバランシング用プラグインのように C でプラグインを書いて、
   <link linkend="book.mysqlnd">mysqlnd</link> の機能を拡張できるようになったのです。
  </para>
  <para>
   MySQL Native Driver は C のライブラリで、PHP 5.3.0
   以降で PHP に同梱されるようになりました。MySQL Client Library (libmysqlclient)
   の代替として機能します。mysqlnd を使う利点はいろいろあります。
   PHP に同梱されているので追加のダウンロードが不要であること、
   PHP ライセンスで公開されていること、メモリの消費量が抑えられること、
   そして非同期クエリなどの新たな機能が含まれていることなどです。
  </para>
  <para>
   <literal>mysqlnd_ms</literal> のような mysqlnd 用プラグインの機能の大部分は、
   ユーザーの視点からはプラグインの存在を意識せずに使えます。このプラグインはすべての
   PHP アプリケーションをサポートし、そしてすべての MySQL 用 PHP
   拡張モジュールに対応します。既存の API には何も手を加えません。
   そのため、既存の PHP アプリケーションにも容易に組み込めます。
  </para>
  <section xml:id="mysqlnd-ms.key-features">
   <title>主要な機能</title>
   <para>
   PECL/mysqlnd_ms の主要な機能をまとめます。
   </para>
   <para>
    <itemizedlist>
     <listitem>
      <para>
       透過的に組み込め、簡単に使える
      </para>
      <para>
       <itemizedlist>
        <listitem>
         <para>
          すべての MySQL 用 PHP 拡張モジュールに対応
         </para>
        </listitem>
        <listitem>
         <para>
          SSL のサポート
         </para>
        </listitem>
        <listitem>
         <para>
          一貫性のある <acronym>API</acronym>
         </para>
        </listitem>
        <listitem>
         <para>
          使う場面にもよるが、アプリケーション側の変更はほんの少しで済む (あるいは一切変更しなくてもかまわない)
         </para>
        </listitem>
        <listitem>
         <para>
          遅延接続: マスタやスレーブへの接続は、
          SQL 文を実行する時点までオープンされない
         </para>
        </listitem>
        <listitem>
         <para>
          オプション: ウェブからの最初の書き込みリクエストの後は、自動的にマスタを使うようにする。
          これにより、レプリケーションの遅延の影響を低く抑える。
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>

     <listitem>
      <para>
       MySQL クラスタリングソリューションとの併用
      </para>
      <para>
       <itemizedlist>
        <listitem>
         <para>
          MySQL Replication: 読み書きの分離はプラグインが行う。
          このプラグインが主に想定しているソリューションである。
         </para>
        </listitem>
        <listitem>
         <para>
          MySQL Cluster: 読み書きの分離は無効化できる。
          マルチマスタ構成に対応。
         </para>
        </listitem>
        <listitem>
         <para>
          サードパーティのソリューション: このプラグインは MySQL Replication
          用に最適化されているが、その他の MySQL クラスタリングソリューションとも併用可能。
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>

     <listitem>
      <para>
       読み込みと書き込みの分離機能
      </para>
      <para>
       <itemizedlist>
        <listitem>
         <para>
          SELECT の自動検出
         </para>
        </listitem>
        <listitem>
         <para>
          SQL ヒントを使った、自動処理の無効化
         </para>
        </listitem>
        <listitem>
         <para>
          ユーザー定義
         </para>
        </listitem>
        <listitem>
         <para>
          MySQL Cluster のような同期クラスタを使っている場合には無効化も可能
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>

     <listitem>
      <para>
       ロードバランシング機能
      </para>
      <para>
       <itemizedlist>
        <listitem>
         <para>
          ラウンドロビン: スレーブへのすべてのリクエストに対して、ラウンドロビン方式でスレーブを選択する
         </para>
        </listitem>
        <listitem>
         <para>
          ランダム: スレーブへのすべてのリクエストに対して、ランダムにスレーブを選択する
         </para>
        </listitem>
        <listitem>
         <para>
          ランダムワンス (sticky): 最初にひとつのスレーブをランダムで選び、ひとつのウェブリクエスト内でのすべてのスレーブへのリクエストを同じスレーブで実行する
         </para>
        </listitem>
        <listitem>
         <para>
          ユーザー定義: アプリケーション側で、mysqlnd_ms 用のコールバックを登録する
         </para>
        </listitem>
        <listitem>
         <para>
          PHP 5.4.0 以降では、トランザクション制御のためだけの API コールについてはトランザクションを考慮する
         </para>
        </listitem>
        <listitem>
         <para>
          重みつきロードバランシング:
          サーバーにさまざまな優先度を設定可能。高性能なマシンにより多くのリクエストを振り分けたり、
          近くにあるマシンを優先してレイテンシーを軽減させたりすることができる。
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>

     <listitem>
      <para>
       グローバルトランザクション ID
      </para>
      <para>
       <itemizedlist>
        <listitem>
         <para>
          クライアント側でのエミュレート: MySQL Replication のような非同期クラスタにおける、
          手動でのマスタサーバーのフェイルオーバーそしてスレーブからの昇格を容易にする
         </para>
        </listitem>
        <listitem>
         <para>
          組み込みのグローバルトランザクション ID 機能をサポートする。
          MySQL 5.6.5 以降で導入された機能。
         </para>
        </listitem>
        <listitem>
         <para>
          セッション整合性を要求される読み込みでの、
          トランザクション ID を使った最新の非同期スレーブの識別に対応。
          マニュアルに書かれている制約に注意すること。
         </para>
        </listitem>
        <listitem>
         <para>
          スロットリング: オプションで、スレーブの処理を待って「同期」
          してから処理を続行させることもできる
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>

     <listitem>
      <para>
       サービスおよび整合性レベル
      </para>
      <para>
       <itemizedlist>
        <listitem>
         <para>
          アプリケーション側からは、接続に対して
          結果整合性・セッション整合性・強整合性
          のいずれかのサービスレベルを要求できます。
          それにあわせて、適切なクラスタノードを自動的に検索します。
         </para>
        </listitem>
        <listitem>
         <para>
          結果整合性レベルの MySQL Replication スレーブへのアクセスを、
          高速なローカルキャッシュアクセスに置き換えることができます。
          透過的なアクセスで、サーバーの負荷を軽減します。
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>

     <listitem>
      <para>
       パーティショニングおよびシャーディング
      </para>
      <para>
       <itemizedlist>
        <listitem>
         <para>
          レプリケーションクラスタのサーバーをグループで管理できます。
          SQL ヒントを使うと、クエリを特定のグループに向けるようにできます。
          グループを使うと、データのパーティショニング (シャーディング) ができるようになります。
          また、更新時のホットスポット問題にも対応できます。
         </para>
        </listitem>
        <listitem>
         <para>
          MySQL Replication フィルターは、テーブルフィルターを使ってサポートしています。
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>

      <listitem>
      <para>
       MySQL Fabric
      </para>
      <para>
       <itemizedlist>
        <listitem>
         <para>
          MySQL Fabric を
          <link linkend="mysqlnd-ms.quickstart.mysql_fabric">実験的にサポート</link>
          するようになりました。
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </itemizedlist>
   </para>
  </section>

  <section xml:id="mysqlnd-ms.limitations">
   <title>制限</title>
   <para>
    読み込み/書き込みの分離の仕組みとして組み込まれている機能は、非常に基本的なものです。
    <literal>SELECT</literal> で始まるクエリは読み込みリクエストとみなして
    MySQL のスレーブサーバーに送り、それ以外のすべてのクエリは
    (<literal>SHOW</literal> ステートメントなども含めて)
    書き込みリクエストとみなして MySQL マスタサーバーに送ります。
    この組み込みの挙動を上書きするために、
    <link linkend="mysqlnd-ms.constants">SQL ヒント</link> やユーザー定義の
    <link linkend="ini.mysqlnd-ms-plugin-config-v2.filter-user">コールバック関数</link>
    を使えます。
   </para>
   <para>
    読み込み/書き込みの分離機能は、複数ステートメントの場合を考慮しません。
    複数のステートメントも単一のステートメントとみなします。
    そして、その先頭の文字を見て、どこで実行させるのかを判断します。たとえば
    <function>mysqli_multi_query</function> を使って
    <literal>SELECT id FROM test ; INSERT INTO test(id) VALUES (1)</literal>
    を実行したとすると、この処理はスレーブサーバーに送られます。先頭が
    <literal>SELECT</literal> で始まるからです。後半には
    <literal>INSERT</literal> ステートメントも含まれていますが、
    これもそのままスレーブサーバー上で実行されます。
   </para>
   <note>
    <para>
     アプリケーション側では、ロードバランシングのための接続の切り替えが発生することを想定しなければなりません。
     マニュアルの
     <link linkend="mysqlnd-ms.pooling">接続プーリングと切り替え</link>、
     <link linkend="mysqlnd-ms.transaction">トランザクションの処理</link>、
     <link linkend="mysqlnd-ms.failover">フェイルオーバー</link>、
     <link linkend="mysqlnd-ms.loadbalancing">ロードバランシング</link>&listendand;
     <link linkend="mysqlnd-ms.rwsplit">読み込み/書き込みの分離</link>
     を確認しましょう。
    </para>
   </note>
  </section>

  <section xml:id="mysqlnd-ms.name">
   <title>名前の由来</title>
   <para>
    <literal>mysqlnd_ms</literal>
    は <literal>mysqlnd master slave plugin</literal> の略です。
    概念実証のためのコードをざっと書きあげるときに、この名前を選びました。
    当時は、まさかそのコードを使い続けることになるとは思わなかったのです。
   </para>
  </section>
 </preface>

 &reference.mysqlnd-ms.quickstart;
 &reference.mysqlnd-ms.concepts;
 &reference.mysqlnd-ms.setup;
 &reference.mysqlnd-ms.constants;
 &reference.mysqlnd-ms.reference;
 &reference.mysqlnd-ms.changes;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
