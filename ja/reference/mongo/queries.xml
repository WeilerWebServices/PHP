<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 347749 Maintainer: takagi Status: ready -->
<chapter xml:id="mongo.queries" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>問い合わせ</title>

 <simplesect xml:id="mongo.queries.secondaries">
  <title>問い合わせのセカンダリへの分散</title>

  <para>
   すべての問い合わせ (読み書き両方) は、デフォルトではレプリカセットのプライマリメンバーにだけ送られます。
   しかし、<link linkend="mongo.readpreferences">優先読み込み</link>
   を使えばこれは簡単に変更できます。全般的な優先読み込み設定
   (たとえばセカンダリからの読み込みは一番近いサーバーを選ぶなど)
   もできるし、特定の国やデータセンターあるいはハードウェア上にある特定のサーバーを指定することもできます。
   そのときには
   <link linkend="mongo.readpreferences.tagsets">レプリカセットのタグセット</link>
   を使います。
  </para>
  <para>
   優先読み込みの設定は、ドライバのあらゆるレベルでできます。
   <simplelist>
    <member>問い合わせのパラメータ、あるいは <methodname>MongoClient::__construct</methodname> のオプションで指定する</member>
    <member><methodname>MongoClient::setReadPreference</methodname> を呼ぶ</member>
    <member>データベースレベルなら <methodname>MongoDB::setReadPreference</methodname> を呼ぶ</member>
    <member>コレクションレベルなら <methodname>MongoCollection::setReadPreference</methodname> を呼ぶ</member>
    <member>カーソルレベルなら <methodname>MongoCursor::setReadPreference</methodname> あるいは <methodname>MongoCommandCursor::setReadPreference</methodname> を呼ぶ</member>
   </simplelist>
   「親」コンテキストで指定した優先読み込み設定を継承します。
  </para>
  <example xml:id="mongo.queries.secondaries.inheritence-example">
   <title>データベースレベルからカーソルへの優先読み込みの継承</title>
   <programlisting role="php">
<![CDATA[
<?php
$db->setReadPreference(MongoClient::RP_SECONDARY_PREFERRED);
$c = $db->myCollection;

$cursor = $c->find();
?>
]]>
   </programlisting>
  </example>
  <para>
   この例のようにすると、問い合わせはセカンダリに対して実行されます
   (コレクションはデータベースから <constant>MongoClient::RP_SECONDARY_PREFERRED</constant>
   を引き継ぎ、カーソルがコレクションからそれを引き継ぎます)。
  </para>
 </simplesect>

  <simplesect xml:id="mongo.queries.choosing.secondary">
   <title>セカンダリはどのように選ばれるか</title>

   <para>
    各 <classname>MongoClient</classname> インスタンスは、
    利用可能なセカンダリの中から、ping の所要時間が最も短いものを自分のセカンダリとして選択します。
    つまり、PHP クライアントがヨーロッパとオーストラリアにあって
    それぞれのデータセンターにひとつずつセカンダリがあるとすると、
    このようにすることができます。
   </para>
   <example xml:id="mongo.queries.choosing.secondary-example">
    <programlisting role="php">
<![CDATA[
<?php
$options = array("replicaSet" => "setName", "readPreference" => MongoClient::RP_SECONDARY_PREFERRED);

// オーストラリアのクライアント
$m = new MongoClient("mongodb://primary,australianhost.secondary,europeanhost.secondary", $options);
$cursor = $m->foo->bar->find();
$cursor->getNext();
echo "Reading from: ", $cursor->info()["server"], "\n";

// ヨーロッパのクライアント
$m = new MongoClient("mongodb://primary,australianhost.secondary,europeanhost.secondary", $options);
$cursor = $m->foo->bar->find();
$cursor->getNext();
echo "Reading from: ", $cursor->info()["server"], "\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Reading from: australianHost
Reading from: europeanHost
]]>
    </screen>
    <para>
     クエリを実行してからでないとセカンダリの選択が行われないことに注意しましょう。
     セカンダリの選択は、必要になった時点でドライバが行います。
    </para>
   </example>

   <para>
    セットのメンバーの現在の状態がどうなっているかを知るには、
    <function>MongoClient::getHosts</function> あるいは
    <methodname>MongoClient::getConnections</methodname> を実行します。
   </para>

   <para>
    読み込み可能な非プライマリサーバーがない場合は、
    ドライバはプライマリから読み込みを行います。
    <constant>MongoClient::RP_SECONDARY_PREFERRED</constant>
    を指定した場合は、セカンダリが使えない場合の代替策としてプライマリでクエリを実行するからです。
    あるサーバーが読み込み可能であると判定される条件は、その state が
    2 (SECONDARY) かつ health が 1 であることです。
    これらをチェックするには
    <methodname>MongoClient::getHosts</methodname> および
    <methodname>MongoClient::getConnections</methodname>
    を使います。
   </para>

  </simplesect>
  <simplesect xml:id="mongo.queries.notes">
   <title>その他の注意</title>

   <para>
    書き込みは常にプライマリに送られます。そして、
    デフォルトではすべての読み込みもプライマリに送られます。
   </para>
<!--
   <para>
    The following database commands can be sent to secondaries when using the
    apropriate Read Preference:
    <simplelist>
     <member><methodname>MongoCollection::group</methodname></member>
     <member><methodname>MongoCollection::aggregate</methodname></member>
     <member><methodname>MongoCollection::distinct</methodname></member>
     <member><methodname>MongoCursor::count</methodname></member>
     <member>collStats</member>
     <member>dbStats</member>
     <member>geoNear</member>
     <member>geoSearch</member>
     <member>geoWalk</member>
     <member>inline mapreduce</member>
    </simplelist>
    All other commands are always sent to the primary.
   </para>
-->
  </simplesect>

 <simplesect xml:id="mongo.queries.querying">
  <title>_id による問い合わせ</title>
  <para>
   追加されたすべてのオブジェクトには、一意な <literal>_id</literal> フィールドが自動的に付加されます。
   これは、問い合わせで使うフィールドとして便利です。
   これは "get last insert ID" と同じような働きをしますが、
   <literal>_id</literal> は <emphasis>クライアント</emphasis> が選ぶものであるという点が違います。
  </para>
  <para>
   今追加したばかりのドキュメントを探すことを考えてみましょう。
   追加するとドキュメントに <literal>_id</literal> フィールドができるので、それを問い合わせればいいのです。

   <example xml:id="mongo.queries.querying-example">
    <programlisting role="php">
<![CDATA[
<?php
$person = array("name" => "joe");

$people->insert($person);

// $joe には _id フィールドがあります
$joe = $people->findOne(array("_id" => $person['_id']));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   ユーザーが別途指定しない限り、<literal>_id</literal> フィールドは
   <classname>MongoId</classname> となります。ありがちな間違いは、
   文字列を <classname>MongoId</classname> とマッチさせようとすることです。
   文字列とは別の型であり、そのままではマッチしないことを覚えておきましょう。
   これは、文字列 "array()" と空の配列が別のものであるというのと同じことです。
   次の例を参照ください。

   <example xml:id="mongo.queries.querying.wrong">
    <programlisting role="php">
<![CDATA[
<?php
$person = array("name" => "joe");

$people->insert($person);

// _id を文字列に変換します
$pid = $person['_id'] . "";

// 失敗 - $pid は文字列であり、MongoId ではありません
$joe = $people->findOne(array("_id" => $pid));
?>
]]>
    </programlisting>
   </example>
  </para>
 </simplesect>

 <simplesect xml:id="mongo.queries.arrays">
  <title>配列</title>

  <para>
   配列には特殊な点がいくつかあります。
   まず、MongoDB が扱う配列には二種類あります。
   "普通の" 配列と連想配列です。連想配列には、任意の型のキーと値を組み合わせることができます。
   "普通の" 配列は、0 から始まってひとつずつ増えていく数値のインデックスに
   それぞれ要素を関連づけます。
   これらは、ほぼ PHP の配列や連想配列と同じようなものです。
  </para>

  <para>
   たとえば、受賞の一覧をドキュメントに保存するときには次のようにできます。
  </para>

  <example xml:id="mongo.queries.arrays-example">
   <programlisting role="php">
<![CDATA[
<?php

$collection->save(array("awards" => array("gold", "silver", "bronze")));

?>
]]>
   </programlisting>
  </example>

  <para>
   問い合わせでは、配列の要素も探すことができます。
   指定した値が配列の要素に含まれるすべてのドキュメントを探すことを考えましょう。
   たとえば、受賞 (awards) に金賞 (gold) が含まれる次のようなドキュメントです。
  </para>

  <screen>
<![CDATA[
{ "_id" : ObjectId("4b06c282edb87a281e09dad9"), "awards" : ["gold", "silver", "bronze"]}
]]>
  </screen>

  <para>
   これは、単純なクエリで問い合わせることができます。"awards"
   が配列であるということを気にせず、次のようにすればいいのです。
  </para>

   <example xml:id="mongo.queries.arrays-example-2">
    <programlisting role="php">
<![CDATA[
<?php

  $cursor = $collection->find(array("awards" => "gold"));

?>
]]>
   </programlisting>
  </example>

  <para>
   もう少し複雑なオブジェクトを考えてみましょう。
   配列の各要素のオブジェクトになっている、次のような例だとどうでしょう。
  </para>

  <screen>
<![CDATA[
{
     "_id" : ObjectId("4b06c282edb87a281e09dad9"),
     "awards" :
     [
        {
            "first place" : "gold"
        },
        {
            "second place" : "silver"
        },
        {
            "third place" :  "bronze"
        }
     ]
}
]]>
  </screen>

  <para>
   このような場合でも、配列であることを特別視する必要はありません。
   内部のオブジェクトへの問い合わせには、ドット記法が使えます。
  </para>

   <example xml:id="mongo.queries.querying-arrays-nested">
    <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find(array("awards.first place" => "gold"));

?>
]]>
   </programlisting>
  </example>

  <para>
   フィールド名にスペースが含まれていてもかまわないことに注目しましょう
   (スペースを使わないにこしたことはありませんが、可読性を考慮しました)。
  </para>

  <para>
   配列を使って、取り得る値を複数指定した問い合わせを行うこともできます。
   "gold" あるいは "copper" を含むドキュメントを探すには、このようにします。
  </para>

  <example xml:id="mongo.queries.querying-arrays-in">
   <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find(array("awards" => array('$in' => array("gold", "copper"))));

?>
]]>
   </programlisting>
  </example>
 </simplesect>

 <simplesect role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
<!--
     <row>
      <entry>1.3.1</entry>
      <entry>
       Several database commands can now be executed on secondaries.
      </entry>
     </row>
-->
     <row>
      <entry>1.3.0</entry>
      <entry>
       <link linkend="mongo.readpreferences">優先読み込み</link>
       の仕組みが導入され、セカンダリからの読み込みに関してよりきめ細やかな制御ができるようになりました。
      </entry>
     </row>
     <row>
      <entry>1.3.0</entry>
      <entry>
       <literal>slaveOkay</literal> が非推奨になりました。かわりに <link
       linkend="mongo.readpreferences">優先読み込み</link> を使いましょう。
      </entry>
     </row>
     <row>
      <entry>1.1.0</entry>
      <entry>
       読み込みをレプリカセットのセカンダリに振り向ける仕組みとして
       <methodname>Mongo::setSlaveOkay</methodname> が導入されました。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </simplesect>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
