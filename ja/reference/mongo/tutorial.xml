<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338152 Maintainer: takagi Status: ready -->

<chapter xml:id="mongo.tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>チュートリアル</title>
 <warning>
  &mongo.deprecated.note;
 </warning>
 <para>
  これは、公式の MongoDB 用 PHP ドライバです。
 </para>
 <para>
  簡単なコード例をもとに、MongoDB への接続やドキュメントの追加、
  ドキュメントの問い合わせ、問い合わせ結果の反復処理、
  そして接続の切断の方法を示します。
  各ステップの詳細については後に続くチュートリアルを参照ください。
 </para>
 <example xml:id="mongo.tutorial.basics">
  <programlisting role="php">
<![CDATA[
<?php

// 接続
$m = new MongoClient();

// データベースの選択
$db = $m->comedy;

// コレクション (リレーショナルデータベースのテーブルみたいなもの) の選択
$collection = $db->cartoons;

// レコードの追加
$document = array( "title" => "Calvin and Hobbes", "author" => "Bill Watterson" );
$collection->insert($document);

// 構造が異なる別のレコードの追加
$document = array( "title" => "XKCD", "online" => true );
$collection->insert($document);

// コレクション内の全件の検索
$cursor = $collection->find();

// 結果の反復処理
foreach ($cursor as $document) {
    echo $document["title"] . "\n";
}

?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
Calvin and Hobbes
XKCD
]]>
  </screen>
 </example>


 <section xml:id="mongo.tutorial.connecting">
  <title>接続の作成</title>
  <para>
   データベースサーバーに接続するには、次のいずれかの方法を使います。
  </para>

  <example xml:id="mongo.tutorial.connecting-example">
   <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient(); // localhost:27017 に接続します
$connection = new MongoClient( "mongodb://example.com" ); // リモートホスト (デフォルトのポート: 27017) に接続します
$connection = new MongoClient( "mongodb://example.com:65432" ); // リモートホストの指定したポートに接続します
?>
]]>
   </programlisting>
  </example>
  <para>
   明示的にデータベースとの接続を切断する必要はありません。
   ドライバは持続的接続を利用し、確立済みの接続を再利用します。
  </para>
  <section xml:id="mongo.tutorial.connecting.seealso">
   <title>参考</title>
   <para>
    <link linkend="mongo.connecting">接続</link>のページで、
    さまざまな形式の接続を扱っています。
   </para>
   <para>
    <classname>MongoClient</classname> クラスや
    <function>MongoClient::__construct</function> の API ドキュメントには、
    利用可能なすべてのオプションや多くのサンプルがあります。
   </para>
  </section>
 </section>

  <section xml:id="mongo.tutorial.selectdb">
   <title>データベースの取得</title>
   <para>
    データベースを選択するには次のようにします。
   </para>
   <example xml:id="mongo.tutorial.selectdb-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$db = $connection->dbname;
?>
]]>
    </programlisting>
   </example>
   <para>
    データベースを事前に作っておく必要はありません。
    存在しないデータベースを選択すれば、新しいデータベースを作ることができます。
   </para>
   <para>
    Typo には注意しましょう! 意図せずに新しいデータベースを作ってしまい、
    エラーで悩まされる原因になります (この例では、二番目の選択のところで
    <literal>name</literal> を
    <literal>anme</literal> と書き間違えています)。

    <example xml:id="mongo.tutorial.selectdb.typo">
     <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();

$db = $connection->mybiglongdbname;
// 何かをします

$db = $connection->mybiglongdbanme;
// これは別のデータベースに接続してしまいます!
?>
]]>
     </programlisting>
    </example>
   </para>
   <section xml:id="mongo.tutorial.selectdb.seealso">
    <title>参考</title>
    <para>
     <classname>MongoDB</classname> クラスの API ドキュメントに、
     データベースオブジェクトに関する詳細な情報があります。
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.collection">
   <title>コレクションの取得</title>
   <para>
    コレクションの取得は、データベースの取得と同じ構文で行えます。
   </para>
   <example xml:id="mongo.tutorial.collection-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$db = $connection->baz;

// コレクションの選択
$collection = $db->foobar;

// あるいは、データベースとコレクションを直接選択
$collection = $connection->baz->foobar;
?>
]]>
    </programlisting>
   </example>
   <para>
    リレーショナルデータベースになじみのある人にとっては、
    コレクションとはテーブルに似たものだと考えればわかりやすいでしょう。
   </para>
   <section xml:id="mongo.tutorial.collection.seealso">
    <title>参考</title>
    <para>
     <classname>MongoCollection</classname> クラスの API ドキュメントに、
     コレクションオブジェクトに関する詳細な情報があります。
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.insert">
   <title>ドキュメントの追加</title>
   <para>
    連想配列は、データベース内のコレクションに保存できる基本的なオブジェクトです。
    何らかの "ドキュメント" はこのような形式になります。
   </para>
   <example xml:id="mongo.tutorial.insert-data-example">
    <programlisting role="php">
<![CDATA[
<?php
$doc = array(
    "name" => "MongoDB",
    "type" => "database",
    "count" => 1,
    "info" => (object)array( "x" => 203, "y" => 102),
    "versions" => array("0.9.7", "0.9.8", "0.9.9")
);
?>
]]>
    </programlisting>
   </example>
   <para>
    配列やオブジェクトをネストできることに注目しましょう。
    ドライバは、連想配列を常にオブジェクトとしてデータベースに格納します。
    数値添字の配列は、もし配列のキーは 0 から始まる連番の場合は配列として格納します。
    0 から始まらない場合や途中に添字の抜けがある場合 (<literal>0, 1, 4, 5</literal> など)
    は、オブジェクトとして格納します。
   </para>
   <para>
    ドキュメントを追加するには <function>MongoCollection::insert</function> を使います。
   </para>
   <example xml:id="mongo.tutorial.insert-example-2">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$collection->insert( $doc );
?>
]]>
    </programlisting>
   </example>
   <section xml:id="mongo.tutorial.insert.seealso">
    <title>参考</title>
    <para>
     <function>MongoCollection::insert</function> の API ドキュメントに、
     データの追加に関する詳細な情報があります。
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.findone">
   <title>
    <function>MongoCollection::findOne</function> によるドキュメントの検索
   </title>
   <para>
    先ほどの例で追加したドキュメントを表示するには、
    シンプルに <function>MongoCollection::findOne</function>
    を実行してコレクションからドキュメントをひとつ取得します。
    このメソッドは、クエリにマッチするドキュメントがひとつだけしかないときや
    一件の結果にだけしか興味がない場合に便利です。
   </para>
   <example xml:id="mongo.tutorial.findone-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$document = $collection->findOne();
var_dump( $document );
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(6) {
  ["_id"]=>
  object(MongoId)#8 (1) {
    ["$id"]=>
    string(24) "4e2995576803fab768000000"
  }
  ["name"]=>
  string(7) "MongoDB"
  ["type"]=>
  string(8) "database"
  ["count"]=>
  int(1)
  ["info"]=>
  array(2) {
    ["x"]=>
    int(203)
    ["y"]=>
    int(102)
  }
  ["versions"]=>
  array(3) {
    [0]=>
    string(5) "0.9.7"
    [1]=>
    string(5) "0.9.8"
    [2]=>
    string(5) "0.9.9"
  }
}
]]>
    </screen>
   </example>
   <para>
    <literal>_id</literal> フィールドが
    自動的にドキュメントに追加されていることに注目しましょう。
    <literal>_id</literal> は、いわゆる「主キー」フィールドです。
    ドキュメントにキーがなければ、ドライバが自動的に追加します。
   </para>
   <para>
    自前で <literal>_id</literal> フィールドを指定する場合は、
    コレクション内で一意になるようにしなければなりません。
    例をごらんください。
   </para>
   <example xml:id="mongo.tutorial.findone-example-2">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$db = $connection->database;

$db->foo->insert(array("_id" => 1));
// これは例外が発生します
$db->foo->insert(array("_id" => 1));

// こちらは別のコレクションなので大丈夫です
$db->bar->insert(array("_id" => 1));
?>
]]>
    </programlisting>
   </example>
   <para>
    ドライバはデフォルトで、サーバーが書き込みを受け付けてから結果を返すことを保証します。
    オプションでこの挙動をオフにすることもできます。その場合は、
    <literal>array("w" => 0)</literal> を二番目の引数で渡します。
    これは、データベース側での書き込み完了をドライバに待たせないことを意味します。
    つまり、<literal>_id</literal> が重複していてもドライバは例外をスローしません。
   </para>
   <section xml:id="mongo.tutorial.findone.seealso">
    <title>参考</title>
    <para>
     <function>MongoCollection::findOne</function> に、
     データの検索に関する詳細な情報があります。
    </para>
    <para>
     <classname>MongoId</classname> には、一意な ID に関する詳細な説明があります。
    </para>
    <para>
     <link linkend="mongo.writes">書き込み</link>のページでは、
     安全な書き込みについてより詳しく扱っています。
     また <xref linkend="mongo.writeconcerns" />
     では、さまざまな Write Concern オプションについて解説します。
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.insert.multiple">
   <title>複数のドキュメントの追加</title>
   <para>
    もう少し意味のある問い合わせをするために、複数のシンプルなドキュメントをコレクションに追加しましょう。
    ドキュメントは
    <literal>array( "i" => <replaceable>value</replaceable> );</literal>
    形式で、これをループ内で処理します。
   </para>
   <example xml:id="mongo.tutorial.insert.multiple-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

for ( $i = 0; $i < 100; $i++ )
{
    $collection->insert( array( 'i' => $i, "field{$i}" => $i * 2 ) );
}
?>
]]>
    </programlisting>
   </example>

   <para>
    先ほどと同じコレクションに、別のキーを持つ配列を追加していることに注目しましょう。
    MongoDB が「スキーマフリー」であると言われるのは、こういう側面があるからです。
    上の例では、どのドキュメントにも
    <literal>i</literal> フィールドが存在します。ただそれだけではなく、
    <literal>field</literal> + <literal>$i</literal> という名前のフィールドもあります。
   </para>
  </section>

  <section xml:id="mongo.tutorial.counting">
   <title>コレクション内のドキュメント数</title>
   <para>
    これで 101 件のドキュメントを追加したことになります
    (先ほどのループで 100 件、そして最初の 1 件)。
    本当にそうなっているか、<function>MongoCollection::count</function> メソッドで確認してみましょう。
    <example xml:id="mongo.tutorial.counting-example">
     <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

echo $collection->count();
?>
]]>
     </programlisting>
    </example>
    結果は 101 と表示されます。
   </para>
  </section>

  <section xml:id="mongo.tutorial.cursor">
   <title>カーソルを使った全ドキュメントの取得</title>
   <para>
    コレクション内のすべてのドキュメントを取得するには
    <function>MongoCollection::find</function> を使います。
    find() メソッドは <classname>MongoCursor</classname> オブジェクトを返し、
    これを使うとクエリにマッチしたドキュメントすべてに対する反復処理ができるようになります。
    では、すべてのドキュメントを取得して表示させてみましょう。

    <example xml:id="mongo.tutorial.cursor-example">
     <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$cursor = $collection->find();
foreach ( $cursor as $id => $value )
{
    echo "$id: ";
    var_dump( $value );
}
?>
]]>
     </programlisting>
    </example>

    これは、コレクション内の全 101 ドキュメントを表示します。
    <literal>$id</literal> はドキュメントの <literal>_id</literal> フィールドで、
    <literal>$value</literal> はドキュメントそのものです。
   </para>
   <section xml:id="mongo.tutorial.cursor.seealso">
    <title>参考</title>
    <para>
     <function>MongoCollection::find</function> の API ドキュメントに、
     データの検索に関する詳細な情報があります。
    </para>
   </section>
  </section>

  <section xml:id="mongo.tutorial.criteria">
   <title>問い合わせの条件の設定</title>
   <para>
    クエリを作って <function>MongoCollection::find</function> メソッドに渡せば、
    コレクション内のドキュメントのサブセットを取得することができます。
    たとえば、<literal>"i"</literal> フィールドの値が <literal>71</literal> であるドキュメントを探したいときは、
    このようにします。
   </para>
   <example xml:id="mongo.tutorial.criteria-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$query = array( 'i' => 71 );
$cursor = $collection->find( $query );

while ( $cursor->hasNext() )
{
    var_dump( $cursor->getNext() );
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(2) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["i"]=>
  int(71)
  ["_ns"]=>
  "testCollection"
}
]]>
    </screen>
   </example>
  </section>

  <section xml:id="mongo.tutorial.multi.query">
   <title>クエリによる複数ドキュメントの取得</title>
   <para>
    クエリを使って、コレクションからドキュメントのセットを取得することができます。
    たとえば、<literal>"i"</literal> &gt; <literal>50</literal>
    であるすべてのドキュメントを取得したい場合は次のようにします。
   </para>
   <example xml:id="mongo.tutorial.multi.query-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$query = array( "i" => array( '$gt' => 50 ) ); // '$gt' と、シングルクォートで囲んでいることに注意しましょう
$cursor = $collection->find( $query );

while ( $cursor->hasNext() )
{
    var_dump( $cursor->getNext() );
}
?>
]]>
    </programlisting>
    <para>
     これは、<literal>"i"</literal> &gt; <literal>50</literal>
     であるドキュメントをすべて表示します。また、
     <literal>20 &lt; i &lt;= 30</literal> のような範囲を指定することもできます。
    </para>
    <screen>
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$query = array( 'i' => array( '$gt' => 20, "\$lte" => 30 ) );
$cursor = $collection->find( $query );

while ( $cursor->hasNext() )
{
    var_dump( $cursor->getNext() );
}
?>
]]>
    </screen>
   </example>
   <para>
    常に $ 記号をエスケープするか、あるいはシングルクォートを使うことを覚えておきましょう。
    そうしないと、PHP はこれを変数 <varname>$gt</varname> と解釈してしまいます。
   </para>
  </section>

  <section xml:id="mongo.tutorial.indexes">
   <title>インデックスの作成</title>
   <para>
    MongoDB はインデックスをサポートしています。コレクションにインデックスを追加するのは簡単です。
    インデックスを作るには、対象となるフィールドと並び順を指定します。
    並び順は、昇順 (1) あるいは降順 (-1) のいずれかです。
    この例では、"i" フィールドの昇順でインデックスを作成しています。
   </para>
   <example xml:id="mongo.tutorial.indexes-example">
    <programlisting role="php">
<![CDATA[
<?php
$connection = new MongoClient();
$collection = $connection->database->collectionName;

$collection->ensureIndex( array( "i" => 1 ) );  // "i" にインデックスを作ります
$collection->ensureIndex( array( "i" => -1, "j" => 1 ) );  // "i" の降順、"j" の昇順でインデックスを作ります
?>
]]>
    </programlisting>
   </example>
   <para>
    データが増えても読み込みのパフォーマンスを維持するためには、インデックスが不可欠です。
    インデックスについてよくわからない場合は、<function>MongoCollection::ensureIndex</function>
    のドキュメントと、本家の
    <link xlink:href="&url.mongodb.dochub.indexes;">インデックスに関するドキュメント</link>
    を参照ください。
   </para>
  </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
