<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 333173 Maintainer: takagi Status: ready -->

<chapter xml:id="mongo.readpreferences" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>優先読み込み</title>
 <para>
  MongoDB 2.2 およびドライバのバージョン 1.3.0 以降では
  <link xlink:href="&url.mongodb.docs.readpreferences;">優先読み込み</link>
  をサポートします。これを使えば、レプリカセット環境内でクエリを
  mongod インスタンスに振り分ける方法を制御できます。
  優先読み込みは接続ごとに指定することもできるし、
  データベース単位やコレクション単位でも指定できます。
  上位で設定された優先順位がデフォルトで引き継がれます
  (たとえば、<classname>MongoCollection</classname>
  の優先読み込み設定は、それに対応する
  <classname>MongoDB</classname> インスタンスでの定義を引き継ぎます)。
 </para>
 <para>
  優先読み込みの指定は、モードとタグセットの組み合わせで行います。
  mongod インスタンスの優先順位をどのように決めるのかを指定するのがモードで、
  ふさわしい mongod インスタンスの条件を指定するのが
  <link xlink:href="&url.mongodb.docs.tagsets;">タグセット</link> です。
  mongod のインスタンスがそれにふさわしいと認められるのは、直近の mongod インスタンスからの ping 時間が 15ms 以内に収まるときだけです。
 </para>
 <simplesect xml:id="mongo.readpreferences.modes">
  <title>優先読み込みのモード</title>
  <warning>
   <para>
    <literal>MongoClient::RP_PRIMARY</literal> 以外のすべての優先読み込みモードは、
    古いデータを返す可能性があります。
    セカンダリがプライマリの操作を受け取るにはある程度時間がかかるからです。
    <literal>MongoClient::RP_PRIMARY</literal> 以外のモードを選ぶ場合は、
    最新のデータではなくてもアプリケーションがうまく動くように作っておかないといけません。
   </para>
  </warning>
  <itemizedlist>
   <listitem>
    <para>
     <literal>MongoClient::RP_PRIMARY</literal>
    </para>
    <para>
     すべての読み込み操作で、現在のレプリカセットのプライマリだけを使います。
     これがデフォルト設定です。プライマリが使えないときは、読み込み操作で例外が発生します。
    </para>
    <para>
     このモードを選ぶとタグセットは使えません。
     <literal>MongoClient::RP_PRIMARY</literal>
     のときにタグセットを指定すると、例外が発生します。
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_PRIMARY_PREFERRED</literal>
    </para>
    <para>
     大半の場合は、読み込み操作をレプリカセットのプライマリから行います。
     しかし、もしプライマリが使えない場合 (たとえばフェイルオーバー中の場合など)
     は、セカンダリのメンバーから読み込みます。
    </para>
    <para>
     優先読み込みにタグセットが含まれる場合、
     クライアントはまずはプライマリから読み込みます。
     そして、指定したタグにマッチするセカンダリから読み込みます。
     タグにマッチするセカンダリがない場合は、読み込み操作で例外が発生します。
    </para>
    <warning>
     <para>
      mongos のバージョン 2.2 で、優先読み込みを完全にサポートするようになりました。
      それより古いバージョンの mongos インスタンスに接続するときは、
      <literal>MongoClient::RP_PRIMARY_PREFERRED</literal>
      はクエリをセカンダリに送信します。
     </para>
    </warning>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_SECONDARY</literal>
    </para>
    <para>
     読み込み操作で、レプリカセットのセカンダリだけを使います。
     もし使えるセカンダリがない場合は、読み込み操作で例外が発生します。
    </para>
    <para>
     ほとんどのレプリカセットには少なくとも一つのセカンダリがありますが、
     場合によっては、使えるセカンダリが一つもないこともあります。
     たとえばプライマリとセカンダリがそれぞれ一つずつで、
     どちらかがリカバリ状態や使えない場合のセカンダリをアービターが持っていない場合です。
    </para>
    <para>
     優先読み込みにタグセットが含まれる場合、
     クライアントは指定したタグにマッチするセカンダリを探します。
     そして、一番近いグループのセカンダリの中からランダムに直接読み込みを行います。
     タグにマッチするセカンダリがない場合は、読み込み操作で例外が発生します。
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_SECONDARY_PREFERRED</literal>
    </para>
    <para>
     大半の場合は、読み込み操作をレプリカセットのセカンダリから行います。
     しかし、もしプライマリだけしかメンバーが存在しない場合は、
     プライマリから読み込みます。
    </para>
    <para>
     優先読み込みにタグセットが含まれる場合、
     クライアントは指定したタグにマッチするセカンダリを探します。
     そして、一番近いグループのセカンダリの中からランダムに直接読み込みを行います。
     タグにマッチするセカンダリがない場合は、読み込み操作で例外が発生します。
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_NEAREST</literal>
    </para>
    <para>
     ドライバは、ping 時間が最短のメンバーからの遅延が 15ms 以内に収まるメンバーの中から
     <emphasis>ランダムに</emphasis> 選び、そのメンバーから読み込みます。
     <literal>MongoClient::RP_NEAREST</literal> モードでの読み込みは
     メンバーの型を意識しないので、プライマリから読まれることもあればセカンダリから読まれることもあります。
    </para>
    <para>
     このモードにしておくと、読み込み操作のネットワークレイテンシーを最小化できます。
     現在のデータと古いデータのどちらを優先するかは設定しません。
    </para>
    <para>
     タグセットを指定した場合、
     クライアントは指定したタグにマッチするメンバーを探します。
     そして、一番近いグループのノードの中からランダムに直接読み込みを行います。
    </para>
    <note>
     <para>
      すべての読み込み操作は、指定した優先読み込みモードにマッチするレプリカセットの
      一番近いメンバーから行います。
      <literal>MongoClient::RP_NEAREST</literal> モードは、
      メンバーがプライマリであるかセカンダリであるかは無視してレイテンシーの低い読み込みを行います。
     </para>
    </note>
   </listitem>
  </itemizedlist>
 </simplesect>
 <simplesect xml:id="mongo.readpreferences.tagsets">
  <title>タグセット</title>
  <para>
   <link xlink:href="&url.mongodb.docs.tagsets;">タグセット</link>
   を使うと、カスタムパラメータに基づいて読み込み操作の対象を特定のメンバーに絞り込めます。
   タグセットでは、読み込み操作の対象となるメンバーを特定のデータセンターに絞り込んだり、
   レポーティングや分析など操作種別ごとにその対象の mongod インスタンスを絞り込んだりできます。
  </para>
  <para>
   タグセットを指定できるのは、優先読み込みが次のモードの場合です。
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <literal>MongoClient::RP_PRIMARY_PREFERRED</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_SECONDARY</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_SECONDARY_PREFERRED</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>MongoClient::RP_NEAREST</literal>
    </para>
   </listitem>
  </itemizedlist>
  <para>
   優先読み込みモードが
   <literal>MongoClient::RP_PRIMARY</literal>
   の場合はタグセットを指定できません。
   タグを適用できるのはセカンダリメンバーを選ぶときだけ
   (ただし、NEAREST モードのときは例外) です。
  </para>
 </simplesect>
 <simplesect xml:id="mongo.readpreference.usage">
  <title>優先読み込みの指定</title>
  <para>
   優先読み込みの設定方法は二通りあります。一つは
   <function>MongoClient::__construct</function> に渡す接続 URI で指定する方法で、
   このときはクエリ文字列の構文を使います。もうひとつはコアクラスのセッターメソッド群を使う方法で、
   このときはタグセット用の配列構文を使います。
  </para>
  <para>
   優先読み込みモードをクエリ文字列で指定する場合、
   <literal>readPreferenceTags</literal> の値用のタグセットは、
   コロンで区切ったキー/値のペアをカンマでつなげた形式になります。
  </para>
  <note>
   <para>
    クエリ文字列内で定義するタグセットには
    <literal>readPreferenceTags</literal> という名前を使います。
    PHP が URL のクエリ文字列を処理するときとは違って、
    <literal>readPreferenceTags</literal>
    を複数回指定したとしても上書きされることはありません。
    クエリ文字列の中で登場した順に、ドライバがすべてのタグセットをとりまとめます。
   </para>
  </note>
  <warning>
   <para>
    マッチするタグセットをドライバが見つけられない場合は、読み込みが失敗します!
    適切な代替策を用意しておくのはプログラマの役割です。たとえば
    <literal>readPreferenceTags</literal> の値が空なら "no tag set
    preference" を使うなどです。
   </para>
  </warning>
  <para>
   <example>
    <title>接続 URI でのクエリ文字列構文による優先読み込みの設定</title>
    <programlisting role="php">
<![CDATA[
<?php
// 一番近いサーバーを優先し、タグは設定しません
$uri  = 'mongodb://rs1.example.com,rs2.example.com/';
$uri .= '?readPreference=nearest';
$m = new MongoClient($uri, array('replicaSet' => 'rs'));

// "east" データセンターの一番近いサーバーを選びます
$uri  = 'mongodb://rs1.example.com,rs2.example.com/';
$uri .= '?readPreference=nearest';
$uri .= '&readPreferenceTags=dc:east';
$m = new MongoClient($uri, array('replicaSet' => 'rs'));

// "east" データセンターの一番近いサーバーを選び、レポーティング用に使います
// 代替サーバーとして、"west" データセンターのサーバーを使います
$uri  = 'mongodb://rs1.example.com,rs2.example.com/';
$uri .= '?readPreference=nearest';
$uri .= '&readPreferenceTags=dc:east,use:reporting';
$uri .= '&readPreferenceTags=dc:west';
$m = new MongoClient($uri, array('replicaSet' => 'rs'));

// "east" データセンターの一番近いサーバーを優先し、
// 代替サーバーとして、"west" データセンターのサーバーを使います。
// それもだめな場合は、タグセットの設定をせずに接続します。
$uri  = 'mongodb://rs1.example.com,rs2.example.com/';
$uri .= '?readPreference=nearest';
$uri .= '&readPreferenceTags=dc:east';
$uri .= '&readPreferenceTags=dc:west';
$uri .= '&readPreferenceTags=';
$m = new MongoClient($uri, array('replicaSet' => 'rs'));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>タグセット用の配列構文による優先読み込みの設定</title>
    <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient('mongodb://rs1.example.com,rs2.example.com', array(
    'replicaSet' => 'rs',
));

// 一番近いサーバーを優先し、タグは設定しません
$m->setReadPreference(MongoClient::RP_NEAREST, array());

// "east" データセンターの一番近いサーバーを優先します
$m->setReadPreference(MongoClient::RP_NEAREST, array(
    array('dc' => 'east'),
));

// "east" データセンターの一番近いサーバーを優先し、レポーティング用に使います
// 代替サーバーとして、"west" データセンターのサーバーを使います
$m->setReadPreference(MongoClient::RP_NEAREST, array(
    array('dc' => 'east', 'use' => 'reporting'),
    array('dc' => 'west'),
));

// "east" データセンターの一番近いサーバーを優先し、
// 代替サーバーとして、"west" データセンターのサーバーを使います。
// それもだめな場合は、タグセットの設定をせずに接続します。
$m->setReadPreference(MongoClient::RP_NEAREST, array(
    array('dc' => 'east'),
    array('dc' => 'west'),
    array(),
));
?>
]]>
    </programlisting>
   </example>
  </para>
 </simplesect>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

