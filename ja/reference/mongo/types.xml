<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338676 Maintainer: takagi Status: ready -->

<part xml:id="mongo.types" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">

 <title>型</title>

 <partintro>
  <section>
   <para>
    MongoDB では、PHP のすべての基本データ型や複合型 (配列、連想配列
    そしてオブジェクト) を保存したり問い合わせたりすることができます。
    それ以外にも、MongoDB PHP ドライバには (正規表現や
    日付、その他さまざまな用途に特化した) クラスが用意されています。
   </para>
  </section>

  <section>
   <title>Boolean および &null;</title>
   <para>
    &true;、&false; および &null; はそのままの型で使えます。
   </para>
  </section>

  <section>
   <title>数値</title>
   <para>
    MongoDB では数値と文字列は区別されます。"123" は 123 とマッチしません。
    したがって、数値のソートやマッチングを正しく行うには、数値として保存しなければなりません。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$doc = array("a" => 123, "b" => "123");
$collection->insert($doc);

$doc->find(array("a" => 123));   // マッチします
$doc->find(array("a" => "123")); // マッチしません
$doc->find(array("a" => 123.0)); // マッチします
$doc->find(array("b" => 123));   // マッチしません
$doc->find(array("b" => "123")); // マッチします

?>
]]>
   </programlisting>
   <para>
    上に示したように、浮動小数点数と整数の比較やマッチングは期待通りにできます。
   </para>
   <section>
    <title>大きな数値</title>
    <para>
     デフォルトでは、32 ビットシステム上では数値をデータベースに送信するときには 32 ビット整数型となります。
     64 ビットシステム上では数値をデータベースに送信するときには 64 ビット整数型となります。
     過去との互換性を保つため、64 ビット整数型をデシリアライズするとすべてのシステムで浮動小数点数となります。
     浮動小数点数には誤差があります。正確な値が必要なら
     <link linkend="mongo.configuration">php.ini の設定</link>をしましょう。
    </para>
    <para>
     32 ビットシステム上では、<literal>mongo.long_as_object</literal>
     が設定されていると 64 ビット整数値が <classname>MongoInt64</classname> オブジェクトとして返されます。
     整数値は、<literal>value</literal> フィールドに完全な精度で (文字列として) 格納されます。
     <classname>MongoInt64</classname> を使えば、64 ビット整数値を 32 ビットマシン上に保存することもできます。
    </para>
    <para>
     64 ビットシステム上では、<literal>mongo.long_as_object</literal>
     あるいは <literal>mongo.native_long</literal> を設定することができます。
     <literal>mongo.native_long</literal> は、64 ビット整数値を
     "通常の" PHP の整数型で返します。<classname>MongoInt32</classname> を使えば、
     32 ビット整数値を 64 ビットマシン上に保存することができます。
    </para>
    <para>
     <literal>mongo.long_as_object</literal> や
     <literal>mongo.native_long</literal> の挙動は、使おうとする内容にあわせて設定するべきです。
     たとえデフォルトの挙動であっても、明示的に設定しておくことが大切です
     (将来もしデフォルトの設定が変わっても、その影響を受けずにすみます)。
    </para>
    <para>
     <link linkend="mongo.configuration">php.ini のオプション</link>、
     <classname>MongoInt32</classname>、そして <classname>MongoInt64</classname>
     も参照ください。
    </para>
   </section>
  </section>

  <section>
   <title>文字列</title>
   <para>
    文字列は UTF-8 でなければなりません。非 UTF-8 文字列は、UTF-8
    に変換してからデータベースに送信するか、あるいはバイナリデータとして保存しなければなりません。
   </para>
   <para>
    正規表現を使った文字列のマッチングができます。正規表現には
    <classname>MongoRegex</classname> クラスを使います。
   </para>
  </section>

  <section>
   <title>バイナリデータ</title>
   <para>
    非 UTF-8 文字列や画像その他のバイナリデータをデータベースに送信するときには
    <classname>MongoBinData</classname> 型を使わなければなりません。
   </para>
  </section>

  <section>
   <title>日付</title>
   <para>
    日付を作成するには <classname>MongoDate</classname> クラスを使います。
    ここにはエポックからの経過ミリ秒数が格納されます。
   </para>
   <para>
    <classname>MongoTimestamp</classname> は日付やタイムスタンプを保存するためのものではなく、
    MongoDB の内部で使うものです。レプリカやシャーディングの内部構造を扱うツールを書いているのでない限り、
    <classname>MongoTimestamp</classname> <emphasis>ではなく</emphasis>
    <classname>MongoDate</classname> を使うべきです。
   </para>
  </section>

  <section>
   <title>一意な Id</title>
   <para>
    ドライバは、ユーザーが明示的に指定しない限り、自動的に <literal>_id</literal>
    フィールドを作成してからドキュメントを追加します。このフィールドは
    <classname>MongoId</classname> (いわゆる "オブジェクト ID")
    のインスタンスです。
   </para>
   <para>
    ID は 12 バイトで、このような構造です。
    <itemizedlist>
     <listitem>
      <para>タイムスタンプ 4 バイト</para>
      <para>
       別の時刻に追加されたレコードが同じ id になることはありません。
      </para>
     </listitem>
     <listitem>
      <para>マシン id 3 バイト</para>
      <para>
       別のマシンから追加されたレコードが同じ id になることはありません。
      </para>
     </listitem>
     <listitem>
      <para>スレッド id 2 バイト</para>
      <para>
       同じマシン上の別のスレッドから追加されたレコードが同じ id になることはありません。
      </para>
     </listitem>
     <listitem>
      <para>増分 3 バイト</para>
      <para>
       id が新たに作られるたびにグローバルなカウンタがひとつ増加します。
       次の id を作るときに、この値を使います。
      </para>
     </listitem>
    </itemizedlist>
    従って、同一マシン上の単一のプロセスで 1 秒間に 256^3 件 (1600万件以上)
    のレコードを追加 (増分領域を使い切る) しようとしない限り、
    同じ id になることはありません。
   </para>
  </section>

  <section>
   <title>JavaScript</title>
   <para>
    MongoDB には JavaScript エンジンが組み込まれているので、JavaScript
    をクエリに ($where 句で) 組み込んで直接データベースに送信して実行し、
    集約することができます。
   </para>
   <para>
    セキュリティ上、<classname>MongoCode</classname> の <literal>scope</literal>
    フィールドを使って PHP の変数を JavaScript に渡します。外部の値を使わないコードの場合は
    <classname>MongoCode</classname> を使っても単なる文字列を使ってもかまいません。
    JavaScript をデータベースに送信することに関する詳細な情報は
    <link linkend="mongo.security">セキュリティの節</link>
    を参照ください。
   </para>
  </section>

  <section>
   <title>配列およびオブジェクト</title>

   <para>
    配列やオブジェクトもデータベースに格納することができます。
    数値添字の配列は配列として、
    それ以外のものはすべてオブジェクトとして格納されます。
   </para>

   <programlisting role="php">
<![CDATA[
<?php

// $scores は配列として格納されます
$scores = array(98, 100, 73, 85);
$collection->insert(array("scores" => $scores));

// $scores はオブジェクトとして格納されます
$scores = array("quiz1" => 98, "midterm" => 100, "quiz2" => 73, "final" => 85);
$collection->insert(array("scores" => $scores));

?>
]]>
   </programlisting>

   <para>
    データベースのシェルからこれらのオブジェクトを問い合わせると、このようになります。
    <programlisting role="shell">
<![CDATA[
> db.students.find()
{ "_id" : ObjectId("4b06beada9ad6390dab17c43"), "scores" : [ 98, 100, 73, 85 ] }
{ "_id" : ObjectId("4b06bebea9ad6390dab17c44"), "scores" : { "quiz1" : 98, "midterm" : 100, "quiz2" : 73, "final" : 85 } }
]]>
    </programlisting>
   </para>

   <para>
    任意の PHP オブジェクトもデータベースに格納することができます
    (返されるときは連想配列となります)。
    フィールドは キー/値 のペアに使います。
    たとえば、blogへの投稿を表す次のようなオブジェクトを考えましょう。
    <programlisting role="php">
<![CDATA[
<?php

  // blog投稿クラス
  class Post {

  var $author;
  var $content;
  var $comments = array();
  var $date;

  public function __construct($author, $content) {
  $this->author = $author;
$this->content = $content;
    $this->date = new MongoDate();
  }

  public function setTitle($title) {
    $this->title = $title;
  }
}

// 単純なblog投稿を作り、データベースに追加します
$post1 = new Post("Adam", "This is a blog post");

$blog->insert($post1);


// "author" フィールドの型には何も制約がないので、
// オブジェクトをネストさせることができます
$author = array("name" => "Fred", "karma" => 42);
$post2 = new Post($author, "This is another blog post.");

// タイトルを設定して、別のフィールドを追加することができます
$post2->setTitle("Second Post");

$blog->insert($post2);

?>
]]>
    </programlisting>
   </para>

   <para>
    データベースのシェルからは、次のように見えます。
    <programlisting role="shell">
<![CDATA[
> db.blog.find()
{ "_id" : ObjectId("4b06c263edb87a281e09dad8"), "author" : "Adam", "content" : "This is a blog post", "comments" : [ ], "date" : "Fri Nov 20 2009 11:22:59 GMT-0500 (EST)" }
{ "_id" : ObjectId("4b06c282edb87a281e09dad9"), "author" : { "name" : "Fred", "karma" : 42 }, "content" : "This is a blog post", "comments" : [ ], "date" : "Fri Nov 20 2009 11:23:30 GMT-0500 (EST)", "title" : "Second Post" }
]]>
    </programlisting>
   </para>

   <para>
    このドライバは、配列やオブジェクトの循環参照を検出することができません。
    たとえば、これは致命的なエラーとなります。
    <programlisting role="php">
<![CDATA[
<?php

$collection->insert($GLOBALS);

?>
]]>
    </programlisting>
    <programlisting role="txt">
<![CDATA[
Fatal error: Nesting level too deep - recursive dependency?
]]>
    </programlisting>
    再帰構造になる可能性のあるドキュメントを追加しなければならない場合は、
    ドライバに渡す前に自分でチェックしておかなければなりません。
   </para>
  </section>
 </partintro>
 &reference.mongo.mongoid;
 &reference.mongo.mongocode;
 &reference.mongo.mongodate;
 &reference.mongo.mongoregex;
 &reference.mongo.mongobindata;
 &reference.mongo.mongoint32;
 &reference.mongo.mongoint64;
 &reference.mongo.mongodbref;
 &reference.mongo.mongominkey;
 &reference.mongo.mongomaxkey;
 &reference.mongo.mongotimestamp;

</part>
