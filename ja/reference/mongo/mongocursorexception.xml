<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334826 Maintainer: takagi Status: ready -->

<phpdoc:classref xml:id="class.mongocursorexception" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>MongoCursorException クラス</title>
 <titleabbrev>MongoCursorException</titleabbrev>

 <partintro>

  <!-- {{{ MongoCursorException intro -->
  <section xml:id="mongocursorexception.intro">
   &reftitle.intro;
   <para>
    カーソルへの不正なアクセスや応答を受け取る際のエラーが原因です。
    このエラーが発生するのは、単なるクエリではなく結果を受け取るリクエストであることに注意しましょう。
    書き込みやコマンド、あるいはその他何らかの情報をデータベースに送って結果を待つ操作では
    <classname>MongoCursorException</classname> をスローすることがあります。
    唯一の例外は <literal>new MongoClient()</literal> (新しい接続の作成)
    で、これは <classname>MongoConnectionException</classname>
    しかスローしません。
   </para>

   <para>
    このクラスはエラーメッセージを返します。
    このメッセージを見れば、問題の調査の助けになり、
    エラーコードに関連付けられた原因もわかります。
   </para>

   <para>
    たとえば、次のように同じ _id のドキュメントを 2 件追加してみましょう。
    <programlisting role="php">
<![CDATA[
<?php

try {
    $collection->insert(array("_id" => 1), array("w" => 1));
    $collection->insert(array("_id" => 1), array("w" => 1));
}
catch (MongoCursorException $e) {
    echo "error message: ".$e->getMessage()."\n";
    echo "error code: ".$e->getCode()."\n";
}

?>
]]>
    </programlisting>
    結果はこのようになります。
    <programlisting role="txt">
<![CDATA[
error message: E11000 duplicate key error index: foo.bar.$_id_  dup key: { : 1 }
error code: 11000
]]>
    </programlisting>
    MongoDB のエラーコード (11000) が PHP のエラーコードとして使われていることに注目しましょう。
    PHP のドライバは、可能な限り「ネイティブの」エラーコードを使います。
   </para>

   <para>
    よくあるエラーとそのコード、そして原因をまとめました。
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <literal>cannot modify cursor after beginning iteration</literal>
     </para>
     <para>
      コード: 0
     </para>
     <para>
      クエリを実行した後で、クエリの設定を変えるメソッドをコールしました。
      いったんカーソルをリセットしてからやりなおしてください。
     </para>
     <para>
      An example:
      <programlisting role="php">
<![CDATA[
<?php

try {
    $cursor = $collection->find();
    var_dump($cursor->getNext());

    // getNext() でクエリを実行しているので、ここでリミットを指定しても遅すぎます
    $cursor->limit(1);
}
catch (MongoCursorException $e) {
    echo "error message: ".$e->getMessage()."\n";
    echo "error code: ".$e->getCode()."\n";
}

// こうすれば、正しく動作します
$cursor->getNext();
$cursor->reset();
$cursor->limit(1);

?>
]]>
      </programlisting>
     </para>
    </listitem>

    <listitem>
     <para>
      Get next batch send errors
     </para>
     <para>
      コード: 1
     </para>
     <para>
      クエリをデータベースに送信できませんでした。
      データベースが立ち上がっていることとネットワークが正常であることを確認してください。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>cursor not found</literal>
     </para>
     <para>
      コード: 2
     </para>
     <para>
      ドライバがデータベースから結果を取得しようとしましたが、
      データベース側にクエリが残っていませんでした。
      たいていは、カーソルがサーバー側でタイムアウトしたことを意味します。
      やりとりがない状況が数秒続くと、データベースはカーソルを消します
      (これを防ぐための方法は <function>MongoCursor::immortal</function>
      を参照ください)。
     </para>
     <para>
      例を示します。
      <programlisting role="php">
<![CDATA[
<?php

try {
    $cursor = $collection->find();
    $cursor->getNext();

    // 15 分間スリープします
    sleep(60*15);

    while ($cursor->hasNext()) {
        $cursor->getNext();
    }
}
catch (MongoCursorException $e) {
    echo "error message: ".$e->getMessage()."\n";
    echo "error code: ".$e->getCode()."\n";
}

?>
]]>
      </programlisting>
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>cursor->buf.pos is null</literal>
     </para>
     <para>
      コード: 3
     </para>
     <para>
      これは、RAM から外れてしまったか、
      その他の異常な状況になったことを意味します。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't get response header</literal>
     </para>
     <para>
      コード: 4
     </para>
     <para>
      データベースあるいはネットワークがダウンしているときによく出るエラーです。
      ドライバが接続からの応答を受け取れなかったことを意味します。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>no db response</literal>
     </para>
     <para>
      コード: 5
     </para>
     <para>
      これはエラーではないかもしれません。たとえば、データベースの
      "shutdown" コマンドは何も応答を返しません。
      しかし、もし何らかの応答を得ることを期待していたのにこのエラーになったのなら、
      データベースがその応答を返さなかったことを意味します。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>bad response length: %d, did the db assert?</literal>
     </para>
     <para>
      コード: 6
     </para>
     <para>
      これは、データベースの応答が 0 未満であることを意味します。
      このエラーの原因は、おそらくネットワーク障害かデータベースの破損です。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>incomplete header</literal>
     </para>
     <para>
      コード: 7
     </para>
     <para>
      めったにありませんが、
      データベースの応答が正常にはじまったけれど途中で終わってしまった場合に発生します。
      おそらくネットワークの問題でしょう。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>incomplete response</literal>
     </para>
     <para>
      コード: 8
     </para>
     <para>
      めったにありませんが、
      データベースの応答が正常にはじまったけれど途中で終わってしまった場合に発生します。
      おそらくネットワークの問題でしょう。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't find a response</literal>
     </para>
     <para>
      コード: 9
     </para>
     <para>
      キャッシュされていたレスポンスが見つけられませんでした。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>error getting socket</literal>
     </para>
     <para>
      コード: 10
     </para>
     <para>
      ソケットが閉じられたか、エラーが発生しました。
      ドライバは、(もし可能なら) 次の操作時に自動的に再接続しなければなりません。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't find reply, please try again</literal>
     </para>
     <para>
      コード: 11
     </para>
     <para>
      ドライバは、リクエストに直接はマッチしないデータベースからの応答を保存します。
      この例外が発生するのは、ドライバがすでにリクエストに対する応答を返した後で、
      キャッシュ内に応答を見つけられなかったときです。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>error getting database response: errstr</literal>
     </para>
     <para>
      <literal>WSA error getting database response: errstr</literal>
     </para>
     <para>
      "errstr" は、C のソケットから直接返ってきた入出力エラーです。
      Windows では、エラーメッセージの先頭に "WSA" がつきます。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>Timeout error</literal>
     </para>
     <para>
      コード: 13
     </para>
     <para>
      クエリが完了するのを待つ間に何かエラーが発生しました。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>couldn't send query: &lt;various&gt;</literal>
     </para>
     <para>
      コード: 14
     </para>
     <para>
      送信時に C のソケットエラーが発生しました。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>max number of retries exhausted, couldn't send query</literal>
     </para>
     <para>
      Code: 19
     </para>
     <para>
      最初の実行が何らかの原因で失敗したときに、ドライバは自動的に
      「プレーンな」クエリ (コマンドではないもの) を何度か再送します。
      これは、レプリカセットのフェイルオーバー時の例外の発生を減らし
      (それでも少しは発生しますが)、
      一時的なネットワーク障害を取り繕うためです。
     </para>
     <para>
      これは、何度実行しても結局データベースに再接続できなかったとき
      (たとえば、データベースにつながらないときなど)
      に発生します。
     </para>
     <para>
      バージョン 1.2.2 で追加されました。
     </para>
    </listitem>
   </itemizedlist>
  </section>


  <section>
   <title>データベースから渡されたエラー</title>
   <para>
    クエリの実行時に発生したデータベースのエラーは、常に
    <classname>MongoCursorExceptions</classname> を発生させなければなりません。
    エラーメッセージとエラーコードはデータベースから直接送られるので、
    対応するエラーをデータベースのログから見つけることができます。
   </para>

   <para>
    一般的なデータベースエラーをいくつかまとめました。
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <literal>E11000 duplicate key error index: foo.bar.$X  dup key: { /* ... */ }</literal>
     </para>
     <para>
      コード: 11000
     </para>
     <para>
      キーが重複しているときのデータベースエラーです。
     </para>
    </listitem>

    <listitem>
     <para>
      <literal>not master</literal>
     </para>
     <para>
      コード: 10107, 13435 および 10058
     </para>
     <para>
      プライマリではないというエラーで、データベースから送られてきます。
      これらのエラーが発生するとドライバは接続を切断し、
      新しいプライマリを探します。フェイルオーバーの際に実際に取得するエラーは
      "not master" ではないかもしれません。
      これは、プライマリの変更がいつ発生したのかに依存します。
     </para>
    </listitem>
   </itemizedlist>

  </section>
  <!-- }}} -->

  <section xml:id="mongocursorexception.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoCursorException</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoCursorException</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>MongoException</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->

   </classsynopsis>
   <!-- }}} -->

  </section>

 </partintro>

 &reference.mongo.entities.mongocursorexception;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
