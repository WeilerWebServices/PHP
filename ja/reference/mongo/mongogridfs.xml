<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 329065 Maintainer: takagi Status: ready -->

<phpdoc:classref xml:id="class.mongogridfs" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>MongoGridFS クラス</title>
 <titleabbrev>MongoGridFS</titleabbrev>

 <partintro>

<!-- {{{ Mongogridfs intro -->
  <section xml:id="mongogridfs.intro">
   &reftitle.intro;
   <para>
    データベースにファイルを格納したり、データベースからファイルを取得したりするためのユーティリティです。
   </para>

   <para>
    GridFS はストレージの仕様で、すべてのドライバがこれを実装しています。
    基本的に、これはふたつのコレクションを定義しています。
    ファイルのメタデータ用の <literal>files</literal>、
    そしてファイルの中身用の <literal>chunks</literal> です。
    大きなファイルの場合は自動的に小さなチャンクに分割し、
    各チャンクが chunks コレクションのドキュメントとして保存されます。
   </para>

   <para>
    files コレクション内の各ドキュメントには、ファイル名とアップロードした日付、
    そして md5 ハッシュが含まれています。
    また、一意な <literal>_id</literal> フィールドも持っており、
    これを使ってそのファイルの中身がある chunks コレクションを探すことができます。
    chunks コレクション内の各ドキュメントには、バイナリデータのチャンクの他に
    そのファイルの <literal>_id</literal> フィールドにマッチする
    <literal>files_id</literal> フィールドが含まれ、さらに
    ファイル全体の中でそのチャンクがどの位置にあるのかという情報も含まれます。
   </para>

   <para>
    files ドキュメントの内容は、たとえばこのようになります。
    <programlisting role="php">
<![CDATA[
<?php
array("_id" => 123456789, "filename" => "foo.txt", "chunkSize" => 3, "length" => 12);
?>
]]>
    </programlisting>
    そして chunks ドキュメントはこのようになります。
    <programlisting role="php">
<![CDATA[
<?php
array("files_id" => 123456789, "n" => 0, "data" => new MongoBinData("abc"));
array("files_id" => 123456789, "n" => 1, "data" => new MongoBinData("def"));
array("files_id" => 123456789, "n" => 2, "data" => new MongoBinData("ghi"));
array("files_id" => 123456789, "n" => 3, "data" => new MongoBinData("jkl"));
?>
]]>
    </programlisting>
    もちろん、デフォルトのチャンクサイズはもっと大きなものになります。
    ただそれでは例が見づらくなるのでこのようにしました。
   </para>
  </section>

  <section>
   <title>言語間の互換性</title>
   <para>
    MongoGridFS で作ったファイルは他のどのドライバでも使えなければなりませんし、
    逆もまたそうです。しかし中には、ファイルに関連するすべてのメタデータが
    "metadata" フィールドにあるという前提で動くドライバもあります。
    他の言語を使う可能性があるのなら、見せたい情報を
    "metadata" フィールドに入れておくといいでしょう。たとえば、
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$grid->storeFile("somefile.txt", array("date" => new MongoDate()));

?>
]]>
   </programlisting>
   <para>
    こう書くかわりに、下のようにするのです。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$grid->storeFile("somefile.txt", array("metadata" => array("date" => new MongoDate())));

?>
]]>
   </programlisting>
  </section>

  <section>
   <title><classname>MongoGridFS</classname> ファミリー</title>

   <para>
    <classname>MongoGridFS</classname> は files コレクションと chunks
    コレクションを表します。<classname>MongoGridFS</classname> は MongoCollection
    を継承しており、<classname>MongoGridFS</classname> のインスタンスは
    <classname>MongoCollection</classname> のすべてのメソッドにアクセスできます。
    これは files コレクションに対する操作となります。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$grid = $db->getGridFS();
$grid->update(array("filename" => "foo"), $newObj); // files コレクションを更新します

?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    メタデータを操作する別の例を示します。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

// ファイルを保存します
$id = $grid->storeFile("game.tgz");
$game = $grid->findOne();

// ダウンロードカウンタを追加します
$game->file['downloads'] = 0;
$grid->save($game->file);

// カウンタをひとつ加算します
$grid->update(array("_id" => $id), array('$inc' => array("downloads" => 1)));

?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    <classname>MongoGridFS</classname> のインスタンスから、
    chunks コレクションにアクセスすることもできます。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

  $chunks = $grid->chunks; // $chunks は通常の MongoCollection です
$chunks->insert(array("x" => 4));

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <classname>MongoGridFS</classname> のメソッドの中には
    <classname>MongoCollection</classname> のメソッドと同じ名前のものもあります。
    これらのメソッドの挙動は微妙に異なります。
    たとえば <function>MongoGridFS::remove</function>
    は、条件にマッチするすべてのオブジェクトを files コレクションから削除し、
    対応する chunks コレクションの中身も同時に削除します。
   </para>

   <para>
    新しい何かを GridFS に格納する際にはいくつかのオプションがあります。
    ファイル名がわかる場合は、次のように書くことができます。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$grid->storeFile($filename, array("whatever" => "metadata", "you" => "want"));

?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    ファイルではない文字列やバイト列の場合は、
    <function>MongoGridFS::storeBytes</function> を使うこともできます。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

$grid->storeBytes($bytes, array("whatever" => "metadata", "you" => "want"));

?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <para>
    <classname>MongoGridFS</classname> コレクションへの問い合わせ結果として返されるのは
    <classname>MongoGridFSCursor</classname> です。これは通常の
    <classname>MongoCursor</classname> とほぼ同様の動きをしますが、連想配列ではなく
    <classname>MongoGridFSFiles</classname> を返すという点が異なります。
   </para>

   <para>
    <classname>MongoGridFSFiles</classname> をディスクに書き出すには
    <function>MongoGridFSFile::write</function> を、メモリに取り込むには
    <function>MongoGridFSFile::getBytes</function> を使います。
    自動的にチャンクをつなげるメソッドは今のところありませんが、
    <literal>$grid->chunks</literal> コレクションに問い合わせて自分でつなげるのはきわめて簡単です。
   </para>

   <para>
    <classname>MongoGridFSFile</classname> オブジェクトには、
    ファイルのメタデータを格納する file フィールドが含まれます。
   </para>
  </section>
<!-- }}} -->

  <section xml:id="mongogridfs.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoGridFS</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>extends</modifier>
      <classname>MongoCollection</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    
    <classsynopsisinfo role="comment">フィールド</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <type>MongoCollection</type>
     <varname>chunks</varname>
     <initializer>&null;</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <type>string</type>
     <varname>filesName</varname>
     <initializer>&null;</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>protected</modifier>
     <type>string</type>
     <varname>chunksName</varname>
     <initializer>&null;</initializer>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongogridfs')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section>
   &reftitle.seealso;
   <simplelist>
    <member>MongoDB コアドキュメントの <link xlink:href="&url.mongodb.docs.gridfs;">GridFS</link></member>
    <member>LightCube Solutions blog の記事 <link xlink:href="&url.mongodb.gridfs.fileupload;">ユーザーがアップロードした内容の保存</link></member>
    <member>LightCube Solutions blog の記事 <link xlink:href="&url.mongodb.gridfs.metadata;">メタデータの追加</link></member>
   </simplelist>
  </section>
 </partintro>

 &reference.mongo.entities.mongogridfs;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
