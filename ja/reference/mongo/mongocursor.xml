<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351133 Maintainer: takagi Status: ready -->

<phpdoc:classref xml:id="class.mongocursor" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>MongoCursor クラス</title>
 <titleabbrev>MongoCursor</titleabbrev>

 <partintro>

  <!-- {{{ Mongocursor intro -->
  <section xml:id="mongocursor.intro">
   &reftitle.intro;
   <para>
    カーソルは、データベースクエリの結果を反復処理するときに使います。
    たとえば、データベースに問い合わせたすべての結果を見るには次のようにします。
    <example xml:id="mongocursor.intro-example">
     <title><classname>MongoCursor</classname> の基本的な使いかた</title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find();
var_dump(iterator_to_array($cursor));

?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    一般に、カーソルを作るときに
    <classname>MongoCursor</classname> のコンストラクタを使うことはありません。
    新しいカーソルを作るには、(上の例のように)
    <function>MongoCollection::find</function> をコールします。
   </para>
   <para>
    上の例で、仮に <literal>$collection</literal> が
    50GB のコレクションだったとしましょう。そんなときに、
    結果をすべて一度にメモリに読み込もうとは思わないでしょう。
    そんなときのためにカーソルが存在します。
    カーソルを使えば、クライアント側から少しずつコレクションにアクセスできるのです。
   </para>
   <para>
    結果セットが大規模になっても、それを反復処理して
    一度にメモリに取り込むデータ量を数メガバイト程度にすることができます。
    たとえばこのようにします。
    <example>
     <title><classname>MongoCursor</classname> の反復処理</title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find();

foreach ($cursor as $doc) {
    // ここで各ドキュメントについて何らかの処理をします
}

?>
]]>
     </programlisting>
    </example>
    これはコレクション内の各ドキュメントを順にたどり、
    必要に応じてドキュメントの読み込みやガベージコレクションを行います。
   </para>
   <para>
    カーソルにデータベースの結果が "含まれている" わけではないことに注意しましょう。
    カーソルは単に結果を管理するだけのものです。つまり、
    (<function>var_dump</function> や <function>print_r</function> で)
    カーソルの内容を出力してもドキュメントは見えません。
    単にカーソルオブジェクトが表示されるだけです。 
    ドキュメント自身を取得するには、上のメソッドのいずれかを使います。
   </para>
  </section>

  <section>
   <title>カーソルのステージ</title>
   <para>
    <classname>MongoCursor</classname> には二段階の「ライフステージ」があります。
    クエリ前とクエリ後です。
    カーソルを作った時点ではまだデータベースに接続していません。
    つまり、クエリ前の段階です。この段階では、クエリに何をしてほしいのかをさらに指定することができます。
    取得数の制限や読み飛ばし、ソートなどのオプションを指定できるのです。
   </para>
   <para>
    クライアントが結果を取得しようとする (直接的あるいは間接的に
    <function>MongoCursor::next</function> をコールする) と、
    そのカーソルはクエリ後の段階に進みます。
   </para>
   <para>
    <example xml:id="mongocursor.stages.adding-options">
     <title><classname>MongoCursor</classname> へのオプションの追加</title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = $collection->find()->limit(10);

// まだデータベースへの問い合わせは行われていないので、検索オプションをさらに追加することができます
$cursor = $cursor->sort(array("a" => 1));

var_dump($cursor->getNext());
// ここでデータベースへの問い合わせが行われるので、これ以降はオプションを追加することはできません

// つまり、これは例外をスローします
$cursor->skip(4);
?>
]]>
     </programlisting>
    </example>
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="mongocursor.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoCursor</classname></ooclass>

    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoCursor</classname>
     </ooclass>
     <oointerface>
      <interfacename>MongoCursorInterface</interfacename>
     </oointerface>
     <oointerface>
      <interfacename>Iterator</interfacename>
     </oointerface>
    </classsynopsisinfo>
    <!-- }}} -->
    
    <classsynopsisinfo role="comment">静的フィールド</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>static</modifier>
     <type>bool</type>
     <varname linkend="mongocursor.props.slaveokay">slaveOkay</varname>
     <initializer>&false;</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>static</modifier>
     <type>int</type>
     <varname linkend="mongocursor.props.timeout">timeout</varname>
     <initializer>30000</initializer>
    </fieldsynopsis>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongocursor')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->

  </section>

  <section>
   <title>静的変数</title>

   <variablelist>
    <varlistentry xml:id="mongocursor.props.slaveokay">
     <term><varname>slaveOkay</varname></term>
     <listitem>
      <para>
       クエリに "slaveOkay" フラグが設定されていると、セカンダリ側での読み込みを許可します
       (セカンダリは、デフォルトでは単なるバックアップ用であり読み込みはできません)。
       <function>MongoCursor::slaveOkay</function> で上書きすることができます。
      </para>
      <para>
       この機能は <emphasis>非推奨</emphasis> です。かわりに
       <xref linkend="mongo.readpreferences" /> を使いましょう。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="mongocursor.props.timeout">
     <term><varname>timeout</varname></term>
     <listitem>
      <para>
       データベースからのすべての応答に対するタイムアウトをミリ秒単位で設定します。
       ずっと待ち続ける場合は <literal>-1</literal> を指定します。
       <function>MongoCursor::timeout</function> で上書きすることができます。
       これは MongoDB サーバーに対する操作をキャンセルするわけではなく、
       単にドライバ側で応答を待つのをやめて
       <classname>MongoCursorTimeoutException</classname> をスローするだけです。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>

  <section role="seealso">
   &reftitle.seealso;
   <para>
    MongoDB コアドキュメントの <link xlink:href="&url.mongodb.dochub.cursors;">カーソル</link>
    を参照ください。
   </para>
  </section>

 </partintro>

 &reference.mongo.entities.mongocursor;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
