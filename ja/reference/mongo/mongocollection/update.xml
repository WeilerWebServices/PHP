<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351075 Maintainer: takagi Status: ready -->
<!-- Credits: mumumu -->

<refentry xml:id="mongocollection.update" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::update</refname>
  <refpurpose>指定した条件にもとづいてレコードを更新する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>bool</type><type>array</type></type><methodname>MongoCollection::update</methodname>
   <methodparam><type>array</type><parameter>criteria</parameter></methodparam>
   <methodparam><type>array</type><parameter>new_object</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry xml:id="mongocollection.update.criteria">
     <term>
      <parameter>criteria</parameter>
     </term>
     <listitem>
      <para>
       更新したいオブジェクトの条件。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="mongocollection.update.new_object">
     <term>
      <parameter>new_object</parameter>
     </term>
     <listitem>
      <para>
       マッチするレコードを更新するオブジェクト。
       更新演算子を含めたり (特定のフィールドだけの更新用)、
       ドキュメント全体を上書きしたりできます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       更新時のオプションの配列。
       現在利用可能なオプションは、以下のとおりです。
       <itemizedlist>
        <listitem xml:id="mongocollection.update.upsert">
         <para>
          <literal>"upsert"</literal>
         </para>
         <para>
          <parameter>$criteria</parameter> にマッチするレコードが見つからない場合に
          新しいドキュメントを追加します。
         </para>
         <para>
          新しいドキュメントを追加するときに
          <parameter>$new_object</parameter> にアトミックな修正子
          (<literal>$</literal> 演算子) が含まれていれば、この操作を
          <parameter>$criteria</parameter> パラメータに適用して新しいドキュメントを作ります。
          <parameter>$new_object</parameter> がアトミックな修正子を含まない場合は、
          そのままの形式で新しいドキュメントに使います。
          詳細は、以下の upsert の例を参照ください。
         </para>
        </listitem>
        <listitem xml:id="mongocollection.update.multiple">
         <para>
          <literal>"multiple"</literal>
         </para>
         <para>
          $criteria にマッチするすべてのドキュメントを更新します。
          <function>MongoCollection::update</function> は
          <function>MongoCollection::remove</function> と正反対の動きをします。
          デフォルトでは、マッチするすべてのドキュメントではなく
          ひとつのドキュメントだけを更新するのです。
          <emphasis>複数ドキュメントを更新したいのかそうでないのかは、
          常に指定しておくことを推奨します。</emphasis>
          将来、データベースのデフォルトの挙動が変わる可能性があるからです。
         </para>
        </listitem>
        &mongo.writes.parameters.fsync;
        &mongo.writes.parameters.journal;
        &mongo.writes.parameters.sockettimeoutms;
        &mongo.writes.parameters.writeconcern;
        &mongo.writes.parameters.writeconcerntimeoutms;
       </itemizedlist>
      </para>
      <para>
       以下のオプションは廃止予定です。使ってはいけません。
       <itemizedlist>
        &mongo.writes.parameters.safe;
        &mongo.writes.parameters.timeout;
        &mongo.writes.parameters.writeconcerntimeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <literal>"w"</literal> が設定されていれば、更新の状態を表す配列を返します。
   それ以外の場合は &true; を返します。
  </para>
  <para>
   状態を表す配列のフィールドについては <function>MongoCollection::insert</function> のドキュメントを参照ください。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &mongo.errors.exceptions.writeconcern;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.5.0</entry>
       <entry>
        <para>
         <literal>"wTimeoutMS"</literal> オプションが追加されました。これは
         <literal>"wtimeout"</literal> を置き換えるものです。
         <literal>"wtimeout"</literal> を使うと
         <constant>E_DEPRECATED</constant> が発生します。
        </para>
        <para>
         <literal>"socketTimeoutMS"</literal> オプションが追加されました。これは
         <literal>"timeout"</literal> を置き換えるものです。
         <literal>"timeout"</literal> を使うと
         <constant>E_DEPRECATED</constant> が発生します。
        </para>
        <para>
         <literal>"safe"</literal> を使うと
         <constant>E_DEPRECATED</constant> が発生します。
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.3.4</entry>
       <entry><literal>"wtimeout"</literal> オプションが追加されました。</entry>
      </row>
      <row>
       <entry>PECL mongo 1.3.0</entry>
       <entry>
        <para><literal>"w"</literal> オプションが追加されました。</para>
        <para>
         <parameter>options</parameter> パラメータで、boolean
         だけを渡して upsert を指定することができなくなりました。
         同じことをするには <literal>array('upsert'' => true)</literal>
         としなければなりません。
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.2.11</entry>
       <entry>
        <parameter>options</parameter> が <type>scalar</type> のときに <constant>E_DEPRECATED</constant> を発行するようになりました。
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.2.0</entry>
       <entry><literal>"timeout"</literal> オプションが追加されました。</entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.11</entry>
       <entry>
        <literal>"safe"</literal> が設定されている場合は、"not master" エラーで接続を切断するようになりました。
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.9</entry>
       <entry>
        <para>
         <literal>"safe"</literal> オプションに整数値がわたせるようになりました (以前は boolean のみでした)。
        </para>
        <para>
         <literal>"fsync"</literal> オプションが追加されました。
        </para>
        <para>
         <literal>"safe"</literal> オプションを使っている場合の返り値の型が配列に変わりました。
         配列にはエラー情報が含まれています。"safe" オプションを使わない場合は、今までどおり
         boolean のままです。
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.5</entry>
       <entry><literal>"safe"</literal> オプションが追加されました。</entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.1</entry>
       <entry>
        <parameter>options</parameter> パラメータが boolean から配列に変わりました。
        1.0.1 より前のバージョンでは二番目のパラメータはオプションの boolean
        値で、upsert を指定するものでした。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCollection::update</function></title>
   <para>
    address フィールドをドキュメントに追加します。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->insert(array("firstname" => "Bob", "lastname" => "Jones" ));
$newdata = array('$set' => array("address" => "1 Smith Lane"));
$c->update(array("firstname" => "Bob"), $newdata);

var_dump($c->findOne(array("firstname" => "Bob")));

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(4) {
  ["_id"]=>
  object(MongoId)#6 (0) {
  }
  ["firstname"]=>
  string(3) "Bob"
  ["lastname"]=>
  string(5) "Jones"
  ["address"]=>
  string(12) "1 Smith Lane"
}
]]>
   </screen>
  </example>
  <example>
   <title><function>MongoCollection::update</function> での upsert</title>
   <para>
    upsert を使うとコードを簡潔にすることができます。
    オブジェクトが存在しない (<parameter>$criteria</parameter> に基づく) 場合は新たに作成し、
    存在する場合はそれを更新するという操作を一行で書けるからです。
   </para>
   <para>
    次の例では、<parameter>$new_object</parameter> にアトミックな修正子が含まれています。
    コレクションは空なので upsert は新たなドキュメントを追加することになり、
    これらの操作を
    <parameter>$criteria</parameter> パラメータに適用してドキュメントを作ります。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->drop();
$c->update(
    array("uri" => "/summer_pics"),
    array('$inc' => array("page hits" => 1)),
    array("upsert" => true)
);
var_dump($c->findOne());

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#9 (0) {
  }
  ["uri"]=>
  string(12) "/summer_pics"
  ["page hits"]=>
  int(1)
}
]]>
   </screen>
   <para>
    <parameter>$new_object</parameter> がアトミックな修正子
    (<literal>$</literal> 演算子) を含まない場合、upsert は
    <parameter>$new_object</parameter> をそのままの形式で新しいドキュメントに使います。
    これは通常の update の挙動と同じです。
    アトミックな修正子を使わなければ、ドキュメント全体が上書きされます。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$c->drop();
$c->update(
    array("name" => "joe"),
    array("username" => "joe312", "createdAt" => new MongoDate()), 
    array("upsert" => true)
);
var_dump($c->findOne());

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#10 (0) {
  }
  ["username"]=>
  string(6) "joe312"
  ["createdAt"]=>
  object(MongoDate)#4 (0) {
  }
}
]]>
   </screen>
  </example>
  <example>
   <title><function>MongoCollection::update</function> での複数更新</title>
   <para>
    デフォルトでは <function>MongoCollection::update</function> は、
    <parameter>$criteria</parameter> にマッチするドキュメントが複数見つかっても最初のものだけを更新します。
    必要なら、"multiple" オプションでその挙動を変えることができます。
   </para>
   <para>
    この例は、翌日が誕生日である全員に "gift" フィールドを追加します。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$today = array('$gt' => new MongoDate(), '$lt' => new MongoDate(strtotime("+1 day")));
$people->update(
    array("birthday" => $today),
    array('$set' => array('gift' => $surprise)),
    array("multiple" => true)
);

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <link linkend="mongo.updates">更新に関するドキュメント</link> および
   <link xlink:href="&url.mongodb.dochub.update;">MongoDB コアメント</link>
   を参照ください。
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
