<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 350988 Maintainer: takagi Status: ready -->
<!-- Credits: mumumu -->

<refentry xml:id="mongocollection.batchinsert" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::batchInsert</refname>
  <refpurpose>複数のドキュメントをコレクションに追加する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>MongoCollection::batchInsert</methodname>
   <methodparam><type>array</type><parameter>a</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;    
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>a</parameter>
     </term>
     <listitem>
      <para>
       配列の配列あるいはオブジェクト。オブジェクトを使う場合は、
       protected や private のプロパティは保持できません。
      </para>
      <note>
       <para>
        追加するドキュメントが <literal>_id</literal> のキーあるいはプロパティを持たない場合は、
        新しい <classname>MongoId</classname> インスタンスを作ってそれを代入します。
        この挙動に関する詳しい情報は <function>MongoCollection::insert</function> を参照ください。
       </para>
      </note>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       追加操作群についてのオプションの配列。
       現在利用可能なオプションは、以下のとおりです。
       <itemizedlist>
        <listitem>
         <para>
          <literal>"continueOnError"</literal>
         </para>
         <para>
          boolean で、デフォルトは &false; です。
          これを設定すると、(ID の重複などが原因で)
          一括インサートが失敗したときにもデータベースは処理を続行します。
          その結果、一括インサート処理の挙動が一件ごとのインサートを繰り返したときと同じになります。
          ただし、<function>MongoDB::lastError</function> をコールすると、
          直近の操作が失敗していなくても何か失敗があればエラーが設定されています。
          複数のエラーが発生したときには、
          <function>MongoDB::lastError</function> が返すのは最後に発生したエラーだけとなります。
         </para>
         <note>
          <para>
           <literal>continueOnError</literal> は、あくまでもデータベース側のエラーにしか影響を及ぼさないことに注意しましょう。
           ドキュメントそのものに問題があるもの
           (キーの名前が空になっているなど) をインサートしようとすると、
           ドライバーがこのエラーを検出してデータベースへの送信を止めてしまうので、処理はそこで終わってしまいます。
           ドライバー側で検出されるドキュメントのエラーに関しては、
           <literal>continueOnError</literal> は何もできません。
          </para>
         </note>
        </listitem>
        &mongo.writes.parameters.fsync;
        &mongo.writes.parameters.journal;
        &mongo.writes.parameters.sockettimeoutms;
        &mongo.writes.parameters.writeconcern;
        &mongo.writes.parameters.writeconcerntimeoutms;
       </itemizedlist>
      </para>
      <para>
       以下のオプションは廃止予定です。使ってはいけません。
       <itemizedlist>
        &mongo.writes.parameters.safe;
        &mongo.writes.parameters.timeout;
        &mongo.writes.parameters.writeconcerntimeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   <literal>w</literal> を設定して書き込みの確認をするようにしている場合は、
   追加の状況 ("ok") と発生したエラー ("err")
   を連想配列で返します。設定されていないときは、一括追加の送信に成功すれば
   &true;、失敗すれば &false; を返します。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   追加したドキュメントが空だったり長さがゼロのキーが含まれていたりした場合に
   <classname>MongoException</classname> をスローします。
   protected や private なプロパティを持つオブジェクトを追加しようとすると、
   キーの長さがゼロのエラーを引き起こします。
  </para>
  &mongo.errors.exceptions.writeconcern;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongo 1.5.0</entry>
       <entry>
        <para>
         <literal>"wTimeoutMS"</literal> オプションが追加されました。これは
         <literal>"wtimeout"</literal> を置き換えるものです。
         <literal>"wtimeout"</literal> を使うと
         <constant>E_DEPRECATED</constant> が発生します。
        </para>
        <para>
         <literal>"socketTimeoutMS"</literal> オプションが追加されました。これは
         <literal>"timeout"</literal> を置き換えるものです。
         <literal>"timeout"</literal> を使うと
         <constant>E_DEPRECATED</constant> が発生します。
        </para>
        <para>
         <literal>"safe"</literal> を使うと
         <constant>E_DEPRECATED</constant> が発生します。
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.3.4</entry>
       <entry><literal>"wtimeout"</literal> オプションが追加されました。</entry>
      </row>
      <row>
       <entry>PECL mongo 1.3.0</entry>
       <entry><literal>"w"</literal> オプションが追加されました。</entry>
      </row>
      <row>
       <entry>PECL mongo 1.2.7</entry>
       <entry><literal>"continueOnError"</literal> オプションが追加されました。</entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.9</entry>
       <entry>
        <para>
         <literal>"safe"</literal> オプションに整数値がわたせるようになりました (以前は boolean のみでした)。
        </para>
        <para>
         <literal>"fsync"</literal> オプションが追加されました。
        </para>
       </entry>
      </row>
      <row>
       <entry>PECL mongo 1.0.5</entry>
       <entry><parameter>options</parameter> パラメータが追加されました。</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoCollection::batchInsert</function> の例</title>
   <para>
    バッチ挿入を使用すると、多くの要素を一度にデータベースに追加できます。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$users = array();
for ($i = 0; $i<100; $i++) {
  $users[] = array('username' => 'user'.$i, 'i' => $i);
}

$mongo = new MongoClient();
$collection = $mongo->my_db->users;
$collection->drop();

$collection->batchInsert($users);

foreach ($users as $user) {
  echo $user['_id']."\n"; // MongoId のインスタンスが格納されています
}

$users = $collection->find()->sort(array('i' => 1));
foreach ($users as $user) {
    var_dump($user['username']);
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
4bf43ac68ead0e1971000000
4bf43ac68ead0e1971010000
4bf43ac68ead0e1971020000
...
string(5) "user1"
string(5) "user2"
string(5) "user3"
...
]]>
   </screen>
  </example>

  <example>
   <title><function>MongoCollection::batchInsert</function> でエラーを無視する例</title>
   <programlisting role="php">
<![CDATA[
<?php

$con = new Mongo;
$db = $con->demo;

$doc1 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010001'),
        'id' => 1,
        'desc' => "ONE",
);
$doc2 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010002'),
        'id' => 2,
        'desc' => "TWO",
);
$doc3 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010002'), // same _id as above
        'id' => 3,
        'desc' => "THREE",
);
$doc4 = array(
        '_id' => new MongoId('4cb4ab6d7addf98506010004'),
        'id' => 4,
        'desc' => "FOUR",
);

$c = $db->selectCollection('c');
$c->batchInsert(
    array($doc1, $doc2, $doc3, $doc4),
    array('continueOnError' => true)
);

$docs = $c->find();
foreach ($docs as $doc) {
    var_dump($doc['desc']);
}
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
string(3) "ONE"
string(3) "TWO"
string(4) "FOUR"
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::insert</function></member>
   <member><function>MongoCollection::update</function></member>
   <member><function>MongoCollection::find</function></member>
   <member><function>MongoCollection::remove</function></member>
   <member>MongoDB コアドキュメントの <link xlink:href="&url.mongodb.dochub.insert;">insert</link></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
