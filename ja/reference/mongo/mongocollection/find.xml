<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 332331 Maintainer: takagi Status: ready -->

<refentry xml:id="mongocollection.find" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::find</refname>
  <refpurpose>コレクションに問い合わせ、結果セットの <classname>MongoCursor</classname> を返す</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCollection::find</methodname>
   <methodparam choice="opt"><type>array</type><parameter>query</parameter><initializer>array()</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>fields</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;  
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>query</parameter>
     </term>
     <listitem>
      <para>
       検索したいフィールド。
       MongoDB のクエリ言語は極めて幅広いものです。
       PHP ドライバはほとんどの場合クエリをそのままサーバーに流すので、
       MongoDB コアドキュメントの
       <link xlink:href="&url.mongodb.dochub.find;">find</link> を読むといいでしょう。
      </para>
      <warning>
       <para>
        クエリの特別な演算子 (<literal>$</literal> ではじまるもの)
        は、すべてシングルクォートで囲まなければならないことに注意しましょう。
        <literal>"$exists"</literal> などとすると、PHP がそれを変数
        <literal>$exists</literal> の値で置き換えてしまいます。
       </para>
      </warning>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>fields</parameter>
     </term>
     <listitem>
      <para>
       返される結果のフィールド。配列の形式は
       <literal>array('fieldname' => true, 'fieldname2' => true)</literal>
       のようになります。<literal>_id</literal> フィールドは常に返されます。
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   検索結果のカーソルを返します。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
   <example>
   <title><function>MongoCollection::find</function> の例</title>
   <para>この例は、基本的な検索オプションを示します。</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'produce');

// フルーツを検索します
$fruitQuery = array('Type' => 'Fruit');

$cursor = $collection->find($fruitQuery);
foreach ($cursor as $doc) {
    var_dump($doc);
}

// 甘いやつを検索します (Taste は Details の子です)
$sweetQuery = array('Details.Taste' => 'Sweet');
echo "Sweet\n";
$cursor = $collection->find($sweetQuery);
foreach ($cursor as $doc) {
    var_dump($doc);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(4) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "50a87dd084f045a19b220dd6"
  }
  ["Name"]=>
  string(5) "Apple"
  ["Type"]=>
  string(5) "Fruit"
  ["Details"]=>
  array(2) {
    ["Taste"]=>
    string(5) "Sweet"
    ["Colour"]=>
    string(3) "Red"
  }
}
array(4) {
  ["_id"]=>
  object(MongoId)#8 (1) {
    ["$id"]=>
    string(24) "50a87de084f045a19b220dd7"
  }
  ["Name"]=>
  string(5) "Lemon"
  ["Type"]=>
  string(5) "Fruit"
  ["Details"]=>
  array(2) {
    ["Taste"]=>
    string(4) "Sour"
    ["Colour"]=>
    string(5) "Green"
  }
}

Sweet:
array(4) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "50a87dd084f045a19b220dd6"
  }
  ["Name"]=>
  string(5) "Apple"
  ["Type"]=>
  string(5) "Fruit"
  ["Details"]=>
  array(2) {
    ["Taste"]=>
    string(5) "Sweet"
    ["Colour"]=>
    string(3) "Red"
  }
}
]]>
   </screen>
   <para>
     カーソルの使いかたについての詳しい情報は <classname>MongoCursor</classname> を参照ください。
   </para>
  </example>
  <example>
   <title><function>MongoCollection::find</function> の例</title>
   <para>この例は、範囲指定検索の方法を示します。</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'phpmanual');

// 5 < x < 20 であるドキュメントを検索します
$rangeQuery = array('x' => array( '$gt' => 5, '$lt' => 20 ));

$cursor = $collection->find($rangeQuery);
foreach ($cursor as $doc) {
    var_dump($doc);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(2) {
  ["_id"]=>
  object(MongoId)#10 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000000"
  }
  ["x"]=>
  int(12)
}
array(2) {
  ["_id"]=>
  object(MongoId)#11 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000001"
  }
  ["x"]=>
  int(12)
}
]]>
   </screen>
   <para>
     カーソルの挙動についての詳細な情報は <classname>MongoCursor</classname> を参照ください。
   </para>
  </example>
  <example>
   <title><function>MongoCollection::find</function> での $where の使用例</title>
   <para>この例は、コレクションの検索に javascript コードを使って結果セットを小さくする方法を示します。</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'phpmanual');

$js = "function() {
    return this.name == 'Joe' || this.age == 50;
}";
$cursor = $collection->find(array('$where' => $js));
foreach ($cursor as $doc) {
    var_dump($doc);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000002"
  }
  ["name"]=>
  string(3) "Joe"
  ["age"]=>
  int(20)
}
]]>
   </screen>
  </example>
  <example>
   <title><function>MongoCollection::find</function> での $in の使用例</title>
   <para>この例は、コレクションの検索に $in 演算子を使う方法を示します。</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'phpmanual');

$cursor = $collection->find(array(
    'name' => array('$in' => array('Joe', 'Wendy'))
));

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000002"
  }
  ["name"]=>
  string(3) "Joe"
  ["age"]=>
  int(20)
}
]]>
   </screen>
  </example>

  <example>
   <title>配列形式での結果の取得</title>
   <para>
    このメソッドは <classname>MongoCursor</classname> を返します。
    しかし、配列形式のほうが使いやすいという人もいるでしょう。
    カーソルを配列に変換するには <function>iterator_to_array</function>
    関数を使います。
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'phpmanual');

$cursor = $collection->find();
$array = iterator_to_array($cursor);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(3) {
  ["4ebc40af10b89f5149000000"]=>
  array(2) {
    ["_id"]=>
    object(MongoId)#6 (1) {
      ["$id"]=>
      string(24) "4ebc40af10b89f5149000000"
    }
    ["x"]=>
    int(12)
  }
  ["4ebc40af10b89f5149000001"]=>
  array(2) {
    ["_id"]=>
    object(MongoId)#11 (1) {
      ["$id"]=>
      string(24) "4ebc40af10b89f5149000001"
    }
    ["x"]=>
    int(12)
  }
  ["4ebc40af10b89f5149000002"]=>
  array(3) {
    ["_id"]=>
    object(MongoId)#12 (1) {
      ["$id"]=>
      string(24) "4ebc40af10b89f5149000002"
    }
    ["name"]=>
    string(3) "Joe"
    ["age"]=>
    int(20)
  }
}
]]>
   </screen>
   <para>
    <function>iterator_to_array</function> を使うと、結果全体をメモリに展開することになります。
    メモリサイズを超える結果セットではこれを使わないでください!
   </para>
   <para>
    また、一部のシステムコレクションには <literal>_id</literal>
    フィールドを持たないものがあります。<literal>_id</literal>
    がないドキュメントを含むかもしれないコレクションを扱う場合は、
    <function>iterator_to_array</function> の二番目の引数に &false;
    を渡します (そうすれば、存在しない
    <literal>_id</literal> の値をキーとして使うことがなくなります)。
   </para>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::findOne</function></member>
   <member><function>MongoCollection::insert</function></member>
   <member>MongoDB コアドキュメントの <link xlink:href="&url.mongodb.dochub.find;">find</link></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
