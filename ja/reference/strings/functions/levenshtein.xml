<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.levenshtein" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>levenshtein</refname>
  <refpurpose>二つの文字列のレーベンシュタイン距離を計算する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>str1</parameter></methodparam>
   <methodparam><type>string</type><parameter>str2</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>str1</parameter></methodparam>
   <methodparam><type>string</type><parameter>str2</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_ins</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_rep</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_del</parameter></methodparam>
  </methodsynopsis>
  <para>
   レーベンシュタイン距離は、<parameter>str1</parameter> を
   <parameter>str2</parameter> に変換するために置換、挿入、削除
   しなければならない最小の文字数として定義されます。アルゴリズムの複雑さは、
   <literal>O(m*n)</literal> です。
   ここで、<literal>n</literal> および <literal>m</literal> はそれぞれ
   <parameter>str1</parameter> および <parameter>str2</parameter> の長さです
   (O(max(n,m)**3) となる <function>similar_text</function> よりは良いですが、
   まだかなりの計算量です)。
  </para>
  <para>
   上記の最も簡単な形式では、この関数はパラメータとして引数を二つだけとり、
   <parameter>str1</parameter> から
   <parameter>str2</parameter> に変換する際に必要な
   挿入、置換、削除演算の数のみを計算します。
  </para>
  <para>
   2 番目の形式では、挿入、置換、削除演算のコストを定義する
   3 番目のパラメータが追加されます。この形式は 1 番目の形式より一般的で
   汎用性が高いですが、効率的ではありません。
  </para>
 </refsect1>

<refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str1</parameter></term>
     <listitem>
      <para>
       レーベンシュタイン距離を計算する文字列のひとつ。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>str2</parameter></term>
     <listitem>
      <para>
       レーベンシュタイン距離を計算する文字列のひとつ。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_ins</parameter></term>
     <listitem>
      <para>
       挿入のコストを定義します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_rep</parameter></term>
     <listitem>
      <para>
       置換のコストを定義します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_del</parameter></term>
     <listitem>
      <para>
       削除のコストを定義します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   この関数は、引数で指定した二つの文字列のレーベンシュタイン距離を返します。
   引数文字列の一つが 255 文字の制限より長い場合に -1 を返します。
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>levenshtein</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
// スペルミスした単語を入力します
$input = 'carrrot';

// チェックするための単語の配列
$words  = array('apple','pineapple','banana','orange',
                'radish','carrot','pea','bean','potato');

// まだ最短距離は見つかっていません
$shortest = -1;

// 最短距離を見つけるため単語をループします
foreach ($words as $word) {

    // 入力した単語と現在の単語の距離を
    // 計算します
    $lev = levenshtein($input, $word);

    // マッチするかどうかチェックします
    if ($lev == 0) {

        // 最短な単語はこれだ (マッチした)
        $closest = $word;
        $shortest = 0;

        // ループを抜ける; マッチしたものを見つけました
        break;
    }

    // もし距離が次に見つけた最短距離よりも短い場合、
    // もしくは次の最短の単語がまだ見つかっていない場合
    if ($lev <= $shortest || $shortest < 0) {
        // 最短のマッチと最短距離をセットします
        $closest  = $word;
        $shortest = $lev;
    }
}

echo "入力した単語: $input\n";
if ($shortest == 0) {
    echo "一致するものが見つかりました: $closest\n";
} else {
    echo "もしかして: $closest\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
入力した単語: carrrot
もしかして: carrot
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>soundex</function></member>
    <member><function>similar_text</function></member>
    <member><function>metaphone</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
