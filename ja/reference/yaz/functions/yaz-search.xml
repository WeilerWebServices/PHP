<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- splitted from ./ja/functions/yaz.xml, last change in rev 1.1 -->
<!-- EN-Revision: 297028 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
<refentry xml:id="function.yaz-search" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>yaz_search</refname>
  <refpurpose>検索を準備する</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>yaz_search</methodname>
   <methodparam><type>resource</type><parameter>id</parameter></methodparam>
   <methodparam><type>string</type><parameter>type</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>yaz_search</function> は、指定した接続で検索を行う準備をします。
  </para>
  <para>
   <function>yaz_connect</function> と同様にこの関数は非ブロックモードで
   動作し、後で <function>yaz_wait</function> がコールされたときのために
   検索の準備をするだけです。
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>id</parameter></term>
     <listitem>
      <para>
       <function>yaz_connect</function> が返す接続リソース。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       クエリの型を表します。現在は <literal>"rpn"</literal> のみがサポート
       されており、この場合 3 番目の引数には Type-1 クエリを前置表記で
       指定します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       RPN クエリは、Z39.50 規格により定義された Type-1 クエリのテキスト
       表現です。しかし、YAZ により使用されるテキスト表現では、演算子が
       オペランドの前にある前置表記が使用されます。クエリ文字列はトークンの
       並びであり、このトークンでは 2 重引用符で括られない限り空白文字は
       無視されます。アットマーク(<literal>@</literal>)で始まるトークンは
       演算子とみなされ、そうでない場合は検索項目として処理されます。
      </para>
      <table>
       <title>RPN 演算子</title>
       <tgroup cols="2">
        <colspec colwidth="1*" colname="construct"/>
        <colspec colwidth="2*" colname="description"/>
        <thead>
         <row>
          <entry>構文</entry>
          <entry>説明</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><literal>@and</literal> query1 query2</entry>
          <entry>
           query1 および query2 の積集合
          </entry>
         </row>
         <row>
          <entry><literal>@or</literal> query1 query2</entry>
          <entry>
           query1 および query2 の和集合
          </entry>
         </row>
         <row>
          <entry><literal>@not</literal> query1 query2</entry>
          <entry>
           query1 であり、query2 でない
          </entry>
         </row>
         <row>
          <entry><literal>@set</literal> name</entry>
          <entry>
           結果セットへのリファレンス
          </entry>
         </row>
         <row>
          <entry><literal>@attrset</literal> set query</entry>
          <entry>
           クエリの属性セットを指定します。この構造が使用できるのは
           全てのクエリの始めに一回だけです。
          </entry>
         </row>
         <row>
          <entry><literal>@attr</literal> [set] type=value query</entry>
          <entry>
           クエリに属性を適用します。型と値は属性型と属性値をそれぞれ指定する
           整数です。この組みが指定された場合、属性の組を指定します。
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>     
      <para>
       属性についての情報は
       <link xlink:href="&url.yaz-loc-bib1;">Z39.50 Maintenance Agency</link>
       サイトにあります。
      </para>
      <note>
       <para>
        もう少しわかりやすい記法を利用したい場合は、CCL パーサ関数 -
        <function>yaz_ccl_conf</function> および
        <function>yaz_ccl_parse</function> を使用してください。
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>クエリの例</title>
   <para>
    単純な検索は以下のように行います。
    <screen>
<![CDATA[
computer
]]>
    </screen>
    は、"computer" を含む文書にマッチします。属性は指定されていません。
   </para>
   <para>
    クエリ
    <screen>
<![CDATA[
"knuth donald"
]]>
    </screen>
    は、"knuth donald" を含む文書にマッチします（サーバーが複数の単語による
    検索をサポートしている場合）。
   </para>
   <para>
    このクエリは、同じフレーズに対して 2 つの属性を適用しています。
    <screen>@attr 1=1003 @attr 4=1 "knuth donald"</screen>
    最初の属性は type 1 (Bib-1 use) で、その値は 1003
    (Author) です。
    2 番目の属性は type 4 (structure) で、その値は 1 (phrase)
    です。つまりこれは、Donald Knuth が著者である文書にマッチする
    ことになります。
   </para>
   <para>
    クエリ
    <screen>
<![CDATA[
@and @or a b @not @or c d e
]]>
    </screen>
    は、次のような意味になります。<literal>(a or b) and ((c or d) not 
    e)</literal>
   </para>
   <para>
    さらに複雑な例です。
    <screen>
<![CDATA[
@attrset gils @and @attr 1=4 art @attr 1=2000 company
]]>
    </screen>
    このクエリは GILS 属性セットをすべて使用しています。このクエリは
    表題（Title）に <literal>art</literal> が含まれ（GILS,BIB-1）、
    配布者（Distributor）に <literal>company</literal> が含まれる（GILS）
    文書にマッチします。
   </para>
  </example>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
