<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341675 Maintainer: mumumu Status: ready -->
<chapter xml:id="mysqlnd.stats" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>統計情報</title>
 <para>
  <emphasis role="bold">統計情報を使う</emphasis>
 </para>
 <para>
  MySQL Native Driver は、クライアントとサーバー間の通信に関する統計情報を収集する機能をサポートしています。収集できる統計情報は主に2つのタイプに分けられます。
 </para>
 <itemizedlist>
  <listitem>
   <para>
    クライアントの統計情報
   </para>
  </listitem>
  <listitem>
   <para>
    接続の統計情報
   </para>
  </listitem>
 </itemizedlist>
 <para>
  <literal>mysqli</literal> 拡張機能を使っている場合、これらの統計情報は以下の2つのAPIを呼び出すことで取得できます。
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <function>mysqli_get_client_stats</function>
   </para>
  </listitem>
  <listitem>
   <para>
    <function>mysqli_get_connection_stats</function>
   </para>
  </listitem>
 </itemizedlist>
 <note>
  <para>
   MySQL Native Driver を使っているすべての拡張機能が統計情報を収集します。たとえば、<literal>ext/mysql</literal> や <literal>ext/mysqli</literal> を MySQL Native Driver を使ってコンパイルし、<literal>ext/mysql</literal> や <literal>ext/mysqli</literal> の関数を呼び出すと、収集される統計情報の値が変わります。MySQL Native Driver を使ってコンパイルされた MySQL 拡張機能の呼び出しが、どの程度統計情報に影響を与えるかはわかりません。PDO MySQL Driver や <literal>ext/mysql</literal> や <literal>ext/mysqli</literal> を、オプションで MySQL Native Driver を使うように設定することができます。こうすると、すべての拡張機能で統計情報を変化させることができます。
  </para>
 </note>
 <para>
  <emphasis role="bold">クライアントの統計情報にアクセスする</emphasis>
 </para>
 <para>
  クライアントの統計情報にアクセスするには、<function>mysqli_get_client_stats</function> 関数を呼び出す必要があります。この関数を呼び出すのに引数は必要ありません。
 </para>
 <para>
  この関数は、統計情報の名前をキーとして対応するデータを値とする連想配列を返します。
 </para>
 <para>
  クライアントの統計情報は <function>phpinfo</function> 関数を呼び出してもアクセスできます。
 </para>
 <para>
  <emphasis role="bold">接続の統計情報にアクセスする</emphasis>
 </para>
 <para>
  接続の統計情報にアクセスするには <function>mysqli_get_connection_stats</function> 関数を使います。この関数は接続ハンドルを引数にとります。
 </para>
 <para>
  この関数は、統計情報の名前をキーとして対応するデータを値とする連想配列を返します。
 </para>
 <para>
  <emphasis role="bold">結果セットをバッファリングさせるか否か</emphasis>
 </para>
 <para>
  結果セットはバッファリングさせることもできますし、しないこともできます。デフォルトの設定では、<literal>ext/mysql</literal> と <literal>ext/mysqli</literal> は通常の (プリペアドステートメントでない) クエリの場合結果セットをバッファリングします。バッファリングされた結果セットはクライアント側でキャッシュされます。クエリが実行された後、すべての結果がMySQLサーバから取得され、クライアント側でキャッシュに保存されます。結果セットをバッファリングすることの大きな利点は、一度クライアントが結果を取得すると、サーバがすべての結果セットに割り当てられたリソースを開放できることです。
 </para>
 <para>
  一方、結果セットをバッファリングしない場合、結果セットはサーバ側にバッファリングするよりも長く残ります。仮にクライアント側でのメモリ使用量を削減したいが、サーバ側の負荷が高くなっても構わない場合、結果セットをバッファリングしないようにします。仮にサーバの負荷が高く、バッファリングしていない結果セットの量がサーバ側で多いことが分かっている場合、その負荷をクライアント側に移すことを検討すべきです。クライアントは通常の場合サーバよりも分散しやすいからです。ここでいう <quote>負荷</quote> とはメモリバッファに対するものだけでなく、サーバが結果セットを開放する前に他のリソース、たとえばファイルハンドルやスレッドを開きっぱなしにする必要があることも指しています。
 </para>
 <para>
  プリペアドステートメントはデフォルトでは結果セットをバッファリングしません。しかし、<function>mysqli_stmt_store_result</function> 関数を使えば、結果セットのバッファリングを有効にすることができます。
 </para>
 <para>
  <emphasis role="bold">MySQL Native Driver が返す統計情報</emphasis>
 </para>
 <para>
  以下の表で、<function>mysqli_get_client_stats</function>,
  <function>mysqli_get_connection_stats</function> 関数が返す統計情報のリストを示します。
 </para>
 <table>
  <title>MySQL Native Driver が返す統計情報: ネットワーク関連</title>
  <tgroup cols="4">
   <colspec colwidth="10*"/>
   <colspec colwidth="10*"/>
   <colspec colwidth="40*"/>
   <colspec colwidth="40*"/>
   <thead>
    <row>
     <entry>統計情報</entry>
     <entry>統計のカテゴリ</entry>
     <entry>説明</entry>
     <entry>注意点</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry><literal>bytes_sent</literal></entry>
     <entry>Connection</entry>
     <entry>PHP から MySQLサーバに送信されたバイト数</entry>
     <entry>圧縮プロトコルの効率をチェックするのに使えます</entry>
    </row>
    <row>
     <entry><literal>bytes_received</literal></entry>
     <entry>Connection</entry>
     <entry>MySQLサーバから受け取ったバイト数</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>packets_sent</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおいて送信されたパケット数</entry>
     <entry>クライアントサーバプロトコルの実装をデバッグするのに使われます</entry>
    </row>
    <row>
     <entry><literal>packets_received</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおいて受信したパケット数</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>protocol_overhead_in</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルの受信側の通信にかかるオーバーヘッドをバイト単位で示します。現状はパケットヘッダ(4バイト)のみをオーバーヘッドと看做しています。
      protocol_overhead_in = packets_received * 4で表されます。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>protocol_overhead_out</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルの受信側の通信にかかるオーバーヘッドをバイト単位で示します。現状はパケットヘッダ(4バイト)のみをオーバーヘッドと看做しています。
      protocol_overhead_out = packets_sent * 4で表されます。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>bytes_received_ok_packet</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおけるOKパケットの受信量の合計をバイト単位で示します。
      OKパケットはステータスメッセージも含むことができます。ステータスメッセージの長さは変化しうるため、OKパケットのサイズは固定ではありません。</entry>
     <entry>クライアントサーバプロトコルの実装をデバッグするのに使われます。受信する合計バイト数には、パケットヘッダ(4バイト, protocol_overhead_in や protocol_overhead_out を参照) のサイズも含まれていることに注意してください</entry>
    </row>
    <row>
     <entry><literal>packets_received_ok</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおけるOKパケットを受信した数です。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>bytes_received_eof_packet</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおけるEOFパケットを受信量の合計をバイト単位で示します。EOFパケットはサーバのバージョンによってサイズが変わります。また、EOFパケットはエラーメッセージも伝えることができます。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>packets_received_eof</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおけるEOFパケットの数を示します。EOFパケットの数は、PHPが期待するパケットを受け取らなかった場合であっても増加します。これは他のパケット数を示す統計情報と同じです。PHPが期待しないパケットの例は、エラーメッセージが挙げられます。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>bytes_received_rset_header_packet</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおける結果セットにあるヘッダパケットの合計サイズをバイト単位で示します。パケットのサイズはペイロード(<literal>LOAD LOCAL INFILE</literal>, <literal>INSERT</literal>, <literal>UPDATE</literal>, <literal>SELECT</literal>, エラーメッセージ)に応じて変わります。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>packets_received_rset_header</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおける結果セットにあるヘッダパケットの数を示します</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>bytes_received_rset_field_meta_packet</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおける結果セットにあるメタデータ(カラム情報) の合計サイズをバイト単位で示します。もちろん、メタデータのサイズは結果セットにあるカラムによって変わります。このパケットはペイロードが COM_LIST_FIELDS の場合(訳注：テーブルのカラム情報を得るためのMySQLプロトコル http://dev.mysql.com/doc/internals/en/text-protocol.html#com-field-list)の場合は、エラーメッセージかEOFパケットを返す可能性があります。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>packets_received_rset_field_meta</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおける結果セットにあるメタデータ(カラム情報) のパケット数を示します。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>bytes_received_rset_row_packet</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおける結果セットにある行情報パケットの合計サイズをバイト単位で示します。このパケットはエラー情報またはEOFパケットを送信する場合もあります。
      <literal>bytes_received_rset_row_packet</literal> の数から、<literal>rows_fetched_from_server_normal</literal> と <literal>rows_fetched_from_server_ps</literal> の値を引くことによって、エラー数やEOFパケットの数を割り出すことができます。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>packets_received_rset_row</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルの結果セット行データパケットと、それらの合計サイズをバイト単位で示します。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>bytes_received_prepare_response_packet</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおける、プリペアドステートメント初期化パケット(prepared statement init packets) が OK を返した合計サイズをバイト単位で示します。このパケットはエラーを送信する可能性もあります。このパケットのサイズは MySQL のバージョンによって変わります。: MySQL 4.1 では 9バイト、 MySQ 5.0 以降は 12 byte です。エラーが起きた回数を安全に知る方法はありません。たとえば、MySQL 5.0 以降の MySQL に常に接続している場合は、<literal>bytes_received_prepare_response_packet</literal> != <literal>packets_received_prepare_response</literal> * 12 の場合にエラーが起きていると推定できるかもしれません。<literal>ps_prepared_never_executed</literal> や <literal>ps_prepared_once_executed</literal> も参照してください。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>packets_received_prepare_response</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおける、プリペアドステートメント初期化パケット(prepared statement init packets) が OK を返した数</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>bytes_received_change_user_packet</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおける、COM_CHANGE_USER パケットの合計サイズをバイト単位で示します。このパケットはエラーやEOFパケットを送信する可能性もあります。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>packets_received_change_user</literal></entry>
     <entry>Connection</entry>
     <entry>MySQL のクライアントサーバプロトコルにおける、COM_CHANGE_USER パケットの数</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>packets_sent_command</literal></entry>
     <entry>Connection</entry>
     <entry>PHP から MySQL に送信されたMySQL クライアントサーバプロトコルコマンドの合計数。特定のどのコマンドが送信されたか、そしてそれらのうちどのくらいが実際に送信されたかを知る方法はありません。この統計値は、PHPバイナリで MySQLのサポートを無効にすることを確かめる手がかりを知るために、PHP がコマンドを送信しているかどうかを知る手段として使えるくらいです。また、データを MySQL に送信している間にエラーが起きた回数を知る方法もありません。記録されるエラーは command_buffer_too_small (後述) の値くらいです。</entry>
     <entry>MySQL のクライアントサーバプロトコルのデバッグする用途だけに役立ちます。</entry>
    </row>
    <row>
     <entry><literal>bytes_received_real_data_normal</literal></entry>
     <entry>Connection</entry>
     <entry>PHP クライアントが <literal>mysqlnd</literal> からテキストプロトコル経由で受け取ったペイロードの合計バイト数。</entry>
     <entry>これは、プリペアドステートメントではないクエリから生成され、PHPクライアントが取得した結果セットに含まれる実際のデータサイズです。完全な結果セットは <literal>mysqlnd</literal> が MySQL から取得しますが、この統計値は PHP クライアントが <literal>mysqlnd</literal> から実際に取得した実際のデータのみを数えていることに注意してください。この統計値を増やすコードの例は以下のようになります:
<programlisting>
<![CDATA[
$mysqli = new mysqli();
$res = $mysqli->query("SELECT 'abc'");
$res->fetch_assoc();
$res->close();
]]>
</programlisting>
      <para>
       毎回取得(fetch)操作をするたびにこの値が増加します。
      </para>

      <para>
       この統計値は、結果セットがクライアント上でバッファリングされただけで、実際に取得されていない場合は変化しません。たとえば、次のようなコードの場合です:
      </para>
<programlisting>
<![CDATA[
$mysqli = new mysqli();
$res = $mysqli->query("SELECT 'abc'");
$res->close();
]]>
</programlisting>
      <para>
       この統計値は PHP 5.3.4 から利用可能です。
      </para></entry>
    </row>
    <row>
     <entry><literal>bytes_received_real_data_ps</literal></entry>
     <entry>Connection</entry>
     <entry>PHP クライアントが <literal>mysqlnd</literal> からプリペアドステートメントプロトコル経由で受け取ったペイロードの合計バイト数。</entry>
     <entry>これは、プリペアドステートメントプロトコルを使ってから生成され、PHPクライアントが取得した結果セットに含まれる実際のデータサイズです。この値は、PHPクライアントが読み取らなければ変化しません。完全な結果セットは <literal>mysqlnd</literal> が MySQL から取得しますが、この統計値は PHP クライアントが <literal>mysqlnd</literal> から実際に取得した実際のデータのみを数えていることに注意してください。<literal>bytes_received_real_data_normal</literal> も参照してください。この統計値は PHP 5.3.4 から利用可能です。</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  <emphasis role="bold">Result Set</emphasis>
 </para>
 <table>
  <title>MySQL Native Driver が返す統計情報: 結果セット</title>
  <tgroup cols="4">
   <colspec colwidth="10*"/>
   <colspec colwidth="10*"/>
   <colspec colwidth="40*"/>
   <colspec colwidth="40*"/>
   <thead>
    <row>
     <entry>統計情報</entry>
     <entry>統計のカテゴリ</entry>
     <entry>説明</entry>
     <entry>注意点</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry><literal>result_set_queries</literal></entry>
     <entry>Connection</entry>
     <entry>結果セットを生成したクエリの数。結果セットを生成するクエリの例: <literal>SELECT</literal>,
      <literal>SHOW</literal>. 結果セットのヘッダパケットを読み取っている間にエラーが発生した場合、この統計値はインクリメントされません</entry>
     <entry>たとえば、データベースに高い負荷をかけているクライアントを特定する目的で、PHP が MySQL に送信したクエリの数を間接的に測るのに使えます。</entry>
    </row>
    <row>
     <entry><literal>non_result_set_queries</literal></entry>
     <entry>Connection</entry>
     <entry>結果セットを生成しなかったクエリの数。結果セットを生成しないクエリの例:<literal>INSERT</literal>, <literal>UPDATE</literal>, <literal>LOAD DATA</literal>。結果セットのヘッダパケットを読み取っている間にエラーが発生した場合、この統計値はインクリメントされません。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>no_index_used</literal></entry>
     <entry>Connection</entry>
     <entry>結果セットを生成したが、インデックスを使わなかったクエリの数 (mysqld の起動オプション -log-queries-not-using-indexes も参照してください) こうしたクエリを記録したい場合、mysqli_report(MYSQLI_REPORT_INDEX) を使って ext/mysqli に例外をスローさせることができます。例外ではなく警告にとどめたい場合は、mysqli_report(MYSQLI_REPORT_INDEX ^ MYSQLI_REPORT_STRICT) を使ってください。</entry>
     <entry></entry>
    </row>
    <row>
     <entry><literal>bad_index_used</literal></entry>
     <entry>Connection</entry>
     <entry>結果セットを生成したが、良いインデックスを使わなかったクエリの数 (mysqld の起動オプション -log-slow-queries も参照してください)</entry>
     <entry>こうしたクエリを記録したい場合、mysqli_report(MYSQLI_REPORT_INDEX) を使って ext/mysqli に例外をスローさせることができます。例外ではなく警告にとどめたい場合は、mysqli_report(MYSQLI_REPORT_INDEX ^ MYSQLI_REPORT_STRICT) を使ってください。</entry>
    </row>
    <row>
     <entry><literal>slow_queries</literal></entry>
     <entry>Connection</entry>
     <entry>実行に <literal>long_query_time</literal> 秒以上かかり、少なくとも <literal>min_examined_row_limit</literal> 行以上調べる必要があるSQL</entry>
     <entry><function>mysqli_report</function>関数では記録できません</entry>
    </row>
    <row>
     <entry><literal>buffered_sets</literal></entry>
     <entry>Connection</entry>
     <entry><quote>通常の</quote> クエリで返された結果セットのうち、バッファリングされたものの数。<quote>通常の</quote> というのは、右の「注意点」で述べている <quote>プリペアドステートメントのことではありません</quote></entry>
     <entry>結果セットをクライアント側にバッファリングするAPI呼び出しの例:
      <function>mysql_query</function>,
      <function>mysqli_query</function>,
      <function>mysqli_store_result</function>,
      <function>mysqli_stmt_get_result</function>
      結果セットをクライアント側にバッファリングすると、サーバ側のリソースが迅速に解放され、結果セットを走査しやすくなります。欠点としては、クライアント側のメモリ消費が、バッファリングする分だけ増えてしまうということです。mysqlnd は、PHP の内部的なメモリ管理関数を使っているため、(MySQL Client Library とは異なり) PHP 側の memory_limit の設定を尊重することに注意してください。同じ理由で <function>memory_get_usage</function> 関数の実行結果は、MySQL Client Library と比べて高いメモリ使用量を報告します。<function>memory_get_usage</function> 関数は MySQL Client Library のメモリ使用量を全く計測しません。なぜなら、MySQL Client Library は この関数が監視する PHP の内部メモリ管理関数を使用していないからです！</entry>
    </row>
    <row>
     <entry><literal>unbuffered_sets</literal></entry>
     <entry>Connection</entry>
     <entry>通常の(プリペアドステートメントではない) クエリによって返された、バッファリングされていない結果セットの数</entry>
     <entry>クライアント側で結果セットがバッファリングされないAPI呼び出しの例:
      <function>mysqli_use_result</function></entry>
    </row>
    <row>
     <entry><literal>ps_buffered_sets</literal></entry>
     <entry>Connection</entry>
     <entry>プリペアドステートメントによって返される、バッファリングされた結果セットの数。デフォルトでは、プリペアドステートメントはバッファリングされません。</entry>
     <entry>クライアント側で結果セットがバッファリングされるAPI呼び出しの例:
      <literal>mysqli_stmt_store_result</literal></entry>
    </row>
    <row>
     <entry><literal>ps_unbuffered_sets</literal></entry>
     <entry>Connection</entry>
     <entry>プリペアドステートメントによって返される、バッファリングされない結果セットの数。</entry>
     <entry>デフォルトでは、プリペアドステートメントはバッファリングされません。</entry>
    </row>
    <row>
     <entry><literal>flushed_normal_sets</literal></entry>
     <entry>Connection</entry>
     <entry>
      通常の(プリペアドステートメントではない) クエリから返された、クライアントが読み取っていないため黙ってフラッシュされたデータが残っている結果セットの数。フラッシュはバッファリングされていない結果セットの場合だけ起こります。</entry>
     <entry>
      バッファリングされていない結果セットは、新しいクエリが実行される前に完全に取得されなければなりません。そうでない場合、MySQL はエラーを生成します。アプリケーションがバッファリングされていない結果セットからすべての行を取得していない場合、mysqlnd は行をクリアするため暗黙のうちに結果セットをフラッシュします。<literal>rows_skipped_normal</literal> や、<literal>rows_skipped_ps</literal> も参照してください。暗黙のフラッシュが起こりうる原因を以下に示します:
      <itemizedlist>
       <listitem>
        <para>
         クライアントアプリケーションが不完全な場合
        </para>
       </listitem>
       <listitem>
        <para>
         クライアントは探していた情報を見つけたあと終了しますが、MySQL に必要以上のレコードを計算させてしまっている場合
        </para>
       </listitem>
       <listitem>
        <para>
         クライアントアプリケーションが予期せず終了する場合
        </para>
       </listitem>
      </itemizedlist></entry>
    </row>
    <row>
     <entry><literal>flushed_ps_sets</literal></entry>
     <entry>Connection</entry>
     <entry>プリペアドステートメントのクエリから返された、クライアントが読み取っていないため黙ってフラッシュされたデータが残っている結果セットの数。フラッシュはバッファリングされていない結果セットの場合だけ起こります。</entry>
     <entry>同上</entry>
    </row>
    <row>
     <entry><literal>ps_prepared_never_executed</literal></entry>
     <entry>Connection</entry>
     <entry>準備(prepare)されたが、決して実行されないステートメントの数</entry>
     <entry>プリペアドステートメントはサーバのリソースを占有します。実行する予定がない場合、ステートメントを準備すべきではありません。</entry>
    </row>
    <row>
     <entry><literal>ps_prepared_once_executed</literal></entry>
     <entry>Connection</entry>
     <entry>一度だけ実行されたプリペアドステートメントの数</entry>
     <entry>
      プリペアドステートメントの背後にあるアイディアのうちのひとつは、同じクエリは繰り返し繰り返し(異なるパラメーターで)実行されるんだから、ステートメントの実行が準備と実行に分かれていれば、クエリのパースやほかの準備処理はキャッシュできる、というものです。 このアイディアは準備を一度行い、その結果を <quote>キャッシュ</quote> します。たとえば解析ツリーを複数のステートメントの実行時に再利用するのです。プリペアドステートメントが一度だけしか実行されない場合、二段階に処理が分かれていることは <quote>通常の</quote>クエリに比べて非効率かもしれません。なぜなら、すべてのキャッシュは余計なものであり、その情報を保持するためにサーバは(限られた)リソースを消費しているからです。結果的に、一度しか実行されていないプリペアドステートメントはパフォーマンスを害する原因になる可能性があります。
     </entry>
    </row>
    <row>
     <entry><literal>rows_fetched_from_server_normal</literal>,
      <literal>rows_fetched_from_server_ps</literal></entry>
     <entry>Connection</entry>
     <entry>
      クライアントが消費していたかいないかに関わらず、MySQLから取得に成功した結果セット行の合計数。行によっては、クライアントアプリケーションは取得しないため暗黙のうちにフラッシュされている場合があります。</entry>
     <entry><literal>packets_received_rset_row</literal> も参照してください</entry>
    </row>
    <row>
     <entry><literal>rows_buffered_from_client_normal</literal>,
      <literal>rows_buffered_from_client_ps</literal></entry>
     <entry>Connection</entry>
     <entry>
      通常のクエリ、またはプリペアドステートメントから生成された、バッファリングに成功した行の合計数。これは MySQL から取得され、クライアントにバッファリングされた行の数です。バッファリングに成功した行については、ふたつの全く別な統計値があることに注意してください。(MySQL から mysqlnd の内部バッファに)バッファリングされた行の数と、(mysqlnd の内部バッファからクライアントアプリケーションへ)取得され、バッファリングされた行の数です。バッファリングされた行数が、取得されてバッファリングされた行より多い場合、クライアントアプリケーションが必要以上に大きな結果セットを生成しているため、クライアントが読み取らない行ができてしまっている可能性があります。</entry>
     <entry>結果をバッファリングするクエリの例:
      <function>mysqli_query</function>,
      <function>mysqli_store_result</function></entry>
    </row>
    <row>
     <entry><literal>rows_fetched_from_client_normal_buffered</literal>,
      <literal>rows_fetched_from_client_ps_buffered</literal></entry>
     <entry>Connection</entry>
     <entry>バッファリングされた結果セットからクライアントによって取得された行の合計数。この結果セットは通常のクエリとプリペアドステートメントの両方から生成されたものです。</entry>
     <entry></entry>
    </row>
    <row>
     <entry><literal>rows_fetched_from_client_normal_unbuffered</literal>,
      <literal>rows_fetched_from_client_ps_unbuffered</literal></entry>
     <entry>Connection</entry>
     <entry>バッファリングされて「いない」結果セットからクライアントによって取得された行の合計数。この結果セットは通常のクエリとプリペアドステートメントの両方から生成されたものです。</entry>
     <entry></entry>
    </row>
    <row>
     <entry><literal>rows_fetched_from_client_ps_cursor</literal></entry>
     <entry>Connection</entry>
     <entry>プリペアドステートメントによって生成されたカーソルから、クライアントが取得した行の合計数</entry>
     <entry></entry>
    </row>
    <row>
     <entry><literal>rows_skipped_normal</literal>,
      <literal>rows_skipped_ps</literal></entry>
     <entry>Connection</entry>
     <entry>将来のために予約されています(今のところサポートされていません)</entry>
     <entry></entry>
    </row>
    <row>
     <entry><literal>copy_on_write_saved</literal>,
      <literal>copy_on_write_performed</literal></entry>
     <entry>Process</entry>
     <entry>
      mysqlnd では、エクステンションから返された値は mysqlnd 内部にある通信結果のバッファを指しています。開発者が値を変更しなければ、取得されたデータは一度だけメモリに保持されます。値を変更した場合、mysqlnd は 内部にある通信結果のバッファを変更から保護するために コピーオンライト を実行しなければなりません。MySQL Client Library を使うと、取得したデータを二度メモリに保持します。MySQL Client Library の内部バッファと変数の値がエクステンションによって返されるのです。理論上、mysqlnd は40%のメモリを節約できます。しかし、メモリに保持されている量は <function>memory_get_usage</function>関数では計測できないことに注意してください。</entry>
     <entry></entry>
    </row>
    <row>
     <entry><literal>explicit_free_result</literal>,
      <literal>implicit_free_result</literal></entry>
     <entry>Connection, Process (プリペアドステートメントのクリーンアップ時のみ)</entry>
     <entry>解放された結果セットの合計数</entry>
     <entry>ここでいう「解放」とは明示的なもので、初期化コマンドで生成された結果セットを除きます。たとえば <literal>mysqli_options(MYSQLI_INIT_COMMAND , ...)</literal> 関数の呼び出しがそれにあたります。</entry>
    </row>
    <row>
     <entry><literal>proto_text_fetched_null</literal>,
      <literal>proto_text_fetched_bit</literal>,
      <literal>proto_text_fetched_tinyint</literal>
      <literal>proto_text_fetched_short</literal>,
      <literal>proto_text_fetched_int24</literal>,
      <literal>proto_text_fetched_int</literal>
      <literal>proto_text_fetched_bigint</literal>,
      <literal>proto_text_fetched_decimal</literal>,
      <literal>proto_text_fetched_float</literal>
      <literal>proto_text_fetched_double</literal>,
      <literal>proto_text_fetched_date</literal>,
      <literal>proto_text_fetched_year</literal>
      <literal>proto_text_fetched_time</literal>,
      <literal>proto_text_fetched_datetime</literal>,
      <literal>proto_text_fetched_timestamp</literal>
      <literal>proto_text_fetched_string</literal>,
      <literal>proto_text_fetched_blob</literal>,
      <literal>proto_text_fetched_enum</literal>
      <literal>proto_text_fetched_set</literal>,
      <literal>proto_text_fetched_geometry</literal>,
      <literal>proto_text_fetched_other</literal></entry>
     <entry>Connection</entry>
     <entry>通常のクエリ(MySQL テキストプロトコル) から取得したあるタイプのカラムの合計数</entry>
     <entry>C API/ MySQL のメタデータと 統計の名前の対応:
      <itemizedlist>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_NULL</literal> - proto_text_fetched_null
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_BIT</literal> - proto_text_fetched_bit
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_TINY</literal> - proto_text_fetched_tinyint
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_SHORT</literal> - proto_text_fetched_short
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_INT24</literal> - proto_text_fetched_int24
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_LONG</literal> - proto_text_fetched_int
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_LONGLONG</literal> -
         proto_text_fetched_bigint
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_DECIMAL</literal>,
         <literal>MYSQL_TYPE_NEWDECIMAL</literal> -
         proto_text_fetched_decimal
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_FLOAT</literal> - proto_text_fetched_float
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_DOUBLE</literal> -
         proto_text_fetched_double
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_DATE</literal>,
         <literal>MYSQL_TYPE_NEWDATE</literal> - proto_text_fetched_date
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_YEAR</literal> - proto_text_fetched_year
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_TIME</literal> - proto_text_fetched_time
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_DATETIME</literal> -
         proto_text_fetched_datetime
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_TIMESTAMP</literal> -
         proto_text_fetched_timestamp
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_STRING</literal>,
         <literal>MYSQL_TYPE_VARSTRING</literal>,
         <literal>MYSQL_TYPE_VARCHAR</literal> -
         proto_text_fetched_string
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_TINY_BLOB</literal>,
         <literal>MYSQL_TYPE_MEDIUM_BLOB</literal>,
         <literal>MYSQL_TYPE_LONG_BLOB</literal>,
         <literal>MYSQL_TYPE_BLOB</literal> - proto_text_fetched_blob
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_ENUM</literal> - proto_text_fetched_enum
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_SET</literal> - proto_text_fetched_set
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>MYSQL_TYPE_GEOMETRY</literal> -
         proto_text_fetched_geometry
        </para>
       </listitem>
       <listitem>
        <para>
         上記にない <literal>MYSQL_TYPE_*</literal> (ないはずですが) - proto_text_fetched_other
        </para>
       </listitem>
      </itemizedlist>
      <para>
       MYSQL_*-type 定数は、 MySQL の各バージョンの同じSQLカラムタイプと結びついているとは限らないことに注意してください。
      </para></entry>
    </row>
    <row>
     <entry><literal>proto_binary_fetched_null</literal>,
      <literal>proto_binary_fetched_bit</literal>,
      <literal>proto_binary_fetched_tinyint</literal>
      <literal>proto_binary_fetched_short</literal>,
      <literal>proto_binary_fetched_int24</literal>,
      <literal>proto_binary_fetched_int</literal>,
      <literal>proto_binary_fetched_bigint</literal>,
      <literal>proto_binary_fetched_decimal</literal>,
      <literal>proto_binary_fetched_float</literal>,
      <literal>proto_binary_fetched_double</literal>,
      <literal>proto_binary_fetched_date</literal>,
      <literal>proto_binary_fetched_year</literal>,
      <literal>proto_binary_fetched_time</literal>,
      <literal>proto_binary_fetched_datetime</literal>,
      <literal>proto_binary_fetched_timestamp</literal>,
      <literal>proto_binary_fetched_string</literal>,
      <literal>proto_binary_fetched_blob</literal>,
      <literal>proto_binary_fetched_enum</literal>,
      <literal>proto_binary_fetched_set</literal>,
      <literal>proto_binary_fetched_geometry</literal>,
      <literal>proto_binary_fetched_other</literal></entry>
     <entry>Connection</entry>
     <entry>プリペアドステートメント(MySQL バイナリプロトコル) から取得したあるタイプのカラムの合計数</entry>
     <entry>カラムタイプと統計の名前の対応は、上の <literal>proto_text_*</literal> を参照してください</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <table>
  <title>MySQL Native Driver が返す統計情報: データベース接続</title>
  <tgroup cols="4">
   <colspec colwidth="10*"/>
   <colspec colwidth="10*"/>
   <colspec colwidth="40*"/>
   <colspec colwidth="40*"/>
   <thead>
    <row>
     <entry>統計情報</entry>
     <entry>統計のカテゴリ</entry>
     <entry>説明</entry>
     <entry>注意点</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry><literal>connect_success</literal>, <literal>connect_failure</literal></entry>
     <entry>Connection</entry>
     <entry>接続を試みた結果が 成功 / 失敗 した回数の合計</entry>
     <entry>再利用された接続や、他の種類の接続もすべて含みます</entry>
    </row>
    <row>
     <entry><literal>reconnect</literal></entry>
     <entry>Process</entry>
     <entry>既に開かれている接続ハンドルに対して(mysqli_real_connectを使って)行われた再接続の合計回数</entry>
     <entry>次のコードは、再接続を行います。<literal>$link = new mysqli(...);$link-&gt;real_connect(...)</literal> しかし、次のコードは再接続を行いません。<literal>$link = new mysqli(...); $link-&gt;connect(...)</literal> なぜなら、このコードは新しい接続が確立される前に明示的に既存の接続を閉じるからです。</entry>
    </row>
    <row>
     <entry><literal>pconnect_success</literal></entry>
     <entry>Connection</entry>
     <entry>持続的接続を試みて成功した合計回数</entry>
     <entry><literal>connect_success</literal> は、持続的接続と通常の接続の両方の成功数を合計している点に注意してください。通常の接続の成功数は、<literal>connect_success</literal> - <literal>pconnect_success</literal> で求められます。</entry>
    </row>
    <row>
     <entry><literal>active_connections</literal></entry>
     <entry>Connection</entry>
     <entry>アクティブな持続的接続と通常の接続の合計値</entry>
     <entry></entry>
    </row>
    <row>
     <entry><literal>active_persistent_connections</literal></entry>
     <entry>Connection</entry>
     <entry>アクティブな持続的接続の合計値</entry>
     <entry>アクティブな通常の接続の合計値は、<literal>active_connections</literal> - <literal>active_persistent_connections</literal> で求められます。</entry>
    </row>
    <row>
     <entry><literal>explicit_close</literal></entry>
     <entry>Connection</entry>
     <entry>明示的に閉じられた接続の合計数(ext/mysqli 限定).</entry>
     <entry>明示的に接続を閉じるコードの例 :
<programlisting>
<![CDATA[
$link = new mysqli(...); $link->close(...)
$link = new mysqli(...); $link->connect(...)
]]>
</programlisting></entry>
    </row>
    <row>
     <entry><literal>implicit_close</literal></entry>
     <entry>Connection</entry>
     <entry>暗黙的に閉じられた接続の合計数(ext/mysqli 限定).</entry>
     <entry>暗黙的に接続を閉じるコードの例 :
      <itemizedlist>
       <listitem>
        <para>
         <literal>$link = new mysqli(...);
         $link-&gt;real_connect(...)</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>unset($link)</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         持続的接続の場合: プールされる接続は real_connect 関数を使って作成されますが、作成されたハンドルにはどんなオプションが設定されたかわからない場合があります。この場合、暗黙のうちに接続を閉じることで、どんなオプションが設定されたかわからない接続が返されることを防いでください。
        </para>
       </listitem>
       <listitem>
        <para>
         持続的接続の場合: mysqli::ping や mysqli::change_user を実行すると失敗し、ext/mysqli が接続を閉じてしまいます。
        </para>
       </listitem>
       <listitem>
        <para>
         スクリプトの実行が終了する時: ユーザーが閉じていない接続は閉じられます。
        </para>
       </listitem>
      </itemizedlist></entry>
    </row>
    <row>
     <entry><literal>disconnect_close</literal></entry>
     <entry>Connection</entry>
     <entry>接続を試み、C API の<function>mysql_real_connect</function> を呼び出した後に失敗した回数</entry>
     <entry>C API の呼び出しの際に渡された接続ハンドルを閉じるため、<literal>disconnect_close</literal> と呼ばれています。</entry>
    </row>
    <row>
     <entry><literal>in_middle_of_command_close</literal></entry>
     <entry>Process</entry>
     <entry>コマンドの実行中(クエリを送信し、応答を受け取る前に残っていた結果セットが取得されなかったり、データを取得中だったり、LOAD DATA コマンドのデータを送信中だったりした場合)に閉じられた接続</entry>
     <entry>非同期クエリを使っていない場合、コマンド実行中に接続が閉じられるのは、PHPスクリプトが予期しない箇所で終了し、PHPが接続を閉じた場合だけのはずです。</entry>
    </row>
    <row>
     <entry><literal>init_command_executed_count</literal></entry>
     <entry>Connection</entry>
     <entry>初期化コマンドが実行された合計回数。たとえば、以下のようなコードが実行された回数です。
      <literal>mysqli_options(MYSQLI_INIT_COMMAND , ...)</literal></entry>
     <entry>初期化コマンドが成功した回数は <literal>init_command_executed_count</literal> - <literal>init_command_failed_count</literal> で求められます。</entry>
    </row>
    <row>
     <entry><literal>init_command_failed_count</literal></entry>
     <entry>Connection</entry>
     <entry>初期化コマンドが失敗した回数</entry>
     <entry></entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <table>
  <title>MySQL Native Driverが返す統計情報: COM_* コマンド</title>
  <tgroup cols="4">
   <colspec colwidth="10*"/>
   <colspec colwidth="10*"/>
   <colspec colwidth="40*"/>
   <colspec colwidth="40*"/>
   <thead>
    <row>
     <entry>統計情報</entry>
     <entry>統計のカテゴリ</entry>
     <entry>説明</entry>
     <entry>注意点</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry><literal>com_quit</literal>, <literal>com_init_db</literal>,
      <literal>com_query</literal>, <literal>com_field_list</literal>,
      <literal>com_create_db</literal>, <literal>com_drop_db</literal>,
      <literal>com_refresh</literal>, <literal>com_shutdown</literal>,
      <literal>com_statistics</literal>,
      <literal>com_process_info</literal>,
      <literal>com_connect</literal>,
      <literal>com_process_kill</literal>, <literal>com_debug</literal>,
      <literal>com_ping</literal>, <literal>com_time</literal>,
      <literal>com_delayed_insert</literal>,
      <literal>com_change_user</literal>,
      <literal>com_binlog_dump</literal>,
      <literal>com_table_dump</literal>,
      <literal>com_connect_out</literal>,
      <literal>com_register_slave</literal>,
      <literal>com_stmt_prepare</literal>,
      <literal>com_stmt_execute</literal>,
      <literal>com_stmt_send_long_data</literal>,
      <literal>com_stmt_close</literal>,
      <literal>com_stmt_reset</literal>,
      <literal>com_stmt_set_option</literal>,
      <literal>com_stmt_fetch</literal>, <literal>com_daemon</literal></entry>
     <entry>Connection</entry>
     <entry>PHP から MySQL へ、特定の COM_* コマンドを送信しようとした合計回数</entry>
     <entry><para>
       これらの統計値は、コマンドをチェックした後、対応する MySQLクライアントサーバプロトコルのパケットが送信される前にインクリメントされます。mysqlnd がパケットの送信に失敗したとしても、統計情報は減りません。パケットの送信にした場合、PHP は <quote>Error while sending %s packet. PID=%d.</quote> という、E_WARNING レベルの警告を発生させます。
      </para>

      <para>
       使い方の例:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         PHP があるコマンドを MySQLに送信しているかどうかをチェックする。たとえば、クライアントが <literal>COM_PROCESS_KILL</literal> を送信しているかどうかをチェックする。
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>COM_EXECUTE</literal> コマンドと <literal>COM_PREPARE</literal> コマンドの実行回数を比較することで、プリペアドステートメントの平均実行回数を割り出す。
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>COM_QUERY</literal> コマンドの実行回数がゼロかどうかをチェックすることで、PHP がプリペアドステートメントでない通常のクエリを実行しているかどうかをチェックする
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>COM_QUERY</literal> と <literal>COM_EXECUTE</literal> コマンドをチェックすることで、SQLを実行しすぎているPHPスクリプトを特定する
        </para>
       </listitem>
      </itemizedlist></entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <para>
  <emphasis role="bold">その他</emphasis>
 </para>
 <table>
  <title>MySQL Native Driver が返す統計情報: その他</title>
  <tgroup cols="4">
   <colspec colwidth="10*"/>
   <colspec colwidth="10*"/>
   <colspec colwidth="40*"/>
   <colspec colwidth="40*"/>
   <thead>
    <row>
     <entry>統計情報</entry>
     <entry>統計のカテゴリ</entry>
     <entry>説明</entry>
     <entry>注意点</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry><literal>explicit_stmt_close</literal>,
      <literal>implicit_stmt_close</literal></entry>
     <entry>プロセス</entry>
     <entry>プリペアドステートメントが閉じられた合計回数</entry>
     <entry>プリペアドステートメントは、常に明示的に閉じられるものとみなされます。ただし、prepare に失敗した場合を除きます。</entry>
    </row>
    <row>
     <entry><literal>mem_emalloc_count</literal>,
      <literal>mem_emalloc_ammount</literal>,
      <literal>mem_ecalloc_count</literal>,
      <literal>mem_ecalloc_ammount</literal>,
      <literal>mem_erealloc_count</literal>,
      <literal>mem_erealloc_ammount</literal>,
      <literal>mem_efree_count</literal>,
      <literal>mem_malloc_count</literal>,
      <literal>mem_malloc_ammount</literal>,
      <literal>mem_calloc_count</literal>,
      <literal>mem_calloc_ammount</literal>,
      <literal>mem_realloc_count</literal>,
      <literal>mem_realloc_ammount</literal>,
      <literal>mem_free_count</literal></entry>
     <entry>Process</entry>
     <entry>メモリ管理に関する関数コールの回数</entry>
     <entry>開発者だけが使うものです。</entry>
    </row>
    <row>
     <entry><literal>command_buffer_too_small</literal></entry>
     <entry>データベース接続</entry>
     <entry>PHP が MySQL にコマンドを送信する際、コマンドバッファの大きさが拡張された回数</entry>
     <entry>
      <para>
       mysqlnd は、内部的に <literal>mysqlnd.net_cmd_buffer_size</literal>(<filename>php.ini</filename>で設定) バイトを接続毎にメモリに割り当てます。MySQL のクライアントサーバプロトコルの場合、<literal>COM_QUERY</literal> (通常クエリ) コマンドがバッファサイズより大きい場合、mysqlnd はコマンドを送信するのに必要なサイズまでバッファを拡張します。ひとつの接続につきバッファが拡張された際はいつでも、<literal>command_buffer_too_small</literal> の値がひとつインクリメントされます。
      </para>

      <para>
       mysqlnd が ほぼすべての接続で デフォルトの <literal>mysqlnd.net_cmd_buffer_size</literal> (<filename>php.ini</filename> で設定) バイトを超えてバッファを拡張しなければならない場合、メモリの再割り当てを防ぐために、デフォルトの値を増やすことを検討すべきです。
      </para>

      <para>
       PHP 5.3.0 では、デフォルトのバッファサイズが 2K バイトでした。将来のバージョンでは、この値は 4K バイト以上になる見込みです。このデフォルトの値は <filename>php.ini</filename> の <literal>mysqlnd.net_cmd_buffer_size</literal> を設定するか、<literal>mysqli_options(MYSQLI_OPT_NET_CMD_BUFFER_SIZE, int size)</literal> 関数を使うことで変更することができます。
      </para>

      <para>
       4096バイト以上のバッファサイズを設定することを推奨します。なぜなら、mysqlnd は MySQL からある通信パケットを読み取っているときにそれだけのメモリを使うからです。PHP 5.3.0 では、MySQL が現在設定されているバッファサイズ以上のパケットを送信しても、mysqlnd は絶対にバッファサイズを拡大しません。その結果として、mysqlnd はパケットをデコードできず、クライアントアプリケーションがエラーを発生させることになります。PHP 5.3.0 における <literal>mysqlnd.net_cmd_buffer_size</literal> のデフォルトである 2048 バイト以上に大きなパケットが送られてくる場合はふたつしかありません: とても長いエラーメッセージを送信した場合と、<literal>COM_LIST_FIELD</literal> (<function>mysql_list_fields</function>関数から投げられる内部コマンド) から発生したパケットに含まれるカラムのメタデータが、とても長いデフォルト値(1900バイト以上)を持つ文字列型のカラムを持っていた場合です。この問題に関するバグレポートは存在していません - こんなことは滅多に起きないはずです。
      </para>

      <para>
       PHP 5.3.2 の mysqlnd は 4096バイトより小さいバッファを設定できません。
      </para></entry>
    </row>
    <row>
     <entry><literal>connection_reused</literal></entry>
     <entry></entry>
     <entry></entry>
     <entry></entry>
    </row>
   </tbody>
  </tgroup>
 </table>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
