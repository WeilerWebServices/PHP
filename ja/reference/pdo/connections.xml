<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 349999 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka,mumumu -->

<chapter xml:id="pdo.connections" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>接続、および接続の管理</title>
 <para>
  PDO 基底クラスのインスタンスを作成することにより、接続が確立されます。
  どのドライバを使用するのかにかかわらず、常に PDO クラスを指定します。
  コンストラクタに渡す引数により、データソース (いわゆる DSN) の指定や
  (もしあれば、オプションで) ユーザー名およびパスワードの指定を行います。
 </para>
 <para>
  <example>
   <title>MySQL への接続</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
?>
]]> 
   </programlisting>
  </example>
 </para>
 <para>
  接続時になんらかのエラーが発生した場合、<literal>PDOException</literal>
  オブジェクトがスローされます。エラー処理を行いたい場合はこの例外を
  キャッチします。あるいはこれを無視して、
  <function>set_exception_handler</function> で設定した
  グローバル例外ハンドラに処理を任せることもできます。
 </para>
 <para>
  <example><title>接続エラーの処理</title>
   <programlisting role="php">
<![CDATA[
<?php
try {
    $dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
    foreach($dbh->query('SELECT * from FOO') as $row) {
        print_r($row);
    }
    $dbh = null;
} catch (PDOException $e) {
    print "エラー!: " . $e->getMessage() . "<br/>";
    die();
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <para>
   PDO コンストラクタからの例外をアプリケーション内でキャッチしない場合、
   zend エンジンはスクリプトの実行を終了し、バックトレースを表示します。
   このバックトレースを見れば、データベースへの接続の詳細がわかってしまいます。
   その中にはユーザー名やパスワードも含まれます。
   (<literal>catch</literal> 文を使用して) 明示的に例外をキャッチするか、
   あるいは <function>set_exception_handler</function> を使用して
   暗黙的に例外をキャッチするようにしましょう。
  </para>
 </warning>
 <para>
  データベースへの接続に成功すると、PDO クラスのインスタンスが
  スクリプトに返されます。この PDO オブジェクトが存在する間、
  接続がアクティブであり続けます。接続を閉じるには、他から
  参照されていないことを保障することでオブジェクトを破棄する
  必要があります。それには、オブジェクトを保持している変数に対して
  &null; を代入します。
  明示的にこれを行わなかった場合は、スクリプトの終了時に自動的に
  接続が閉じられます。
 </para>
 <note>
  <simpara>
   この PDO インスタンスへの参照
   (PDOStatement インスタンスからの参照や、同じ PDO インスタンスを参照する別の変数からの参照など)
   が他にも残っているなら、それらもあわせて削除する必要があります
   (PDOStatement を参照する変数に &null; を代入するなど)。
  </simpara>
 </note>
 <para>
  <example>
   <title>接続を閉じる</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass);
// ここで接続を使用します
$sth = $dbh->query('SELECT * FROM foo');

// 使用を終了したので、閉じます
$sth = null;
$dbh = null;
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  データベースサーバーへの持続的な接続による恩恵をこうむる web
  アプリケーションは多いでしょう。持続的な接続は、スクリプトが
  終了しても閉じられずにキャッシュされ、他のスクリプトが同じ内容の
  接続を要求してきた際にそれが再利用されます。持続的接続の
  キャッシュにより、スクリプトがデータベースを使用するたびに
  新しい接続を確立するオーバーヘッドを避けることができます。
  それにより、結果として web アプリケーションを高速化できるように
  なります。
 </para>
 <para>
  <example>
   <title>持続的な接続</title>
   <programlisting role="php">
<![CDATA[
<?php
$dbh = new PDO('mysql:host=localhost;dbname=test', $user, $pass, array(
    PDO::ATTR_PERSISTENT => true
));
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <constant>PDO::ATTR_PERSISTENT</constant> オプションの値は、
  数値でない &string; の値が設定されない限り、(持続的な接続が有効/無効かを示す)
  &boolean; に変換されます。
  数値でない &string; を設定する場合、複数の接続プールを使うことができます。
  これは互換性がない異なる接続設定を使う場合に便利です。たとえば、
  異なる <constant>PDO::MYSQL_ATTR_USE_BUFFERED_QUERY</constant> の値を設定する場合が挙げられます。
 </para>
 <note>
  <para>
   持続的な接続を使用したい場合は、ドライバのオプションを表す配列に
   <constant>PDO::ATTR_PERSISTENT</constant> を設定して
   PDO のコンストラクタに渡す必要があります。この属性を
   <function>PDO::setAttribute</function>
   を用いてインスタンス作成後に設定した場合は、
   そのドライバは持続的な接続を使用しません。
  </para>
 </note>
 <note>
  <para>
   PDO ODBC ドライバを使用しており、ODBC ライブラリが ODBC
   接続プーリングをサポートしている場合 (unixODBC および Windows
   はこれをサポートしています。他にもあるかもしれません) は、
   PDO の持続的接続を使用せずに ODBC の接続プーリングに
   接続キャッシュ処理を任せることを推奨します。
   ODBC の接続プールは、プロセス内で他のモジュールと共有されています。
   PDO が接続をキャッシュしてしまうと、その接続は ODBC の
   接続プールに返されなくなり、他のモジュールによって新たな接続が
   作成されてしまうようになります。
  </para>
 </note>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
 
