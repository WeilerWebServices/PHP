<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351280 Maintainer: takagi Status: ready -->
<!-- Credits: mumumu -->
<refentry xml:id="domdocument.registernodeclass" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>DOMDocument::registerNodeClass</refname>
  <refpurpose>基底ノード型を作成する際に使用する拡張クラスを登録する</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>DOMDocument::registerNodeClass</methodname>
   <methodparam><type>string</type><parameter>baseclass</parameter></methodparam>
   <methodparam><type>string</type><parameter>extendedclass</parameter></methodparam>
  </methodsynopsis>

  <para>
   このメソッドにより、独自に拡張した DOM クラスを登録することができます。
   これを、後で PHP DOM 拡張モジュールで使用します。
  </para>
  <para>
   このメソッドは、DOM の標準にはないものです。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>baseclass</parameter></term>
     <listitem>
      <para>
       拡張したい DOM クラス。クラス名の一覧は、
       <link linkend="book.dom">この章の導入部</link>にあります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>extendedclass</parameter></term>
     <listitem>
      <para>
       拡張したクラスの名前。&null; を渡した場合は、
       それまでに <parameter>baseclass</parameter>
       を拡張して作成したすべてのクラスが削除されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>新しいメソッドを DOMElement に追加し、コードを書きやすくする</title>
    <programlisting role="php">
<![CDATA[
<?php

class myElement extends DOMElement {
   function appendElement($name) { 
      return $this->appendChild(new myElement($name));
   }
}

class myDocument extends DOMDocument {
   function setRoot($name) { 
      return $this->appendChild(new myElement($name));
   }
}

$doc = new myDocument();
$doc->registerNodeClass('DOMElement', 'myElement');

// これ以降、他の要素への要素の追加が一回のメソッドコールでできるようになります!
$root = $doc->setRoot('root');
$child = $root->appendElement('child');
$child->setAttribute('foo', 'bar');

echo $doc->saveXML();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
<?xml version="1.0"?>
<root><child foo="bar"/></root>
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>カスタムクラス形式での要素の取得</title>
    <programlisting role="php">
<![CDATA[
<?php
class myElement extends DOMElement {
    public function __toString() {
        return $this->nodeValue;
    }
}

$doc = new DOMDocument;
$doc->loadXML("<root><element><child>text in child</child></element></root>");
$doc->registerNodeClass("DOMElement", "myElement");

$element = $doc->getElementsByTagName("child")->item(0);
var_dump(get_class($element));

// __toString メソッドの助けを借ります..
echo $element;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(9) "myElement"
text in child
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>オーナードキュメントの取得</title>
    <para>
     自作の <classname>DOMDocument</classname> インスタンスを作成すると、
     <varname>ownerDocument</varname> プロパティが作成元のクラスを指すようになります。
     つまり <classname>DOMDocument</classname> の
     <function>DOMDocument::registerNodeClass</function> を使う必要はない
     (実際、使えない) ということです。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class myDOMDocument extends DOMDocument {
}

class myOtherDOMDocument extends DOMDocument {
}

// XML から myDOMDocument を作成します
$doc = new myDOMDocument;
$doc->loadXML("<root><element><child>text in child</child></element></root>");

$child = $doc->getElementsByTagName("child")->item(0);

// このノードの現在のオーナーは myDOMDocument です
var_dump(get_class($child->ownerDocument));

// ノードを myDOMDocument からインポートします
$newdoc = new myOtherDOMDocument;
$child = $newdoc->importNode($child);

// ノードの新しいオーナーは myOtherDOMDocument に変わりました
var_dump(get_class($child->ownerDocument));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
string(13) "myDOMDocument"
string(18) "myOtherDOMDocument"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="domdocument.registernodeclass.example.transient">
    <title>カスタムオブジェクトは一時的なもの</title>
    <caution>
     <simpara>
      登録されたノードクラスは、一時的なものです。
      つまり、PHPコードから参照されなくなった時には破棄され、
      再度取得される際に再生成されます。
      これは、カスタムプロパティの値は再生成された時に失われるということです。
     </simpara>
    </caution>
    <programlisting role="php">
<![CDATA[
<?php
class MyDOMElement extends DOMElement
{
    public $myProp = 'default value';
}

$doc = new DOMDocument();
$doc->registerNodeClass('DOMElement', 'MyDOMElement');

$node = $doc->createElement('a');
$node->myProp = 'modified value';
$doc->appendChild($node);

echo $doc->childNodes[0]->myProp, PHP_EOL;
unset($node);
echo $doc->childNodes[0]->myProp, PHP_EOL;
?>]]>
    </programlisting>
    &example.outputs;
    <screen role="xml">
<![CDATA[
modified value
default value
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
