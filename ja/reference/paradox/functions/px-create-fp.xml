<?xml version='1.0' encoding='utf-8'?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: takagi Status: ready -->
<refentry xml:id="function.px-create-fp" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>px_create_fp</refname>
  <refpurpose>新しい paradox データベースを作成する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>px_create_fp</methodname>
   <methodparam><type>resource</type><parameter>pxdoc</parameter></methodparam>
   <methodparam><type>resource</type><parameter>file</parameter></methodparam>
   <methodparam><type>array</type><parameter>fielddesc</parameter></methodparam>
  </methodsynopsis>
  <para>
   新しい paradox データベースファイルを作成します。
   実際のファイルは、事前に <function>fopen</function>
   でオープンしておく必要があります。
   ファイルが書き込み可能であることを確認してください。
  </para>
  <note>
   <para>
    この関数をコールすると「テーブル名が空である」という警告が発生しますが、
    これは無視できます。単に、<function>px_set_parameter</function>
    を使用して後からテーブル名を設定すればよいのです。
   </para>
  </note>
  <note>
   <para>
    paradox のファイルフォーマットについての資料が不足しているため、
    この関数は、きわめて実験的なものです。
    この関数で作成したデータベースファイルは
    <function>px_open_fp</function> や Paradox ソフトウェアでオープンできます。
    しかしそこから先の道のりは大変でしょう。
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pxdoc</parameter></term>
     <listitem>
      <para>
       <function>px_new</function> が返す
       paradox データベースのリソース ID。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>file</parameter></term>
     <listitem>
      <para>
       <function>fopen</function> が返すファイルハンドル。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>fielddesc</parameter></term>
     <listitem>
      <para>
       <option>fielddesc</option> は、各フィールドの設定を保持する配列です。
       それぞれのフィールド設定は、2 つあるいは 3 つの要素を含む配列です。
       最初の要素は常に文字列で、フィールドの名前を表します。
       10 文字より長くなってはいけません。2 番目の要素にはフィールドの型を指定します。
       これは、
       <link linkend="paradox.table-fieldtypes">フィールド型の定数</link>
       の表の中のどれかになります。文字列フィールドや bcd フィールドでは、
       3 番目の要素でその要素の精度を指定します。
       フィールド定義の中に blob フィールドが含まれている場合は、
       確実にすべての値を格納できるだけのフィールドサイズを確保するか、
       あるいは blob を保存する際に <function>px_set_blob_file</function>
       でファイルを指定しなければなりません。さもないと、
       フィールドのデータが切り詰められてしまいます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>2 つのフィールドを持つ Paradox データベースを作成する</title>
    <programlisting role="php">
<![CDATA[
<?php
if(!$pxdoc = px_new()) {
  /* エラー処理 */
}
$fp = fopen("test.db", "w+");
$fields = array(array("col1", "S"), array("col2", "I"));
if(!px_create_fp($pxdoc, $fp, $fields)) {
  /* エラー処理 */
}
px_set_parameter($pxdoc, "tablename", "testtable");
for($i=-50; $i<50; $i++) {
  $rec = array($i, -$i);
  px_put_record($pxdoc, $rec);
}   
px_close($pxdoc);
px_delete($pxdoc);
fclose($fp);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>px_new</function></member>
    <member><function>px_put_record</function></member>
    <member><function>fopen</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

