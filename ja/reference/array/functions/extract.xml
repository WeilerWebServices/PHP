<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343853 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka -->
<refentry xml:id="function.extract" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>extract</refname>
  <refpurpose>配列からシンボルテーブルに変数をインポートする</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>extract</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>EXTR_OVERWRITE</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefix</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   配列からシンボルテーブルに変数をインポートします。
  </para>
  <para>
   各キーについて変数名として有効であるかどうか、
   そして、シンボルテーブルの既存の変数と衝突しないかどうかを確認します。
  </para>
  <warning>
   <para>
    ユーザーの入力、例えば <varname>$_GET</varname> や <varname>$_FILES</varname> のような、
    信頼できないデータに <function>extract</function> を使用しないでください。
   </para>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       この関数は連想配列 <parameter>var_array</parameter>
       を引数とし、そのキーを変数名、値を変数の値として処理します。
       各キー/値の組に関して、<parameter>flags</parameter> および
       <parameter>prefix</parameter> パラメータに基づき、
       現在のシンボルテーブルに変数を一つ作成します。
      </para>
      <para>
       連想配列を使用する必要があります。<constant>EXTR_PREFIX_ALL</constant>
       または <constant>EXTR_PREFIX_INVALID</constant> を使用しない限り、
       数値添字の配列には結果は出力されません。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       無効または数値キーおよび衝突に関する対処法は、
       <parameter>flags</parameter> で定義されます。
       これは以下の値のどれかとなります。
       <variablelist>
        <varlistentry>
         <term><constant>EXTR_OVERWRITE</constant></term>
         <listitem>
          <simpara>
           衝突があった場合、存在する変数が上書きされます。
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_SKIP</constant></term>
         <listitem>
          <simpara>
           衝突があった場合、存在する変数は上書きされません。
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_SAME</constant></term>
         <listitem>
          <simpara>
           衝突があった場合、<parameter>prefix</parameter>
           を前につけた新しい変数となります。
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_ALL</constant></term>
         <listitem>
          <simpara>
           全ての変数の前に <parameter>prefix</parameter> を付けます。
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_INVALID</constant></term>
         <listitem>
          <simpara>
           無効または数値の変数名のみに接頭辞
           <parameter>prefix</parameter> を付けます。
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           現在のシンボルテーブルに既に存在する場合にのみ上書きします。
           例えば <varname>$_REQUEST</varname> 以外にあなたが定義した変数のみを展開し
           有効な変数としたいような場合に有用です。
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           同じ変数だが接頭辞をつけていないバージョンの変数が
           現在のシンボルテーブルに存在する場合にのみ
           変数を生成します。
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_REFS</constant></term>
         <listitem>
          <simpara>
           変数を参照として展開します。
           これはインポート済みの変数が、
           <parameter>array</parameter>
           パラメータの値に常に参照付けられることを意味します。
           このフラグを単独で使用するか、
           あるいは<parameter>flags</parameter>と和算することにより、
           他のフラグとそれを組み合わせることができます。
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       <parameter>flags</parameter> が指定されない場合、
       <constant>EXTR_OVERWRITE</constant> とみなされます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       <parameter>prefix</parameter> は、
       <parameter>flags</parameter> が
       <constant>EXTR_PREFIX_SAME</constant>、<constant>EXTR_PREFIX_ALL</constant>、
       <constant>EXTR_PREFIX_INVALID</constant> あるいは
       <constant>EXTR_PREFIX_IF_EXISTS</constant> の場合にのみ必要であることに注意してください。
       接頭辞を付けた変数名が有効な変数名でない場合、
       この変数はシンボルテーブルにインポートされません。接頭辞は、
       アンダースコア文字で配列のキーから自動的に分割されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   シンボルテーブルにインポートした変数の数を返します。
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>extract</function> の例</title>
    <para>
     extract の使用例としては、シンボルテーブルに
     <function>wddx_deserialize</function> から返された連想配列を
    インポートすることが考えられます。
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* $var_array はwddx_deserializeから返された配列と仮定します */

$size = "large";
$var_array = array("color" => "blue",
                   "size"  => "medium",
                   "shape" => "sphere");
extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$color, $size, $shape, $wddx_size\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
blue, large, sphere, medium
]]>
    </screen>
    <para>
     <constant>EXTR_PREFIX_SAME</constant> を指定したため、<varname>$size</varname>
     は上書きされず、<varname>$wddx_size</varname> が作成されます。
     <constant>EXTR_SKIP</constant> が指定された場合、<varname>$wddx_size</varname> は作成されません。
     <constant>EXTR_OVERWRITE</constant>
     の場合は、<varname>$size</varname> の値は "medium" となります。
     <constant>EXTR_PREFIX_ALL</constant> の場合は新規の変数
     <varname>$wddx_color</varname>,
     <varname>$wddx_size</varname>, <varname>$wddx_shape</varname>
     が作成されます。
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    <function>extract</function> をユーザー入力
    (<varname>$_GET</varname> や <varname>$_FILES</varname> など)
    のような信頼できないデータについて使用しないでください。
    もし行う場合、例えば
    <link linkend="security.globals">register_globals</link>
    を信頼しているような古いコードを一時的に実行したい場合、
    <constant>EXTR_SKIP</constant> のような
    <parameter>flags</parameter>
    の値が上書きされていないことを確認してください。そして
    <link linkend="ini">&php.ini;</link> の
    <link linkend="ini.variables-order">variables_order</link>
    で定義されたものと同じ順で展開すべきであることに留意してください。
   </para>
  </warning>
  <note>
   <para>
    <link linkend="security.globals">register_globals</link> が on の状態で
    <varname>$_FILES</varname> に対して
    <function>extract</function> を実行して
    <constant>EXTR_SKIP</constant> を指定すると、
    その結果に驚くことでしょう。
   </para>
   <warning>
    <para>
     これは決しておすすめする方法ではなく、
     単にドキュメントとしての完全性を求めてここに書いているだけです。
     <link linkend="security.globals">register_globals</link>
     を使ったり、<varname>$_FILES</varname> のような信頼できないデータに対して
     <function>extract</function> を使ったりすることは非推奨となっています。
     先に説明したようにセキュリティ上のリスクがあるからです。
     もしこの問題に遭遇したならば、
     まずいコーディング作法を少なくともふたつ使っているということになります。
    </para>
   </warning>
   <programlisting role="php">
<![CDATA[
<?php

/* $testfile にはアップロードされたファイルの名前が入っており、
   register_globals が on であるものとします */

var_dump($testfile);
extract($_FILES, EXTR_SKIP);
var_dump($testfile);
var_dump($testfile['tmp_name']);

?>
]]>
   </programlisting>
   <simpara>
    おそらくこんな結果になることを期待しているでしょう。
   </simpara>
   <screen>
<![CDATA[
string(14) "/tmp/phpgCCPX8"
array(5) {
  ["name"]=>
  string(10) "somefile.txt"
  ["type"]=>
  string(24) "application/octet-stream"
  ["tmp_name"]=>
  string(14) "/tmp/phpgCCPX8"
  ["error"]=>
  int(0)
  ["size"]=>
  int(4208)
}
string(14) "/tmp/phpgCCPX8"
]]>
   </screen>
   <simpara>
    しかし、実際にはこのようになります。
   </simpara>
   <screen>
<![CDATA[
string(14) "/tmp/phpgCCPX8"
string(14) "/tmp/phpgCCPX8"
string(1) "/"
]]>
   </screen>
   <para>
    これは、<link linkend="security.globals">register_globals</link>
    が on の場合は <function>extract</function>
    がコールされた時点で既にグローバルスコープに
    <varname>$testfile</varname> が存在するからです。
    そして <constant>EXTR_SKIP</constant> が指定されているので、
    <varname>$testfile</varname> が
    <constant>$_FILES</constant> 配列の内容で上書きされることはありません。
    <varname>$testfile</varname> はそのまま文字列として残るわけです。
    <link linkend="language.types.string.substr">
    文字列は配列構文を使ってもアクセスでき</link>、
    非数値の文字列 <literal>tmp_name</literal> は
    <literal>0</literal> と解釈されるので、PHP は
    <varname>$testfile['tmp_name']</varname> を
    <varname>$testfile[0]</varname> とみなします。
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>compact</function></member>
    <member><function>list</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
