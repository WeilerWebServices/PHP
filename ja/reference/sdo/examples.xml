<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 322162 Maintainer: takagi Status: ready -->
<!-- CREDITS: shimooka -->

<chapter xml:id="sdo.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <section xml:id="sdo.examples-basic">
  <title>基本的な使用法</title>
  <para>
   以下の例では、XML データアクセスサービスを使用して、
   下のスキーマおよびインスタンスをもとに作成した SDO の使用を想定しています。
  </para>
  <para>
   以下で説明しているインスタンスドキュメントは、
   'MegaCorp' という会社を扱っています。この会社には
   'Advanced Technologies' という名前の部署がひとつあります。
   Advanced Technologies 部門には 3 人の従業員がいます。
   この会社の employeeOfTheMonth (今月の従業員) は、
   2 人目の従業員である 'Jane Doe' を指しています。
  </para>
  <para>
   <programlisting role="xml">
<![CDATA[
<?xml version="1.0" encoding="UTF-8" ?> 
<company xmlns="companyNS" name="MegaCorp" 
  employeeOfTheMonth="E0003">
  <departments name="Advanced Technologies" location="NY" number="123">
    <employees name="John Jones" SN="E0001"/>
    <employees name="Jane Doe" SN="E0003"/>
    <employees name="Al Smith" SN="E0004" manager="true"/>
  </departments>
</company>
]]>
   </programlisting>
  </para>
  <para>
   このスキーマのルート要素は company です。company は departments
   を含んでおり、個々の department は employees を含んでいます。
   各要素はいくつかの属性を保持しており、ここに名前やシリアル番号などを保存します。
   最後に、company は IDREF 属性を保持しており、
   特定の従業員を 'employeeOfTheMonth' として参照しています。
  </para>
  <para>
   <programlisting role="xml">
<![CDATA[
<xsd:schema  
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:sdo="commonj.sdo"
  xmlns:sdoxml="commonj.sdo/xml"
  xmlns:company="companyNS"
  targetNamespace="companyNS">
  <xsd:element name="company" type="company:CompanyType"/>
  <xsd:complexType name="CompanyType">
    <xsd:sequence>
      <xsd:element name="departments" type="company:DepartmentType" 
        maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:string"/>
    <xsd:attribute name="employeeOfTheMonth" type="xsd:IDREF" 
      sdoxml:propertyType="company:EmployeeType"/> 
  </xsd:complexType>
  <xsd:complexType name="DepartmentType">
    <xsd:sequence>
      <xsd:element name="employees" type="company:EmployeeType"  
        maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:string"/>
    <xsd:attribute name="location" type="xsd:string"/>
    <xsd:attribute name="number" type="xsd:int"/>
  </xsd:complexType>
  <xsd:complexType name="EmployeeType">
    <xsd:attribute name="name" type="xsd:string"/>
    <xsd:attribute name="SN" type="xsd:ID"/>
    <xsd:attribute name="manager" type="xsd:boolean"/>
  </xsd:complexType>
</xsd:schema>
]]>
   </programlisting>
  </para>
  <para>
   XML データアクセスサービスは、スキーマを SDO に関連付けます。
   "name" のような属性はプリミティブプロパティに、
   一連の employees は複数の値をとる包含関係に、といったようになります。
   包含関係は、複合型の中に別の複合型を含めることで表され、
   非包含関係は ID や IDREF に特別な属性
   <command>sdoxml:propertyType</command> を指定して表されることに注意しましょう。
  </para>
 </section>

 <section xml:id="sdo.sample.getset">
  <title>プロパティの値の設定および取得</title>
  <para>
   以下の例では、上で示したスキーマおよびインスタンスドキュメントをもとに
   作成したデータオブジェクトツリーのルート要素が
   <command>$company</command> に入っているものとして考えます。
  </para>
  <para>
   <example>
    <title>プロパティ名を使用したアクセス</title>
    <para>
     データオブジェクトのプロパティへは、通常のオブジェクトの
     プロパティにアクセスするのと同じ構文でアクセス可能です。
     以下の例では、会社の名前を 'Acme' に変更します。
    </para>
    <programlisting role="php" xml:id="sdo.examples.propname">
<![CDATA[
<?php
$company->name = 'Acme';
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>配列のインデックスを使用したプロパティへのアクセス</title>
    <para>
     連想配列形式の構文を使用して、プロパティにアクセスすることもできます。
     最も簡単な方法は、プロパティ名を配列のインデックスとして使用する方法です。
     例えば、以下の例では会社の名前を設定してから「今月の従業員」を取得しています。
    </para>
    <programlisting role="php" xml:id="sdo.examples.simplexpath">
<![CDATA[
<?php
$company['name'] = 'UltraCorp';
$eotm = $company['employeeOfTheMonth'];
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>データオブジェクトの繰り返し処理</title>
    <para>
     &foreach; を使用することにより、データオブジェクトのプロパティを
     順に処理していくことができます。以下の例では、
     今月の従業員のプロパティを順に処理します。
    </para>
    <programlisting role="php" xml:id="sdo.examples.doiter">
<![CDATA[
<?php
  $eotm = $company->employeeOfTheMonth;
  foreach ($eotm as $name => $value) {
      echo "$name: $value\n";
  }
?>
]]>
    </programlisting>
    <para> 
     出力は以下のようになります。
    </para>     
    <programlisting xml:id="sdo.examples.doiter-output">
<![CDATA[
name: Jane Doe
SN: E0003
]]>
    </programlisting>
    <para> 
     'manager' プロパティは表示されません。なぜなら設定されていないからです。
    </para>
   </example>
  </para>
  
  <para>
   <example>
    <title>多くの値をとりうるプロパティへの名前によるアクセス</title>
    <para>
     多くの値をとりうるデータオブジェクトのプロパティへのアクセスも、
     オブジェクトのプロパティに対するアクセス構文でアクセスできます。
     例えば部署の一覧を取得するにはこのようにします。
    </para>
    <programlisting role="php" xml:id="sdo.examples.mvpname">
<![CDATA[
<?php
$departments = $company->departments;
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   <example>
    <title>多くの値をとりうる要素へのアクセス</title>
    <para>
     配列の構文を使用することで、多くの値をとりうる要素における
     個々の要素にアクセスすることが可能です。以下の例では、
     会社の中の最初の部署にアクセスしています。
    </para>
    <programlisting role="php" xml:id="sdo.examples.mvaccess">
<![CDATA[
<?php
$ad_tech_dept = $company->departments[0];
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>多くの値をとりうるプロパティの順次処理</title>
    <para>
     &foreach; を使用して、多くの値をとりうるプロパティを順に処理することができます。
     会社の各部門を順に処理するにはこのようにします。
    </para>
    <programlisting role="php" xml:id="sdo.examples.mvpiter">
<![CDATA[
<?php
  foreach ($company->departments as $department) {
    // ...
  }
?>
]]>
    </programlisting>
    <para>
     繰り返しのたびに、次の部署が変数
     <command>$department</command> に代入されます。
    </para>
   </example>
  </para>

  <para>
   <example>
    <title>連結されたプロパティへのアクセス</title>
    <para>
     プロパティへの参照を、ひとつの行に連結することができます。
     以下の例では、最初の部署の名前を設定し、取得しています。
    </para>
    <programlisting role="php" xml:id="sdo.examples.nestedprop">
<![CDATA[
<?php
  $company->departments[0]->name = 'Emerging Technologies';
  $dept_name = $company->departments[0]->name;
?>
]]>
    </programlisting>
    <para>同じことを連想配列構文で行うと、このようになります。</para>
    <programlisting role="php" xml:id="sdo.examples.chainarray">
<![CDATA[
<?php
  $company['departments'][0]['name'] = 'Emerging Technologies';
  $dept_name = $company['departments'][0]['name'];
?>
]]>
    </programlisting>
    <para>
     どちらの場合でも、dept_name の内容は 'Emerging Technologies'
     となります。
    </para>
   </example>
  </para>

  <para>
   <example>
    <title>XPath によるナビゲーション</title>
    <para>
     連想配列のインデックスとして、XPath 風の式を使用することができます。
     実際に使用できる式は、XPath の拡大サブセットです。
    </para>
    <para>
     多くの値をとりうるプロパティの表す方法として、
     2 通りの方法がサポートされています。
     最初の方法は、1 から始まる標準的な XPath の配列構文を使用するものです。
     もうひとつは、SDO で XPath を拡張した構文で、
     ゼロから始まるインデックスを使用します。
     標準的な構文は以下のようになります。
    </para>
    <programlisting role="php" xml:id="sdo.examples.xpath1nav">
<![CDATA[
<?php
  $jane_doe = $company["departments[1]/employees[2]"];
?>
]]>
    </programlisting>    
    <para>そして SDO の拡張版 XPath 構文はこのようになります。</para>
    <programlisting role="php" xml:id="sdo.examples.xpath0nav">
<![CDATA[
<?php
  $jane_doe = $company["departments.0/employees.1"];
?>
]]>
    </programlisting>
    <para>
     どちらの例でも、最初の部署の 2 番目の従業員を取得します。
    </para>
   </example>
  </para>

  <para>
   <example>
    <title>XPath による問い合わせ</title>
    <para>
     XPath を使用して、インスタンスのデータ内のデータオブジェクトを
     検索することができます。以下の例では、部署
     'Advanced Technologies' の manager を取得しています。
    </para>
    <programlisting role="php" xml:id="sdo.examples.xpathquery">
<![CDATA[
<?php
 $ad_tech_mgr = 
  $company["departments[name='Advanced Technologies']/employees[manager=true]"];
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>子オブジェクトの作成</title>
    <para>
     データオブジェクトは、自分自身の中に子オブジェクトを保持することが
     できます。子データオブジェクトは自動的にデータグラフの一員となります。
     以下の例では、部署 'Advanced Technologies' に新しい従業員を追加しています。
    </para>
    <programlisting role="php" xml:id="sdo.examples.create">
<![CDATA[
<?php
  $ad_tech_dept = $company["departments[name='Advanced Technologies']"];
  $new_hire = $ad_tech_dept->createDataObject('employees');
  $new_hire->name = 'John Johnson';
  $new_hire->SN = 'E0005';
  $new_hire->manager = false;
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>プリミティブなプロパティの開放</title>
    <para>
     データオブジェクトに項目が登録されているかどうかを確かめたり
     項目を削除したりする際には、それぞれ <function>isset</function>
     および <function>unset</function> 関数が使用可能です。
    </para>
    <para>
     以下の例は、最初の部署の名前を消去します。
    </para>
    <programlisting role="php" xml:id="sdo.examples.unsetprim">
<![CDATA[ 
<?php
  unset($company->departments[0]->name);
?>
]]>
   </programlisting>
  </example>
  </para>
     
  <para>
   <example>
    <title>データオブジェクトの開放</title>
    <para>
     unset は、ツリーからデータオブジェクトを削除する場合にも使用できます。
     以下の例は、John Jones を会社から削除します。
    </para>
    <programlisting role="php" xml:id="sdo.examples.unsetdo">
<![CDATA[ 
<?php
  unset($company->departments[0]->employees[0]);
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   <example>
    <title>参照されているデータオブジェクトの開放</title>
    <para>
     以下の例では、会社から「今月の従業員」を削除します。
     もしこれらの間に包含関係があった場合、参照先の従業員も
     削除されてしまいます (その月の一番優秀な従業員を毎月クビにしていく
     なんてバカなことは、普通はしないでしょう!)。
     しかし実際にはこれらは包含関係ではないので、参照先の
     従業員は会社の中の部署の中に残り続けます。ただ、
     employeeOfTheMonth プロパティを通じてはアクセスできなくなります。
    </para>
    <programlisting role="php" xml:id="sdo.examples.unsetrefdo">
<![CDATA[ 
<?php
  if (isset($company->employeeOfTheMonth)) {
    unset($company->employeeOfTheMonth);
  }
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   <example>
    <title>プロパティのインデックスを使用したアクセス</title>
    <para>
     配列構文を使用して、プロパティのインデックス経由で
     データオブジェクトのプロパティにアクセスすることができます。
     プロパティのインデックスは、モデル (この場合は xml スキーマ)
     内でそのプロパティの定義が現れる位置となります。
     上のスキーマの例では、会社の名前が company の
     2 番目の属性であることがわかります (SDO のインターフェイスは、
     XML の要素と属性を区別しません)。以下の例では、
     会社の名前を 'Acme' に設定します。これは
     <link linkend="sdo.examples.propname">プロパティ名を使用したアクセス</link>
     と同じ結果となります。
    </para>
    <programlisting role="php" xml:id="sdo.examples.propindex">
<![CDATA[
<?php
  $company[1] = 'Acme';
?>
]]>
    </programlisting>
    <para>
     このようにインデックスを直接使用すると、後で破綻してしまう可能性があります。
     通常はプロパティ名を使用する方式を推奨します。
     しかし、時にはインデックスによるアクセスが必要になる場合もあるでしょう。
    </para>
   </example>
  </para>

 </section>

 <section xml:id="sdo.sample.sequence">
  <title>シーケンスデータオブジェクトの使用</title>
  <para>
   シーケンスデータオブジェクトは、データオブジェクト内のさまざまな
   プロパティの並び順を追跡する SDO です。ここには、非構造化
   テキスト要素 (SDO のいずれのプロパティにも属さないテキスト要素)
   を含めることも可能です。シーケンスデータオブジェクトは、
   非構造化テキストを許可
   (つまり、mixed=true である) したり、要素が交互に現れる
   (<![CDATA[<A/><B/><A/>]]>) ような XML 文書を扱う場合に有用です。
   これは、例えば order に choice を指定した複合型の要素に対して
   スキーマで maxOccurs>1 を定義している場合などに発生します。
  </para>
  <para>
   以下の例では、XML データアクセスサービスを使用して、
   下のスキーマおよびインスタンスをもとに作成した SDO の使用を想定しています。
  </para>
  <para>
   このスキーマでは、手紙の書式を定義しています。letter (手紙) には
   オプションで 3 つのプロパティ date (日付)、firstName (名前)、
   および lastName (苗字) を含めることが可能です。このスキーマでは
   <command>mixed="true"</command> としていますが、これは
   3 つのプロパティの間に非構造化テキストをちりばめることが
   できるということを意味します。
  </para>
  <para>
   <programlisting role="xml">
<![CDATA[
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:letter="http://letterSchema"
  targetNamespace="http://letterSchema">
  <xsd:element name="letters" type="letter:FormLetter"/>
  <xsd:complexType name="FormLetter" mixed="true">
    <xsd:sequence>
      <xsd:element name="date" minOccurs="0" type="xsd:string"/>
      <xsd:element name="firstName" minOccurs="0" type="xsd:string"/>
      <xsd:element name="lastName" minOccurs="0" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
</xsd:schema>
]]>
   </programlisting>
  </para>

  <para>
   以下が、手紙のインスタンスです。これには 3 つのプロパティ
   date、firstName および lastName が含まれており、非構造化
   テキスト要素として住所と本文が含まれています。
  </para>
  <para>
   <programlisting role="xml">
<![CDATA[
<letter:letters xmlns:letter="http://letterSchema">
  <date>March 1, 2005</date>
  Mutual of Omaha
  Wild Kingdom, USA
  Dear
  <firstName>Casy</firstName>
  <lastName>Crocodile</lastName>
  Please buy more shark repellent.
  Your premium is past due.
</letter:letters>
]]>
   </programlisting>
  </para>
  <para>
   このインスタンスが読み込まれると、letter データオブジェクトの
   シーケンス番号およびプロパティ番号は以下の表のようになります。
   <informaltable>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>シーケンスのインデックス</entry>
       <entry>プロパティのインデックス:名前</entry>
       <entry>値</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>0</entry>
       <entry>0:date</entry>
       <entry>March 1, 2005</entry>
      </row>
      <row>
       <entry>1</entry>
       <entry>-</entry>
       <entry>Mutual of Omaha</entry>
      </row>
      <row>
       <entry>2</entry>
       <entry>-</entry>
       <entry>Wild Kingdom, USA</entry>
      </row>
      <row>
       <entry>3</entry>
       <entry>-</entry>
       <entry>Dear</entry>
      </row>
      <row>
       <entry>4</entry>
       <entry>1:firstName</entry>
       <entry>Casy</entry>
      </row>
      <row>
       <entry>5</entry>
       <entry>2:lastName</entry>
       <entry>Crocodile</entry>
      </row>
      <row>
       <entry>6</entry>
       <entry>-</entry>
       <entry>Please buy more shark repellent.</entry>
      </row>
      <row>
       <entry>7</entry>
       <entry>-</entry>
       <entry>Your premium is past due.</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>

  <para>
   シーケンス番号の整合性を保つため、シーケンスデータオブジェクトの
   操作には SDO_Sequence インターフェイスを使用しなければなりません。
   これにより、データオブジェクトに対しての操作を
   プロパティのインデックスではなくシーケンスのインデックスを使用して
   行えるようになります (上の表を参照ください)。
   以下の例では、letter のインスタンスが
   データオブジェクト <command>$letter</command> として
   読み込まれているものと仮定します。
   <example>
    <title>SDO_Sequence インターフェイスの取得</title>
    <para>
     データオブジェクトのシーケンスを取得するには
     <function>getSequence</function> メソッドを使用します。
     以下の例では、letter データオブジェクトのシーケンスを取得します。
    </para>
    <programlisting role="php" xml:id="sdo.examples.seqinterface">
<![CDATA[ 
<?php
  $letter_seq = $letter->getSequence();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   これ以降の例では、letter データオブジェクトのシーケンスが
   変数 <command>$letter_seq</command> に代入されているものとします。
  </para>

  <para>
   <example>
    <title>シーケンスの値の取得/設定</title>
    <para>
     シーケンスのインデックスを使用することで、(非構造化
     テキストも含め) それぞれの値を取得したり設定したりすることが可能です。
     以下の例では、ファーストネームを 'Snappy' に変更して
     シーケンスの最後の値 (非構造化テキスト
     'Your premium is past due.') を取得します。
    </para>
    <programlisting role="php" xml:id="sdo.examples.getsetseq">
<![CDATA[ 
<?php
  $letter_seq[4] = 'Snappy';
  $text = $letter_seq[count($letter_seq) - 1];
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>シーケンスの繰り返し処理</title>
    <para>
     &foreach; を使用して、個々のシーケンス値について処理を繰り返すことが
     できます。以下の例では、シーケンス順に個々の値を処理します。
    </para>
    <programlisting role="php" xml:id="sdo.examples.seqiter">
<![CDATA[ 
<?php
foreach ($letter->getSequence() as $value) {
    // ...
}
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>シーケンスとデータオブジェクトの比較</title>
    <para>
     データオブジェクトのインターフェイスから設定した値は、シーケンスの
     一部とはならないことがあります。データオブジェクト経由で値を
     設定した場合、そのプロパティが既にシーケンスに組み込まれていた
     場合にのみシーケンスからアクセス可能となります。
     以下の例では、データオブジェクト経由で lastName を設定して
     それをシーケンスから取得しています。これがうまくいくのは、
     lastName が既にシーケンス内に存在するからです。もしこれが
     事前に設定されていなかった場合、lastName には 'Smith' が
     設定されますが、それはシーケンスの一部とはなりません。
    </para>
    <programlisting role="php" xml:id="sdo.examples.seqvsdo">
<![CDATA[ 
<?php
  $letter[2] = 'Smith';
  $last_name = $letter_seq[5];
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>シーケンスへの追加</title>
    <para>
     シーケンスに新しい値を追加するには
     <function>SDO_Sequence::insert</function>
     メソッドを使用します。以下の例では、プロパティ 'firstName' および
     'lastName' が最初に削除されているものと仮定します。
    </para>
    <programlisting role="php" xml:id="sdo.examples.seqadd">
<![CDATA[ 
<?php
  // シーケンスに firstName を追加します
  // 値: 'Smith'
  // シーケンスのインデックス: NULL (追加)
  // プロパティ ID: 1 (firtName プロパティのインデックス)
  $letter_seq->insert('Smith', NULL, 1);

  // シーケンスに lastName を追加します
  // 値: 'Jones'
  // シーケンスのインデックス: NULL (追加)
  // プロパティ ID: 'lastName' (lastName プロパティの名前)
  $letter_seq->insert('Jones', NULL, 'lastName');

  // 非構造化テキストを追加します
  // 値: 'Cancel Subscription.'
  // シーケンスのインデックス: 省略 (追加)
  // プロパティ ID: 省略 (非構造化テキスト)
  $letter_seq->insert('Cancel Subscription.');

  // 非構造化テキストを間に挿入します。それ以降のシーケンス値は
  // ひとつずれます。
  // 値: 'Care of:'
  // シーケンスのインデックス: 1 (2 番目の要素として挿入する)
  // プロパティ ID: 省略 (非構造化テキスト)
  $letter_seq->insert('Care of:', 1);
?>
]]>
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>シーケンスからの削除</title>
    <para>
     シーケンスに項目が登録されているかどうかを確かめたり
     シーケンスから項目を削除したりする際には、それぞれ
     <function>isset</function>
     および <function>unset</function> 関数が使用可能です
     (注意: <function>unset</function> は、現時点では値を
     データオブジェクト内に残します。しかし、この挙動はおそらく今後
     変更され、データオブジェクトからもデータを削除することに
     なるでしょう)。シーケンスの挙動は、リスト構造に似ています。
     そのため、シーケンスの途中の項目を削除すると、それ以降の
     インデックスがひとつずつ小さいほうにずれます。以下の例では、
     インデックスの最初の要素が存在するかどうか調べ、存在する場合に
     それを削除しています。
    </para>
    <programlisting role="php" xml:id="sdo.examples.seqremove">
<![CDATA[ 
<?php
  if (isset($letter_seq[0])) {
    unset($letter_seq[0]);
  }
?>
]]>
    </programlisting>
   </example>
  </para>

 </section>


 <section xml:id="sdo.sample.reflection">
  <title>サービスデータオブジェクトへのリフレクション</title>
  <para>
   SDO は、自分自身を作成するもととなったオブジェクト (モデル)
   の構造を知っています。例えば、上の
   <link linkend="sdo.examples">Company XML スキーマ</link> を使用して
   作成した Company SDO には DepartmentType データオブジェクトしか
   含めることはできず、同様に DepartmentType データオブジェクトには
   EmployeeType データオブジェクトしか含めることはできません。
  </para>
  <para>
   実行時にモデルの情報にアクセスできると、以下のような利点があります。
   例えば、データオブジェクトに値を設定するためのユーザーインターフェイスを
   自動的に作成することができます。モデルの情報にアクセスするには、
   リフレクションを使用します。
  </para>

  <para>
   <example>
    <title>データオブジェクトへのリフレクション</title>
    <para>
     以下の例では、空の Employee データオブジェクトへのリフレクションの
     方法を示します。
    </para>
    <programlisting role="php" xml:id="sdo.examples.reflection">
<![CDATA[ 
<?php
  // employee データオブジェクトを (例えば XML データアクセスサービスなどから) 作成します
  $employee = ...;
  $reflection = new SDO_Model_ReflectionDataObject($employee);
  print($reflection);
?>
]]>
    </programlisting>
    &example.outputs;

    <screen>
<![CDATA[
object(SDO_Model_ReflectionDataObject)#4 { - ROOT OBJECT - Type { 
companyNS:EmployeeType[3] { commonj.sdo:String $name; 
commonj.sdo:String $SN; commonj.sdo:Boolean $manager; } }
]]>
   </screen>
   <para>
     SDO_Model_ReflectionDataObject に対して print を使用すると、
     データオブジェクトのモデルを出力します。この出力結果から、
     companyNS:EmployeeType 型には 3 つのプロパティがあることや
     それぞれのプロパティの名前と型を知ることができます。
     プリミティブ型は、SDO の型として表示されることに注意しましょう
     (例: commonj.sdo namespace, String type)。これは SDO モデルであり、
     アプリケーションからは PHP の同等の型 (例: string および boolean)
     として扱えることを知っておくとよいでしょう。
    </para>
   </example>
  </para>

  <para>
   <example>
    <title>型情報へのアクセス</title>
    <para>
     リフレクションを使用して、データオブジェクトの型情報を取得することが
     できます。以下の例では、まず型がプリミティブ型ではなく
     データオブジェクトに対応するものであることを確認し、各プロパティの
     名前を書き出しています ($type および $property は、それぞれ
     SDO_Model_Type および SDO_Model_Property オブジェクトです)。
    </para>
    <programlisting role="php" xml:id="sdo.examples.reflection.type">
<![CDATA[ 
<?php
    // employee データオブジェクトを (例えば XML データアクセスサービスなどから) 作成します
    $employee = ...;
    $reflection = new SDO_Model_ReflectionDataObject($employee);
    $type = $reflection->getType();
    if (! $type->isDataType()) {
        foreach ($type->getProperties() as $property) {
            print $property->getName() . "\n";
        }
    }
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
name
SN
manager
]]>
    </screen>
   </example>
  </para>

 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

