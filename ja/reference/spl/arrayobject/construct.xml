<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 344127 Maintainer: takagi Status: ready -->
<!-- CREDITS: shimooka -->
<refentry xml:id="arrayobject.construct" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ArrayObject::__construct</refname>
  <refpurpose>新規配列オブジェクトを生成する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier> <methodname>ArrayObject::__construct</methodname>
   <methodparam choice="opt"><type>mixed</type><parameter>input</parameter><initializer>array()</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>iterator_class</parameter><initializer>"ArrayIterator"</initializer></methodparam>
  </constructorsynopsis>
  <para>
   新規配列オブジェクトを生成します。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>input</parameter></term>
     <listitem>
      <para>
       <parameter>input</parameter> には、
       配列あるいはオブジェクトを指定することができます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <classname>ArrayObject</classname> オブジェクトの振る舞いを制御するフラグ。
       <methodname>ArrayObject::setFlags</methodname> を参照ください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iterator_class</parameter></term>
     <listitem>
      <para>
       <classname>ArrayObject</classname> オブジェクトの反復処理に使用するクラスを指定します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   成功した場合に ArrayObject オブジェクトを返します。
  </para>
 </refsect1>


 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   次の場合に <classname>InvalidArgumentException</classname> をスローします。
   <itemizedlist>
    <listitem>
     <simpara>
      <parameter>input</parameter> が配列でもオブジェクトでもない場合
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <parameter>flags</parameter> が整数でない場合
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <parameter>iterator_class</parameter> が
      <classname>Iterator</classname> を実装したオブジェクトでない場合
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>ArrayObject::__construct</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
$array = array('1' => 'one',
               '2' => 'two',
               '3' => 'three');

$arrayobject = new ArrayObject($array);

var_dump($arrayobject);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(ArrayObject)#1 (3) {
  [1]=>
  string(3) "one"
  [2]=>
  string(3) "two"
  [3]=>
  string(5) "three"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ArrayObject::setflags</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
