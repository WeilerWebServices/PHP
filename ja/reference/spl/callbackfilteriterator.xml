<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330310 Maintainer: takagi Status: ready -->

<phpdoc:classref xml:id="class.callbackfilteriterator" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>CallbackFilterIterator クラス</title>
 <titleabbrev>CallbackFilterIterator</titleabbrev>

 <partintro>

<!-- {{{ CallbackFilterIterator intro -->
  <section xml:id="callbackfilteriterator.intro">
   &reftitle.intro;
   <para>

   </para>
  </section>
<!-- }}} -->

  <section xml:id="callbackfilteriterator.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>CallbackFilterIterator</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>CallbackFilterIterator</classname>
     </ooclass>
     
     <ooclass>
      <modifier>extends</modifier>
      <classname>FilterIterator</classname>
     </ooclass>
     
     <oointerface>
      <interfacename>OuterIterator</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.callbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[1])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.callbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
    
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.filteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />

   </classsynopsis>
<!-- }}} -->

  </section>

  <!-- {{{ examples -->
  <section xml:id="callbackfilteriterator.examples">
   &reftitle.examples;
   <para>
    コールバックは、三つの引数を受け付けなければなりません。
    それぞれ、現在のアイテム、現在のキー、そしてイテレータを表します。
   </para>
   <example xml:id="callbackfilteriterator.examples.args">
    <title>利用可能なコールバック引数</title>
    <programlisting role="php">
<![CDATA[
<?php

/**
 * CallbackFilterIterator 用のコールバック
 *
 * @param $current   現在のアイテムの値
 * @param $key       現在のアイテムのキー
 * @param $iterator  フィルタリングするイテレータ
 * @return boolean   現在のアイテムを受け付ける場合は TRUE、それ以外の場合は FALSE
 */
function my_callback($current, $key, $iterator) {
    // ここにフィルタリングのコードを書きます
}

?>
]]>
    </programlisting>
   </example>
   <para>
    任意の <type>callable</type> を使うことができます。
    関数名を含む文字列、メソッドを表す配列、あるいは無名関数などです。
   </para>
   <example xml:id="callbackfilteriterator.examples.basic">
    <title>コールバックの基本例</title>
    <programlisting role="php">
<![CDATA[
<?php

$dir = new FilesystemIterator(__DIR__);

// 大きなファイル ( > 100MB) をフィルタします
function is_large_file($current) {
    return $current->isFile() && $current->getSize() > 104857600;
}
$large_files = new CallbackFilterIterator($dir, 'is_large_file');

// ディレクトリをフィルタします
$files = new CallbackFilterIterator($dir, function ($current, $key, $iterator) {
    return $current->isDir() && ! $iterator->isDot();
});

?>
]]>
    </programlisting>
   </example>
  </section>
  <!-- }}} -->


 </partintro>

 &reference.spl.entities.callbackfilteriterator;

</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
