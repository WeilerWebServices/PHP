<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 326298 Maintainer: takagi Status: ready -->

<refentry xml:id="splobjectstorage.gethash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SplObjectStorage::getHash</refname>
  <refpurpose>
   中に含むオブジェクトの一意な識別子を算出する
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>string</type><methodname>SplObjectStorage::getHash</methodname>
   <methodparam><type>object</type><parameter>object</parameter></methodparam>
  </methodsynopsis>
  <para>
   このメソッドは、<classname>SplObjectStorage</classname> オブジェクトに追加されたオブジェクトの識別子を算出します。
  </para>
  <para>
   <classname>SplObjectStorage</classname> の実装では、
   <function>spl_object_hash</function> と同じ値を返します。
  </para>
  <para>
   ストレージオブジェクトには、同じ識別子のオブジェクトを複数格納することはできません。
   それを利用して、セット (一意な値のコレクション) を実装するのにも使えます。
   オブジェクトが一意であるという性質は、この関数の返す値が一意であるということで実現できます。
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>object</parameter></term>
    <listitem>
     <para>
      識別子を算出したいオブジェクト。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   算出した識別子を文字列で返します。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   返された値が文字列でない場合に
   <classname>RuntimeException</classname> をスローします。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>SplObjectStorage::getHash</function> の例</title>
<programlisting role="php">
<![CDATA[
<?php
class OneSpecimenPerClassStorage extends SplObjectStorage {
    public function getHash($o) {
        return get_class($o);
    }
}
class A {}

$s = new OneSpecimenPerClassStorage;
$o1 = new stdClass;
$o2 = new stdClass;
$o3 = new A;

$s[$o1] = 1;
// $o2 は $o1 に等しいとみなされ、値が置き換えられます
$s[$o2] = 2;
$s[$o3] = 3;

// これらは先ほどのオブジェクトと等しいとみなされ、
// さきほど格納した値にアクセスできるようになります
$p1 = new stdClass;
$p2 = new A;
echo $s[$p1], "\n";
echo $s[$p2], "\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
2
3
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>spl_object_hash</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
