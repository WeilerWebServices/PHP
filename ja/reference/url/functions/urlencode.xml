<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 322704 Maintainer: hirokawa Status: ready -->
<refentry xml:id="function.urlencode" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>urlencode</refname>
  <refpurpose>文字列を URL エンコードする</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>urlencode</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
  </methodsynopsis>
  <para>
   この関数は、URL の問い合わせ部分に使用する文字列のエンコードや
   次のページへ変数を渡す際に便利です。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       エンコードする文字列。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <literal>-_.</literal> を除くすべての非英数文字が % 記号
   (<literal>%</literal>)に続く二桁の16進数で置き換えられ、
   空白は + 記号(<literal>+</literal>)にエンコードされます。
   同様の方法で、WWW のフォームからポストされたデータはエンコードされ、
   <literal>application/x-www-form-urlencoded</literal>
   メディア型も同様です。歴史的な理由により、この関数は <link xlink:href="&url.rfc;3986">RFC 3986</link> エンコード(
   <function>rawurlencode</function> を参照してください) とは異なり、
   空白を + 記号にエンコードします。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples; 
  <para>  
   <example>
    <title><function>urlencode</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
echo '<a href="mycgi?foo=', urlencode($userinput), '">';
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>urlencode</function> および <function>htmlentities</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
$query_string = 'foo=' . urlencode($foo) . '&bar=' . urlencode($bar);
echo '<a href="mycgi?' . htmlentities($query_string) . '">';
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    HTML エンティティにマッチする変数については注意が必要です。
    &amp;amp、&amp;copy、&amp;pound のようなものがブラウザから送信された
    場合、エンティティの実体がその変数名の代わりに使用されます。
    これは明らかな問題点であり、W3C が何年も指摘し続けてきたことです。
    リファレンスは、<link
     xlink:href="&url.argsep;">&url.argsep;</link> にあります。
   </para>
   <para>
    PHP では、
    .ini ディレクティブの arg_separator により引数のセパレータを W3C
    が推奨するセミコロンに変更することが可能です。残念なことに、多くの
    ユーザーエージントはこのセミコロン区切り形式でデータを送信しません。
    よりポータブルな方法としては、セパレータに &amp; の代わりに
    &amp;amp; を使用するというものがあります。この場合、PHP の
    arg_separator を変更する必要はありません。セパレータを &amp;
    のままにし、<function>htmlentities</function> あるいは
    <function>htmlspecialchars</function> で URL をエンコードしてください。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>urldecode</function></member>
    <member><function>htmlentities</function></member>
    <member><function>rawurlencode</function></member>
    <member><function>rawurldecode</function></member>
    <member><link xlink:href="&url.rfc;3986">RFC 3986</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
