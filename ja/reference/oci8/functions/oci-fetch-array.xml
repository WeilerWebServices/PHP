<?xml version="1.0" encoding="utf-8" ?>
<!-- $Revision$ -->
<!-- EN-Revision: 333047 Maintainer: satoruyoshida Status: ready -->
<!-- CREDITS: shimooka -->
<refentry xml:id="function.oci-fetch-array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_fetch_array</refname>
  <refpurpose>クエリの次の行を連想配列あるいは数値添字配列で返す
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>oci_fetch_array</methodname>
   <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter></methodparam>
  </methodsynopsis>
  <para>
   クエリから、結果セットの次の行を含む配列を返します。
   配列の各エントリが行の各カラムをあらわします。
   この関数の典型的な使い方は、ループの中で &false; を返すまでコールすることです。
   &false; は、もう行がないことを意味します。
  </para>
  <para>
   <parameter>statement</parameter> が Oracle Database 12c
   の暗黙の結果セットを返す PL/SQL ブロックである場合、
   すべてのセットからの行を続けて取得します。
   <parameter>statement</parameter> が
   <function>oci_get_implicit_resultset</function> の戻す値である場合、
   ひとつの子クエリーからの行のサブセットだけを返します。
  </para>
  &oci.datatypes;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
       &oci.arg.statement.id;
       <para>
        <function>oci_get_implicit_resultset</function> が戻すステートメント ID も指定できます。
       </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       オプションの第2引数は、次の定数の組み合わせが可能です。
       <table>
        <title><function>oci_fetch_array</function> のモード</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>定数</entry>
           <entry>説明</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>OCI_BOTH</constant></entry>
           <entry>連想配列と配列の両方を返します。
            これは <constant>OCI_ASSOC</constant>
            + <constant>OCI_NUM</constant> と同等で、
            デフォルトの動作です。</entry>
          </row>
          <row>
           <entry><constant>OCI_ASSOC</constant></entry>
           <entry>連想配列を返します。</entry>
          </row>
          <row>
           <entry><constant>OCI_NUM</constant></entry>
           <entry>数値添字配列を返します。</entry>
          </row>
          <row>
           <entry><constant>OCI_RETURN_NULLS</constant></entry>
           <entry>&null; フィールドの要素も作成します。この要素の値は
             PHP の &null; となります。
           </entry>
          </row>
          <row>
           <entry><constant>OCI_RETURN_LOBS</constant></entry>
           <entry>LOB ディスクリプタではなく LOB の中身を返します。</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
      <para>
       デフォルトの <parameter>mode</parameter> は <constant>OCI_BOTH</constant> です。
      </para>
      <para>
       加算演算子 &quot;+&quot; を使うと、複数のモードを同時に指定できます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   連想配列や数値添字配列を返します。
   <parameter>statement</parameter> にもう行がない場合は
   &false; を返します。
  </para>
  <para>
    デフォルトでは、<literal>LOB</literal> カラムは LOB ディスクリプタを返します。
  </para>
  <para>
   <literal>DATE</literal> カラムは、現行のデータフォーマットにフォーマットされた
   文字列として返されます。既定のフォーマットは <literal>NLS_LANG</literal>
   のような Oracle 環境変数で変更したり、またはあらかじめ
   <literal>ALTER SESSION SET NLS_DATE_FORMAT</literal> コマンドを実行して変更します。
  </para>
  <para>
   Oracle のデフォルトでは、大文字小文字を区別しないカラム名はすべて大文字となり、
   結果の連想配列のインデックスも大文字になります。
   大文字小文字を区別するカラム名は、配列のインデックスもそれと同じになります。
   結果の配列を <function>var_dump</function> すれば、
   各クエリの大文字小文字を確かめることができます。
  </para>
  <para>
   テーブル名は配列のインデックスには含まれません。
   もし同じ名前の別カラムを複数取得するクエリを実行する場合は、
   <constant>OCI_NUM</constant> を使うか、あるいはカラムのエイリアスを指定して名前の一意性を保ちましょう。
   例 7 を参照ください。そうしなければ、PHP からはひとつのカラムだけしか見えなくなります。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>oci_fetch_array</function> での <constant>OCI_BOTH</constant> の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT department_id, department_name FROM departments');
oci_execute($stid);

while (($row = oci_fetch_array($stid, OCI_BOTH)) != false) {
    // 連想配列の指標として大文字のカラム名を使用します
    echo $row[0] . " and " . $row['DEPARTMENT_ID']   . " are the same<br>\n";
    echo $row[1] . " and " . $row['DEPARTMENT_NAME'] . " are the same<br>\n";
}

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> での <constant>OCI_NUM</constant> の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php

/*
  実行する前にテーブルを作成します。
      CREATE TABLE mytab (id NUMBER, description CLOB);
      INSERT INTO mytab (id, description) values (1, 'A very long string');
      COMMIT;
*/

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT id, description FROM mytab');
oci_execute($stid);

while (($row = oci_fetch_array($stid, OCI_NUM)) != false) {
    echo $row[0] . "<br>\n";
    echo $row[1]->read(11) . "<br>\n"; // DESCRIPTION から最初の 11 バイトを出力します
}

// 出力です。
//    1
//    A very long

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> での <constant>OCI_ASSOC</constant> の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php

/*
  実行する前にテーブルを作成します。
      CREATE TABLE mytab (id NUMBER, description CLOB);
      INSERT INTO mytab (id, description) values (1, 'A very long string');
      COMMIT;
*/

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT id, description FROM mytab');
oci_execute($stid);

while (($row = oci_fetch_array($stid, OCI_ASSOC)) != false) {
    echo $row['ID'] . "<br>\n";
    echo $row['DESCRIPTION']->read(11) . "<br>\n"; // DESCRIPTION から最初の 11 バイトを出力します
}

// 出力です。
//    1
//    A very long

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> での <constant>OCI_RETURN_NULLS</constant> の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT 1, null FROM dual');
oci_execute($stid);
while (($row = oci_fetch_array ($stid, OCI_ASSOC)) != false) { // NULL を無視
    var_dump($row);
}

/*
上記のコードの出力です。
  array(1) {
    [1]=>
    string(1) "1"
  }
*/

$stid = oci_parse($conn, 'SELECT 1, null FROM dual');
oci_execute($stid);
while (($row = oci_fetch_array ($stid, OCI_ASSOC+OCI_RETURN_NULLS)) != false) { // NULL をフェッチ
    var_dump($row);
}

/*
上記のコードの出力です。
  array(2) {
    [1]=>
    string(1) "1"
    ["NULL"]=>
    NULL
  }
*/

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> での <constant>OCI_RETURN_LOBS</constant> の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php

/*
  実行する前にテーブルを作成します。
      CREATE TABLE mytab (id NUMBER, description CLOB);
      INSERT INTO mytab (id, description) values (1, 'A very long string');
      COMMIT;
*/

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT id, description FROM mytab');
oci_execute($stid);

while (($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_LOBS)) != false) {
    echo $row['ID'] . "<br>\n";
    echo $row['DESCRIPTION'] . "<br>\n"; // DESCRIPTION の全てが含まれます
    // ループ内で、大きなサイズの変数を解放してから次のフェッチに進めます。
    // これで、PHP のピークメモリ利用量を抑えます。
    unset($row);
}

// 出力です。
//    1
//    A very long string

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> での文字の大小を区別するカラムの使用例</title>
    <programlisting role="php">
<![CDATA[
<?php

/*
   実行する前にテーブルを作成します。
      CREATE TABLE mytab ("Name" VARCHAR2(20), city VARCHAR2(20));
      INSERT INTO mytab ("Name", city) values ('Chris', 'Melbourne');
      COMMIT;
*/

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'select * from mytab');
oci_execute($stid);
$row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS);

// 'Name' は文字の大小を区別するカラムとして作成されたので、配列の指標として
// 同一のケースを使用します。しかしながら、文字の大小を区別しないカラムの
// 指標としては、大文字の 'CITY' を使わなければいけません。
print $row['Name'] . "<br>\n";   //  Chris を出力
print $row['CITY'] . "<br>\n";   //  Melbourne を出力

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> での同じ名前のカラムの使用例</title>
    <programlisting role="php">
<![CDATA[
<?php

/*
  実行する前にテーブルを作成します。
      CREATE TABLE mycity (id NUMBER, name VARCHAR2(20));
      INSERT INTO mycity (id, name) values (1, 'Melbourne');
      CREATE TABLE mycountry (id NUMBER, name VARCHAR2(20));
      INSERT INTO mycountry (id, name) values (1, 'Australia');
      COMMIT;
*/

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$sql = 'SELECT mycity.name, mycountry.name
        FROM mycity, mycountry
        WHERE mycity.id = mycountry.id';
$stid = oci_parse($conn, $sql);
oci_execute($stid);
$row = oci_fetch_array($stid, OCI_ASSOC);
var_dump($row);

// 出力には "NAME" 項目一つだけが含まれます。
//    array(1) {
//      ["NAME"]=>
//      string(9) "Australia"
//    }

// 度重なるカラム名を照会するには、 "AS ctnm" のような SQL カラムのエイリアスを使います。
$sql = 'SELECT mycity.name AS ctnm, mycountry.name 
        FROM mycity, mycountry 
        WHERE mycity.id = mycountry.id';
$stid = oci_parse($conn, $sql);
oci_execute($stid);
$row = oci_fetch_array($stid, OCI_ASSOC);
var_dump($row);

// これで出力には選択したカラムが両方含まれます。
//    array(2) {
//      ["CTNM"]=>
//      string(9) "Melbourne"
//      ["NAME"]=>
//      string(9) "Australia"
//    }


oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> での <literal>DATE</literal> カラムの使用例</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

// この接続に対して日付フォーマットを設定します。
// パフォーマンス上の理由で、トリガー、またはその代わりに環境変数で
// フォーマットを変更することを検討します
$stid = oci_parse($conn, "ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD'");
oci_execute($stid);

$stid = oci_parse($conn, 'SELECT hire_date FROM employees WHERE employee_id = 188');
oci_execute($stid);
$row = oci_fetch_array($stid, OCI_ASSOC);
echo $row['HIRE_DATE'] . "<br>\n";  // 1997-06-14 を出力

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> での <literal>REF CURSOR</literal> の使用例</title>
    <programlisting role="php">
<![CDATA[
<?php
/*
  下記のようにして PL/SQL ストアド・プロシジャーを作成します。

  CREATE OR REPLACE PROCEDURE myproc(p1 OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN p1 FOR SELECT * FROM all_objects WHERE ROWNUM < 5000;
  END;
*/

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'BEGIN myproc(:rc); END;');
$refcur = oci_new_cursor($conn);
oci_bind_by_name($stid, ':rc', $refcur, -1, OCI_B_CURSOR);
oci_execute($stid);

// 返された REF CURSOR を実行して、ステートメント識別子のようにそこからフェッチします
oci_execute($refcur);  
echo "<table border='1'>\n";
while (($row = oci_fetch_array($refcur, OCI_ASSOC+OCI_RETURN_NULLS)) != false) {
    echo "<tr>\n";
    foreach ($row as $item) {
        echo "    <td>".($item !== null ? htmlentities($item, ENT_QUOTES) : "&nbsp;")."</td>\n";
    }
    echo "</tr>\n";
}
echo "</table>\n";

oci_free_statement($refcur);
oci_free_statement($stid);
oci_close($conn);

?> 
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> での <literal>LIMIT</literal> 風のクエリによるページング</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

// データベースのバージョンを調べます
preg_match('/Release ([0-9]+)\./', oci_server_version($conn), $matches);
$oracleversion = $matches[1];

// これがページングさせたいクエリーです
$sql = 'SELECT city, postal_code FROM locations ORDER BY city';

if ($oracleversion >= 12) {
    // Oracle 12c の OFFSET / FETCH NEXT 構文を使います
    $sql = $sql . ' OFFSET :offset ROWS FETCH NEXT :numrows ROWS ONLY';
} else {
    // 古いバージョンの Oracle では、ネストしたクエリーを作り、$sql から
    // 行のサブセットを選択する必要があります。あるいは、開発時に SQL 文が
    // わかっているのなら、この方法ではなく row_number() 関数を使うことを
    // 検討しましょう。運用環境では、文字列の連結にともなう SQL インジェクション
    // の問題に気をつけましょう。
    $sql = "SELECT * FROM (SELECT a.*, ROWNUM AS my_rnum
                           FROM ($sql) a
                           WHERE ROWNUM <= :offset + :numrows)
            WHERE my_rnum > :offset";
}

$offset  = 0;  // この行数だけ飛ばす
$numrows = 5;  // 5 行を返す
$stid = oci_parse($conn, $sql);
oci_bind_by_name($stid, ':numrows', $numrows);
oci_bind_by_name($stid, ':offset', $offset);
oci_execute($stid);

while (($row = oci_fetch_array($stid, OCI_ASSOC + OCI_RETURN_NULLS)) != false) {
    echo $row['CITY'] . " " . $row['POSTAL_CODE'] . "<br>\n";
}

// 出力は
//    Beijing 190518
//    Bern 3095
//    Bombay 490231
//    Geneva 1730
//    Hiroshima 6823

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_array</function> で Oracle Database 12<emphasis>c</emphasis> の暗黙の結果セットを使う例</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/pdborcl');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

// OCI8 2.0 と Oracle Database 12c が必要です。
// oci_get_implicit_resultset() も参照ください。
$sql = 'DECLARE
           c1 SYS_REFCURSOR;
        BEGIN
           OPEN c1 FOR SELECT city, postal_code FROM locations WHERE ROWNUM < 4 ORDER BY city;
           DBMS_SQL.RETURN_RESULT(c1);
           OPEN c1 FOR SELECT country_id FROM locations WHERE ROWNUM < 4 ORDER BY city;
           DBMS_SQL.RETURN_RESULT(c1);
        END;';

$stid = oci_parse($conn, $sql);
oci_execute($stid);

// 注意: oci_fetch_all と oci_fetch() は、この場合は使えません
echo "<table>\n";
while (($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) != false) {
    echo "<tr>\n";
    foreach ($row as $item) {
        echo "  <td>".($item!==null?htmlentities($item, ENT_QUOTES|ENT_SUBSTITUTE):"&nbsp;")."</td>\n";
    }
    echo "</tr>\n";
}
echo "</table>\n";

// 出力です。
//    Beijing 190518
//    Bern    3095
//    Bombay  490231
//    CN
//    CH
//    IN

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    大文字小文字を区別せずにつくった Oracle のカラムでは、
    連想配列のインデックスはすべて大文字となることに注意しましょう。
   </para>
  </note>
  <note>
   &oci.use.setprefetch;
  </note>
  <note>
   <para>
    <function>oci_fetch_array</function> は
    <emphasis>ほんの少しだけ</emphasis>
    <function>oci_fetch_assoc</function> や
    <function>oci_fetch_row</function> より低速ですが、
    ずっと柔軟性があります。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_fetch</function></member>
    <member><function>oci_fetch_all</function></member>
    <member><function>oci_fetch_assoc</function></member>
    <member><function>oci_fetch_object</function></member>
    <member><function>oci_fetch_row</function></member>
    <member><function>oci_set_prefetch</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

