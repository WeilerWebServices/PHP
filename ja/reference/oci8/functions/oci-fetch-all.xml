<?xml version="1.0" encoding="utf-8" ?>
<!-- $Revision$ -->
<!-- EN-Revision: 351135 Maintainer: shimooka Status: ready -->
<refentry xml:id="function.oci-fetch-all" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>oci_fetch_all</refname>
  <refpurpose>クエリからの複数の行を二次元配列に取得する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>oci_fetch_all</methodname>
   <methodparam><type>resource</type><parameter>statement</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">output</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>skip</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>maxrows</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>OCI_FETCHSTATEMENT_BY_COLUMN</constant> + <constant>OCI_ASSOC</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   クエリからの複数の行を二次元配列に取得します。
   デフォルトでは、すべての行を返します。
  </para>
  <para>
   この関数は、クエリを
   <function>oci_execute</function> で実行した後でのみコールすることができます。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>statement</parameter></term>
     <listitem>
       &oci.arg.statement.id;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>output</parameter></term>
     <listitem>
      <para>
       返された行を格納する変数。
      </para>
      <para>
        LOB 列は文字列として返されます。
        Oracle は変換をサポートしています。
      </para>
      <para>
        データや型の取得についての詳細な情報は
        <function>oci_fetch_array</function> を参照ください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>skip</parameter></term>
     <listitem>
      <para>
       結果を取得する際に無視する行数
       (デフォルトの値は 0 で、最初の行から開始されます)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>maxrows</parameter></term>
     <listitem>
      <para>
       読み込む行数。デフォルトは -1 で、これは
       <parameter>skip</parameter> + 1 番目の行以降のすべての行を意味します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       パラメータ <parameter>flags</parameter> は、
       配列の構造をあらわし、また連想配列を使うかどうかもあらわします。
       <table>
        <title><function>oci_fetch_all</function> の配列構造モード</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>定数</entry>
           <entry>説明</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>OCI_FETCHSTATEMENT_BY_ROW</constant></entry>
           <entry>配列の配列で、内側の配列はクエリの行単位となります。</entry>
          </row>
          <row>
           <entry><constant>OCI_FETCHSTATEMENT_BY_COLUMN</constant></entry>
           <entry>配列の配列で、内側の配列はクエリの列単位となります。
           これがデフォルトです。</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
      <para>
        配列のインデックスには、カラム名あるいは数値を使うことができます。
        結果は、どれか一つのモードでだけ返されます。
       <table>
        <title><function>oci_fetch_all</function> の配列インデックスモード</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>定数</entry>
           <entry>説明</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>OCI_NUM</constant></entry>
           <entry>各列の配列に数値添字を使います。</entry>
          </row>
          <row>
           <entry><constant>OCI_ASSOC</constant></entry>
           <entry>各カラムを連想配列にします。
           これがデフォルトです。</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
      <para>
       加算演算子 &quot;+&quot; を使って、
       配列の構造とインデックス形式の組み合わせを選択します。
      </para>
      <para>
       Oracle のデフォルトである大文字小文字を区別しないカラム名の場合は、
       配列のキーは大文字となります。大文字小文字を区別するカラム名の場合は、
       配列のキーの大文字小文字は実際のカラム名と同じになります。
       <function>var_dump</function> で <parameter>output</parameter>
       を確認し、大文字小文字を適切に指定するようにしましょう。
      </para>
      <para>
        同じ名前のカラムが複数あるクエリでは、カラムの別名を使わなければなりません。
        そうしないと、連想配列にあらわれるのはその中の一つのカラムだけとなってしまいます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <parameter>output</parameter> の行数を返します。これは 0 以上の値となります。
   &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>oci_fetch_all</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT POSTAL_CODE, CITY FROM locations WHERE ROWNUM < 3');
oci_execute($stid);

$nrows = oci_fetch_all($stid, $res);

echo "$nrows rows fetched<br>\n";
var_dump($res);

// var_dump 出力は
//    2 rows fetched
//    array(2) {
//      ["POSTAL_CODE"]=>
//      array(2) {
//        [0]=>
//        string(6) "00989x"
//        [1]=>
//        string(6) "10934x"
//      }
//      ["CITY"]=>
//      array(2) {
//        [0]=>
//        string(4) "Roma"
//        [1]=>
//        string(6) "Venice"
//      }
//    }

// 結果を見やすく表示します
echo "<table border='1'>\n";
foreach ($res as $col) {
    echo "<tr>\n";
    foreach ($col as $item) {
        echo "    <td>".($item !== null ? htmlentities($item, ENT_QUOTES) : "")."</td>\n";
    }
    echo "</tr>\n";
}
echo "</table>\n";

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_all</function> で <constant>OCI_FETCHSTATEMENT_BY_ROW</constant> を使う例</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT POSTAL_CODE, CITY FROM locations WHERE ROWNUM < 3');
oci_execute($stid);

$nrows = oci_fetch_all($stid, $res, null, null, OCI_FETCHSTATEMENT_BY_ROW);

echo "$nrows rows fetched<br>\n";
var_dump($res);

// 出力は
//    2 rows fetched
//    array(2) {
//      [0]=>
//      array(2) {
//        ["POSTAL_CODE"]=>
//        string(6) "00989x"
//        ["CITY"]=>
//        string(4) "Roma"
//      }
//      [1]=>
//      array(2) {
//        ["POSTAL_CODE"]=>
//        string(6) "10934x"
//        ["CITY"]=>
//        string(6) "Venice"
//      }
//    }

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_fetch_all</function> で <constant>OCI_NUM</constant> を使う例</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT POSTAL_CODE, CITY FROM locations WHERE ROWNUM < 3');
oci_execute($stid);

$nrows = oci_fetch_all($stid, $res, null, null, OCI_FETCHSTATEMENT_BY_ROW + OCI_NUM);

echo "$nrows rows fetched<br>\n";
var_dump($res);

// 出力は
//    2 rows fetched
//    array(2) {
//      [0]=>
//      array(2) {
//        [0]=>
//        string(6) "00989x"
//        [1]=>
//        string(4) "Roma"
//      }
//      [1]=>
//      array(2) {
//        [0]=>
//        string(6) "10934x"
//        [1]=>
//        string(6) "Venice"
//      }
//    }

oci_free_statement($stid);
oci_close($conn);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
     <parameter>skip</parameter> を使うのは、非常に非効率的です。
     読み飛ばす行もすべて PHP がデータベースから受け取る結果セットに含まれ、
     そのあとで読み飛ばす部分が捨てられます。
     それよりは、SQL を使って取得開始位置と取得範囲をはじめから指定した方がより効率的です。
     <function>oci_fetch_array</function> の例を参照ください。
   </para>
  </note>
  <note>
   <para>
    大量の行を返すクエリでは、<function>oci_fetch_array</function>
    のような単一行の取得関数を使ったほうがメモリを浪費せずに済みます。
   </para>
  </note>
  <note>
   &oci.use.setprefetch;
  </note>
  <note>
   <para>
    Oracle Database 12<emphasis>c</emphasis> の暗黙の結果セットからの行は返しません。
    代わりに <function>oci_fetch_array</function> を使いましょう。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_fetch</function></member>
    <member><function>oci_fetch_array</function></member>
    <member><function>oci_fetch_assoc</function></member>
    <member><function>oci_fetch_object</function></member>
    <member><function>oci_fetch_row</function></member>
    <member><function>oci_set_prefetch</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

