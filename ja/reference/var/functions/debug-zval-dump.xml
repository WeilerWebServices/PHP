<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 351129 Maintainer: shimooka Status: ready -->
<refentry xml:id="function.debug-zval-dump" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>debug_zval_dump</refname>
  <refpurpose>内部的な Zend の値を表す文字列をダンプする</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>debug_zval_dump</methodname>
   <methodparam><type>mixed</type><parameter>variable</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>variables</parameter></methodparam>
  </methodsynopsis>
  <para>
   内部的な Zend の値を表す文字列をダンプします。
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>variable</parameter></term>
     <listitem>
      <para>
       ダンプする変数。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>variables</parameter></term>
     <listitem>
      <para>
       ダンプする追加の変数。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>debug_zval_dump</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';
$var2 = '';

$var2 =& $var1;

debug_zval_dump(&$var1);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
&string(11) "Hello World" refcount(3)
]]>
    </screen>
   </example>
  </para>
  <note>
   <title><literal>refcount</literal> に注意</title>
   <para>
    この関数によって返される <literal>refcount</literal> の値は、
    特定の状況下では自明ではありません。例えば、とある開発者は上記の例で
    <literal>refcount</literal> は <literal>2</literal>
    を示すと予想したかも知れません。
    実際に <function>debug_zval_dump</function> がコールされるとき、
    3 番目の参照が生成されます。
   </para>
   <para>
    この動作は、変数が <function>debug_zval_dump</function>
    に参照渡しされない場合、よりその度合いを増します。
    例えば、上記の例を僅かに修正したバージョンを考えてみます。
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';
$var2 = '';

$var2 =& $var1;

debug_zval_dump($var1); // この時、参照で渡されない
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hello World" refcount(1)
]]>
     </screen>
    </example>
   </para>
   <para>
    なぜ <literal>refcount(1)</literal> でしょうか?
    なぜなら関数がコールされるとき、 <literal>$var1</literal>
    のコピーが作成されるためです。
   </para>
   <para>
    この関数は、<literal>refcount</literal> が <literal>1</literal>
    の変数が渡される (コピーもしくは値渡し) とき、<emphasis>より</emphasis>
    まぎらわしくなります。
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hello World';

debug_zval_dump($var1);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hello World" refcount(2)
]]>
     </screen>
    </example>
   </para>
   <para>
    ここで <literal>refcount</literal> の <literal>2</literal>
    は自明ではありません。特に上記の例を考える場合はそうです。
    では、何が起こっているのでしょうか ?
   </para>
   <para>
    <function>debug_zval_dump</function> の引数として使用される前の <literal>$var1</literal> のように、
    変数に単一の参照がある場合、PHP のエンジンは関数に渡される方法を最適化します。
    内部的に、PHP は <literal>$var1</literal> を参照のように扱います
    （この関数のスコープによって <literal>refcount</literal> が増加されます）。
    ただし、渡された参照がたまたま書き込まれる場合は注意が必要です。
    書き込みの時点でのみコピーが作成されます。これは "copy on write" として知られます。
   </para>
   <para>
    そのため、もし <function>debug_zval_dump</function> がたまたま
    その単一の（および、そうではない）パラメータに書き込みをおこなった場合、コピーが作成されます。
    その時までパラメータは参照のままであるため、関数呼び出しのスコープによって
    <literal>refcount</literal> が <literal>2</literal>
    にインクリメントされる原因になります。
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>var_dump</function></member>
    <member><function>debug_backtrace</function></member>
    <member><link linkend="language.references">リファレンスの説明</link></member>
    <member><link xlink:href="&url.derick.references;">リファレンスの説明 (Derick Rethans による)</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
