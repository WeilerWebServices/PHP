<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 349120 Maintainer: takagi Status: ready -->
<!-- CREDITS: hotta -->
<chapter xml:id="internals2.variables" xmlns="http://docbook.org/ns/docbook">
 <title>変数の処理</title>
 <section xml:id="internals2.variables.intro">
  <title>変数入門</title>
  <para>
   変数がどのように格納され処理されているのかについてきちんと理解することは、
   <code>ハッカー</code>になるための第一歩です。エンジンは、構造体のさまざまな
   フィールドにアクセスするための統一された直感的なマクロを提供することで、
   それがどのような型の変数であっても、その概念の複雑さを隠蔽しようとします。
   この章の中身に沿って学習していけば、<code>ハッカー</code>はPHPの変数に関する
   専門用語やその概念についての理解を深めることができるはずです。
  </para>
  <note>
   <para>PHPはコピーオンライトや参照カウント法を使う、動的で型の制約がゆるい言語です。
   </para>
  </note>
  <para>
  前述の内容もう少し正確に言うと、PHPは高水準言語であり、緩い型付けにより変数は
  エンジニアの好みに応じて暗黙に解釈され、実行時に必要な型に強制的に変換されます。
  参照カウント法は、ある変数がユーザーのコードの中でもはや参照されなくなったことを
  エンジンが推測し、その変数に関連付けられた構造体を開放するという仕組みです。
  </para>
  <para>
   PHP内部の変数は、すべて<code>zval</code>と呼ばれるひとつの構造体で表現されています。
  </para>
  <screen>
<![CDATA[
typedef struct _zval_struct {
    zvalue_value value;        /* 変数の値 */
    zend_uint refcount__gc;    /* 参照回数 */
    zend_uchar type;           /* 変数の型 */
    zend_uchar is_ref__gc;     /* リファレンスフラグ */
} zval;]]>
  </screen>
  <para>
   <code>zval_value</code>は、ひとつの変数が持ちうるすべての型を表現可能な共用体です。
  </para>
  <screen>
<![CDATA[
typedef union _zvalue_value {
    long lval;                 /* long 値 */
    double dval;               /* double 値 */
    struct {                   
        char *val;
        int len;               /* 常に文字列用として設定されます */
    } str;                     /* 文字列(常に長さを持ちます) */
    HashTable *ht;             /* 配列 */
    zend_object_value obj;     /* オジュジェクト格納用ハンドルやハンドラを保持します */
} zvalue_value;
]]>
  </screen>
  <para>
   この構造体により、ある変数はいずれかひとつの型を持つことができ、そのデータは
   <code>zval_value</code>共用体の中の適切なフィールドによって表現されている
   ことがわかります。<code>zval</code>自体に型や参照回数を持ち、
   またその変数がリファレンスかどうかを示すフラグも持っています。
  </para>
  <table xml:id="internals2.variables.types.api">
   <title>ネイティブ型定数</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>定数</entry>
      <entry>マッピング</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><code>IS_NULL</code></entry>
      <entry>値がセットされていない</entry>
     </row>
     
     <row>
      <entry><code>IS_LONG</code></entry>
      <entry>lval</entry>
     </row>
     
     <row>
      <entry><code>IS_DOUBLE</code></entry>
      <entry>dval</entry>
     </row>
     
     <row>
      <entry><code>IS_BOOL</code></entry>
      <entry>lval</entry>
     </row>
     
     <row>
      <entry>IS_RESOURCE</entry>
      <entry>lval</entry>
     </row>
     
     <row>
      <entry>IS_STRING</entry>
      <entry>str</entry>
     </row>
     
     <row>
      <entry><code>IS_ARRAY</code></entry>
      <entry>ht</entry>
     </row>
     
     <row>
      <entry><code>IS_OBJECT</code></entry>
      <entry>obj</entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
  <note>
   <para>上記の他にも、定数の配列や callable オブジェクトといった内部的な型を
   あらわす定数があるのですが、それらの利用法についてはこのドキュメントでは扱いません。</para>
  </note>
  
  <para>エンジンが公開しているマクロのうち、<code>zval</code>値で扱えるものを
  以下の表に示します。
  </para>
  
  <table xml:id="internals2.variables.zvals.api">
   <title>アクセサ・マクロ</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>プロトタイプ</entry>
      <entry>アクセス</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><code>zend_uchar Z_TYPE(zval zv)</code></entry>
      <entry>type</entry>
      <entry><code>value</code>の型を返す</entry>
     </row>
     
     <row>
      <entry><code>long Z_LVAL(zval zv)</code></entry>
      <entry>value.lval</entry>
      <entry></entry>
     </row>
     
     <row>
      <entry><code>zend_bool Z_BVAL(zval zv)</code></entry>
      <entry>value.lval</entry>
      <entry>long の<code>value</code>を zend_bool にキャスト</entry>
     </row>
     
     <row>
      <entry><code>double Z_DVAL(zval zv)</code></entry>
      <entry>value.dval</entry>
      <entry></entry>
     </row>
     
     <row>
      <entry><code>long Z_RESVAL(zval zv)</code></entry>
      <entry>value.lval</entry>
      <entry>リソース一覧における<code>value</code>の識別子を返す</entry>
     </row>
     
     <row>
      <entry><code>char* Z_STRVAL(zval zv)</code></entry>
      <entry>value.str.val</entry>
      <entry>文字列の<code>value</code>を返す</entry>
     </row>
     
     <row>
      <entry><code>int Z_STRLEN(zval zv)</code></entry>
      <entry>value.str.len</entry>
      <entry>文字列<code>value</code>の文字数を返す</entry>
     </row>
     
     <row>
      <entry><code>HashTable* Z_ARRVAL(zval zv)</code></entry>
      <entry>value.ht</entry>
      <entry>ハッシュテーブル（配列）の<code>value</code>を返す</entry>
     </row>
     
     <row>
      <entry><code>zend_object_value Z_OBJVAL(zval zv)</code></entry>
      <entry>value.obj</entry>
      <entry>オブジェクトの<code>value</code>を返す</entry>
     </row>
     
     <row>
      <entry><code>uint Z_OBJ_HANDLE(zval zv)</code></entry>
      <entry>value.obj.handle</entry>
      <entry>オブジェクト<code>value</code>のオブジェクトハンドルを返す</entry>
     </row>
     
     <row>
      <entry><code>zend_object_handlers* Z_OBJ_HT_P(zval zv)</code></entry>
      <entry>value.obj.handlers</entry>
      <entry>オブジェクト<code>value</code>のハンドラテーブルを返す</entry>
     </row>
     
     <row>
      <entry><code>zend_class_entry* Z_OBJCE(zval zv)</code></entry>
      <entry>value.obj</entry>
      <entry>オブジェクト<code>value</code>のクラスエントリを返す</entry>
     </row>
     
     <row>
      <entry><code>HashTable* Z_OBJPROP(zval zv)</code></entry>
      <entry>value.obj</entry>
      <entry>オブジェクト<code>value</code>のプロパティを返す</entry>
     </row>
     
     <row>
      <entry><code>HashTable* Z_OBJPROP(zval zv)</code></entry>
      <entry>value.obj</entry>
      <entry>オブジェクト<code>value</code>のプロパティを返す</entry>
     </row>
     
     <row>
      <entry><code>HashTable* Z_OBJDEBUG(zval zv)</code></entry>
      <entry>value.obj</entry>
      <entry>オブジェクトに get_debug_info ハンドラがセットされている
      場合はそれが呼ばれ、そうでなければ Z_OBJPROP が呼ばれる</entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
  <!-- this is not good enough information -->
  <para><xref linkend="features.gc.refcounting-basics"/>の章をチェックして、
  参照カウント法や参照がどのような仕組みで動いているのかを調べてみてください。</para>
  
  <table xml:id="internals2.variables.refcounts.api">
   <title>参照カウントの操作</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>プロトタイプ</entry>
      <entry>説明</entry>
     </row>
    </thead>
    
    <tbody>
     <row>
      <entry><code>zend_uint Z_REFCOUNT(zval zv)</code></entry>
      <entry><code>value</code>の参照カウントを返す</entry>
     </row>
     
     <row>
      <entry><code>zend_uint Z_SET_REFCOUNT(zval zv)</code></entry>
      <entry><code>value</code>の参照カウントをセットしてそれを返す</entry>
     </row>
     
     <row>
      <entry><code>zend_uint Z_ADDREF(zval zv)</code></entry>
      <entry><code>value</code>の参照カウントを事前インクリメントしてそれを返す</entry>
     </row>
     
     <row>
      <entry><code>zend_uint Z_DELREF(zval zv)</code></entry>
      <entry><code>value</code>の参照カウントを事前デクリメントしてそれを返す</entry>
     </row>
     
     <row>
      <entry><code>zend_bool Z_ISREF(zval zv)</code></entry>
      <entry>zval が参照かどうかを返す</entry>
     </row>
     
     <row>
      <entry><code>void Z_UNSET_ISREF(zval zv)</code></entry>
      <entry>is_ref__gc を 0 にする</entry>
     </row>
     
     <row>
      <entry><code>void Z_SET_ISREF(zval zv)</code></entry>
      <entry>is_ref__gc を 1 にする</entry>
     </row>
     
     <row>
      <entry><code>void Z_SET_ISREF_TO(zval zv, zend_uchar to)</code></entry>
      <entry>is_ref__gc を<code>to</code>にする</entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
  <note>
   <para>
   前述の Z_* マクロはどれも１個の zval を受け取りますが、これらに _P サフィックス
   がついた、たとえば<code>zend_uchar Z_TYPE_P(zval* pzv)</code>のようなマクロも
   定義されていて、これらはすべて zval へのポインタを受け取ります。さらに、たとえば
   <code>zend_uchar Z_TYPE_PP(zval** ppzv)</code>のように _PP サフィックスがついた
   ものもあり、これらは zval へのポインタのポインタを受け取ります。</para>
  </note>
  
  <table xml:id="internals2.variables.general.api">
   <title>生成、破壊、分割、コピー</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>プロトタイプ</entry>
      <entry>説明</entry>
     </row>
    </thead>
    
    <tbody>
     <row>
      <entry><code>ALLOC_ZVAL(zval* pzval)</code></entry>
      <entry><code>pzval</code>を emalloc する</entry>
     </row>
     
     <row>
      <entry><code>ALLOC_INIT_ZVAL(zval* pzval)</code></entry>
      <entry><code>pzval</code>を emalloc し、<code>pzval</code>は初期化のために
      NULL として型付けられた zval を指すようにする</entry>
     </row>
     
     <row>
      <entry><code>MAKE_STD_ZVAL(zval* pzval)</code></entry>
      <entry><code>pzval</code>を emalloc し、参照カウントを
      <code>1</code>にする</entry>
     </row>
     
     <row>
      <entry><code>ZVAL_COPY_VALUE(zval* dst, zval* src)</code></entry>
      <entry><code>src</code>の値と型を<code>dst</code>の値と型としてセットする
      </entry>
     </row>
     
     <row>
      <entry><code>INIT_PZVAL_COPY(zval* dst, zval*dst) </code></entry>
      <entry>ZVAL_COPY_VALUE を実行し、<code>dst</code>の参照カウントを 1 にし、
      is_ref__gc を<code>0</code>にする</entry>
     </row>
     
     <row>
      <entry><code>SEPARATE_ZVAL(zval** ppzval)</code></entry>
      <entry><code>ppzval</code>の参照カウントが 1 より大きい場合、新たに emalloc 
      して zval の中身をコピーし、zval と同じ型で同じ値にした場所を
      <code>*ppzval</code>が指すようにする</entry>
     </row>
     
     <row>
      <entry><code>SEPARATE_ZVAL_IF_NOT_REF(zval** ppzval)</code></entry>
      <entry><code>*ppzval</code>が参照ではない場合、<code>ppzval</code>に対して
      SEPARATE_ZVAL を行う</entry>
     </row>
     
     <row>
      <entry><code>SEPARATE_ZVAL_TO_MAKE_IS_REF(zval** ppzval)</code></entry>
      <entry><code>*ppzval</code>が参照ではない場合、<code>ppzval</code>に対して
      SEPARATE_ZVAL と Z_SET_ISREF_PP を行う</entry>
     </row>
     
     <row>
      <entry><code>COPY_PZVAL_TO_ZVAL(zval dst, zval** src)</code></entry>
      <entry><code>src</code>の参照カウントを変更せずに、<code>dst</code>を
      <code>src</code>のコピーにする</entry>
     </row>
     
     <row>
      <entry><code>MAKE_COPY_ZVAL(zval** src, zval* dst)</code></entry>
      <entry>INIT_PZVAL_COPY を行い、新しい zval に対して zval_copy_ctor する
      </entry>
     </row>
     
     <row>
      <entry><code>void zval_copy_ctor(zval** pzval)</code></entry>
      <entry>参照カウントをメンテナンスする。エンジン全体を通して広く使われる。
      </entry>
     </row>
     
     <row>
      <entry><code>void zval_ptr_dtor(zval* pzval)</code></entry>
      <entry>変数の参照カウントをデクリメントする。
      参照カウントが 0 になったら変数は破壊される。</entry>
     </row>
     
     <row>
      <entry><code>FREE_ZVAL(zval* pzval)</code></entry>
      <entry><code>pzval</code>を efree する</entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
  <note>
   <para>オブジェクトとリソースは、それぞれの構造体の一部として参照カウントを
   持っています。これらについて zval_ptr_dtor が呼ばれると、それぞれにあった del_ref
   が実行されます。詳細はオブジェクトの扱いとリソースの扱いを参照してください。
   </para>
  </note>
  
  <para>さらに<code>ハッカー</code>が知っておくべき機能をふたつだけ挙げるとすれば、
  それは<code>zval_copy_ctor</code>と<code>zval_ptr_dtor</code>でしょう。これらは
  エンジンにおける参照カウントメカニズムの基本です。重要なことは、通常の環境で
  <code>zval_copy_ctor</code>が呼ばれても、実際には何も起こらないことです。
  これは単に参照カウントを増やしているだけです。同様に、<code>zval_ptr_dtor</code>
  が本当に変数を破壊するのは、それを参照するものがなくなって、参照カウントが 0 
  になった時だけです。</para>
  
  <para>PHP 自体は弱い型付けしか行いませんが、エンジンが変数の型を別の型にするための
  API 関数を提供しています。</para>
  
  <table xml:id="internals2.variables.conversion.api">
   <title>型の変換</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry>プロトタイプ</entry>
     </row>
    </thead>
    <tbody>
     
     <row>
      <entry><code>void convert_to_long(zval* pzval)</code></entry>
     </row>
     
     <row>
      <entry><code>void convert_to_double(zval* pzval)</code></entry>
     </row>
     
     <row>
      <entry><code>void convert_to_long_base(zval* pzval, int base)</code></entry>
     </row>
     
     <row>
      <entry><code>void convert_to_null(zval* pzval)</code></entry>
     </row>
     
     <row>
      <entry><code>void convert_to_boolean(zval* pzval)</code></entry>
     </row>
     
     <row>
      <entry><code>void convert_to_array(zval* pzval)</code></entry>
     </row>
     
     <row>
      <entry><code>void convert_to_object(zval* pzval)</code></entry>
     </row>
     
     <row>
      <entry><code>void convert_object_to_type(zval* pzval, convert_func_t converter)</code></entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
  <note>
   <para><code>convert_func_t</code> 関数には<code>(void) (zval* pzval)</code>
   というプロトタイプが必要です。</para>
  </note>
  
  <para>ここまで読んでもらえたので、あなたはネイティブからエンジンまでの型、
  型の検出とzval 値の読み取り方法、参照カウントや zval のフラグの操作等についての
  理解が進んだはずです。</para>
  
 </section>
 
 <section xml:id="internals2.variables.arrays">
  <title>配列の扱い</title>
  <para>
  配列は HashTable 構造体に格納され、zval の型は IS_ARRAY となります。ここでは、
  これらの構造体を変数として作成したり破壊したり操作したりする API 関数について
  説明します。これらの内容は <code>Zend/zend_API.h</code>でも確認できます。
  </para>
  
  <table xml:id="internals2.variables.arrays.api">
   <title>変数としての HashTable の API</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>プロトタイプ</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><code>void array_init(zval* pzval)</code></entry>
      <entry>変数を<code>HashTable</code>として初期化し、その<code>HashTable</code>
      に対して型と適切なデストラクタ関数を設定する</entry>
     </row>
     
     <row>
      <entry><code>void array_init_size(zval* pzval)</code></entry>
      <entry>最小限<code>size</code>個の入れ物を用意して変数を array_init で初期化する
      </entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
  <note>
   <para>何度も array_destroy を呼び出さないようにしてください。変数の配列を破壊
   するには、その変数に対して<code>zval_ptr_dtor</code>をコールします。その変数
   へのその他の参照がなくなった時点で、自動的にその配列の中身も破壊されます。
   </para>
  </note>
  
  <table xml:id="internals2.variables.iarrays.api">
   <title>インデックス配列用の API</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry>プロトタイプ</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><code>int add_index_long(zval* pzval, ulong index, long value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_index_null(zval* pzval, ulong index)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_index_bool(zval* pzval, ulong index, zend_bool value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_index_bool(zval* pzval, ulong index, zend_bool value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_index_resource(zval* pzval, ulong index, uint value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_index_double(zval* pzval, ulong index, double value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_index_string(zval* pzval, ulong index, char* string, zend_bool duplicate)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_index_stringl(zval* pzval, ulong index, char* string, uint length, zend_bool duplicate)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_index_zval(zval* pzval, ulong index, zval* value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_next_index_long(zval* pzval, long value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_next_index_null(zval* pzval)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_next_index_bool(zval* pzval, zend_bool value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_next_index_resource(zval* pzval, uint value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_next_index_double(zval* pzval, double value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_next_index_string(zval* pzval, const char* string, zend_bool dulpicate)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_next_index_stringl(zval* pzval, const char* string, uint length, zend_bool duplicate)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_next_index_zval(zval* pzval, zval* value)</code></entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
  <table xml:id="internals2.variables.aarrays.api">
   <title>連想配列用 API</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry>プロトタイプ</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><code>int add_assoc_long(zval* pzval, const char* key, long value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_long_ex(zval* pzval, const char* key, uint klen, long value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_null(zval* pzval, const char* key)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_null_ex(zval* pzval, const char* key, uint klen)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_bool(zval* pzval, const char* key, zend_bool value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_bool(zval* pzval, const char* key, zend_bool value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_bool_ex(zval* pzval, const char* key, uint klen, zend_bool value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_resource(zval* pzval, const char* key, uint value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_resource_ex(zval* pzval, const char* key, uint klen, uint value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_double(zval* pzval, const char* key, double value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_double_ex(zval* pzval, const char* key, uint klen, double value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_string(zval* pzval, const char* key, const char* value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_string_ex(zval* pzval, const char* key, uint klen, const char* value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_stringl(zval* pzval, const char* key, const char* value, uint vlen, zend_bool duplicate)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_stringl_ex(zval* pzval, const char* key, uint klen, const char* value, uint vlen, zend_bool duplicate)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_zval(zval* pzval, const char* key, zval* value)</code></entry>
     </row>
     
     <row>
      <entry><code>int add_assoc_zval_ex(zval* pzval, const char* key, uint klen, zval* value)</code></entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
  <note>
   <para>
   duplicate という名前のパラメータを取る add_*_string 関数群は、<code>duplicate</code>
   が真の場合、<code>estrndup</code>を使って文字列を複製します。</para>
  </note>
  
  <note>
   <para>add_*_zval 関数は<code>value</code>パラメータの参照カウントを調整しません。
   </para>
  </note>
  
  <para>
  配列変数に対してさらに高度な操作をしたい場合、直接 HashTable API を使う必要があります。
  </para>
 </section>
 
 <section xml:id="internals2.variables.tables">
  <title>HashTable の扱い</title>
  
  <para>PHP の内部で多くの役割を提供する<code>HashTable</code>構造体は至る所で
  使われており、この機能を理解することはよい<code>ハッカー</code>になるための
  必要条件です。</para>
  
  <para>エンジンにおける<code>HashTable</code>の実装は標準の<code>HashTable</code>です。
  つまりキー =&gt; 値をベースにした格納方式であり、キーは常に文字列で、そのハッシュ値は
  ビルトインのハッシュアルゴリズム
  <code>zend_inline_hash_func(const char* key, uint length)</code>により計算されます。
  これは広く流通しており、妥当な利用法と言えます。</para>
  
  <para><code>HashTable</code>の内部構造や厳密な操作についてはこの文書の範疇を超えます。
  この文書では API の入手や最適な利用法などについてご紹介しています。HashTable
  に関する詳細な考え方等は<code>Zend/zend_hash.h</code>を参照してください。</para>
  
  <para>特に記載のない限り、これらの関数は何らかの原因で要求した操作ができない場合
  <code>FAILURE</code>を返し、そうでなければ<code>SUCCESS</code>を返します。</para>
  
  <note>
   <para><code>HashTable</code> API 関数は通常、キーの長さは NULL で終端された文字列の
   長さに等しいことを期待していることに気をつけてください。これには NULL 終端の分も
   含みます。つまり、<code>strlen(key) + 1</code>を期待しているということです。</para>
  </note>
  
  <para><code>HashTable</code>を使う際に知っておくべき typedef 定義を以下に記載します。
  これらのほとんどは定義そのものが説明のようになっているので、<code>ハッカー</code>
  はこれらのプロトタイプを深く理解できるはずです。</para>
  
  <screen>
<![CDATA[
typedef ulong (*hash_func_t)(const char *arKey, uint nKeyLength); /* ほとんど冗長 */
typedef int  (*compare_func_t)(const void *, const void * TSRMLS_DC); /* 比較関数 */
typedef void (*sort_func_t)(void *, size_t, register size_t, compare_func_t TSRMLS_DC); /* ソート関数 */
typedef void (*dtor_func_t)(void *pDest); /* デストラクタ関数 */
typedef void (*copy_ctor_func_t)(void *pElement); /* コピーコンストラクタ */
typedef void (*copy_ctor_param_func_t)(void *pElement, void *pParam); /* 引数付きのコピーコンストラクタ */
typedef int (*apply_func_t)(void *pDest TSRMLS_DC); /* 適用関数 */
typedef int (*apply_func_arg_t)(void *pDest, void *argument TSRMLS_DC); /* 関数引数付きの適用関数 */
typedef int (*apply_func_args_t)(void *pDest TSRMLS_DC, int num_args, va_list args, zend_hash_key *hash_key); /* 複数の関数引数を伴う適用関数 */
]]>
  </screen>
  
  <table xml:id="internals2.variables.advrrays.api">
   <title>HashTable API</title>
   <tgroup cols="1">
    <tbody>
     <row>
      <entry><code>int zend_hash_init(HashTable* ht, uint size, hash_func_t hash, dtor_func_t destructor, zend_bool persistent)</code></entry>
     </row>
     
     <row>
      <entry>ハッシュテーブルを初期化して、少なくとも<code>size</code>個の要素を
      保持する。<code>hash</code>は歴史的な経緯により存在するだけで常に無視される。
      <code>zend_inline_hash_func</code>が常にハッシュ関数として使われる。
      <code>destructor</code>は<code>NULL</code>でもよい。</entry>
     </row>
     
     <row>
      <entry><code>int zend_hash_add(HashTable* ht, const char* key, uint klen, void* data, uint dlen, void** dest)</code></entry>
     </row>
     
     <row>
      <entry>指定された<code>key</code>を使ってテーブルに<code>data</code>を追加する。
      キーは<code>length</code>バイトの長さを持つ（そして<code>key</code>からテーブル
      にコピーされる）。キーが存在すると FAILURE が返される。</entry>
     </row>
     
     <row>
      <entry><code>int zend_hash_update(HashTable* ht, const char* key, uint klen, void* data, uint dlen, void** dest)</code></entry>
     </row>
     
     <row>
      <entry>指定された<code>key</code>を使ってテーブルに<code>data</code>を追加する。
      キーは<code>length</code>バイトの長さを持つ（そして<code>key</code>からテーブル
      にコピーされる）。キーが存在した場合、古いデータに対して<code>dtor_func_t</code>
      が呼ばれ、既存のデータは<code>data</code>で上書きされる。</entry>
     </row>
     
     <row>
      <entry><code>int zend_hash_find(HashTable* ht, const char* key, uint klen, void** data)</code></entry>
     </row>
     
     <row>
      <entry>テーブルを<code>key</code>で検索し、見つかったら<code>*data</code>
      をセットして SUCCESS を返す。</entry>
     </row>
     
     <row>
      <entry><code>zend_bool zend_hash_exists(HashTable* ht, const char* key, uint klen)</code></entry>
     </row>
     
     <row>
      <entry><code>ht</code>に<code>key</code>があれば正の値を返す。</entry>
     </row>
     
     <row>
      <entry><code>int zend_hash_del(HashTable* ht, const char* key, uint klen)</code></entry> 
     </row>
     
     <row>
      <entry>テーブル内に<code>key</code>で特定されるエントリがあれば削除する。</entry>
     </row>
     
     <row>
      <entry><code>int zend_hash_index_update(HashTable* ht, ulong index, void* data, uint dsize, void** dest)</code></entry>
     </row>
     
     <row>
      <entry><code>ht</code>の中の<code>index</code>で指定されたエントリのデータを
      <code>data</code>で更新する。</entry>
     </row>
     
     <row>
      <entry><code>int zend_hash_index_del(HashTable* ht, ulong index)</code></entry>
     </row>
     
     <row>
      <entry><code>ht</code>から<code>index</code>で指定されたエントリを削除する。
      </entry>
     </row>
     
     <row>
      <entry><code>int zend_hash_index_find(HashTable* ht, ulong index, void** data)</code></entry>
     </row>
     
     <row>
      <entry><code>ht</code>の中で<code>index</code>で指定されたデータを
      <code>*data</code>にリダイレクトする。</entry>
     </row>
     
     <row>
      <entry><code>int zend_hash_index_exists(HashTable* ht, ulong index)</code></entry>
     </row>
     
     <row>
      <entry><code>ht</code>に<code>index</code>があれば正の値を返す。</entry>
     </row>
     
     <row>
      <entry><code>ulong zend_hash_next_free_element(HashTable* ht)</code></entry>
     </row>
     
     <row>
      <entry><code>ht</code>の中で次に利用可能な要素のインデックスを返す。</entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
  <caution>
   <para>zend_hash_* 関数のうち<code>void* data</code>を受け付けるものは、
   通常それを<code>(void**)</code> (すなわち<code>(void**) &amp;data</code>)に
   キャストしなければいけません。</para>
  </caution>
  
  <para>HashTable の中を行き来しなければならない場合も少なくありません。
  これを行うには、<code>HashTable</code>へのポインタに加えて<code>HashPosition</code>
  オプションを指定します。これは HashTable API への内部構造であり、HashTable の
  内部位置に影響を与えずに内部を移動できるようになります。以下の移動用関数が提供
  されており、以下にその利用例を示します。</para>
  
  <table xml:id="internals2.variables.trarrays.api">
   <title>HashTable 内の移動 API</title>
   <tgroup cols="1">
    <tbody>
     <row>
      <entry><code>int zend_hash_internal_pointer_reset(HashTable* ht)</code></entry>
     </row>
     <row>
      <entry><code>ht</code>の内部ポインタを開始位置にリセットする。</entry>
     </row>
     <row>
      <entry><code>int zend_hash_internal_pointer_reset_ex(HashTable* ht, HashPosition position)</code></entry>
     </row>
     <row>
      <entry><code>position</code>を<code>ht</code>の開始位置にセットする。</entry>
     </row>
     <row>
      <entry><code>int zend_hash_get_current_data(HashTable* ht, void* data)</code></entry>
     </row>
     <row>
      <entry><code>ht</code>の現在位置にあるデータを取得する。<code>data</code>
      は<code>void**</code>にキャストしなければならない
      （すなわち<code>(void**) &amp;data</code>）。</entry>
     </row>
     <row>
      <entry><code>int zend_hash_get_current_data_ex(HashTable* ht, void* data, HashPosition position)</code></entry>
     </row>
     <row>
      <entry><code>ht</code>の中で<code>data</code>を<code>position</code>
      の位置にセットする。</entry>
     </row>
     <row>
      <entry><code>int zend_hash_get_current_key(HashTable* ht, void* data, char**key, uint klen, ulong index, zend_bool duplicate)</code></entry>
     </row>
     <row>
      <entry>現在位置のキーの情報から <code>key</code>, <code>klen</code>, 
       <code>index</code> を取得する。戻り値として HASH_KEY_IS_STRING や
       HASH_KEY_IS_LONG が返される場合があるが、これは現在位置にその種類のキーが
       あったことを表している。</entry>
     </row>
     <row>
      <entry><code>int zend_hash_get_current_key_ex(HashTable* ht, void* data, char**key, uint klen, ulong index, zend_bool duplicate, HashPosition position)</code></entry>
     </row>
     <row>
      <entry><code>position</code>位置のキーの情報から <code>key</code>, 
       <code>klen</code>, <code>index</code> を取得する。戻り値として
       HASH_KEY_IS_STRING や HASH_KEY_IS_LONG が返される場合があるが、
       これは現在位置にその種類のキーがあったことを表している。</entry>
     </row>
     <row>
      <entry><code>int zend_hash_move_forward(HashTable* ht)</code></entry>
     </row>
     <row>
      <entry><code>ht</code>の内部ポインタを<code>ht</code>内の次のエントリに動かす。
      </entry>
     </row>
     <row>
      <entry><code>int zend_hash_move_forward_ex(HashTable* ht, HashPosition position)</code></entry>
     </row>
     <row>
      <entry><code>position</code>を<code>ht</code>内の次のエントリに動かす。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  
  <para>前述の関数は、<code>HashTable</code>内部を通常のループのように移動できます。
  たとえば以下のように使います。</para>
  
  <screen>
<![CDATA[
HashPosition position;
zval **data = NULL;

for (zend_hash_internal_pointer_reset_ex(ht, &position);
     zend_hash_get_current_data_ex(ht, (void**) &data, &position) == SUCCESS;
     zend_hash_move_forward_ex(ht, &position)) {
     
     /* ここではすでにデータがセットされているので、
         Z_ マクロを使って型や変数データにアクセスできます。 */

     char *key = NULL;
     uint  klen;
     ulong index;

     if (zend_hash_get_current_key_ex(ht, &key, &klen, &index, 0, &position) == HASH_KEY_IS_STRING) {
         /* キーは文字列で、key と klen がセットされます */
     } else {
         /* キーを long 値とみなし、index がセットされます */
     }
}
]]>
  </screen>
  
  <note>
   <para><code>HashTable</code>をエンジンに渡した場合、意図しない事態にならないように、
   ユーザーランドでは zend_hash_*_ex API を使うとよいでしょう。</para>
  </note>
  
  <note>
   <para>キーの<code>duplicate</code>を要求して<code>HAS_KEY_IS_STRING</code>
   が返された場合、呼び出し元は重複キーを<code>efree</code>しなければなりません。
   </para>
  </note>
  
  <para>内部移動以外にも、エンジンではハッシュテーブルのマージ、コピー、比較といった
  API を提供しています。<code>ハッカー</code>はこれらのどの概念にも精通して
  いなければなりません。
  関数の適用 (<code>apply</code>) という概念にはなじみがない人もいるかもしれません。
  要するにこれは、<code>HashTable</code> API の機能を使ってコールバック関数を渡して、
  <code>HashTable</code>中のすべてのエントリでそれを実行させる仕組みのことです。</para>
  
  <table xml:id="internals2.variables.coparrays.api">
   <title>コピー、マージ、ソート</title>
   <tgroup cols="1">
    <tbody>
     <row>
      <entry><code>void zend_hash_copy(HashTable *target, HashTable *source, copy_ctor_func_t pCopyConstructor, void *tmp, uint size)</code></entry>
     </row>
     
     <row>
      <entry><code>source</code>の中身を<code>target</code>にコピーする。
      <code>tmp</code>にはコピーの中で使われる領域確保されていない適切な型の
      ポインタを、<code>size</code>には各要素の個数を指定する。</entry>
     </row>
     
     <row>
      <entry><code>void zend_hash_merge(HashTable *target, HashTable *source, copy_ctor_func_t pCopyConstructor, void *tmp, uint size, zend_bool overwrite)</code></entry>
     </row>
     
     <row>
      <entry><code>source</code>の中身を<code>destination</code>にマージする。
      <code>overwrite</code>が真の場合、既存のエントリを置き換える。</entry>
     </row>
     
     <row>
      <entry><code>void int zend_hash_sort(HashTable *ht, sort_func_t sort_func, compare_func_t compare_func, int renumber TSRMLS_DC)</code></entry>
     </row>
     
     <row>
      <entry><code>renumber</code>はインデックスを保持するかどうかを制御する。
      詳細はこの章の最初に出てきた typedef を参照のこと。</entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>
  
  <note>
   <para>ある関数が<code>copy_ctor_func_t pCopyConstructor</code>を受け付ける場合、
   一緒に渡された関数は<code>HashTable</code>内で新しいエントリが生成されるたびに
   実行されます。エンジン内で使われる通常のコピーコンストラクタのほとんどは、
   <code>ZVAL_COPY_CTOR</code>マクロの<code>zval_copy_ctor</code>のラッパーです。
   </para>
  </note>
  
 </section>
 
 <section xml:id="internals2.variables.objects">
  <title>オブジェクトの扱い</title>
  <para>
   <!-- ... -->
  </para>
 </section>
 
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
