<!-- 
   Docbook Customization layer of PHP-GTK docs
   Authors: James Moore <jmoore@php.net>

   $Id: phpgtkdoc.dtd,v 1.20 2006-07-07 14:16:56 cweiske Exp $

-->

<!ENTITY % local.person.ident.mix "|authoremail">
<!ENTITY % local.function.attrib "class CDATA #IMPLIED">

<!-- Load Docbook -->
<!ENTITY % DocBookDTD PUBLIC "-//Norman Walsh//DTD DocBk XML V3.1.7//EN" "./docbookx.dtd">
%DocBookDTD;

<!ELEMENT authoremail (%docinfo.char.mix;)*  >
<!ATTLIST authoremail
    %common.attrib;
>

<!ENTITY % phpgtkbook.class "classtree classset enumset">


<!-- 
   Classentry's should be in a classset, this will hold all the entry's
   for gtk or glade etc..

   - Must contain one or more classentry's
-->
<!ELEMENT classset ((title), (partintro), (classentry)*)>
<!ATTLIST classset
    %common.attrib;
>

<!ELEMENT enumset ((title), (partintro), (enums))>
<!ATTLIST enumset
    %common.attrib;
>

<!ELEMENT enums ((enum)+)>
<!ATTLIST enums
    %common.attrib;
>

<!ELEMENT classtree ((title), (topclass))>
<!ATTLIST classtree
    %common.attrib;
>


<!--

   shortdesc is a CNAME for simpara 

-->
<!ELEMENT shortdesc (%para.char.mix;)*>
<!ATTLIST shortdesc
    %common.attrib;
    %simpara.role.attrib;
    %local.simpara.attrib;
>

<!--

  desc is a CNAME for para

 -->
<!ELEMENT desc (%para.char.mix; | %para.mix; | para | simpara)*>
<!ATTLIST desc
    %common.attrib;
    %para.role.attrib;
    %local.para.attrib;
>
<!--

  classentry is a wrapper for a class.
  It should contain
  - One classmeta element.
  - Optionally it should contain
    a constructors entry, a signals entry and a properties/fields entry 
    (any of these may be omitted).

-->
<!ELEMENT classentry 
          ((classmeta),(constructors?,methods?,fields?,properties?,styleproperties?,signals?))>
<!ATTLIST classentry
    %common.attrib;
    %refentry.role.attrib;
    %local.refentry.attrib;
    hide (0|1) '0'
    rtl (0|1) '0'
>

<!-- 

   Classmeta
   - Contains classtitle followed by an optional classparent. 
   It should only be omitted if the class is a base class.

-->
<!ELEMENT classmeta ((classtitle),(classparent)?,(shortdesc,desc)) >
<!ATTLIST classmeta 
    %common.attrib;
>

<!-- 

   Classtitle
   -Contains the classes title 

-->
<!ELEMENT classtitle (%docinfo.char.mix;)*>
<!ATTLIST classtitle
   %common.attrib;
>

<!--

   Classparent
   -Contains the parent classes title

-->
<!ELEMENT classparent (%docinfo.char.mix;)*>
<!ATTLIST classparent
   %common.attrib;
>

<!--
    Topclass
    -The top parent class in a classtree
-->
<!ELEMENT topclass (#PCDATA)>

<!--

   Entity for constructor and methods 

-->
<!ENTITY % method.class "(funcsynopsis),(shortdesc,desc)">

<!-- Constructors
     - one or more constructor for a class
-->
<!ELEMENT constructors (constructor)+ >
<!ATTLIST constructors
    %common.attrib;
>

<!-- 

   Constructor
   - contains info about the class constructor(s).
     should contain a funcsynopsis followed by a 
     shortdesc followed by a desc.

-->
<!ELEMENT constructor (%method.class;)>
<!ATTLIST constructor
   %common.attrib;
>

<!--

   Methods
   - Simple wrapper around all the method entries
     (not 100% necessary but makes sure they are all
     grouped together and makes my life simpler)

  Should contain one or more method entry/ies

-->
<!ELEMENT methods (method)+ >
<!ATTLIST methods
   %common.attrib;
>

<!--

  Method
  - Holds same data as constructor

-->
<!ELEMENT method (%method.class;)>
<!ATTLIST method
    %common.attrib;
>

<!--

  - fields: wrapper for individual arguments.

-->
<!ELEMENT fields (field)+ >
<!ATTLIST fields
    %common.attrib;
>

<!--

  - field: provides information about an objects properties

-->
<!ELEMENT field ((argname, argtype),(shortdesc,desc))>
<!ATTLIST field
    %common.attrib;
    type (ro|rw) #REQUIRED
>

<!--

  - fieldname: the name of the property

-->
<!ELEMENT fieldname (%docinfo.char.mix;)* >
<!ATTLIST fieldname
    %common.attrib;
>

<!--

 - fieldtype: the type of property (int, char, object etc)

-->
<!ELEMENT fieldtype (%docinfo.char.mix;)* >
<!ATTLIST fieldtype
    %common.attrib;
>


<!--

  - properties: wrapper for individual arguments.

-->
<!ELEMENT properties (prop)+ >
<!ATTLIST properties
    %common.attrib;
>

<!--

  - styleproperties: wrapper for individual arguments.

-->
<!ELEMENT styleproperties (prop)+ >
<!ATTLIST styleproperties
    %common.attrib;
>

<!--

  - prop: provides information about an objects properties

-->
<!ELEMENT prop ((argname, argtype),(shortdesc,desc))>
<!ATTLIST prop
    %common.attrib;
    type (ro|rw) #REQUIRED
>

<!--

  - propname: the name of the property

-->
<!ELEMENT propname (%docinfo.char.mix;)* >
<!ATTLIST propname
    %common.attrib;
>

<!--

 - proptype: the type of property (int, char, object etc)

-->
<!ELEMENT proptype (%docinfo.char.mix;)* >
<!ATTLIST proptype
    %common.attrib;
>

<!--

  Signals
  - Wrapper for signal entries.. see methods

-->
<!ELEMENT signals (signal)+ >
<!ATTLIST signals
    %common.attrib;
>

<!--

  Signal
   - Contains information about signals:
   - Contains signalname, followed by an optional callback prototype,
     a shortdesc and a desc.

-->
<!ELEMENT signal ((signalname),(callback)?,(shortdesc,desc)) >
<!ATTLIST signal
     %common.attrib;
>

<!-- 

   - signalname contains the name of the signal.. surprisingly

-->
<!ELEMENT signalname (%docinfo.char.mix;)* >
<!ATTLIST signalname
    %common.attrib;
>

<!ELEMENT callback (funcprototype) >
<!ATTLIST callback
     %common.attrib;
>

<!--
   attributes: wrapper for attribute entries
<!ELEMENT attributes (attribute)+ >
<!ATTLIST attributes
     %common.attrib;
>
-->

<!--

  - attribute: contains attributename followed by shortdesc and a desc.
<!ELEMENT attribute ((attributename),(shortdesc,desc)) >
<!ATTLIST attribute
    %common.attrib;
>
-->

<!-- 
  - attributename: contains the name of the attribute
<!ELEMENT attributename (%docinfo.char.mix;)* >
<!ATTLIST attributename
    %common.attrib;
>
-->

<!--

  - enum: contains enum and flag information

-->
<!ELEMENT enum ((enumname),(shortdesc)?,(enumoption)+) >
<!ATTLIST enum
    %common.attrib;
    hide (0|1) '0'
    rtl (0|1) '0'
>

<!--

  - enumname: contains symbolic name of enum or flag

-->
<!ELEMENT enumname (%docinfo.char.mix;)* >
<!ATTLIST enumname
    %common.attrib;
>

<!--

  - enumname: contains each option of an enum

-->
<!ELEMENT enumoption ((optionname),(shortdesc)) >
<!ATTLIST enumoption
    %common.attrib;
>

<!--

  - optionname: contains symbolic name of a flag or enum option.

-->
<!ELEMENT optionname (%docinfo.char.mix;)* >
<!ATTLIST optionname
    %common.attrib;
>

<!--

  - arguments: wrapper for individual arguments.

-->
<!ELEMENT arguments (argument)+ >
<!ATTLIST arguments
    %common.attrib;
>

<!--

  - argument: provides information about an objects arguments

-->
<!ELEMENT argument ((argname, argtype),(shortdesc,desc))>
<!ATTLIST argument
    %common.attrib;
    type (ro|rw) #REQUIRED
>

<!--

  - argname: the name of the argument

-->
<!ELEMENT argname (%docinfo.char.mix;)* >
<!ATTLIST argname
    %common.attrib;
>

<!--

 - argtype: the type of argument (int, char, object etc)

-->
<!ELEMENT argtype (%docinfo.char.mix;)* >
<!ATTLIST argtype
    %common.attrib;
>
