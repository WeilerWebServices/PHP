<?xml version="1.0" encoding="utf-8" ?>
<!-- $Revision: 1.2 $ -->
<classentry id="gobject">
 <classmeta>
  <classtitle>GObject</classtitle>
  <shortdesc>
   Base class for nearly all classes in PHP-Gtk.
  </shortdesc>
  <desc>
   <para>
    <literal>GObject</literal> is the base class of nearly all
    classes in Gtk. It provides methods to work with signals
    and properties.
   </para>
  </desc>
 </classmeta>

 <constructors>

  <constructor id="gobject.constructor">
   <funcsynopsis>
    <funcprototype>
    <funcdef> <function>GObject</function></funcdef>
    <paramdef>
     <parameter>
      <optional>
       <paramdef><enumname>string</enumname> <parameter>gtype</parameter></paramdef>
       <paramdef><enumname>array</enumname> <parameter>properties</parameter></paramdef>
      </optional>
     </parameter>
    </paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a new GObject instance.
   </shortdesc>
   <desc>
    <para>
     Creates a new instance of Gobject, or optionally of type <parameter>gtype</parameter>. 
     The properties parameter should contain an associative array of Gobject properties
     to set for the new instance.
    </para>
   </desc>
  </constructor>

 </constructors>

 <methods>
  <method id="gobject.method.__tostring">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string<function>__toString</function></funcdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a string representation of a GObject
   </shortdesc>
   <desc>
    <para>
     Returns a string representation of an object, including the PHP name and the
     GType associated with the object.
    </para>
   </desc>
  </method>

  <method id="gobject.method.block">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>block</function></funcdef>
     <paramdef>int <parameter>handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Temporarily blocks the signal handler.
   </shortdesc>
   <desc>
    <para>
     Blocks the given signal handler from being called when a signal
     is emitted. Use <function class="GObject">unblock</function> to
     continue receiving method calls.
    </para>
    <para>
     When calling the method multiple times for the same handler,
     you need to call the <literal>unblock</literal> the same amount
     of times to get it working again.
    </para>
    <para>
     The <parameter>handler_id</parameter> is the return value
     of the <literal>connect_*</literal> methods.
    </para>
    <para>
     &seealso;
     <function class="GObject">connect</function>,
     <function class="GObject">disconnect</function>,
     <function class="GObject">is_connected</function>,
     <function class="GObject">unblock</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.connect">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>connect</function></funcdef>
     <paramdef>string <parameter>signal</parameter></paramdef>
     <paramdef>callback <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Connects a signal to a callback.
   </shortdesc>
   <desc>
    <para>
     Connects a signal to the given callback method. For the exact
     parameters see the docs of the respective signal in the class
     documentation.
    </para>
    <para>
     The method returns a <emphasis>signal handler id</emphasis> that
     can be used to <function class="GObject">block</function> or
     <function class="GObject">disconnect</function> the handler.
    </para>
    <para>
     For more information about signals, see the
     <link linkend="tutorials.signals">Signal Handling tutorial</link>
    </para>
    <para>
     &seealso;
     <function class="GObject">connect_after</function>,
     <function class="GObject">connect_simple</function>,
     <function class="GObject">connect_simple_after</function>,
    </para>
   </desc>
  </method>

  <method id="gobject.method.connect_after">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>connect_after</function></funcdef>
     <paramdef>string <parameter>signal</parameter></paramdef>
     <paramdef>callback <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Connects a signal to a callback, called after all normal signal handlers.
   </shortdesc>
   <desc>
    <para>
     Connects a signal to the given callback. The callback will be called
     only after all "normal" (i.e. not-after) callbacks have been activated.
     For the exact callback parameters see the docs of the respective signal
     in the class documentation.
    </para>
    <para>
     The method returns a <emphasis>signal handler id</emphasis> that
     can be used to <function class="GObject">block</function> or
     <function class="GObject">disconnect</function> the handler.
    </para>
    <para>
     For more information about signals, see the
     <link linkend="tutorials.signals">Signal Handling tutorial</link>
    </para>
    <para>
     &seealso;
     <function class="GObject">connect</function>,
     <function class="GObject">connect_simple</function>,
     <function class="GObject">connect_simple_after</function>,
    </para>
   </desc>
  </method>

  <method id="gobject.method.connect_object">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>connect_object</function></funcdef>
     <paramdef>string <parameter>signal</parameter></paramdef>
     <paramdef>callback <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    &deprecated; Alias of connect_simple.
   </shortdesc>
   <desc>
    <para>
     &deprecated; This method has been renamed to
     <function class="GObject">connect_simple</function> and
     should only be used under the new name.
    </para>
   </desc>
  </method>

  <method id="gobject.method.connect_object_after">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>connect_object_after</function></funcdef>
     <paramdef>string <parameter>signal</parameter></paramdef>
     <paramdef>callback <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    &deprecated; Alias of connect_simple_after.
   </shortdesc>
   <desc>
    <para>
     &deprecated; This method has been renamed to
     <function class="GObject">connect_simple_after</function> and
     should only be used under the new name.
    </para>
   </desc>
  </method>

  <method id="gobject.method.connect_simple">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>connect_simple</function></funcdef>
     <paramdef>string <parameter>signal</parameter></paramdef>
     <paramdef>callback <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Connects a signal to a callback, omitting the first parameter.
   </shortdesc>
   <desc>
    <para>
     Connects a signal to the given callback. The first callback parameter
     (the object it has been called on) is omitted.
    </para>
    <para>
     The method returns a <emphasis>signal handler id</emphasis> that
     can be used to <function class="GObject">block</function> or
     <function class="GObject">disconnect</function> the handler.
    </para>
    <para>
     For more information about signals, see the
     <link linkend="tutorials.signals">Signal Handling tutorial</link>
    </para>
    <para>
     &seealso;
     <function class="GObject">connect</function>,
     <function class="GObject">connect_after</function>,
     <function class="GObject">connect_simple_after</function>,
    </para>
   </desc>
  </method>

  <method id="gobject.method.connect_simple_after">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>connect_simple_after</function></funcdef>
     <paramdef>string <parameter>signal</parameter></paramdef>
     <paramdef>callback <parameter>callback</parameter></paramdef>
     <paramdef>mixed <parameter><optional>userparam</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Connects a signal to a callback, omitting the first parameter - called after all normal signal handlers.
   </shortdesc>
   <desc>
    <para>
     Connects a signal to the given callback. The first callback parameter
     (the object it has been called on) is omitted.
    </para>
    <para>
     Further, the handler will be called only after all non-after handlers
     have been activated.
    </para>
    <para>
     The method returns a <emphasis>signal handler id</emphasis> that
     can be used to <function class="GObject">block</function> or
     <function class="GObject">disconnect</function> the handler.
    </para>
    <para>
     For more information about signals, see the
     <link linkend="tutorials.signals">Signal Handling tutorial</link>
    </para>
    <para>
     &seealso;
     <function class="GObject">connect</function>,
     <function class="GObject">connect_after</function>,
     <function class="GObject">connect_simple</function>,
    </para>
   </desc>
  </method>

  <method id="gobject.method.disconnect">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>disconnect</function></funcdef>
     <paramdef>int <parameter>handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Disconnects a signal handler.
   </shortdesc>
   <desc>
    <para>
     Disconnects a signal handler, making it not be called
     anymore if a signal occurs.
    </para>
    <para>
     If you want to temporarily disable a signal handler, use
     the <function class="GObject">block</function> method.
    </para>
    <para>
     To check if a signal handler is still connected, use
     <function class="GObject">is_connected</function>.
    </para>
    <para>
     &seealso;
     <function class="GObject">block</function>,
     <function class="GObject">disconnect</function>,
     <function class="GObject">is_connected</function>,
     <function class="GObject">unblock</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.emit">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>emit</function></funcdef>
     <paramdef>string <parameter>signal_name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emits a signal on an object.  Additional values may be passed with the emit
    call, these values will then be sent to any connected handlers.
   </shortdesc>
   <desc>
    <para>
     Emits a signal on an object, calling any connected handlers and passing any
     user supplied data to the connected handlers.  Only signals registered for
     the particular object can be emitted.  If a singal requires parameters in
     the definition, then the required number of parameters must be sent to the
     emit method.
    </para>
    <para>
     &seealso;
     <function class="GObject">connect</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.freeze_notify">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>freeze_notify</function></funcdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Increments the freeze notify count
   </shortdesc>
   <desc>
    <para>
     Increases the freeze count on object. If the freeze count is non-zero, the
     emission of "notify" signals on object is stopped. The signals are queued until
     the freeze count is decreased to zero.
    </para>
    <para>
     This is necessary for accessors that modify multiple properties to prevent
     premature notification while the object is still being modified.
    </para>
    <para>
     &seealso;
     <function class="GObject">notify</function>,
     <function class="GObject">thaw_notify</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.get_data">
   <funcsynopsis>
    <funcprototype>
     <funcdef>mixed <function>get_data</function></funcdef>
     <paramdef>string <parameter>key</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the value of user-defined field.
   </shortdesc>
   <desc>
    <para>
     Returns the value of a user-defined field.
    </para>
    <para>
     &seealso;
     <function class="GObject">set_data</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.get_property">
   <funcsynopsis>
    <funcprototype>
     <funcdef>mixed <function>get_property</function></funcdef>
     <paramdef>string <parameter>property_name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the value of an object property.
   </shortdesc>
   <desc>
    <para>
     Returns the value of an object property.
    </para>
    <para>
     &seealso;
     <function class="GObject">set_property</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.is_connected">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>is_connected</function></funcdef>
     <paramdef>int <parameter>handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Checks if a signal handler is connected.
   </shortdesc>
   <desc>
    <para>
     Checks if a signal handler is still connected
     (i.e. has not been <function class="GObject">disconnect</function>ed).
    </para>
    <para>
     &seealso;
     <function class="GObject">block</function>,
     <function class="GObject">connect</function>,
     <function class="GObject">disconnect</function>,
     <function class="GObject">unblock</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.list_properties">
   <funcsynopsis>
    <funcprototype>
     <funcdef>array <function>list_properties</function></funcdef>
     <paramdef>int <parameter>gtype</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Lists all properties of a given class.
   </shortdesc>
   <desc>
    <para>
     Lists all properties in any class descended from gobject or registered as a
     gtype.  Property information is returned in the same format as 
     <function class="GObject">get_property</function>.
    </para>
    <note>
     <simpara>This method is static.</simpara>
    </note>
    <para>
     The <parameter>gtype</parameter> parameter is an integer
     unique to all classes/interfaces. You can acquire the gtype
     of a class by using <literal>ClassName::gtype</literal>.
    </para>
    <para>
     &seealso;
     <function class="GObject">get_property</function>,
     <function class="GObject">set_property</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.notify">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>notify</function></funcdef>
     <paramdef>string <parameter>property_name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emits the "notify" signal for the given property.
   </shortdesc>
   <desc>
    <para>
     Emits a "notify" signal for the given property on the object.
    </para>
   </desc>
  </method>

  <method id="gobject.method.register_type">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool<function>register_type</function></funcdef>
     <paramdef>string<parameter>classname</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Register a custom Gtype
   </shortdesc>
   <desc>
    <para>
     Allows custom signals and properties to be used in PHP classes.
    </para>
    <para>
     You must call this method before attempting to instantiate any classes
     that use custom signals and properties.
    </para>
    <note>
     <simpara>This method is static.</simpara>
    </note>
    <example>
     <title>Creating Custom Signals</title>
     <programlisting role="php">
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="&directory.examples;/reference/gobject/register_type_signals.php"
       parse="text">
       <xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback>
      </xi:include>
     </programlisting>
    </example>
    <example>
     <title>Creating Custom Properties</title>
     <programlisting role="php">
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="&directory.examples;/reference/gobject/register_type_properties.php"
       parse="text">
       <xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback>
      </xi:include>
     </programlisting>
    </example>
   </desc>
  </method>

  <method id="gobject.method.set_data">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_data</function></funcdef>
     <paramdef>string <parameter>key</parameter></paramdef>
     <paramdef>mixed <parameter>value</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets a user-defined field.
   </shortdesc>
   <desc>
    <para>
     Sets a user-defined field. With that method, you can
     attach any data (e.g. php variables) to a widget
     and retrieve it later.
    </para>
    <para>
     &seealso;
     <function class="GObject">get_data</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.set_property">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_property</function></funcdef>
     <paramdef>string <parameter>property_name</parameter></paramdef>
     <paramdef>mixed <parameter>value</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets a property on the object.
   </shortdesc>
   <desc>
    <para>
     Sets a property on the object.
    </para>
    <para>
     &seealso;
     <function class="GObject">get_property</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.signal_list_ids">
   <funcsynopsis>
    <funcprototype>
     <funcdef>array <function>signal_list_ids</function></funcdef>
     <paramdef>int <parameter>gtype</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Lists all signals of a given class.
   </shortdesc>
   <desc>
    <para>
     Lists the signals by id that a certain instance or interface
     type created.
     Further information about the signals can be acquired through
     <function class="GObject">signal_query</function>.
    </para>
    <note>
     <simpara>This method is static.</simpara>
    </note>
    <para>
     The <parameter>gtype</parameter> parameter is an integer
     unique to all classes/interfaces. You can acquire the gtype
     of a class by using <literal>ClassName::gtype</literal>.
    </para>
    <para>
     &seealso;
     <function class="GObject">signal_list_names</function>,
     <function class="GObject">signal_query</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.signal_list_names">
   <funcsynopsis>
    <funcprototype>
     <funcdef>array <function>signal_list_names</function></funcdef>
     <paramdef>int <parameter>gtype</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Lists all signal names of a given class.
   </shortdesc>
   <desc>
    <para>
     Lists all signals of the given class by name.
    </para>
    <note>
     <simpara>This method is static.</simpara>
    </note>
    <para>
     The <parameter>gtype</parameter> parameter is an integer
     unique to all classes/interfaces. You can acquire the gtype
     of a class by using <literal>ClassName::gtype</literal>.
    </para>
    <para>
     &seealso;
     <function class="GObject">signal_list_ids</function>,
     <function class="GObject">signal_query</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.signal_query">
   <funcsynopsis>
    <funcprototype>
     <funcdef>array <function>signal_query</function></funcdef>
     <paramdef>string/int <parameter>signal</parameter></paramdef>
     <paramdef>int <parameter>gtype</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Provides additional information about a signal.
   </shortdesc>
   <desc>
    <para>
     Provides additional information about a signal.
    </para>
    <para>
     The <parameter>signal</parameter> parameter can be either
     a signal id or a signal name.
    </para>
    <note>
     <simpara>This method is static.</simpara>
    </note>
    <para>
     The <parameter>gtype</parameter> parameter is an integer
     unique to all classes/interfaces. You can acquire the gtype
     of a class by using <literal>ClassName::gtype</literal>.
    </para>
    <table>
     <title>Return array values</title>
     <tgroup cols="2">
      <tbody>
       <row>
        <entry>0</entry>
        <entry>Signal id, or 0 if the signal is unknown.</entry>
       </row>
       <row>
        <entry>1</entry>
        <entry>Signal name</entry>
       </row>
       <row>
        <entry>2</entry>
        <entry>GType of the class/interface the signal is emitted for</entry>
       </row>
       <row>
        <entry>3</entry>
        <entry>GSignalFlags used for signal instantiation.</entry>
       </row>
       <row>
        <entry>4</entry>
        <entry>GType of the return type</entry>
       </row>
       <row>
        <entry>5</entry>
        <entry>Array of GTypes for the parameters</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <example>
     <title>Querying a signal</title>
     <programlisting role="php">
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="&directory.examples;/reference/gobject/signal_query.php"
       parse="text">
       <xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback>
      </xi:include>
     </programlisting>
    </example>
    <para>
     &seealso;
     <function class="GObject">signal_list_ids</function>,
     <function class="GObject">signal_list_names</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.stop_emission">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>stop_emission</function></funcdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Stops emission of a signal that is currently being emitted
   </shortdesc>
   <desc>
    <para>
     Stops a signal's current emission for the object this is called on.
    </para>
    <para>
     This will prevent the default method from running, if the signal was
     G_SIGNAL_RUN_LAST and you connected normally (i.e. without the "after" flag).
     Prints a warning if used on a signal which isn't being emitted.
    </para>
    <para>
     &seealso;
     <function class="GObject">emit</function>,
    </para>
   </desc>
  </method>

  <method id="gobject.method.thaw_notify">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>thaw_notify</function></funcdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Decrements the freeze notify count
   </shortdesc>
   <desc>
    <para>
     Reverts the effect of a previous call to <function
     class="GObject">freeze_notify</function>. The freeze count is decreased on
     object and when it reaches zero, all queued "notify" signals are emitted.
     It is an error to call this function when the freeze count is zero
    </para>
    <para>
     If multiple calls to <function class="GObject">freeze_notify</function>
     were made, and equal number of calls must be made to unfreeze.
    </para>
    <para>
     &seealso;
     <function class="GObject">notify</function>,
     <function class="GObject">freeze_notify</function>
    </para>
   </desc>
  </method>

  <method id="gobject.method.unblock">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>unblock</function></funcdef>
     <paramdef>int <parameter>handler_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Unblocks a blocked signal handler.
   </shortdesc>
   <desc>
    <para>
     Unblocks a signal handler blocked with
     <function class="GObject">block</function>, letting it continue
     to be called upon incoming signals.
    </para>
    <para>
     If you blocked a handler multiple times, you need to unblock
     it the same amount of times to let it continue being called.
    </para>
    <para>
     &seealso;
     <function class="GObject">block</function>,
     <function class="GObject">connect</function>,
     <function class="GObject">disconnect</function>,
     <function class="GObject">is_connected</function>
    </para>
   </desc>
  </method>
 </methods>

</classentry>