<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<classentry id="glade.gladexml">
 <classmeta>
  <classtitle>GladeXML</classtitle>
  <classparent>GObject</classparent>
  <shortdesc>
   Represents an instantiation of an XML interface description.
  </shortdesc>
  <desc>
   <para>
    <literal>Glade</literal> is an user builder for Gtk+. You can rapidly
    create user interfaces in a WYSIWYG fashion using the tool, which
    generates an XML representation of that interface in the form of a
    <literal>.glade</literal>
   </para>
   <para>
    This object represents an instantiation of that <literal>.glade</literal>.
    You can use this object in your program to individually handle your
    widgets.
   </para>
   <para>
    It is also possible to describe signal handlers using Glade. If you have
    done so, you may use the
    <function class="GladeXML">signal_autoconnect</function> method to
    automatically connect all the widgets to their respective handlers. If
    your handlers are part of classes, then use the
    <function class="GladeXML">signal_autoconnect_instance</function> method.
   </para>
   <para>
    Do have a look at
    <link linkend="tutorials.helloglade">Glade Tutorial</link> for more on
    how to use the Glade extension.
   </para>
  </desc>
 </classmeta>


 <constructors>
  <constructor id="glade.gladexml.constructor">
   <funcsynopsis>
    <funcprototype>
     <funcdef><function>GladeXML</function></funcdef>
     <paramdef><parameter>filename</parameter></paramdef>
     <paramdef><parameter><optional>root</optional></parameter></paramdef>
     <paramdef><parameter><optional>domain</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a new GladeXML instance from a file.
   </shortdesc>
   <desc>
    <simpara>
     &static;
    </simpara>
   </desc>
  </constructor>

  <constructor id="glade.gladexml.constructor.new_from_buffer">
   <funcsynopsis>
    <funcprototype>
     <funcdef><function>GladeXML::new_from_buffer</function></funcdef>
     <paramdef><parameter>buffer</parameter></paramdef>
     <paramdef><parameter><optional>root</optional></parameter></paramdef>
     <paramdef><parameter><optional>domain</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a new GladeXML instance from a string.
   </shortdesc>
   <desc>
    <simpara>
     &static;
    </simpara>
   </desc>
  </constructor>
</constructors>


 <methods>
  <method id="glade.gladexml.method.get_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef><classname>GtkWidget</classname> <function>get_widget</function></funcdef>
     <paramdef>string <parameter>name</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns a <classname>GtkWidget</classname> object corresponding to the
    given name.
   </shortdesc>
   <desc>
    <para>
     Use this method to retrieve a widget object corresponding to a particular
     name from the <classname>GladeXML</classname> description. This is
     probably the most frequently used function, since you need the widget
     object to do anything with the widget (connect signals, modify
     properties etc.) after you have loaded the description.
    </para>
   </desc>
  </method>

  <method id="glade.gladexml.method.get_widget_prefix">
   <funcsynopsis>
    <funcprototype>
     <funcdef>array <function>get_widget_prefix</function></funcdef>
     <paramdef>string <parameter>prefix</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns a set of widgets whose names begin with the provided string.
   </shortdesc>
   <desc>
    <para>
     Use this method to get an array of widget objects that correspond to
     names beginning with the provided string from the
     <classname>GladeXML</classname> object.
    </para>
   </desc>
  </method>

  <method id="glade.gladexml.method.relative_file">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>relative_file</function></funcdef>
     <paramdef><parameter>filename</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Resolves relative pathnames specified by a file.
   </shortdesc>
   <desc>
    <para>
     Use this method to get an absolute pathname corresponding to a
     relative pathname specified by the <literal>filename</literal> passed.
     The method uses the directory of the XML file with which the
     <classname>GladeXML</classname> object is associated, as the base.
    </para>
    <para>
     If <literal>filename</literal> is an absolute pathname, then the
     original filename is returned.
    </para>
   </desc>
  </method>

  <method id="glade.gladexml.method.signal_autoconnect">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>signal_autoconnect</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Automatically connects all specified signal handlers to their corresponding
    functions.
   </shortdesc>
   <desc>
    <para>
     If you have specified signal handlers in your <literal>.glade</literal>
     file; then use this method to automatically connect all your signals to
     functions with the same name as the signal handlers specified.
    </para>
    <para>
     Note that all your functions must be part of the global namespace for this
     to work. If you intend to use methods that are part of a class as signal
     handlers, then use
     <function class="GladeXML">signal_autoconnect_instance</function> instead.
    </para>
   </desc>
  </method>

  <method id="glade.gladexml.method.signal_autoconnect_instance">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>signal_autoconnect_instance</function></funcdef>
     <paramdef><parameter>object</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Automatically connects all specified signal handlers to their corresponding
    methods of a class.
   </shortdesc>
   <desc>
    <para>
     If you have specified signal handlers in your <literal>.glade</literal>
     file; then use this method to automatically connect all your signals to
     methods with the same name as the signal handlers specified, and belonging
     to the specified class object.
    </para>
    <para>
     You must pass an instance of the class to which the methods you intend
     to connect belong as a parameter to this method.
    </para>
   </desc>
  </method>

  <method id="glade.gladexml.method.signal_connect">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>signal_connect</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    <!-- FIXME -->
   </shortdesc>
   <desc>
   </desc>
  </method>

</methods>
</classentry>
