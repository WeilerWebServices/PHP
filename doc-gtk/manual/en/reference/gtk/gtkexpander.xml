<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.12 $ -->
<classentry id="gtk.gtkexpander">
 <classmeta>
  <classtitle>GtkExpander</classtitle>
  <classparent>GtkBin</classparent>
  <classimage fileref="&directory.images;/reference/gtk/gtkexpander.png"/>
  <shortdesc>
    A container that can hide its child.
  </shortdesc>
  <desc>
   <para>
    <classname>GtkExpander</classname> creates a container that can hide or 
    display details on request. This is achieved by using a small triangle 
    (similar to the one used in <classname>GtkTreeView</classname>) to control 
    whether the details are shown or not. If the triangle is pointing to the 
    right, details are hidden. On clicking the object, the triangle points 
    downward which indicates that the details are now visible.
   </para>
   <para>
    You can use <classname>GtkExpander</classname> as any other descendant of 
    <classname>GtkBin</classname> by first creating the child widget and then 
    using <function class="GtkContainer">add</function> to add it to the 
    expander. When the expander is toggled, it automatically takes care of 
    showing and hiding the details.
   </para>
  </desc>
 </classmeta>

 <constructors>

  <constructor id="gtk.gtkexpander.constructor">
   <funcsynopsis>
    <funcprototype>
    <funcdef> <function>GtkExpander</function></funcdef>
    <paramdef>string <parameter>label</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates an expander object.
   </shortdesc>
   <desc>
    <para>
     Creates a new expander object using the parameter as the text of the label.
     The example below illustrates the usage of the constructor.
    </para>
    <example>
      <title>
        Using Expander to Show/Hide details
        <classname>GtkExpander</classname>
      </title>
      <programlisting role="php">
       <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="&directory.examples;/reference/gtk/gtkexpander/constructor.phpw" parse="text">
        <xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback>
       </xi:include>
      </programlisting>
    </example>
   </desc>
  </constructor>

  <constructor id="gtk.gtkexpander.constructor.new_with_mnemonic">
   <funcsynopsis>
    <funcprototype>
    <funcdef> <function>GtkExpander::new_with_mnemonic</function></funcdef>
    <paramdef>string <parameter>label</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a GtkExpander instance with a mnemonic label.
   </shortdesc>
   <desc>
    <para>
     This is a static method which creates a new
     <classname>GtkExpander</classname> instance using <literal>label</literal>
     as the text of the label. If characters in label are preceded by an
     underscore, they are underlined. If you need a literal underscore character
     in a label, use '__' (two underscores). The first underlined character
     represents a keyboard accelerator called a mnemonic. Pressing Alt with that
     key activates the button. If label is <literal>Null</literal> the expander
     will have no label.
    </para>
    <para>
     This method is a shortcut, you can achieve the same results by creating a
     new <classname>GtkExpander</classname> instance with a label containing an
     underscore and then calling the <function class="GtkExpander">set_use_underline</function>
    </para>
    <simpara>
     &static;
    </simpara>
   </desc>
  </constructor>

 </constructors>

 <methods>

  <method id="gtk.gtkexpander.method.get_expanded">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>get_expanded</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Return the current state of the expander
   </shortdesc>
   <desc>
    <para>
     Queries a <classname>GtkExpander</classname> and returns its current state.
      Returns <literal>true</literal> if the child widget is revealed, 
     <literal>false</literal> otherwise.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">set_expanded</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.get_label">
   <funcsynopsis>
    <funcprototype>
     <funcdef>string <function>get_label</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Fetches the text from the expander's label
   </shortdesc>
   <desc>
    <para>
     Fetches the text from the label of the specified GtkExpander, as set by 
     <function class="GtkExpander">set_label</function>. If the label had not 
     been set, the return value will be <literal>null</literal>.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">set_label</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.get_label_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>GtkWidget <function>get_label_widget</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Retrieves the label widget
   </shortdesc>
   <desc>
    <para>
     Use this method to retrieve the label widget for the specified 
     <classname>GtkExpander</classname> object.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">set_label_widget</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.get_spacing">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_spacing</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the value set by 
    <function class="GtkExpander">set_spacing</function>
   </shortdesc>
   <desc>
    <para>
     Returns the spacing between the specified 
     <classname>GtkExpander</classname> and its child widget in pixels.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">set_spacing</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.get_use_markup">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>get_use_markup</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Determines if the child label's text is interpreted as Pango text markup 
    language.
   </shortdesc>
   <desc>
    <para>
     This method returns <literal>true</literal> if the specified 
     <classname>GtkExpander</classname> has a child label that contains text 
     to be parsed as markup.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">set_use_markup</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.get_use_underline">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>get_use_underline</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Determines whether an embedded underline in the expander label indicates 
    a mnemonic.
   </shortdesc>
   <desc>
    <para>
     This method returns <literal>true</literal> if an embedded underline 
     in the expander label indicates the mnemonic accelerator keys.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">set_use_underline</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.set_expanded">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_expanded</function></funcdef>
     <paramdef>bool <parameter>expanded</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the state of the child to 'visible'.
   </shortdesc>
   <desc>
    <para>
     Use this method to set the state of the specified 
     <classname>GtkExpander</classname>. Set to <literal>true</literal> if 
     you want the child widget to be revealed, and <literal>false</literal> if
     you want the child widget to be hidden.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">get_expanded</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.set_label">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_label</function></funcdef>
     <paramdef>string <parameter>label</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the text of the label of the expander.
   </shortdesc>
   <desc>
    <para>
     Use this method to set the text of the specified 
     <classname>GtkExpander</classname> to the passed parameter's value. Note 
     that using this function will also clear any previously set labels.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">get_label</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.set_label_widget">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_label_widget</function></funcdef>
     <paramdef>GtkWidget <parameter>label_widget</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the label widget for the expander.
   </shortdesc>
   <desc>
    <para>
     Use this method to set the label widget associated with the specified 
     <classname>GtkExpander</classname>. This is the widget that will appear 
     embedded alongside the expander arrow.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">get_label_widget</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.set_spacing">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_spacing</function></funcdef>
     <paramdef>int <parameter>spacing</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the distance between the <classname>GtkExpander</classname> and its 
    child.
   </shortdesc>
   <desc>
    <para>
     Use this method to set the number of pixels to place between the 
     <classname>GtkExpander</classname> object and its child (usually a 
     <classname>GtkLabel</classname>.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">get_spacing</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.set_use_markup">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_use_markup</function></funcdef>
     <paramdef>bool <parameter>use_markup</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets if the child label's text is to be interpreted as Pango text markup 
    language.
   </shortdesc>
   <desc>
    <para>
     Use this method if you want the label's text of the expander to be 
     interpreted as Pango text markup. Set to <literal>true</literal> if you 
     want the text to interpreted as markup, <literal>false</literal> 
     otherwise.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">get_use_markup</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkexpander.method.set_use_underline">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_use_underline</function></funcdef>
     <paramdef>bool <parameter>use_underline</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets whether an underscore preceding a character in the label means that 
    the character is the mnemonic accelerator for the expander.
   </shortdesc>
   <desc>
    <para>
     Use this method to allow an underscore to determine which character will 
     be set as the mnemonic accelerator for the specified 
     <classname>GtkExpander</classname>. The character immediately following 
     an underscore in the label text is set as the mnemonic.
    </para>
    <para>
     &seealso;
     <function class="GtkExpander">get_use_underline</function>
    </para>
   </desc>
  </method>

 </methods>

 <signals>

  <signal id="gtk.gtkexpander.signal.activate">
   <signalname>activate</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkExpander <parameter>expander</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when the expander is activated.
   </shortdesc>
   <desc>
    <para>
     This signal is emitted when the expander is activated by the user clicking
     on the expander toggle.
    </para>
   </desc>
  </signal>
  
 </signals>

</classentry>
