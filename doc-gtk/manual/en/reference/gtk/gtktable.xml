<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<classentry id="gtk.gtktable">
 <classmeta>
  <classtitle>GtkTable</classtitle>
  <classparent>GtkContainer</classparent>
  <shortdesc>
   Container that provides a two-dimensional grid for packing widgets.
  </shortdesc>
  <desc>
   <para>
    <classname>GtkTable</classname> is a container that provides a simple way
    of aligning many widgets in a window, both horizontally and vertically. 
    Although not as flexible as <classname>GtkFixed</classname>, it's easier to
    use and allows for relative positioning, by simply defining the number of 
    rows and columns. The resulting cells have a structure similar to that of a
    <classname>GtkBox</classname>, allowing a single child per cell, though
    the child can span along multiple rows or columns.
   </para>
   <para>
    Adding widgets to a <classname>GtkTable</classname> is mainly done through
    the <function class="GtkTable">attach</function> method, that provides a 
    great deal of control over the way the child should be placed within the 
    table. The <function class="GtkTable">attach_defaults</function> and 
    <function class="GtkContainer">add</function> methods are of lesser 
    interest. To remove a widget from the table, you can use
    <function class="GtkContainer">remove</function>.
   </para>
   <para>
    Accessing child widgets placed within a <classname>GtkTable</classname> can
    be done through the <function class="GtkContainer">get_children</function> 
    method, inherited from <classname>GtkContainer</classname>. It returns a
    list of the container's children. <!--FIXME: Are there other ways? -->
   </para>
   <para>
    &seealso;
    <classname>GtkVBox</classname>,
    <classname>GtkHBox</classname>,
    <classname>GtkFixed</classname>.
   </para>
  </desc>
 </classmeta>

 <constructors>

  <constructor id="gtk.gtktable.constructor">
   <funcsynopsis>
    <funcprototype>
    <funcdef> <function>GtkTable</function></funcdef>
    <paramdef>int <parameter><optional>n_rows = 1</optional></parameter></paramdef>
    <paramdef>int <parameter><optional>n_columns = 1</optional></parameter></paramdef>
    <paramdef>bool <parameter><optional>homogeneous = false</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a grid for packing widgets in regular patterns.
   </shortdesc>
   <desc>
    <para>
     The first two parameters in this constructor (<parameter>n_rows</parameter>,
     <parameter>n_columns</parameter>) define the size of the table and thus the
     number of cells. They are optional, and since the table will pick up the 
     layout from the information given as its children are attached to it, they
     will be overridden automatically if needed.
    </para>
    <para>
     The last parameter (<parameter>homogeneous</parameter>) is also optional,
     and relates to the way the table manages the size of it's child widgets.
     If changed to true (the default value is <literal>false</literal>) all
     children will have the same height and width as the largest child.
    </para>
    <para>
     There are a lot of parameters in the 
     <function class="GtkTable">attach</function> method - nine in total -
     four of which are optional. Basically, if the homogeneous parameter in the
     constructor is set to <literal>true</literal>, there is very little point
     most of the time in using any of the four optional packing parameters.
     These come into their own when the children are not required to take up
     the same amount of space.
    </para>
    <example>
     <title>GtkTable usage demonstration</title>
     <programlisting role="php">
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="&directory.examples;/reference/gtk/gtktable/constructor.phpw" parse="text">
       <xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback>
      </xi:include>
     </programlisting>
    </example>
   </desc>
  </constructor>

 </constructors>

 <methods>

  <method id="gtk.gtktable.method.attach">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>attach</function></funcdef>
     <paramdef><classname>GtkWidget</classname> <parameter>child</parameter></paramdef>
     <paramdef>int <parameter>left_attach</parameter></paramdef>
     <paramdef>int <parameter>right_attach</parameter></paramdef>
     <paramdef>int <parameter>top_attach</parameter></paramdef>
     <paramdef>int <parameter>bottom_attach</parameter></paramdef>
     <paramdef><enumname>GtkAttachOptions</enumname> <parameter><optional>xoptions = Gtk::EXPAND|Gtk::FILL</optional></parameter></paramdef>
     <paramdef><enumname>GtkAttachOptions</enumname> <parameter><optional>yoptions = Gtk::EXPAND|Gtk::FILL</optional></parameter></paramdef>
     <paramdef>int <parameter><optional>xpadding = Gtk::EXPAND|Gtk::FILL</optional></parameter></paramdef>
     <paramdef>int <parameter><optional>ypadding = Gtk::EXPAND|Gtk::FILL</optional></parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds widgets to a GtkTable.
   </shortdesc>
   <desc>
    <para>
     <function class="GtkTable">attach</function> is the way of adding widgets
     to a <classname>GtkTable</classname>. It takes up to nine arguments, but 
     only five are required.
    </para>
    <para>
     The first argument (<parameter>child</parameter>) refers to the child 
     widget to be attached. The two following arguments (
     <parameter>left_attach</parameter>, <parameter>right_attach</parameter>)
     denote the starting point that the child will be drawn from, at the left
     hand side, and the end point that the child will be drawn to, to the 
     right. These parameters are given in terms of columns, with the start 
     point being 0. The next two arguments (<parameter>top_attach</parameter>,
     <parameter>bottom_attach</parameter>) do the same thing, the only
     difference beeing that they relate to rows instead of columns, controlling
     the vertical positioning.
    </para>
    <para>
     As with all container widgets, the <classname>GtkTable</classname> itself
     takes up no screen space until it contains child widgets. If you attach
     only one child with parameters that should set it in the bottom right 
     corner and set <parameter>homogeneous</parameter> to 
     <literal>false</literal>, the resulting effect will not be that of a table
     with only one entry in the bottom right corner, but of a container with a
     single widget in it - regardless of the number of columns and rows 
     specified in the table's constructor. Child settings always take precedence
     in a non-homogeneous table, and so all table attachments are relative to 
     the other child widgets. This is in line with the behaviour of other 
     multiple-child capable containers where the child widget can have its own 
     packing parameters set.
    </para>
    <para>
     The behaviour is very different when a regular grid is in position, which
     happens when the <classname>GtkTable</classname> has its 
     <parameter>homogeneous</parameter> parameter set to <literal>true</literal>.
     The table works out the dimensions of the grid from the the largest child
     widget's size request, and positions its children accordingly.
    </para>
    <para>
     The final four optional parameters determine the way in which the child 
     widget will respond to the area available to it (expand, shrink, fill) in 
     each direction, and the padding between the child and its nearest border,
     in each direction. 
    </para>
    <para>
     See the <link linkend="gtk.gtktable.constructor">constructor</link> entry 
     for an usage example.
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.attach_defaults">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>attach_defaults</function></funcdef>
     <paramdef>GtkWidget <parameter>widget</parameter></paramdef>
     <paramdef>int <parameter>left_attach</parameter></paramdef>
     <paramdef>int <parameter>right_attach</parameter></paramdef>
     <paramdef>int <parameter>top_attach</parameter></paramdef>
     <paramdef>int <parameter>bottom_attach</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds widgets to a GtkTable using default options.
   </shortdesc>
   <desc>
    <para>
     This method is very similar to <function class="GtkTable">attach</function>,
     except that it takes less four parameters. Since those parameters are
     optional in <function class="GtkTable">attach</function>, this method
     is unnecessary.
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.get_col_spacing">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_col_spacing</function></funcdef>
     <paramdef>int <parameter>column</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gets the spacing after a given column.
   </shortdesc>
   <desc>
    <para>
     Gets the amount of space between a given table column and the adjacent
     columns, in pixels. Note that the column count begins at 0.
    </para>
    <para>
     &seealso;
     <function class="GtkTable">set_col_spacing</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.get_default_col_spacing">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_default_col_spacing</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gets the default column spacing for the table.
   </shortdesc>
   <desc>
    <para>
     Gets the default column spacing for the table. This is the spacing that
     will be used for newly added columns.
    </para>
    <para>
     &seealso;<function class="GtkTable">set_col_spacings</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.get_default_row_spacing">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_default_row_spacing</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gets the default row spacing for the table.
   </shortdesc>
   <desc>
    <para>
     Gets the default row spacing for the table. This is the spacing that
     will be used for newly added rows.
    </para>
    <para>
     &seealso;<function class="GtkTable">set_row_spacings</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.get_homogeneous">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>get_homogeneous</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns the current value of the <parameter>homogeneous</parameter> property.
   </shortdesc>
   <desc>
    <para>
     Returns whether the table cells are all constrained to the same width and
     height.
    </para>
    <para>
     &seealso;
     <function class="GtkTable">set_homogeneous</function>
    </para>

   </desc>
  </method>

  <method id="gtk.gtktable.method.get_row_spacing">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_row_spacing</function></funcdef>
     <paramdef>int <parameter>row</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Gets the amount of space below a given row.
   </shortdesc>
   <desc>
    <para>
     Gets the amount of space below a given row.
    </para>
    <para>
     &seealso;
     <function class="GtkTable">set_row_spacing</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.resize">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>resize</function></funcdef>
     <paramdef>int <parameter>rows</parameter></paramdef>
     <paramdef>int <parameter>columns</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Changes the size of a GtkTable after its creation.
   </shortdesc>
   <desc>
    <para>
     If you need to change a table's size after it has been created, this
     function allows you to do so.
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.set_col_spacing">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_col_spacing</function></funcdef>
     <paramdef>int <parameter>column</parameter></paramdef>
     <paramdef>int <parameter>spacing</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the space between a column and the adjacent columns.
   </shortdesc>
   <desc>
    <para>
     Alters the amount of space between a given table column and the adjacent columns.
    </para>
    <para>
     &seealso;
     <function class="GtkTable">get_col_spacing</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.set_col_spacings">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_col_spacings</function></funcdef>
     <paramdef>int <parameter>spacing</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the space between every column to the same given value.
   </shortdesc>
   <desc>
    <para>
     Sets the space between every column in <parameter>table</parameter>
     equal to <parameter>spacing</parameter>. This is the spacing that
     will be used for newly added columns. Note that this is different from
     <function class="GtkTable">set_col_spacing</function>.
    </para>
    <para>
     &seealso;
     <function class="GtkTable">get_default_col_spacing</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.set_homogeneous">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_homogeneous</function></funcdef>
     <paramdef>bool <parameter>homogeneous</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Changes the homogenous property of table cells.
   </shortdesc>
   <desc>
    <para>
     Changes the homogenous property of table cells, ie. whether all cells are an equal size or not.
    </para>
    <para>
     &seealso;
     <function class="GtkTable">get_homogeneous</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.set_row_spacing">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_row_spacing</function></funcdef>
     <paramdef>int <parameter>row</parameter></paramdef>
     <paramdef>int <parameter>spacing</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the space between a row and the adjacent rows.
   </shortdesc>
   <desc>
    <para>
     Alters the amount of space between a given table row and the adjacent rows.
    </para>
    <para>
     &seealso;
     <function class="GtkTable">get_row_spacing</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktable.method.set_row_spacings">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_row_spacings</function></funcdef>
     <paramdef>int <parameter>spacing</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the space between every row to the same given value.
   </shortdesc>
   <desc>
    <para>
     Sets the space between every row in <parameter>table</parameter>
     equal to <parameter>spacing</parameter>. This is the spacing that
     will be used for newly added rows. Note that this is different from
     <function class="GtkTable">set_row_spacing</function>.
    </para>
    <para>
     &seealso;
     <function class="GtkTable">get_default_row_spacing</function>
    </para>
   </desc>
  </method>

 </methods>

</classentry>
