<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.13 $ -->
<classentry id="gtk.gtkstatusbar">
 <classmeta>
  <classtitle>GtkStatusbar</classtitle>
  <classparent>GtkHBox</classparent>
  <classimage fileref="&directory.images;/reference/gtk/gtkstatusbar.png" frame="no"/>
  <shortdesc>
   A widget for displaying status information.
  </shortdesc>
  <desc>
   <para>
    A status bar is normally used to display messages about an applications 
    status or some other attribute that changes over time. Typically a status
    bar is shown at the bottom of an application's main window and notifies
    the user when an important process has completed, such as transfering
    files to a remote server. 
   </para>
   <para>
    <classname>GtkStatusbar</classname> maintains a stack of error messages.
    The message on top of the stack is the message that will be shown. When
    the top message is popped off the stack, the message below it will be
    shown in the status bar. 
   </para>
  </desc>
 </classmeta>

 <constructors>

  <constructor id="gtk.gtkstatusbar.constructor">
   <funcsynopsis>
    <funcprototype>
    <funcdef> <function>GtkStatusbar</function></funcdef>
    <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a new GtkStatusbar.
   </shortdesc>
   <desc>
    <para>
     Creates a new GtkStatusbar. The new status bar will have an empty message
     stack. New messages should be added using <function class="GtkStatusbar">push</function>.
    </para>
    <para>
     <example>
      <title>Creating a GtkStatusbar</title>
      <programlisting role="php">
       <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="&directory.examples;/reference/gtk/gtkstatusbar/constructor.phpw" parse="text">
        <xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback>
       </xi:include>
      </programlisting>
     </example>
    </para>
    <para>
     &seealso;
     <function class="GtkStatusbar">push</function>
    </para>
   </desc>
  </constructor>

 </constructors>

 <methods>

  <method id="gtk.gtkstatusbar.method.get_context_id">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>get_context_id</function></funcdef>
     <paramdef>string <parameter>context_description</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns a unique identifier for a message based on the message context.
   </shortdesc>
   <desc>
    <para>
     Returns a unique identifier for a message based on the context of the
     message, <parameter>context_description</parameter>.
    </para>
    <para>
     Any messages added to a statusbar's stack must specify a context id that
     is used to uniquely identify the source of a message. This context id can
     be generated by <function class="GtkStatusbar">get_context_id</function>,
     given a message, <parameter>context_description</parameter> describing the
     context of the message. Note that messages are stored in a stack, and when
     choosing which message to display, the stack structure is adhered to,
     regardless of the context identifier of a message.
    </para>
    <para>
     &seealso;
     <function class="GtkStatusbar">push</function>,
     <function class="GtkStatusbar">pop</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkstatusbar.method.get_has_resize_grip">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>get_has_resize_grip</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Returns whether or not the statusbar has a resize grip.
   </shortdesc>
   <desc>
    <para>
     Returns <literal>true</literal> if the status bar has a resize grip.
    </para>
    <para>
     A resize grip is shown by default. To hide the resize grip, pass
     <literal>false</literal> to <function class="GtkStatusbar">set_has_resize_grip</function>.
    </para>
    <para>
     &seealso;
     <function class="GtkStatusbar">set_has_resize_grip</function>
    </para>

   </desc>
  </method>

  <method id="gtk.gtkstatusbar.method.pop">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>pop</function></funcdef>
     <paramdef>int <parameter>context_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Pops the top message with the given context id off of the status bar's 
    message stack.
   </shortdesc>
   <desc>
    <para>
     Pops the top message with context id <parameter>context_id</parameter> off
     the stack. If the message popped was the currently displayed message, the
     next message in the stack will be displayed regardless of its context id.
    </para>
    <para>
     &seealso;
     <function class="GtkStatusbar">push</function>,
     <function class="GtkStatusbar">get_context_id</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkstatusbar.method.push">
   <funcsynopsis>
    <funcprototype>
     <funcdef>int <function>push</function></funcdef>
     <paramdef>int <parameter>context_id</parameter></paramdef>
     <paramdef>string <parameter>text</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Adds a new message to the top of the message stack.
   </shortdesc>
   <desc>
    <para>
     Adds <parameter>text</parameter> as the top message on the message stack.
     The <parameter>context_id</parameter> is an integer returned by <function class="GtkStatusbar">get_context_id</function> and identifies the type of
     message being added.
    </para>
    <para>
     <function class="GtkStatusbar">push</function> returns an integer
     identifier for the message that is added. This value can be used to
     remove the message using <function
     class="GtkStatusbar">remove_message</function>.
    </para>
    <para>
     &seealso;
     <function class="GtkStatusbar">get_context_id</function>,
     <function class="GtkStatusbar">pop</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtkstatusbar.method.set_has_resize_grip">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_has_resize_grip</function></funcdef>
     <paramdef>bool <parameter>setting</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets whether or not a resize grip should be shown in the status bar.
   </shortdesc>
   <desc>
    <para>
     Sets whether or not a resize grip should be shown in the status bar. If
     <parameter>setting</parameter> is <literal>true</literal>, a resize grip
     will be shown. Otherwise the resize grip will be hidden.
    </para>
    <para>
     A resize grip is a part of the widget that the use can drag to resize the
     top level window. Resize grips are normally shown as a triangle in the
     lower right corner of the status bar.
    </para>
    <para>
     A resize grip is shown by default.
    </para>
    <para>
     &seealso;
     <function class="GtkStatusbar">get_has_resize_grip</function>
    </para>

   </desc>
  </method>

  <method id="gtk.gtkstatusbar.method.remove_message">
   <funcsynopsis>
    <funcprototype>
     <funcdef> <function>remove_message</function></funcdef>
     <paramdef>int <parameter>context_id</parameter></paramdef>
     <paramdef>int <parameter>message_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Removes a message from the stack.
   </shortdesc>
   <desc>
    <para>
     Removes the message with the given <parameter>context_id</parameter> and
     <parameter>message_id</parameter>.
    </para>
    <para>
     &seealso;
     <function class="GtkStatusbar">push</function>,
     <function class="GtkStatusbar">pop</function>
    </para>
   </desc>
  </method>
 </methods>

 <signals>

  <signal id="gtk.gtkstatusbar.signal.text-popped">
   <signalname>text-popped</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkStatusbar <parameter>statusbar</parameter></paramdef>
     <paramdef>int <parameter>context_id</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when a message is popped from the message stack.
   </shortdesc>
   <desc>
    <para>
     <signalname class="GtkStatusbar">text-popped</signalname> is emitted when
     a new message is popped off of the message stack using <function class="GtkStatusbar">pop</function>. 
    </para>
    <para>
     &seealso;
     <function class="GtkStatusbar">pop</function>
    </para>
   </desc>
  </signal>
  
  <signal id="gtk.gtkstatusbar.signal.text-pushed">
   <signalname>text-pushed</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef>GtkStatusbar <parameter>statusbar</parameter></paramdef>
     <paramdef>int <parameter>context_id</parameter></paramdef>
     <paramdef>string<parameter>message</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Emitted when a message is pushed onto the message stack.
   </shortdesc>
   <desc>
    <para>
     <signalname class="GtkStatusbar">text-pushed</signalname> is emitted when
     a new message is pushed onto the message stack using <function class="GtkStatusbar">push</function>. 
    </para>
    <para>
     By default, <cbfunction>callback</cbfunction> will be passed the status
     bar that emitted the signal, the context id of the message that has been
     pushed and the text of the message itself.
    </para>
    <para>
     &seealso;
     <function class="GtkStatusbar">push</function>
    </para>
   </desc>
  </signal>
  
 </signals>

</classentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
