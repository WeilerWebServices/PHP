<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.11 $ -->
<classentry id="gtk.gtktogglebutton">
 <classmeta>
  <classtitle>GtkToggleButton</classtitle>
  <classparent>GtkButton</classparent>
  <classimage fileref="&directory.images;/reference/gtk/gtktogglebutton.png" frame="no"/>
  <shortdesc>
   Button that retains its state.
  </shortdesc>
  <desc>
   <para>
    A <classname>GtkToggleButton</classname> is a 
    <classname>GtkButton</classname> which will remain 'pressed-in' when
    clicked. Clicking again will cause the toggle button to return to its
    normal state.
   </para>
   <para>
    The state of a <classname>GtkToggleButton</classname> can be set 
    specifically using <function class="GtkToggleButton">set_active</function>,
    and retrieved using <function class="GtkToggleButton">get_active</function>.
   </para>
   <para>
    To simply switch the state of a toggle button, use
    <function class="GtkToggleButton">toggled</function>.
   </para>
  </desc>
 </classmeta>

 <constructors>
  <constructor id="gtk.gtktogglebutton.constructor">
   <funcsynopsis>
    <funcprototype>
    <funcdef> <function>GtkToggleButton</function></funcdef>
    <paramdef>string <parameter><optional>label</optional></parameter></paramdef>
    <paramdef>boolean <parameter><optional>use_underline</optional></parameter> = true</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Creates a new toggle button.
   </shortdesc>
   <desc>
    <para>
     Creates a new <classname>GtkToggleButton</classname>, optionally with
     a text label. If you pass <literal>false</literal> as second parameter,
     the mnemonics (<literal>_</literal>) will not be parsed.
    </para>
    <example>
     <title>Creating a new GtkToggleButton</title>
     <programlisting role="php">
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="&directory.examples;/reference/gtk/gtktogglebutton/constructor.phpw" parse="text">
       <xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback>
      </xi:include>
     </programlisting>
    </example>
   </desc>
  </constructor>
 </constructors>

 <methods>
  <method id="gtk.gtktogglebutton.method.get_active">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>get_active</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    If the toggle button is pressed.
   </shortdesc>
   <desc>
    <para>
     Returns wether the toggle button is pressed (<literal>true</literal>)
     or not (<literal>false</literal>).
    </para>
    <para>
     &seealso;
     <function class="GtkToggleButton">set_active</function>, 
     <fieldname class="GtkToggleButton">active</fieldname>
    </para>

   </desc>
  </method>

  <method id="gtk.gtktogglebutton.method.get_inconsistent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>get_inconsistent</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    If the button is set to an inconsistent state.
   </shortdesc>
   <desc>
    <para>
     Returns the value that has been set with
     <function class="GtkToggleButton">set_inconsistent</function>.
    </para>
    <para>
     &seealso;
     <function class="GtkToggleButton">set_inconsistent</function>, 
     <fieldname class="GtkToggleButton">inconsistent</fieldname>
    </para>

   </desc>
  </method>

  <method id="gtk.gtktogglebutton.method.get_mode">
   <funcsynopsis>
    <funcprototype>
     <funcdef>bool <function>get_mode</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Whether the button is displayed as a separate indicator and label.
   </shortdesc>
   <desc>
    <para>
     Returns whether the button is displayed as a separate indicator
     and label.
    </para>
    <para>
     &seealso;
     <function class="GtkToggleButton">set_mode</function>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktogglebutton.method.set_active">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_active</function></funcdef>
     <paramdef>bool <parameter>is_active</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets the active state.
   </shortdesc>
   <desc>
    <para>
     Sets the button's active state (pressed or not). Set to
     <literal>true</literal> if you want the
     <classname>GtkToggleButton</classname> to be 'pressed in', and
     <literal>false</literal> to raise it. This action causes the
     <signalname class="GtkToggleButton">toggled</signalname> signal to be
     emitted.
    </para>
    <para>
     &seealso;
     <function class="GtkToggleButton">get_active</function>,
     <fieldname class="GtkToggleButton">active</fieldname>
    </para>

   </desc>
  </method>

  <method id="gtk.gtktogglebutton.method.set_inconsistent">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_inconsistent</function></funcdef>
     <paramdef>bool <parameter>setting</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Set the button to the inconsistent state.
   </shortdesc>
   <desc>
    <para>
     If the user has selected a range of elements (such as some text or
     spreadsheet cells) that are affected by a toggle button, and the current
     values in that range are inconsistent, you may want to display the toggle
     in an "in between" state. This function turns on "in between" display.
     Normally you would turn off the inconsistent state again if the user 
     toggles the toggle button. This has to be done manually,
     set_inconsistent() only affects visual appearance, it doesn't affect the
     semantics of the button.
    </para>
    <para>
     &seealso;
     <function class="GtkToggleButton">get_inconsistent</function>, 
     <fieldname class="GtkToggleButton">inconsistent</fieldname>
    </para>
   </desc>
  </method>

  <method id="gtk.gtktogglebutton.method.set_mode">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>set_mode</function></funcdef>
     <paramdef>bool <parameter>draw_indicator</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Sets whether the button is displayed as a separate indicator and label.
   </shortdesc>
   <desc>
    <para>
     Sets whether the button is displayed as a separate indicator and label.
     You can call this function on a checkbutton or a radiobutton with
     draw_indicator <literal>= false</literal> to make the button look like
     a normal button.
    </para>
    <para>
     This function only effects instances of classes like 
     <classname>GtkCheckButton</classname> and <classname>GtkRadioButton</classname>
     that derive from <classname>GtkToggleButton</classname>, not instances 
     of <classname>GtkToggleButton</classname> itself.
    </para>
    <para>
     &seealso;
     <function class="GtkToggleButton">get_mode</function>
    </para>
   </desc>
  </method>

  

  <method id="gtk.gtktogglebutton.method.toggled">
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <function>toggled</function></funcdef>
     <paramdef>void</paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    Toggle the button's state.
   </shortdesc>
   <desc>
    <para>
     Emits the toggled signal on the <classname>GtkToggleButton</classname>.
     There is no good reason for an application ever to call this function.
    </para>
   </desc>
  </method>
 </methods>

 <fields>
  <field id="gtk.gtktogglebutton.field.active" type="ro">
   <fieldname>active</fieldname>
   <fieldtype>bool</fieldtype>
   <shortdesc>
    If the toggle button should be pressed in or not.
   </shortdesc>
   <desc>
    <simpara>
     If the toggle button should be pressed in or not.
    </simpara>
    <para>
     &seealso;
     <function class="GtkToggleButton">get_active</function>, 
     <function class="GtkToggleButton">set_active</function>
    </para>

   </desc>
  </field>

  <field id="gtk.gtktogglebutton.field.draw_indicator" type="ro">
   <fieldname>draw_indicator</fieldname>
   <fieldtype>bool</fieldtype>
   <shortdesc>
    If the toggle part of the button is displayed.
   </shortdesc>
   <desc>
    <simpara>
     If the toggle part of the button is displayed.
    </simpara>
   </desc>
  </field>

  <field id="gtk.gtktogglebutton.field.inconsistent" type="ro">
   <fieldname>inconsistent</fieldname>
   <fieldtype>bool</fieldtype>
   <shortdesc>
    If the toggle button is in an "in between" state.
   </shortdesc>
   <desc>
    <simpara>
     If the toggle button is in an "in between" state.
    </simpara>
    <para>
     &seealso;
     <function class="GtkToggleButton">get_inconsistent</function>, 
     <function class="GtkToggleButton">set_inconsistent</function>
    </para>

   </desc>
  </field>
 </fields>

 <signals>
  <signal id="gtk.gtktogglebutton.signal.toggled">
   <signalname>toggled</signalname>
   <funcsynopsis>
    <funcprototype>
     <funcdef>void <cbfunction>callback</cbfunction></funcdef>
     <paramdef><classname>GtkToggleButton</classname> <parameter>togglebutton</parameter></paramdef>
    </funcprototype>
   </funcsynopsis>
   <shortdesc>
    The button's active state has changed.
   </shortdesc>
   <desc>
    <para>
     Should be connected if you wish to perform an action whenever the 
     <classname>GtkToggleButton</classname>'s state is changed.
    </para>
   </desc>
  </signal>
 </signals>

</classentry>
