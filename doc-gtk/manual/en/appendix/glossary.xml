<?xml version="1.0" encoding="utf-8" ?>
<!-- $Revision: 1.10 $ -->
<glossary id="appendix.glossary">
 <title>Glossary</title>
 <simpara>
  Terms relating to PHP-GTK 2.
 </simpara>

 <glossdiv id="appendix.glossary.a">
  <title>A</title>
  <glossentry id="appendix.glossary.a.accelerator">
   <glossterm>Accelerator</glossterm>
   <glossdef>
    <para>
     An accelerator is a keyboard key marked with a function name (for example,
     <literal>Help</literal> or <literal>Delete</literal>), a function key
     (<literal>F1</literal>, <literal>F2</literal>), or the combination of a
     control key (<literal>[Ctrl]</literal>, <literal>[Shift]</literal>,
     <literal>[Alt]</literal>) with a programmer-defined key. The difference
     between a keyboard accelerator and a mnemonic is that an accelerator is
     available throughout the application, whereas a mnemonic is specific to
     a currently-visible widget.
    </para>
    <glossseealso otherterm="appendix.glossary.m.mnemonic" />
    <glossseealso otherterm="appendix.glossary.m.modifier" />
   </glossdef>
  </glossentry>
  <glossentry id="appendix.glossary.a.atom">
   <glossterm>Atom</glossterm>
   <glossdef>
    <para>
     An atom consists of a unique numeric ID corresponding to a string name.
     In GTK+, atoms are stored in a <classname>GdkAtom</classname> structure
     and are used mostly in selection. They can turn up anywhere GTK+ needs
     to avoid the overhead of passing arbitrary length strings.
    </para>
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.b">
  <title>B</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.c">
  <title>C</title>
  <glossentry id="appendix.glossary.c.callback">
   <glossterm>Callback</glossterm>
   <glossdef>
    <para>
     A callback is a function or method that is invoked whenever a
     predetermined condition is met. Signal handlers, particularly, are
     frequently referred to as 'callbacks'.
    </para>
    <glossseealso otherterm="appendix.glossary.s.signalhandler" />
   </glossdef>
  </glossentry>
  <glossentry id="appendix.glossary.c.clipmask">
   <glossterm>Clip mask</glossterm>
   <glossdef>
    <para>
     A clip mask or clipping region is a specified bitmap or list of
     rectangles. It is used to restrict output from a graphics routine to a
     particular region of the destination window.
    </para>
   </glossdef>
  </glossentry>
  <glossentry id="appendix.glossary.c.colormap">
   <glossterm>Colormap</glossterm>
   <glossdef>
    <para>
     A colormap is a portable mechanism allowing pixel values to be mapped to
     RGB colors for display. In GTK+, the colormap is stored in a
     <classname>GdkColormap</classname> structure.
    </para>
    <para>
     More than one colormap may be installed at any given time, allowing the
     windows associated with those maps to display with true colors. The
     system colormap in most cases is a limited resource that should be
     conserved by selecting RGB values from the predefined color database,
     i.e. <literal>rgb.txt</literal>.
    </para>
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.d">
  <title>D</title>
  <glossentry id="appendix.glossary.d.deprecated">
   <glossterm>Deprecated</glossterm>
   <glossdef>
    <para>
     Any method, class or variable marked as 'deprecated' may not be available
     in future releases of GTK+, and so should not be used in new code.
     Usually, deprecated functionality has already been replaced with something
     better.
    </para>
    <para>
     For a list of deprecated items in PHP-GTK 2 and their replacements, see
     the <link linkend="tutorials.changes.deprecated">Deprecated Widgets</link>
     page.
    </para>
   </glossdef>
  </glossentry>
  <glossentry id="appendix.glossary.d.drawable">
   <glossterm>Drawable</glossterm>
   <glossdef>
    <para>
     Either windows or pixmaps can be used as destinations in graphics
     operations. These are collectively known as drawables. In GTK+, they are
     a specific type: <classname>GdkDrawable</classname>.
    </para>
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.e">
  <title>E</title>
  <glossentry id="appendix.glossary.e.events">
   <glossterm>Events</glossterm>
   <glossdef>
    <para>
     Events are the way an application interacts with the user; this is why
     GUI coding is known as 'event-driven programming'. A pointer movement,
     the mouse entering or leaving a widget's focus area, a key or button
     press, all qualify as events. The programmer ultimately has control over
     which events are known to any given widget and, usually over the way the
     event is handled (if at all). The default behaviour of an unhandled event
     is to propagate up through the widget's ancestry.
    </para>
    <para>
     GTK+ event data is stored in a <classname>GdkEvent</classname>
     structure, and controlled via a <enumname>GdkEventMask</enumname>.
    </para>
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.f">
  <title>F</title>
  <glossentry id="appendix.glossary.f.focus">
   <glossterm>Focus</glossterm>
   <glossdef>
    <para>
     When a widget has focus, it receives input from the keyboard. You can
     usually use that input to shift focus to a neighbouring widget, as when
     - for example - using the keyboard to scroll through the items listed in
     a dropdown menu.
    </para>
    <glossseealso otherterm="appendix.glossary.g.grab" />
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.g">
  <title>G</title>
  <glossentry id="appendix.glossary.g.grab">
   <glossterm>Grab</glossterm>
   <glossdef>
    <para>
     Widgets can grab the pointer and keyboard away from other widgets. This
     essentially means that the widget becomes "modal"; input goes only to that
     widget, and the focus can't be changed to another widget. A typical reason
     to grab input is to create a modal dialog; if a window has active grab,
     interaction with other windows is blocked.
    </para>
    <glossseealso otherterm="appendix.glossary.f.focus" />
   </glossdef>
  </glossentry>
  <glossentry id="appendix.glossary.g.gc">
   <glossterm>GC</glossterm>
   <glossdef>
    <para>
     GC is short for graphics context.
    </para>
    <glossseealso otherterm="appendix.glossary.g.graphicscontext" />
   </glossdef>
  </glossentry>
  <glossentry id="appendix.glossary.g.graphicscontext">
   <glossterm>Graphics context</glossterm>
   <glossdef>
    <para>
     Meta information pertaining to graphics output, such as foreground pixel,
     background pixel, line width, clipmask etc, is stored in a graphics
     context (GC). Everything drawn to a window or pixmap is modified
     according to the information stored in the <classname>GdkGC</classname>
     that is being used.
    </para>
    <glossseealso otherterm="appendix.glossary.c.clipmask" />
   </glossdef>
  </glossentry>
  <glossentry id="appendix.glossary.g.gravity">
   <glossterm>Gravity</glossterm>
   <glossdef>
    <para>
     Gravity referes to how an object is relatively positioned when objects 
     surrounding it are added and removed. An object with left gravity will
     stay to the left of objects added in the same location. An object with 
     right gravity will stay to the right of objects added in the same 
     location. Gravity is normally associated with 
     <classname>GtkTextMark</classname> objects.
    </para>
    <para>
     When used in relation to text, gravity direction is logical direction. 
     Left gravity is toward the beginning of the buffer and right gravity is
     toward the end of the buffer. When a language like Hebrew is used, left
     gravity is actually gravity which keeps the object on the right of newly
     added objects.
    </para>
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.h">
  <title>H</title>
  <glossentry id="appendix.glossary.h.hints">
   <glossterm>Hints</glossterm>
   <glossdef>
    <para>
     Certain properties, such as the preferred type of a window, are referred
     to as 'hints', because the window manager makes no guarantee that it will
     honor them. See <fieldname class="GtkWindow">type_hint</fieldname>.
    </para>
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.i">
  <title>I</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.j">
  <title>J</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.k">
  <title>K</title>
  <glossentry id="appendix.glossary.k.keysyms">
   <glossterm>Keysyms</glossterm>
   <glossdef>
    <para>
     A keysym is a <emphasis>portable</emphasis> representation of the symbol
     on the cap of a keyboard key. A key may have several associated keysyms,
     all of which correspond to the key when various modifier keys are used.
     There is a list of the keysyms used in PHP-GTK 2
     <link linkend="appendix.keysyms">here</link>.
    </para>
    <glossseealso otherterm="appendix.glossary.m.modifier" />
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.l">
  <title>L</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.m">
  <title>M</title>
  <glossentry id="appendix.glossary.m.mnemonic">
   <glossterm>Mnemonic</glossterm>
   <glossdef>
    <para>
     A mnemonic is an application-specific keyboard shortcut consisting of the
     [Alt] key plus one programmer-defined keyboard character. A mnemonic is
     indicated by an underlined letter in the label of the menu item, button
     or other GUI component for which it is defined. Its corresponding
     keyboard shortcut is only available to the user while that label is
     visible.
    </para>
    <glossseealso otherterm="appendix.glossary.a.accelerator" />
    <glossseealso otherterm="appendix.glossary.u.underline" />
   </glossdef>
  </glossentry>
  <glossentry id="appendix.glossary.m.modifier">
   <glossterm>Modifier</glossterm>
   <glossdef>
    <para>
     A keyboard modifier is a key that can be used in combination with other
     keys to alter the meaning of those keys. Typical modifier keys would be
     <literal>[Shift]</literal>, <literal>[Ctrl]</literal> and
     <literal>[Alt]</literal>.
    </para>
    <para>
     Modifiers can also be related to the mouse, so that the left, right and
     centre mouse buttons can be programmed to respond in a different way
     from one another within an application. For example, a left-button click
     might only interact with the menu bar, whereas a right-button click might
     display a popup menu in the vicinity of the pointer.
    </para>
    <glossseealso otherterm="appendix.glossary.a.accelerator" />
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.n">
  <title>N</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.o">
  <title>O</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.p">
  <title>P</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.q">
  <title>Q</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.r">
  <title>R</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.s">
  <title>S</title>
  <glossentry id="appendix.glossary.s.signal">
   <glossterm>Signal</glossterm>
   <glossdef>
    <para>
     A signal is a notification that is generated whenever an event occurs. In
     order for it to have any effect, it needs to be connected to a callback
     function (also known as a signal handler).
    </para>
    <glossseealso otherterm="appendix.glossary.c.callback" />
    <glossseealso otherterm="appendix.glossary.s.signalhandler" />
   </glossdef>
  </glossentry>
  <glossentry id="appendix.glossary.s.signalhandler">
   <glossterm>Signal handler</glossterm>
   <glossdef>
    <para>
     A callback function that is invoked in response to a signal.
    </para>
    <glossseealso otherterm="appendix.glossary.c.callback" />
    <glossseealso otherterm="appendix.glossary.s.signal" />
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.t">
  <title>T</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.u">
  <title>U</title>
  <glossentry id="appendix.glossary.u.underline">
   <glossterm>Underline</glossterm>
   <glossdef>
    <para>
     An underline is used in the label of a widget such as a button or a menu
     item to indicate the presence and value of a mnemonic. In PHP-GTK 2,
     mnemonic support is enabled by default, so that a menu item with the label
     text <literal>_Save</literal> will automatically have <literal>s</literal>
     as its keyboard shortcut. You can switch off this default behaviour when
     constructing simple widgets such as <classname>GtkButton</classname> and
     <classname>GtkMenuItem</classname>, or alternatively use a double
     underscore <literal>__</literal> in order to display a single one where
     mnemonic support is present.
    </para>
    <glossseealso otherterm="appendix.glossary.a.accelerator" />
    <glossseealso otherterm="appendix.glossary.m.mnemonic" />
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.v">
  <title>V</title>
  <glossentry id="appendix.glossary.v.visual">
   <glossterm>Visual</glossterm>
   <glossdef>
    <para>
     The specifications for color handling for a drawable, including visual
     class, depth, RGB/pixel, etc., are collectively referred to as a visual
     and - in GTK+ - are stored in a <classname>GdkVisual</classname>. The
     visual accounts for the differences between various types of hardware
     in determining the way pixel values are translated into visible colors.
     A screen may support only one type of visual.
    </para>
    <glossseealso otherterm="appendix.glossary.c.colormap" />
    <glossseealso otherterm="appendix.glossary.d.drawable" />
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.w">
  <title>W</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.x">
  <title>X</title>
  <glossentry id="appendix.glossary.x.xwindow">
   <glossterm>XWindow</glossterm>
   <glossdef>
    <para>
     FIXME
    </para>
   </glossdef>
  </glossentry>
 </glossdiv>

 <glossdiv id="appendix.glossary.y">
  <title>Y</title>
 </glossdiv>

 <glossdiv id="appendix.glossary.z">
  <title>Z</title>
 </glossdiv>

</glossary>
