<?xml version="1.0" encoding="utf-8" ?>
<!-- EN-Revision: 1.5 Maintainer: mikespook Status: ready -->
<!-- $Revision: 1.1 $ -->
<chapter id="tutorials.objectorientation">
 <title>面向对象编程</title>

 <sect1>
  <title>关于本指南</title>
  <simpara>
   本指南将尝试介绍在 PHP-GTK 2 中使用面向对象编程。PHP 5
   对面向对象的支持非常好，因此我们可以在开发 PHP-GTK 2
   应用的时候可以使用面向对象的编程方式。
  </simpara>
  <simpara>
    为什么使用面向对象编程非常流行？选择这种编程方式有许多有点，
    特别是如果你的程序被分为若干个模块，并且会有成千上万行代码。
    一个最重要的优势在于代码结构会更加清晰。
    如果使用面向对象的方式编程编写你的程序，你或者其他人阅读和修改这些代码时，
    会比使用纯粹的面向过程的编程方式容易许多。
  </simpara>
  <simpara>
    如果你确信面向对象是正确的选择，那么让我们开始吧！
  </simpara>
 </sect1>

 <sect1 id="tutorials.objectorientation.basics">
  <title>面向对象基础</title>
  <simpara>
    我将假设你已经熟悉使用面向对象编程，如果你不熟悉的话，
    我建议在阅读本指南之前先了解一下。你应当需要阅读 PHP 5
    的手册关于面向对象的章节，这会让你对此有更多的了解。
  </simpara>
  <para>
    我们将使用面向对象的方式重新编写简单的“Hello World！”程序，
    这样你可以快速掌握要点。首先你必须创建一个类。最简单的方式是从 PHP-GTK 2
    已有的类中继承一个你的类。现在，多数程序用 <classname>GtkWindow</classname>
    作为它们最顶级的元件。我们的“Hello World！”程序也是如此。我们将要做的就是
    继承（<literal>extends</literal>）<classname>GtkWindow</classname>
    创建一个类。这让我们的工作容易许多：
   <programlisting role="php"><![CDATA[
<?php

class Hello extends GtkWindow
{
    // code goes here.
}

?>]]></programlisting>
   现在我们需要设计这个类的构造函数（当这个类的对象创建时被调用的函数）。
   让我们考虑一下需要在构造函数中做些什么。由于构造函数是类的对象创建时第一个被调用的，
   我们必须在其中设置程序的外观。这意味着构造函数创建了所有需要的元件，设置布局（参考
   <link linkend="tutorials.packing">摆放元件</link>）
   以及决定我们的应用将是怎样呈现。
  </para>
  <para>
   现在，从 <classname>GtkWindow</classname> 继承这个类，但是这并不会自动调用
   <classname>GtkWindow</classname> 的构造函数。这是 PHP5
   默认行为，因此我们必须使用关键字 <literal>parent</literal> 显式调用
   <classname>GtkWindow</classname> 的构造函数：
   <programlisting role="php"><![CDATA[
class Hello extends GtkWindow
{
    function __construct()
    {
        parent::__construct();
    }
}
]]></programlisting>
   这意味着当我们的类 “Hello”的对象创建时，一个 GtkWindow
   将会被创建（没有参数被传递到构造函数）。现在问题是如何访问新创建的窗口对象。
   关键字 <literal>this</literal> 会帮助我们完成！
   使用这个关键字可以访问并修改新创建的窗口的所有内容：
   <programlisting role="php"><![CDATA[
function __construct()
{
    parent::__construct();
    $this->set_title('Hello World!');
    $this->connect_simple('destroy', array('gtk', 'main_quit'));
}
]]></programlisting>
  </para>
  <para>
    由于这是一个非常简单的程序，我们可以仅在构造函数中完成所有的任务。
    仅仅将前面面向过程的程序中的代码放到这个构造函数中。这是最终的程序：
    <example>
     <title>Hello World —— 面向对象样式</title>
     <programlisting role="php">
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" 
       href="&directory.examples;/tutorials/objectoriented/simple.phpw" parse="text">
       <xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback>
      </xi:include>
     </programlisting>
    </example>
    尽管这个例子并不能很全面的演示使用面向对象的方法编程，
    但是它总是应该能帮助你有一个开端。我们现在将进一步了解更加高级的概念。
  </para>
 </sect1>

 <sect1 id="tutorials.objectorientation.advanced">
  <title>更加复杂的例子</title>
  <para>
    到现在为止，多数强大的 PHP5 面向对象的特色我们都还未用到。
    我们将开发一个可以打开文本文件并显示它的内容的程序：一个简单的记事本程序。
    需要注意，这是一个非常非常简单的用于指导的应用，并没有实际用途！
    下面是代码，阅读它，并不要被它的尺寸吓倒。代码后面是详细的解释：
   <example>
    <title>A simple notepad</title>
    <programlisting role="php">
     <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" 
     href="&directory.examples;/tutorials/objectoriented/notepad.phpw" parse="text">
      <xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback>
     </xi:include>
    </programlisting>
   </example>
  </para>
 
  <sect2 id="tutorials.objectorientation.advanced.construct">
   <title>构造函数</title>
   <para>
     这个类的结构跟之前我们看过的非常类似，除了增加了一些类的属性和方法。
     首先来看一看构造函数。这个构造函数有一个可选参数默认为
     <literal>null</literal>。这个参数是我们想要打开的文件的文件名（含路径）。
     如果你没有传递参数到构造函数，则不会打开任何内容。
   </para>
   <para>
     OK，那么我们首先创建父对象（一个 GtkWindow）并创建需要使用的元件。一个
     <classname>GtkVBox</classname> 用于布局，一个 <classname>GtkTextBuffer</classname>
     和一个 <classname>GtkTextView</classname> 用于显示文件内容，而 
     <classname>GtkStatusBar</classname>
     用于显示一些消息。设置布局并添加每个元件到 VBox。
   </para>
   <para>
    Next we set the class properties:
    <programlisting role="php"><![CDATA[
$this->currentFile = $fileName;
$this->buffer = $textBuff;
$this->status = $statusBar;
]]> </programlisting>
    这三行代码设置类属性的值。类属性是所有使用面向对象的的方法编写的
    PHP-GTK 2 程序的重要组成部分。
    由于你可能需要在方法中访问那些并不是由这个方法创建的元件，所以特别常用。
    当我们创建一个元件，对象的作用域仅在创建它的方法中。
    例如，我们在类的构造函数中创建了状态条，但是显然我们需要在其他地方访问它
    （当我们需要在上面显示一些信息的时候）。
    由于变量  <literal>$statusBar</literal> 仅能被构造函数内访问，
    所以我们赋值给了一个类属性（叫做 <literal>status</literal>）。
    这样我们就可以在这个类的任何方法中使用 
    <literal>$this->status</literal> 访问状态条。
   </para>
   <para>
     简单的扩展这个概念到其他元件上。
     基本上，当需要将整个类的范围作为元件的作用域时就需要使用类属性。
     事实上，类属性可以用于高效的保存任何你需要在整个类范围使用的数据。
     在我们的程序中一个很好的例子就是 <literal>currentFile</literal> 属性。
     这个仅仅存储当前打开的文件路径，没有文件打开时为 <literal>null</literal>。
     我们可以在类的任何方法中获得当前打开的文件的文件名。类属性还有其他的用途，
     我现在能想到的一个用于标志。对于我们的记事本程序，你可能想要加入一个叫做
     <literal>saved</literal>
     的布尔类型的属性，用来确认当前的文件的内容是否已经写入了硬盘。
   </para>
   <para>
     需要注意的是，这个类所有的属性都被定义为 <literal>protected</literal>。
     当希望继承的子类可以访问这些属性，而又不可以作为公共变量访问时。
     这是一种简单但是非常好的面向对象的实现。
   </para>
   <para>
     最后，我们设置了标题，并最大化了窗口，添加了布局并显示所有的元件。
     同时调用了 <literal>loadFile()</literal> 方法来显示已经在 text buffer
     中创建的文件内容。
   </para>
  </sect2>

  <sect2 id="tutorials.objectorientation.advanced.buildmenu">
   <title>buildMenu() 方法</title>
   <para>
    注意我们如何在构造函数中调用这个方法的：
    <programlisting role="php"><![CDATA[
$mainBox->pack_start($this->buildMenu(), false, false);
]]> </programlisting>
    这样做的目的是希望能够将我们的类分成若干个模块。
    将布局的主要部分提取出来作为一个方法，代替将整个内容放在构造函数中总是更好的办法。
    这里使用了一个方法来建立菜单，但是对于创建文本框和状态条来说所以并不需要这么做，
    因为创建它们，每一个都只需要两行代码！
   </para>
   <para>
     在这个方法中，我们只创建了一个菜单条，并添加了只有一个菜单项“Quit”的文件菜单。
     让我们看一下这几行：
    <programlisting role="php"><![CDATA[
$quit->connect_simple('activate', array($this, 'quit'));
$quit->connect_simple('enter_notify_event', array($this, 'updateStatus'), 1);
$quit->connect_simple('leave_notify_event', array($this, 'updateStatus'), 0);
]]> </programlisting>
    这里我们连接 <literal>activate</literal>，<literal>enter-notify-event</literal>
    和 <literal>leave-notify-event</literal> 到各自的句柄上去。需要留意传递到
    <literal>connect_simple()</literal> 方法的第二个参数。是一个有两个元素的数组。
    第一个元素是特殊的 <literal>$this</literal> 变量，而第二个元素是一个字符串。
    如果你已经阅读过 <link linkend="tutorials.helloworld">Hello World</link>
    指南，你应该已经了解如下的代码：
    <programlisting role="php"><![CDATA[
$wnd->connect_simple('destroy', array('gtk', 'main_quit'));
]]> </programlisting>
    对比两个应用，你应当已经了解，当希望连接一个信号到一个类中的回调函数时，
    必须使用数组来指定这个回调，第一个元素指向类，第二个元素是回调函数的名字。
    因此，我们连接退出按钮的事件到 <literal>这个（this）</literal> 类的
    <literal>quit()</literal> 和 <literal>updateStatus()</literal> 方法。
   </para>
   <para>
    有时，为了在类的方法中使用这些对象可能需要传递参数到方法中。一般来说，
    如果你有超过两个方法使用了某个对象，那么将这个对象定义为类属性好一些；
    但是如果只有一个方法需要这个对象，更好的办法是将这个对象作为参数来传递。
    在连接信号和回调函数时经常会遇到这种情况。浏览信号和回调函数的指南了解更多信息，
    同时了解如何传递自定义的参数到回调函数。
   </para>
   <para>
     回到 buildMenu() 方法，返回了 <literal>最上层（top-most）</literal> 的元件：
     菜单条，并已经添加了子菜单在上面。构造函数获得了这个对象并添加到主 VBox 上。
   </para>
  </sect2>

  <sect2 id="tutorials.objectorientation.advanced.loadfile">
   <title>loadFile() 方法</title>
   <para>
     这个方法的作用是加载打开文件的内容并显示在文本框内。通常来说，
     首先应当确定类属性 <literal>currentFile</literal> 不为空，然后调用
     类属性 <literal>buffer</literal> 的 
     <function class="GtkTextBuffer">set_text</function> 方法。
   </para>
  </sect2>

  <sect2 id="tutorials.objectorientation.advanced.updatestatus">
   <title>updateStatus() 方法</title>
   <para>
     这个方法作为 <literal>enter-notify-event</literal> 和 
     <literal>leave-notify-event</literal> 信号的回调函数。这里我们通过类属性 
     <literal>status</literal>
     访问状态条，并且当鼠标进入或离开退出菜单项时对其添加或清除信息。
   </para>
  </sect2>

  <sect2 id="tutorials.objectorientation.advanced.quit">
   <title>quit() 方法</title>
   <para>
     这是所有方法中最简单的，仅仅发送了退出 GTK    主循环的信号。
     你一定在想为什么创建一个叫做“quit”并只有一行的方法，而不直接连接信号到
     <literal>main_quit</literal>，如下：
    <programlisting role="php"><![CDATA[
$this->connect_simple('destroy', array('Gtk', 'main_quit'));
]]> </programlisting>
    这样做的原因是在程序中，多数情况需要在程序退出前做一些清理工作，
    在这个函数就是做这些清理工作最好的时机。在这个简单的记事本程序中，
    可以在此增加检查  <literal>saved</literal> 标志（再次说明，一个类属性）
    并提示用户保存或直接退出。
   </para>
  </sect2>

  <sect2 id="tutorials.objectorientation.advanced.instantiate">
   <para>
    最后两行:
    <programlisting role="php"><![CDATA[
new Notepad('simple.phpw');
Gtk::main();
]]> </programlisting>
    实例化一个这个类的对象（同时也打开放在同一个目录下的 simple.phpw 文件）
    并执行 GTK 的主循环。也可以将 <literal>Gtk::main()</literal>
    放置于这个类的构造函数中。
   </para>
  </sect2>
 </sect1>

 <sect1 id="tutorials.objectorientation.summary">
  <title>概述</title>
  <para>
    希望这个指南对你在 PHP-GTK 2 中使用面向对象的方式编程有一些帮助。
    在结束之前，下面有一些必须说明的地方。</para>
  <para>
   <itemizedlist>
    <listitem>
      如果你正在开发一个非常大的应用程序，你可能需要将它分到多个类中：
      每一个类作为一个模块。但是对于多数应用一个类就应该足够了。
    </listitem>
    <listitem>
      如果你在程序中使用多个类，那么从一个类的对象访问其他的类会是个问题。
      这种情况下，尝试使用分层的设计原则：其他类从一个父类继承出来。
      如果无法做到，就使用全局变量来代替（不推荐）。
    </listitem>
    <listitem>
      如果超过一个的类方法需要访问某个元件，则将该元件作为类属性。
      然而如果只有一个方法需要这个元件，则通过参数的方式传递。
    </listitem>
    <listitem>
      总是尝试使用元件类继承出你的类，并将其作为基础类使用。
      同时记得在构造函数中调用 <literal>parent::__construct();</literal> 语句。
      你可以通过关键字 <literal>this</literal> 访问这个元件。
    </listitem>
    <listitem>
      尽可能保持你的方法足够短。面向对象的要点是模块化。如果一个方法开始变得庞大，
      考虑拆分它。这个情况经常发生在当你使用使用构造函数本身来完成全部（复杂的）布局。
      按照创建布局的每一部分拆分到多个方法，并在构造函数调用这些方法来代替。
    </listitem>
   </itemizedlist>
  </para>
  <para>
    不要忘记浏览 <ulink url="http://pear.php.net/">PEAR</ulink> 中
    Gtk2_Components 的部分。其中所有的包都使用高度面向对象的代码来编写。
    阅读那些代码并效仿。一切都会美好！
  </para>
 </sect1>
 
</chapter> 
 
