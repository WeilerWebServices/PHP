/*
  +----------------------------------------------------------------------+
  | PHP Version 7                                                        |
  +----------------------------------------------------------------------+
  | Copyright (c) 2006-2020 The PHP Group                                |
  +----------------------------------------------------------------------+
  | This source file is subject to version 3.01 of the PHP license,      |
  | that is bundled with this package in the file LICENSE, and is        |
  | available through the world-wide-web at the following url:           |
  | http://www.php.net/license/3_01.txt                                  |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
*/
syntax = "proto2";

import "mysqlx.proto"; // comment_out_if PROTOBUF_LITE

// ifdef PROTOBUF_LITE: option optimize_for = LITE_RUNTIME;

// Messages to manage Sessions
//
// .. uml::
//
//   == session start ==
//   Client -> Server: AuthenticateStart
//   opt
//   Server --> Client: AuthenticateContinue
//   Client --> Server: AuthenticateContinue
//   end
//   alt
//   Server --> Client: AuthenticateOk
//   else
//   Server --> Client: Error
//   end
//   ...
//   == session reset ==
//   Client -> Server: Reset
//   Server --> Client: Ok
//   == session end ==
//   Client -> Server: Close
//   Server --> Client: Ok
//
package Mysqlx.Session;
option java_package = "com.mysql.cj.x.protobuf";

// the initial message send from the client to the server to start the
// authentication proccess
//
// :param mech_name: authentication mechanism name
// :param auth_data: authentication data
// :param initial_response: initial response
// :Returns: :protobuf:msg:`Mysqlx.Session::AuthenticateContinue`
message AuthenticateStart {
  required string mech_name = 1;
  optional bytes auth_data = 2;
  optional bytes initial_response = 3;

  option (client_message_id) = SESS_AUTHENTICATE_START; // comment_out_if PROTOBUF_LITE
}

// send by client or server after a :protobuf:msg:`Mysqlx.Session::AuthenticateStart` to
// exchange more auth data
//
// :param auth_data: authentication data
// :Returns: :protobuf:msg:`Mysqlx.Session::AuthenticateContinue`
message AuthenticateContinue {
  required bytes auth_data = 1;

  option (server_message_id) = SESS_AUTHENTICATE_CONTINUE; // comment_out_if PROTOBUF_LITE
  option (client_message_id) = SESS_AUTHENTICATE_CONTINUE; // comment_out_if PROTOBUF_LITE
}

// sent by the server after successful authentication
//
// :param auth_data: authentication data
message AuthenticateOk {
  optional bytes auth_data = 1;

  option (server_message_id) = SESS_AUTHENTICATE_OK; // comment_out_if PROTOBUF_LITE
}

// reset the current session
// param keep_open: if is true the session will be reset, but stays authenticated.
//       otherwise, the session will be closed and needs to be authenticated again.
//
// :Returns: :protobuf:msg:`Mysqlx::Ok`
message Reset {
  optional bool keep_open = 1 [ default = false ];

  option (client_message_id) = SESS_RESET; // comment_out_if PROTOBUF_LITE
}

// close the current session
//
// :Returns: :protobuf:msg:`Mysqlx::Ok`
message Close {
  option (client_message_id) = SESS_CLOSE; // comment_out_if PROTOBUF_LITE
}

