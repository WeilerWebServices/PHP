// vim:ft=javascript

// Note: see README for build details
// CAUTION! For all paths use only backslash '\\' instead of slash '/'

ARG_ENABLE("mysql-xdevapi",
	"MySQL XDevAPI support | Hybrid Native Client Driver",
	"no");

ARG_WITH("boost",
	"boost library install dir",
	"");

ARG_WITH("protobuf",
	"protobuf library install dir",
	"");

ARG_WITH("lz4",
	"lz4 library install dir",
	"");

ARG_WITH("zlib",
	"zlib library install dir",
	"");

ARG_WITH("zstd",
	"zstd library install dir",
	"");

ARG_ENABLE("dev-mode",
	"Enable developer mode",
	"no");

var Mysql_xdevapi_ext = {

configure : function() {

// ----------------------------------------------------------------------------
// consts

var Ext_label = "mysql-xdevapi";
var Ext_name = "mysql_xdevapi";


var Boost_version_header = "boost\\version.hpp";

var Minimal_boost_ver = 105300;
var Minimal_boost_ver_label = "1.53.00";

var Preferred_boost_ver_subdir = "boost_1_72_0";
var Preferred_boost_ver_label = "1.72.00";


var Sources_metadata_filename = "INFO_SRC";
var Binaries_metadata_filename = "INFO_BIN";

// ----------------------------------------------------------------------------
// sources

var mysqlx_devapi_sources = [
	"mysqlx_base_result.cc",
	"mysqlx_class_properties.cc",
	"mysqlx_client.cc",
	"mysqlx_collection.cc",
	"mysqlx_collection__add.cc",
	"mysqlx_collection__find.cc",
	"mysqlx_collection__modify.cc",
	"mysqlx_collection__remove.cc",
	"mysqlx_collection_index.cc",
	"mysqlx_column_result.cc",
	"mysqlx_crud_operation_bindable.cc",
	"mysqlx_crud_operation_limitable.cc",
	"mysqlx_crud_operation_skippable.cc",
	"mysqlx_crud_operation_sortable.cc",
	"mysqlx_database_object.cc",
	"mysqlx_doc_result.cc",
	"mysqlx_doc_result_iterator.cc",
	"mysqlx_exception.cc",
	"mysqlx_executable.cc",
	"mysqlx_execution_status.cc",
	"mysqlx_expression.cc",
	"mysqlx_object.cc",
	"mysqlx_result.cc",
	"mysqlx_result_iterator.cc",
	"mysqlx_row_result.cc",
	"mysqlx_row_result_iterator.cc",
	"mysqlx_schema.cc",
	"mysqlx_schema_object.cc",
	"mysqlx_session.cc",
	"mysqlx_sql_statement.cc",
	"mysqlx_sql_statement_result.cc",
	"mysqlx_sql_statement_result_iterator.cc",
	"mysqlx_table.cc",
	"mysqlx_table__delete.cc",
	"mysqlx_table__insert.cc",
	"mysqlx_table__select.cc",
	"mysqlx_table__update.cc",
	"mysqlx_warning.cc",
	"php_mysqlx.cc",
	"php_mysqlx_ex.cc",
];

var mysqlx_util = [
	"allocator.cc",
	"exceptions.cc",
	"hash_table.cc",
	"json_utils.cc",
	"object.cc",
	"pb_utils.cc",
	"string_utils.cc",
	"strings.cc",
	"url_utils.cc",
	"value.cc",
	"zend_utils.cc"
];

var xmysqlnd_sources = [
	"xmysqlnd_any2expr.cc",
	"xmysqlnd_collection.cc",
	"xmysqlnd_compression.cc",
	"xmysqlnd_compression_setup.cc",
	"xmysqlnd_compression_types.cc",
	"xmysqlnd_compressor.cc",
	"xmysqlnd_compressor_lz4.cc",
	"xmysqlnd_compressor_zlib.cc",
	"xmysqlnd_compressor_zstd.cc",
	"xmysqlnd_crud_collection_commands.cc",
	"xmysqlnd_crud_table_commands.cc",
	"xmysqlnd_driver.cc",
	"xmysqlnd_environment.cc",
	"xmysqlnd_extension_plugin.cc",
	"xmysqlnd_index_collection_commands.cc",
	"xmysqlnd_object_factory.cc",
	"xmysqlnd_protocol_dumper.cc",
	"xmysqlnd_protocol_frame_codec.cc",
	"xmysqlnd_rowset.cc",
	"xmysqlnd_rowset_buffered.cc",
	"xmysqlnd_rowset_fwd.cc",
	"xmysqlnd_schema.cc",
	"xmysqlnd_session.cc",
	"xmysqlnd_statistics.cc",
	"xmysqlnd_stmt.cc",
	"xmysqlnd_stmt_execution_state.cc",
	"xmysqlnd_stmt_result.cc",
	"xmysqlnd_stmt_result_meta.cc",
	"xmysqlnd_table.cc",
	"xmysqlnd_utils.cc",
	"xmysqlnd_warning_list.cc",
	"xmysqlnd_wireprotocol.cc",
	"xmysqlnd_wireprotocol_types.cc",
	"xmysqlnd_zval2any.cc"
];

var xmysqlnd_cdkbase_core = [
	"codec.cc"
];

var xmysqlnd_cdkbase_foundation = [
	"error.cc",
	"stream.cc"
];

var xmysqlnd_cdkbase_parser = [
	"expr_parser.cc",
	"json_parser.cc",
	"tokenizer.cc"
];

var xmysqlnd_crud_parsers = [
	"expression_parser.cc",
	"legacy_tokenizer.cc",
	"mysqlx_crud_parser.cc"
];

var xmysqlnd_protobuf_sources = [
	"mysqlx.pb.cc",
	"mysqlx_connection.pb.cc",
	"mysqlx_crud.pb.cc",
	"mysqlx_cursor.pb.cc",
	"mysqlx_datatypes.pb.cc",
	"mysqlx_expect.pb.cc",
	"mysqlx_expr.pb.cc",
	"mysqlx_notice.pb.cc",
	"mysqlx_prepare.pb.cc",
	"mysqlx_resultset.pb.cc",
	"mysqlx_session.pb.cc",
	"mysqlx_sql.pb.cc"
];

function escape_path(path) {
	if (path.indexOf(" ") == -1) return path;
	return '"' + path + '"';
}

function get_src_path(subpath, escape) {
	var src_dir = configure_module_dirname;
	if (subpath) src_dir += '\\' + subpath;
	return escape ? escape_path(src_dir) : src_dir;
}

function concatenate(items, decorator) {
	// Array.forEach is not supported by JScript or may be not supported
	// by older version, so concatenate with ordinary loop (not 'in' which
	// also may be not supported)
	var result = '';
	for (var i = 0; i < items.length; ++i) {
		var item = items[i];
		if (item) {
			result += decorator(item) + ' ';
		}
	}
	return result;
}

// ----------------------------------------------------------------------------
// vars

var environment = WshShell.Environment("Process");
var file_system = WScript.CreateObject("Scripting.FileSystemObject");

// ----------------------------------------------------------------------------
// utils

function print(text) {
	STDOUT.Write(text);
}

function println(text) {
	STDOUT.WriteLine(text);
}

function notice(message, treat_as_error) {
	if (treat_as_error) {
		ERROR(message);
	} else {
		WARNING(message);
	}
}

function exec_command(command, description) {
	println(description);
	println(command);

	var exec = WshShell.Exec(command);
	print(exec.StdOut.ReadAll());
	print(exec.StdErr.ReadAll());
	return exec.Status;
}

function run_command(command) {
	var exec = WshShell.Exec(command);
	print(exec.StdErr.ReadAll());
	return trim(exec.StdOut.ReadAll());
}

// ------

function get_env(env_var) {
	return environment.Item(env_var);
}

function get_env_path(env_var, subdir) {
	var env_path = get_env(env_var);
	if (!env_path) return null;
	return subdir ? env_path + '\\' + subdir : env_path;
}

// ------

function generate_lib_names(generic_libnames) {
	var libnames = [];
	for (var i = 0; i < generic_libnames.length; ++i) {
		var generic_libname = generic_libnames[i];
		var libname = generic_libname + '.lib';
		libnames.push(libname);

		if (PHP_DEBUG == "yes") {
			var libname_dbg = generic_libname + 'd.lib';
			libnames.push(libname_dbg);
		}
	}
	return libnames;
}

function resolve_default_paths(executable_name) {
	var executable_path = PATH_PROG(executable_name);
	if (!executable_path) return [];
	var executable_dir = file_system.GetParentFolderName(executable_path);
	return [
		executable_dir,
		file_system.GetParentFolderName(executable_dir)
	];
}

function path_exists(path) {
	return file_system.FolderExists(path) || file_system.FileExists(path);
}

function prepare_optional_path(base_dir, sub_dir) {
	if (!base_dir) return null;
	return base_dir + '\\' + sub_dir;
}

function extract_base_path(path_data) {
	return path_data ? path_data.base_path : null;
}

function extract_directory(path_data) {
	return path_data ? path_data.directory : null;
}

function extract_full_path(path_data) {
	return path_data ? path_data.full_path : null;
}

function search_path(base_paths, subpaths, names, label) {
	print("Searching for " + (label ? label : names) + " ... ");
	// add empty string to search also base directories, not only subdirs
	subpaths = [''].concat(subpaths);
	for (var i = 0; i < base_paths.length; ++i) {
		var base_path = base_paths[i];
		if (!base_path) continue;

		for (var j = 0; j < subpaths.length; ++j) {
			var subpath = subpaths[j];
			var directory = base_path + (subpath ? '\\' + subpath : '');

			for (var k = 0; k < names.length; ++k) {
				var name = names[k];
				var full_path = directory + '\\' + name;

				if (path_exists(full_path)) {
					println("found in " + full_path);
					return {
						base_path: base_path,
						subpath: subpath,
						directory: directory,
						name: name,
						full_path: full_path
					};
				}
			}
		}
	}
	println("not found");
	return null;
}

function search_directory(base_paths, subpaths, name) {
	var path_info = search_path(base_paths, subpaths, [name]);
	return extract_directory(path_info);
}

function search_full_path(base_paths, subpaths, name) {
	var path_info = search_path(base_paths, subpaths, [name]);
	return extract_full_path(path_info);
}

function search_lib_path(base_paths, libnames, label) {
	return search_path(base_paths, ['static', 'lib', 'dll'], libnames, label);
}

// ------

function check_lib(libname, path_to_check) {
	return CHECK_LIB(libname, Ext_name, path_to_check);
}

function check_lib_by_path(lib_path) {
	if (!lib_path) return false;
	return check_lib(lib_path.name, lib_path.directory);
}

// ------

function is_dev_mode() {
	return PHP_DEV_MODE == "yes";
}

function is_phpize_mode() {
	return MODE_PHPIZE;
}

function is_makefile_frag_supported() {
	return typeof PHP_MAKEFILE_FRAGMENTS !== typeof undefined;
}

// ----------------------------------------------------------------------------
// prerequisites

var extra_includes;
var extra_libs;

var boost_root;
var boost_version;

var protobuf_lib_path;
var protobuf_include_dir;
var protoc_path;

var lz4_lib_path;
var lz4_include_dir;
var lz4_enabled;

var zlib_lib_path;
var zlib_include_dir;
var zlib_enabled;

var zstd_lib_path;
var zstd_include_dir;
var zstd_enabled;

// ------

function resolve_extra_dirs(php_extra_dirs, php_extra_dirs_label) {
	if (!php_extra_dirs || !php_extra_dirs.length) return [];
	println(php_extra_dirs_label + ': ' + php_extra_dirs);
	return php_extra_dirs.split(';');
}

function resolve_extra_includes() {
	this.extra_includes = resolve_extra_dirs(PHP_EXTRA_INCLUDES, 'PHP_EXTRA_INCLUDES');
}

function resolve_extra_libs() {
	this.extra_libs = resolve_extra_dirs(PHP_EXTRA_LIBS, 'PHP_EXTRA_LIBS');
}

// ------

function hint_3rd_party_lib_env(option_name, env_var_name) {
	println('    consider use of ' + option_name + ' or setting ' + env_var_name);
}

// ------

function resolve_boost_root() {
	var dirs_to_search =
		[PHP_BOOST]
		.concat(this.extra_includes)
		.concat([
			get_env_path('WITH_BOOST', Preferred_boost_ver_subdir),
			get_env_path('MYSQL_XDEVAPI_BOOST_ROOT'),
			get_env_path('BOOST_ROOT'),
			get_env_path('BOOST_PATH')
		]);

	return search_directory(dirs_to_search, ["include"], Boost_version_header);
}

function resolve_boost_paths() {
	this.boost_root = resolve_boost_root();
	if (!this.boost_root) {
		hint_3rd_party_lib_env('--with-boost', 'MYSQL_XDEVAPI_BOOST_ROOT');
		ERROR("boost library not found");
	}
}

function resolve_boost_version() {
	// #define BOOST_VERSION 105300
	var Boost_regex = /\s*#define\s+BOOST_VERSION\s+(\d+)\s*/;
	if (GREP_HEADER(Boost_version_header, Boost_regex, this.boost_root)) {
		return RegExp.$1;
	} else {
		return 0;
	}
}

function validate_boost_version() {
	print("Validating boost version... ");
	var resolved_boost_version = resolve_boost_version();
	if (Minimal_boost_ver <= resolved_boost_version) {
		this.boost_version = resolved_boost_version;
		var success_msg = "ok (" + this.boost_version + ")";
		println(success_msg);
	} else {
		var error_msg
			= "boost version is too old, required at least " + Minimal_boost_ver_label
			+ " (preferred is " + Preferred_boost_ver_label + ")";
		ERROR(error_msg);
	}
}

// ------

function get_protobuf_lib_search_label() {
	return '[lib]protobuf' + (PHP_DEBUG == "yes" ? '[d]' : '') + '.lib';
}

function get_protobuf_lib_search_dirs(default_protobuf_paths) {
	var search_dirs =
		[PHP_PROTOBUF]
		.concat(this.extra_libs)
		.concat([
			get_env_path('MYSQL_XDEVAPI_PROTOBUF_ROOT'),
			get_env_path('PROTOBUF_ROOT'),
			get_env_path('PROTOBUF_PATH')])
		.concat(default_protobuf_paths);

	return search_dirs;
}

function get_protobuf_lib_names() {
	var generic_libnames = [
		'protobuf',
		'libprotobuf'
	];
	return generate_lib_names(generic_libnames);
}

function resolve_protobuf_lib_dir(default_protobuf_paths) {
	var dirs_to_search = get_protobuf_lib_search_dirs(default_protobuf_paths);
	var libnames = get_protobuf_lib_names();
	var label = get_protobuf_lib_search_label();
	return search_lib_path(dirs_to_search, libnames, label);
}

// ------

function resolve_protobuf_include_dir(default_protobuf_paths) {
	var dirs_to_search =
		[PHP_PROTOBUF]
		.concat(this.extra_includes)
		.concat([
			get_env_path('MYSQL_XDEVAPI_PROTOBUF_ROOT'),
			get_env_path('PROTOBUF_ROOT'),
			get_env_path('PROTOBUF_PATH')])
		.concat(default_protobuf_paths);

	return search_directory(dirs_to_search, ["include"], "google\\protobuf");
}

function resolve_protoc_path(default_protobuf_paths) {
	var dirs_to_search = [
			PHP_PROTOBUF,
			get_env_path('MYSQL_XDEVAPI_PROTOBUF_ROOT'),
			extract_base_path(this.protobuf_lib_path),
			prepare_optional_path(this.protobuf_include_dir, '..'),
			get_env_path('PROTOBUF_ROOT'),
			get_env_path('PROTOBUF_PATH')
		]
		.concat(default_protobuf_paths);

	return search_full_path(dirs_to_search, ["bin"], "protoc.exe");
}

function resolve_protobuf_paths() {
	var default_protobuf_paths = resolve_default_paths('protoc');
	this.protobuf_lib_path = resolve_protobuf_lib_dir(default_protobuf_paths);
	this.protobuf_include_dir = resolve_protobuf_include_dir(default_protobuf_paths);
	this.protoc_path = resolve_protoc_path(default_protobuf_paths);
	if (!this.protobuf_lib_path || !this.protobuf_include_dir || !this.protoc_path) {
		hint_3rd_party_lib_env('--with-protobuf', 'MYSQL_XDEVAPI_PROTOBUF_ROOT');
		ERROR("protobuf library not found");
	}
}

// ------------

function get_compressor_lib_search_label(compressor_name) {
	return '[lib]' + compressor_name + '[_static]' + (PHP_DEBUG == "yes" ? '[d]' : '') + '.lib';
}

function get_compressor_lib_search_dirs(custom_root, default_compressor_paths) {
	var search_dirs =
		[custom_root]
		.concat(this.extra_libs)
		.concat(default_compressor_paths);
	return search_dirs;
}

function resolve_compressor_lib_dir(compressor_name, custom_root, default_compressor_paths, generic_libnames) {
	var dirs_to_search = get_compressor_lib_search_dirs(custom_root, default_compressor_paths);
	var libnames = generate_lib_names(generic_libnames);
	var label = get_compressor_lib_search_label(compressor_name);
	return search_lib_path(dirs_to_search, libnames, label);
}

function resolve_compressor_include_dir(custom_root, default_compressor_paths, header_filename) {
	var dirs_to_search =
		[custom_root]
		.concat(this.extra_includes)
		.concat(default_compressor_paths);

	return search_directory(dirs_to_search, ['include'], header_filename);
}

function verify_compressor_lib(compressor_name, lib_path, include_dir) {
	if (!lib_path || !include_dir) {
		notice(compressor_name + " library not found", is_dev_mode());
		return false;
	}

	if (!check_lib_by_path(lib_path)) {
		notice("invalid " + compressor_name + " library", is_dev_mode());
		return false;
	}

	return true;
}

// ------

function resolve_compressor_lz4() {
	if (!PHP_LZ4) return;

	var compressor_name = 'lz4';
	var generic_libnames = [
		'liblz4_static',
		'lz4_static',
		'liblz4static',
		'lz4static',
		'liblz4',
		'lz4'
	];

	var default_compressor_paths = resolve_default_paths(compressor_name);
	this.lz4_lib_path = resolve_compressor_lib_dir(compressor_name, PHP_LZ4, default_compressor_paths, generic_libnames);
	this.lz4_include_dir = resolve_compressor_include_dir(PHP_LZ4, default_compressor_paths, "lz4.h");
	if (verify_compressor_lib(compressor_name, this.lz4_lib_path, this.lz4_include_dir)) {
		this.lz4_enabled = true;
	}
}

function resolve_compressor_zlib() {
	if (!PHP_ZLIB) return;

	var compressor_name = 'zlib';
	var generic_libnames = [
		'zlib_static',
		'libz_static',
		'zlibstatic',
		'libzstatic',
		'zlib',
		'libz'
	];

	var default_compressor_paths = resolve_default_paths(compressor_name);
	this.zlib_lib_path = resolve_compressor_lib_dir(compressor_name, PHP_ZLIB, default_compressor_paths, generic_libnames);
	this.zlib_include_dir = resolve_compressor_include_dir(PHP_ZLIB, default_compressor_paths, "zlib.h");
	if (verify_compressor_lib(compressor_name, this.zlib_lib_path, this.zlib_include_dir)) {
		this.zlib_enabled = true;
	}
}

function resolve_compressor_zstd() {
	if (!PHP_ZSTD) return;

	var compressor_name = 'zstd';
	var generic_libnames = [
		'libzstd_static',
		'zstd_static',
		'libzstdstatic',
		'zstdstatic',
		'libzstd',
		'zstd'
	];

	var default_compressor_paths = resolve_default_paths(compressor_name);
	this.zstd_lib_path = resolve_compressor_lib_dir(compressor_name, PHP_ZSTD, default_compressor_paths, generic_libnames);
	this.zstd_include_dir = resolve_compressor_include_dir(PHP_ZSTD, default_compressor_paths, "zstd.h");
	if (verify_compressor_lib(compressor_name, this.zstd_lib_path, this.zstd_include_dir)) {
		this.zstd_enabled = true;
	}
}

function resolve_compressors() {
	resolve_compressor_lz4();
	resolve_compressor_zlib();
	resolve_compressor_zstd();
}

// ------

function init_prerequisites() {
	resolve_extra_includes();
	resolve_extra_libs();
	resolve_boost_paths();
	validate_boost_version();
	resolve_protobuf_paths();
	resolve_compressors();
}

// ----------------------------------------------------------------------------
// requirements

function check_protobuf_lib_by_default_name() {
	var libnames = get_protobuf_lib_names();
	for (var i = 0; i < libnames.length; ++i) {
		if (check_lib(libnames[i])) {
			return true;
		}
	}
	return false;
}

function is_protobuf_available() {
	return check_lib_by_path(this.protobuf_lib_path)
		|| check_protobuf_lib_by_default_name();
}

function is_winsock_available() {
	return check_lib("ws2_32.lib");
}

function is_json_available() {
	return PHP_JSON != "no";
}

function verify_requirements() {
	return is_protobuf_available()
		&& is_winsock_available()
		&& is_json_available();
}

// ----------------------------------------------------------------------------
// protobufs

function protodef_full_path(protobuf_file) {
	var protobuf_dir = get_src_path('xmysqlnd\\proto_def');
	return escape_path(protobuf_dir + '\\' + protobuf_file);
}

function get_protodef_paths() {
	var mysqlx_proto_sources = [
		"mysqlx.proto",
		"mysqlx_connection.proto",
		"mysqlx_crud.proto",
		"mysqlx_cursor.proto",
		"mysqlx_datatypes.proto",
		"mysqlx_expect.proto",
		"mysqlx_expr.proto",
		"mysqlx_notice.proto",
		"mysqlx_prepare.proto",
		"mysqlx_resultset.proto",
		"mysqlx_session.proto",
		"mysqlx_sql.proto"
	];

	return concatenate(mysqlx_proto_sources, protodef_full_path);
}

function get_protoc_includes() {
	var protoc_includes = this.protobuf_include_dir;
	return protoc_includes ? '-I' + protoc_includes : null;
}

function generate_protobufs() {
	var protoc_path = this.protoc_path;

	var protoc_version_cmd = protoc_path + " --version";
	exec_command(protoc_version_cmd);

	var protobuf_generation_cmd = [
		protoc_path,
		get_protoc_includes(),
		'--proto_path', get_src_path('xmysqlnd\\proto_def', true),
		'--cpp_out', get_src_path('xmysqlnd\\proto_gen', true),
		get_protodef_paths()
	].join(' ');
	exec_command(protobuf_generation_cmd, "generate mysql_xdevapi protobufs");
}

function add_makefile_frag() {
	// set src dir depending on build mode: phpize vs static
	var sources_dir = is_phpize_mode() ? "$(PHP_SRC_DIR)" : "ext\\" + Ext_name;
	DEFINE("MYSQL_XDEVAPI_SRC_DIR", sources_dir);

	// config protobufs
	DEFINE("MYSQL_XDEVAPI_PROTOC", this.protoc_path);
	if (this.protobuf_include_dir) {
		DEFINE("MYSQL_XDEVAPI_PROTOBUF_INCLUDES", this.protobuf_include_dir);
	}

	ADD_MAKEFILE_FRAGMENT();
}

function process_protobufs() {
	if (is_makefile_frag_supported()) {
		add_makefile_frag();
	} else {
		generate_protobufs();
	}
}

// ----------------------------------------------------------------------------
// compiler options

function prepare_include(dir) {
	if (!dir) return null;
	return "/I " + escape_path(dir);
}

function optional_include(is_enabled, include_dir) {
	return is_enabled ? include_dir : null;
}

function get_includes() {
	var includes = [
		get_src_path(""),
		get_src_path("xmysqlnd\\cdkbase"),
		get_src_path("xmysqlnd\\cdkbase\\include"),
		get_src_path("xmysqlnd\\cdkbase\\extra\\rapidjson\\include"),
		this.protobuf_include_dir,
		this.boost_root,
		optional_include(this.lz4_enabled, this.lz4_include_dir),
		optional_include(this.zlib_enabled, this.zlib_include_dir),
		optional_include(this.zstd_enabled, this.zstd_include_dir)
	];

	return concatenate(includes, prepare_include);
}

function cfg_preprocessor_def(config_argument, preprocessor_def) {
	if (!config_argument || (config_argument == 'no')) return '';
	return '/D ' + preprocessor_def;
}

function get_preprocessor_definitions() {
	return [
		"/D ZEND_ENABLE_STATIC_TSRMLS_CACHE=1",
		"/D ZEND_WIN32_KEEP_INLINE",
		"/U ZEND_WIN32_FORCE_INLINE",
		cfg_preprocessor_def(PHP_DEV_MODE, "MYSQL_XDEVAPI_DEV_MODE"),
		cfg_preprocessor_def(this.lz4_enabled, "MYSQL_XDEVAPI_HAVE_LZ4"),
		cfg_preprocessor_def(this.zlib_enabled, "MYSQL_XDEVAPI_HAVE_ZLIB"),
		cfg_preprocessor_def(this.zstd_enabled, "MYSQL_XDEVAPI_HAVE_ZSTD"),
	].join(' ');
}

function get_treat_warnings_as_errors() {
	return is_dev_mode() ? "/WX" : ""; // treat warnings as errors
}

function get_compiler_options() {
	return [
		get_treat_warnings_as_errors(),
		"/EHsc", // enable exceptions
		"/std:c++17" // standard compliance
	].join(' ');
}

function prepare_cxx_flags() {
	return [
		get_includes(),
		get_preprocessor_definitions(),
		get_compiler_options()
	].join(' ');
}

function set_warnings_level(warnings_level) {
	var cflags = get_define("CFLAGS");
	var new_cflags = cflags.replace(/\s+\/W3\s+/g, ' ' + warnings_level + ' ');
	DEFINE("CFLAGS", new_cflags);
}

// ----------------------------------------------------------------------------
// php extension

function init_extension(base_sources) {
	EXTENSION(
		Ext_name,
		base_sources.join(' '),
		PHP_MYSQL_XDEVAPI_SHARED,
		prepare_cxx_flags());

//	set_warnings_level('/W4');
	set_warnings_level('/W3');

	AC_DEFINE('HAVE_MYSQL_XDEVAPI', 1, 'mysql-xdevapi support enabled');

	var build_mode = is_phpize_mode() ? "phpize/pecl" : "static";
	MESSAGE(Ext_label + " " + build_mode + " build mode");
}

function add_sources_cflags(subdir, cflags) {
	var prefix = "CFLAGS_BD_";
	var mangled_build_dir = subdir.replace("\\", "_").toUpperCase();
	var bd_cflags_symbol = prefix + mangled_build_dir;
	ADD_FLAG(bd_cflags_symbol, cflags);
}

function add_sources(subdir, sources, cflags) {
	ADD_SOURCES(get_src_path(subdir), sources.join(' '), Ext_name, subdir);
	if (cflags) add_sources_cflags(subdir, cflags);
}

function setup_sources() {
	add_sources("util", mysqlx_util);
	add_sources("xmysqlnd", xmysqlnd_sources);
	add_sources("xmysqlnd\\cdkbase\\core", xmysqlnd_cdkbase_core);
	add_sources("xmysqlnd\\cdkbase\\foundation", xmysqlnd_cdkbase_foundation);
	add_sources("xmysqlnd\\cdkbase\\parser", xmysqlnd_cdkbase_parser);
	add_sources("xmysqlnd\\crud_parsers", xmysqlnd_crud_parsers);
	add_sources("xmysqlnd\\proto_gen", xmysqlnd_protobuf_sources, "/wd4267");

	if (PHP_MYSQL_XDEVAPI_SHARED) {
		ADD_FLAG("CFLAGS_MYSQL_XDEVAPI", "/D PHP_MYSQL_XDEVAPI_EXPORTS");
	}
}

function add_dependency(dep_extension_name) {
	ADD_EXTENSION_DEP(Ext_name, dep_extension_name, false);
}

function setup_dependencies() {
	add_dependency('hash');
	add_dependency('json');
	add_dependency('mysqlnd');

	if (!is_phpize_mode() && (PHP_MYSQLND == "no")) {
		PHP_MYSQLND = "yes";
		MESSAGE(Ext_label + " depends on mysqlnd, it has been enabled");
	}
}

// ----------------------------------------------------------------------------
// expose metadata about source and binaries

var xdevapi_version;

function get_now_string() {
	var now = new Date();
	return now.toUTCString();
}

function get_compiler_name() {
	var compiler_name;
	if (typeof COMPILER_NAME !== typeof undefined) {
		compiler_name = COMPILER_NAME;
	} else {
		compiler_name = COMPILER_NAME_LONG;
	}
	return compiler_name + " " + COMPILER_NUMERIC_VERSION;
}

function grep_xdevapi_version() {
	var Version_regex = /#define\s+PHP_MYSQL_XDEVAPI_VERSION\s+"(\S+)"\s*/;
	if (GREP_HEADER('php_mysql_xdevapi.h', Version_regex, get_src_path())) {
		return RegExp.$1;
	} else {
		ERROR("cannot find xdevapi version");
	}
}

function is_git_available() {
	var git_path = PATH_PROG('git', get_env("PATH"));
	return git_path ? true : false;
}

function is_git_repo() {
	var is_repo_available_cmd = 'git rev-parse --is-inside-work-tree';
	var is_repo_available = run_command(is_repo_available_cmd);
	return is_repo_available;
}

function extract_branch_name_from_pb2_envar() {
	var branch_source_envar = get_env("BRANCH_SOURCE");
	if (!branch_source_envar) return null;

	// e.g. set BRANCH_SOURCE=http://pb2.address.com/subdir/repo.git wl-12276-expose-metadata
	var tokens = branch_source_envar.split(' ');
	return tokens.pop();
}

function write_metadata_from_env(env_var_name, label, metafile) {
	var envar = get_env(env_var_name);
	if (envar) metafile.WriteLine(label + envar);
}

function write_metadata_from_define(define_name, metafile) {
	var define_value = get_define(define_name);
	metafile.WriteLine(define_name + ": " + define_value);
}

function expose_sources_metadata() {
	var metafile_path = get_src_path(Sources_metadata_filename);
	var metafile = file_system.CreateTextFile(metafile_path, true);

	metafile.WriteLine("MySQL X DevAPI for PHP " + this.xdevapi_version);
	metafile.WriteLine("version: " + this.xdevapi_version);

	if (is_git_available() && is_git_repo()) {
		var branch_name_cmd = 'git symbolic-ref --short HEAD';
		var branch_name = run_command(branch_name_cmd);
		metafile.WriteLine("branch: " + branch_name);

		var commit_info_cmd = 'git log -1 --pretty=format:"commit: %H%ndate: %aD%nshort: %h"';
		var commit_info = run_command(commit_info_cmd);
		metafile.WriteLine(commit_info);
	} else {
		// internal use, below envars available only on pb2 hosts without git
		var branch_name = extract_branch_name_from_pb2_envar();
		if (branch_name) metafile.WriteLine("branch: " + branch_name);

		write_metadata_from_env("PUSH_REVISION", "commit: ", metafile);
	}

	metafile.Close();
}

function expose_binaries_metadata() {
	var metafile_path = get_src_path(Binaries_metadata_filename);
	var metafile = file_system.CreateTextFile(metafile_path, true);

	metafile.WriteLine("===== Information about the build process: =====");

	var hostname = WshShell.ExpandEnvironmentStrings( "%COMPUTERNAME%" );
	metafile.WriteLine("Build was run at " + get_now_string()
		+ " on host '" + hostname + "'");

	var os_info = trim(run_command('cmd /c ver'));
	metafile.WriteLine("Build was done on " + os_info);

	metafile.WriteBlankLines(1);

	metafile.WriteLine("build-date: " + get_now_string());
	metafile.WriteLine("os-info: " + os_info);
	var build_type = PHP_DEBUG == "yes" ? "Debug" : "Release";
	metafile.WriteLine("build-type: " + build_type);
	metafile.WriteLine("mysql-version: " + this.xdevapi_version);

	metafile.WriteBlankLines(1);

	metafile.WriteLine("===== Compiler / generator used: =====");

	metafile.WriteLine("toolset: " + PHP_TOOLSET);
	metafile.WriteLine("compiler: " + get_compiler_name());

	metafile.WriteBlankLines(1);

	metafile.WriteLine("===== Feature flags used: =====");
	metafile.WriteLine("php-version: " + PHP_VERSION_STRING);
	metafile.WriteLine("architecture: " + (X64 ? '64bit' : '32bit'));
	metafile.WriteLine("thread-safety: " + PHP_ZTS);
	metafile.WriteLine("debug: " + PHP_DEBUG);
	metafile.WriteLine("developer-mode: " + PHP_DEV_MODE);
	write_metadata_from_define("MYSQL_XDEVAPI_BOOST_ROOT", metafile);
	write_metadata_from_define("MYSQL_XDEVAPI_PROTOBUF_ROOT", metafile);
	metafile.WriteLine("extra-includes: " + PHP_EXTRA_INCLUDES);
	metafile.WriteLine("extra-libs: " + PHP_EXTRA_LIBS);

	metafile.WriteBlankLines(1);

	metafile.WriteLine("===== Compiler flags used: =====");
	write_metadata_from_define("BASE_INCLUDES", metafile);
	write_metadata_from_define("CFLAGS", metafile);
	write_metadata_from_define("CFLAGS_MYSQL_XDEVAPI", metafile);
	write_metadata_from_define("LDFLAGS", metafile);
	write_metadata_from_define("PHP_LDFLAGS", metafile);

	metafile.WriteBlankLines(1);

	metafile.WriteLine("===== Libraries: =====");

	metafile.WriteLine("--with-boost: " + PHP_BOOST);
	metafile.WriteLine("boost: " + this.boost_version);
	metafile.WriteLine("boost-root: " + this.boost_root);

	metafile.WriteBlankLines(1);

	metafile.WriteLine("--with-protobuf: " + PHP_PROTOBUF);
	var protobuf_version_cmd = this.protoc_path + ' --version';
	var protobuf_version = run_command(protobuf_version_cmd);
	metafile.WriteLine("protbuf: " + protobuf_version);
	metafile.WriteLine("protobuf-lib-path: " + extract_full_path(this.protobuf_lib_path));
	metafile.WriteLine("protobuf-include-dir: " + this.protobuf_include_dir);
	metafile.WriteLine("protoc-path: " + this.protoc_path);

	metafile.WriteBlankLines(1);

	metafile.WriteLine("--with-lz4: " + PHP_LZ4);
	metafile.WriteLine("lz4-lib-path: " + extract_full_path(this.lz4_lib_path));
	metafile.WriteLine("lz4-include-dir: " + this.lz4_include_dir);
	metafile.WriteLine("lz4-enabled: " + this.lz4_enabled);

	metafile.WriteBlankLines(1);

	metafile.WriteLine("--with-zlib: " + PHP_ZLIB);
	metafile.WriteLine("zlib-lib-path: " + extract_full_path(this.zlib_lib_path));
	metafile.WriteLine("zlib-include-dir: " + this.zlib_include_dir);
	metafile.WriteLine("zlib-enabled: " + this.zlib_enabled);

	metafile.WriteBlankLines(1);

	metafile.WriteLine("--with-zstd: " + PHP_ZSTD);
	metafile.WriteLine("zstd-lib-path: " + extract_full_path(this.zstd_lib_path));
	metafile.WriteLine("zstd-include-dir: " + this.zstd_include_dir);
	metafile.WriteLine("zstd-enabled: " + this.zstd_enabled);

	metafile.WriteLine("===== EOF =====");

	metafile.Close();
}

function expose_metadata() {
	this.xdevapi_version = grep_xdevapi_version();
	expose_sources_metadata();
	expose_binaries_metadata();
}

// ----------------------------------------------------------------------------
// setup

if (is_dev_mode()) {
	println("developer mode enabled");
}

init_prerequisites();

if (!verify_requirements()) {
	WARNING(Ext_label + " not enabled, necessary libraries not found or dependencies not enabled");
	PHP_MYSQL_XDEVAPI = "no";
	return;
}

process_protobufs();

init_extension(mysqlx_devapi_sources);
setup_sources();
setup_dependencies();

expose_metadata();

} // configure

} // Mysql_xdevapi_ext

if (PHP_MYSQL_XDEVAPI == "yes") {
	Mysql_xdevapi_ext.configure();
}
