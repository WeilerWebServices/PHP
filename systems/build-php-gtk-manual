#!/bin/sh

PATH=/usr/local/bin:$PATH

if [ $# != 6 ]; then
  echo usage: $0 phpdocdirectory destdirectory langcode workdirectory destdirectory2 archivepath
  exit 1
fi

PHPDOC=$1
DEST=$2
LANG=$3
DIR=$4
DEST2=$5
HISTORY=$6

echo -n ">>> starting build at: "
date

echo ">>> making work directory ... "
# copy php-gtk-doc sources to build dir:
#   -r   recursively
#   -t   preserve timestamps
#   -u   update (don't overwrite newer files)
rsync -rtu $PHPDOC/ $DIR/
cd $DIR || exit 1

echo ">>> running ./configure --with-lang=$LANG --with-history=$HISTORY ... "
./configure --with-lang=$LANG --with-history=$HISTORY || exit 1

echo ">>> running make html ... "
make html || exit 1

echo ">>> running make phpweb ... "
make phpweb || exit 1

echo ">>> running make mirror-files ... "
make mirror-files || exit 1

if test -f scripts/testclasses.xml; then
	echo ">>> running make updates ... "
	make updates || exit 1
fi

# copy generated HTML files to php-gtk-web/ destination
#   -l   preserve symlinks
#   -p   preserve permissions
#   -v   be verbose
echo ">>> copying HTML version ... "
rsync -rlpvC --delete --delete-after build/$LANG/html/ $DEST/html/ || exit 1

# copy generated PHP files to php-gtk-web/ destination
#   --delete         delete files that don't exist in the source dir
#   --delete-after   do deletes after transfer, not before
#   --exclude        exclude files from copying and deleting
echo ">>> copying PHP version ... "
(cd build/$LANG/php; rsync -rlpvC --delete --delete-after --exclude build.log --exclude html --exclude 'updates*.php' . $DEST) || exit 1

echo ">>> copying standalone versions ... "
rsync -rlpvC build/$LANG/*.gz build/$LANG/*.bz2 build/$LANG/*.zip $DEST2 || exit 1

if test -f testbuild/updates-$LANG.php; then
	# copy language-specific updates file to destination
    #   -a   archive mode (equivalent to -rlptgoD)	
	echo ">>> copying testbuild/updates-$LANG.php to $DEST/updates.php ... "
	rsync -au testbuild/updates-$LANG.php $DEST/updates.php || exit 1
fi

echo -n ">>> finished build at: "
date

echo -n ">>> running make clean ... "
make clean || exit 1

echo ">>> success!"
exit 0
