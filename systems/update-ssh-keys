#!/usr/bin/env php
<?php

function die1($msg)
{
    fwrite(STDERR, $msg . "\n");
    exit(1);
}

function run_system($cmd, $errmsg = "")
{
    system($cmd, $exit);

    if ($exit !== 0) {
        die1("failed: "
            . $errmsg
            . ' ('
            . $cmd
            . ')');
    }
}

/* Fetch SSH Keys from the master db and create username@sha1ofkey.pub
 * files and push them to the gitolite administration repository
 */
define('SSH_KEY_REPO', '/local/gitolite-admin/keydir');

mysql_connect('localhost', 'nobody')
    or die1 ('unable to connect to server');
mysql_select_db('phpmasterdb')
    or die1 ('unable to select database');

$query = 'SELECT DISTINCT username, ssh_keys FROM users';
$res   = mysql_query($query) or die1 ('cannot query ssh keys');

chdir(SSH_KEY_REPO)
    or die1 ('cannot change working directory');

run_system('git pull origin master', 'pull failed');

#TODO: remove all keys first in order to remove unused keys!

while($row = mysql_fetch_array($res, MYSQL_ASSOC)) {
    $username = $row['username'];
    $ssh_keys = get_ssh_keys($row['ssh_keys']);
    $mainfile = sprintf('%s.pub', $username);

    if ($globbed = glob($username . '@*.pub')) {
        foreach($globbed as $filename) {
            unlink ($filename);
        }
    }

    run_system('git add -u :/', 'cannot update git information');

    foreach($ssh_keys as $keyinfo) {
        $filename = sprintf('%s@%s.pub',
                $username,
                substr(sha1($keyinfo['key']), 0, 12));

        $fp = fopen($filename, 'w+');
        fwrite($fp, trim($keyinfo['key']) . "\n");
        fclose($fp);
        run_system('git add ' . $filename, 'cannot execute git');
    }
}

if (system('git status --porcelain -uno')) {
    run_system('git commit -m"Automatic update"', 'cannot commit');
    run_system('git push origin master', 'cannot push');
}

function get_ssh_keys($string) {
    $results = array();
    if (preg_match_all('@(ssh-(?:rsa|dsa|dss) ([^\s]+) ([^\s]*))@', $string, $matches, PREG_SET_ORDER)) {
        foreach ($matches as $match) {
            $results[] = array('key'  => $match[1],
                               'name' => $match[3]);
        }
    }

    return $results;
}
