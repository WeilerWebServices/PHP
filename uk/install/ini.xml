<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 331904 Maintainer: ktretyak Status: ready -->
<!-- $Revision$ -->
<chapter xml:id="configuration" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Конфігурація при запуску</title>
 
 <sect1 xml:id="configuration.file">
  <title>Файл конфігурації</title>
  
  <simpara>
   Файл конфігурації (&php.ini;) читається при запуску PHP. Для версії PHP,
   яка запускається як модуль, це відбувається тільки під час старту веб-сервера.
   Для випадку, коли PHP використовується як <acronym>CGI</acronym> або як
   <acronym>CLI</acronym>, це відбувається при кожному їх запуску.
  </simpara>
  <para>
   &php.ini; шукається в наступних місцерозташуваннях (за таким порядком):
   <itemizedlist>
    <listitem>
     <simpara>
      Спеціальне розташування модуля SAPI (визначається директивою
      <literal>PHPIniDir</literal> в Apache 2, параметром <literal>-c</literal>
      в командному рядку в CGI та CLI, параметром <literal>php_ini</literal>
      в NSAPI, змінною оточення <literal>PHP_INI_PATH</literal> в THTTPD)
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Змінна оточення <varname>PHPRC</varname>. Перед PHP 5.2.0,
      вона перевірялась після пошуку в ключі реєстра, що згадується нижче.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Починаючи з PHP 5.2.0, розташування файла <literal>php.ini</literal> можна
      вказувати для різних версій PHP. Ключі реєстра піддаються перевірці в
      такому порядку:
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y.z]</literal>,
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y]</literal> та
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x]</literal>, де
      x, y та z означають цифри версії PHP. Якщо значення для
      <literal>IniFilePath</literal> знаходиться в будь-якому з цих ключів, воно
      буде використовуватись як місцерозташування файла <literal>php.ini</literal>
      (Тільки у Windows).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP]</literal>, значення
      <literal>IniFilePath</literal> (Тільки у Windows).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Поточна робоча директорія (за виключенням CLI).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Директорія веб-сервера (для модуля SAPI), або директорія PHP
      (в противному разі - директорія Windows).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Директорія Windows (<filename class="directory">C:\windows</filename>
      або <filename class="directory">C:\winnt</filename>) (для Windows), або
      параметр <literal>--with-config-file-path</literal> під час компіляції.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Якщо <filename>php-SAPI.ini</filename> існує (де SAPI означає - SAPI, що
   використовується, наприклад, <filename>php-cli.ini</filename> або
   <filename>php-apache.ini</filename>), його буде використано замість &php.ini;.
   Назву SAPI можна знайти використовуючи функцію <function>php_sapi_name</function>.
  </para>
  <note>
   <para>
    Веб-сервер Apache змінює директорію на кореневу при старті, в результаті чого
    PHP читає файл &php.ini; з кореневої директорії, якщо він там існує.
   </para>
  </note>
  <para>
   Змінні оточення можна використовувати в &php.ini; як показано нижче.
  </para>
  <para>
   <example>
    <title>Використання Змінних Оточення в &php.ini;</title>
     <programlisting role="ini">
<![CDATA[
; PHP_MEMORY_LIMIT бере значення із оточення
memory_limit = ${PHP_MEMORY_LIMIT}
]]>
     </programlisting>
    </example>
  </para>
  <para>
   Директиви &php.ini;, що обробляються через розширення, мають опис на
   відповідних сторінках розширень. <link linkend="ini">Список директив
   ядра</link> знаходиться в додатку. Не всі PHP-директиви описані в цьому
   посібнику: повний їх список можна знайти в коментарях файла &php.ini; вашої
   версії PHP. Окрім цього, можна прочитати
   <link xlink:href="&url.php.git.phpini;">останню версію файла &php.ini;</link>
   зі сховища Git.
  </para>
  <para>
   <example>
    <title>Частина вмісту з файла &php.ini;</title>
    <programlisting role="ini">
<![CDATA[
; будь-який текст після символів крапки-з-комою (;) ігнорується
[php] ; маркери розділів (текст вередині квадратних дужок) також ігнорується
; Логічні значення можуть встановлюватись такими записами:
;    true, on, yes
; або false, off, no, none
register_globals = off
track_errors = yes

; рядок можна взяти в подвійні дужки
include_path = ".:/usr/local/lib/php"

; зворотні слеші сприймаються точно так як і інші символи
include_path = ".;c:\php\lib"
]]>
    </programlisting>
    <!-- TODO: add more details about values and expressions -->
   </example>
  </para>
  <para>
   Починаючи з PHP 5.1.0, є можливість посилатись на існуючі змінні .ini з
   середини файла .ini. Наприклад: <literal>open_basedir = ${open_basedir}
   ":/new/dir"</literal>.
  </para>
 </sect1>
 
 <sect1 xml:id="configuration.file.per-user">
  <title>.user.ini (додаткові конфіг-файли)</title>
  
  <simpara>
   Починаючи з версії 5.3.0, PHP має підтримку файлів INI-конфігурації на рівні
   директорії. Ці файли обробляються <emphasis>тільки</emphasis> через CGI/FastCGI
   SAPI. Ця функціональність замінює застаріле розширення PECL htscanner. Якщо у
   вас встановлено Apache, використовуйте файли &htaccess;, для досягнення
   такого ж ефекта.
  </simpara>
  
  <simpara>
   На додаток до головного файла &php.ini;, PHP шукає INI-файли в кожній
   директорії, стартуючи з директорії запрошеного PHP-файла, та продовжує пошук
   проходячи до поточної кореневої папки (назва якої міститься в змінній
   <varname>$_SERVER['DOCUMENT_ROOT']</varname>). У випадку коли PHP-файл
   знаходиться за межами кореневої папки, сканується лише його директорія.
  </simpara>
  <simpara>
   Стиль конфігурування через файли .user.ini матиме ефект тільки в режимі
    <constant>INI_PERDIR</constant> та <constant>INI_USER</constant>.
  </simpara>
  
  <simpara>
   Дві нові INI-директиви -
   <literal>user_ini.filename</literal> та
   <literal>user_ini.cache_ttl</literal>,
   <!--
       <link linkend="ini.user-ini.filename">user_ini.filename</link> and
       <link linkend="ini.user-ini.cache-ttl">user_ini.cache_ttl</link>
   -->
   контролюють використання користувальницьких INI-файлів.
  </simpara>
  
  <simpara>
   Директива <literal>user_ini.filename</literal> встановлює назву файла, яку PHP шукає в
   кожній директорії; якщо встановлено пустий рядок, то PHP не сканує нічого.
   Початково назва цього файла - <literal>.user.ini</literal>.
  </simpara>
  
  <simpara>
   Через директиву <literal>user_ini.cache_ttl</literal> контролюється частота
   перечитування INI-файла. Початково встановлено 300 секунд (5 хвилин).
  </simpara>
 </sect1>
 
 <sect1 xml:id="configuration.changes.modes">
  <title>Де можна встановлювати параметри конфігурації</title>
  
  <para>
   Наведені нижче режими визначають де і коли PHP-директиви можуть або ж не можуть
   встановлюватись, причому кожна директива в посібнику має відношення до одного з
   цих режимів. Наприклад, деякі налаштування можуть встановлюватись всередині
   PHP-скриптів використовуючи <function>ini_set</function>, в той час як інші
   необхідно встановлювати в &php.ini; чи &httpd.conf;.
  </para>
  
  <para>
   Наприклад, директива
   <link linkend="ini.output-buffering">output_buffering</link> відноситься до
   режиму <literal>INI_PERDIR</literal>, тому вона не може встановлюватись через
   <function>ini_set</function>. Однак, директива
   <link linkend="ini.display-errors">display_errors</link> відноситься до режиму
   <literal>INI_ALL</literal>, тому вона може встановлюватись будь-де,
   включаючи <function>ini_set</function>.
  </para>
  
  <para>
   <table>
    <title>Визначення режимів INI_*</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Режим</entry>
       <entry>Що означає</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>INI_USER</literal></entry>
       <entry>
        Значення може встановлюватись в скриптах користувача (напр. через
        <function>ini_set</function>) або у
        <link linkend="configuration.changes.windows">Windows-реєстрі</link>.
        Починаючи з PHP 5.3, значення можна встановлювати в &user-ini;
       </entry>
      </row>
      <row>
       <entry><literal>INI_PERDIR</literal></entry>
       <entry>
        Значення можна встановлювати в &php.ini;, &htaccess;, &httpd.conf; чи &user-ini;
        (починаючи з PHP 5.3)
       </entry>
      </row>
      <row>
       <entry><literal>INI_SYSTEM</literal></entry>
       <entry>Значення можна встановлювати в &php.ini; або &httpd.conf;</entry>
      </row>
      <row>
       <entry><literal>INI_ALL</literal></entry>
       <entry>Значення можна встановлювати будь-де</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </sect1>
 
 <sect1 xml:id="configuration.changes">
  <title>Як змінити параметри конфігурації</title>
  
  <sect2 xml:id="configuration.changes.apache">
   <title>Запуск PHP як модуля Apache</title>
   <simpara>
    Коли використовується PHP як модуль Apache, ви можете також змінити параметри
    конфігурації використовуючи директиви файлів конфігурації Apache (напр.
    &httpd.conf; та &htaccess;). Вам також потрібні
    "AllowOverride Options" або "AllowOverride All" привілеї, щоб зробити це.
   </simpara>
   
   <para>
    Існує кілька директив Apache, які дозволяють вам змінити PHP-конфігурацію
    через конфігураційні файли Apache. Щоб проглянути співставлення між
    цими директивами та режимами
    <constant>INI_ALL</constant>, <constant>INI_PERDIR</constant>,
    або <constant>INI_SYSTEM</constant>, прогляньте додаток
    <link linkend="ini.list">Список директив php.ini</link>.
   </para>
   
   <para>
    <variablelist>
     <varlistentry>
      <term>
       <systemitem role="directive">php_value</systemitem>
       <parameter>name</parameter>
       <parameter>value</parameter>
      </term>
      <listitem>
       <para>
        Встановлює значення вказаної директиви.
        Може використовуватись тільки з типами директив
        <constant>INI_ALL</constant> та <constant>INI_PERDIR</constant>.
        Щоб очистити попереднє значення, використовуйте <literal>none</literal>
        як значення.
       </para>
       <note>
        <simpara>
         Не використовуйте <systemitem role="directive">php_value</systemitem>
         для встановлення логічного (boolean) значення. Замість цього використовуйте
         <systemitem role="directive">php_flag</systemitem> (див. нижче).
        </simpara>
       </note>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <systemitem role="directive">php_flag</systemitem>
       <parameter>name</parameter>
       <parameter>on|off</parameter>
      </term>
      <listitem>
       <para>
        Використовується для встановлення логічного значення для директив.
        Може використовуватись тільки з типами директив
        <constant>INI_ALL</constant> та <constant>INI_PERDIR</constant>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <systemitem role="directive">php_admin_value</systemitem>
       <parameter>name</parameter>
       <parameter>value</parameter>
      </term>
      <listitem>
       <para>
        Встановлює значення вказаної директиви. Її <emphasis>не можна
        використовувати</emphasis> в файлах &htaccess;. Будь-який тип директив
        встановлений з <systemitem role="directive">php_admin_value</systemitem>
        не може бути перезаписаний через &htaccess; або <function>ini_set</function>.
        Щоб очистити попереднє значення, використовуйте <literal>none</literal>
        як значення.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <systemitem role="directive">php_admin_flag</systemitem>
       <parameter>name</parameter>
       <parameter>on|off</parameter>
      </term>
      <listitem>
       <para>
        Використовується для встановлення логічного значення для директив.
        Її <emphasis>не можна використовувати</emphasis> в файлах &htaccess;.
        Будь-який тип директив встановлений з
        <systemitem role="directive">php_admin_flag</systemitem>
        не може бути перезаписаний через &htaccess; або <function>ini_set</function>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
   <para>
    <example>
     <title>Конфігурація Apache</title>
     <programlisting role="ini">
<![CDATA[
<IfModule mod_php5.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag engine on
</IfModule>
<IfModule mod_php4.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag engine on
</IfModule>
]]>
     </programlisting>
    </example>
   </para>
   <caution>
    <para>
     PHP константи не можуть існувати за межами PHP. Наприклад, в &httpd.conf;
     ви не можете використовувати PHP-константи такі як <constant>E_ALL</constant>
     чи <constant>E_NOTICE</constant> для встановлення директиви
     <link linkend="ini.error-reporting">error_reporting</link>, оскільки вони
     не матимуть сенсу та будуть прирівнюватись до <emphasis>0</emphasis>.
     Використовуйте замість цього відповідні значення bitmask (бітової маски).
     Ці константи можна використовувати в &php.ini;
    </para>
   </caution>
  </sect2>
  
  <sect2 xml:id="configuration.changes.windows">
   <title>Зміна PHP-конфігурації через Windows-реєстри</title>
   <simpara>
    Коли PHP запущено на Windows, значення конфігурації можна змінювати на рівні
    директорії за допомогою реєстрів Windows. Значення конфігурації зберігаються
    в ключі реєстра <literal>HKLM\SOFTWARE\PHP\Per Directory Values</literal>,
    в суб-ключах відповідних до шляху назви. Наприклад, значення конфігурації
    для директорії <literal>c:\inetpub\wwwroot</literal> буде зберігатись в ключі
    <literal>HKLM\SOFTWARE\PHP\Per Directory Values\c\inetpub\wwwroot</literal>.
    Налаштування для директорії будуть активними для будь-якого скрипта, що
    запущено з цієї директорії або її субдиректорії. Значення ключа повинно мати
    назву директиви PHP-конфігурації та мати рядковий тип (string). Константи PHP
    в середині ключів реєстра не парсяться. Хоча, тільки значення конфігурації,
    що змінюються в <constant>INI_USER</constant>, можуть бути встановленими
    таким чином, тоді як значеня для <constant>INI_PERDIR</constant> - не можуть.
   </simpara>
  </sect2>
  
  <sect2 xml:id="configuration.changes.other">
   <title>Інші інтерфейси для PHP</title>
   <para>
    Не зважаючи на те як запущено PHP, ви можете змінити конкретне значення
    директиви під час виконання вашого скрипта через функцію
    <function>ini_set</function>. Детальнішу інформацію можна прочитати на
    сторінці <function>ini_set</function>.
   </para>
   <para>
    Якщо ви хочете побачити повний список та значення параметрів конфігурації у
    вашій системі, можна ознайомитись з виводом функції
    <function>phpinfo</function>. Також можна отримати значення конкретної
    директиви під час виконання за допомогою функції
    <function>ini_get</function> або
    <function>get_cfg_var</function>.
   </para>
  </sect2>
 </sect1>
 
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
