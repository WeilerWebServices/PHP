<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 335484 Maintainer: ktretyak Status: ready -->
<!-- $Revision$ -->

 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info><title>Простий підручник</title></info>

  <para>
   В цьому короткому та простому підручнику ми б хотіли показати самі основи
   PHP. В даному матеріалі описуються лише створення динамічних сторінок з
   PHP, хоча PHP придатна не тільки для створення веб-сторінок. Прогляньте
   розділ, з назвою <link linkend="intro-whatcando">Що може PHP</link> для
   детальнішої інформації.
  </para>
  <para>
   Веб-сторінки, створені за допомогою PHP, обробляються як звичайні HTML
   сторінки. Створювати та редагувати їх можна в той же спосіб,
   що і звичайні HTML сторінки.
  </para>

  <section xml:id="tutorial.requirements">
   <info><title>Що мені потрібно?</title></info>
   <para>
    Ми припускаємо, що на вашому веб-сервері активовано
    підтримку PHP, та всі файли, із закінченням <filename>.php</filename>,
    обробляються через PHP. На більшості серверів, дане розширення початково
    обробляється через PHP, але краще уточнити це у вашого веб-адміністратора.
    Якщо ваш сервер підтримує PHP, то ви маєте все необхідне. Просто створюйте
    файли із закінченням <filename>.php</filename>, кладіть їх у
    веб-директорію, і сервер оброблятиме їх автоматично. Немає потреби будь-що
    компілювати чи встановлювати додаткові інструменти. Вважайте файли PHP
    простими файлами HTML, з набором нових магічних тегів, що дозволяють вам
    робити купу різних речей.
   </para>
   <para>
    Мабуть ви захочете заощадити дорогоцінну пропускну здатність та вести розробку
    в себе на домашньому комп'ютері. В цьому випадку, вам потрібно встановити веб
    сервер, такий як <link xlink:href="&url.apache;">Apache</link>, та, звичайно ж,
    <link xlink:href="&url.php.downloads;">PHP</link>. Скоріш за все, ви також
    захочете встановити базу даних, наприклад, таку як
    <link xlink:href="&url.mysql.docs;">MySQL</link>.
   </para>
   <para>
    Ви можете їх встановлювати всі окремо або ж обрати простіший варіант.
    Наш посібник має <link linkend="install">інструкції встановлення для
    PHP</link> (припускаючи, що ви вже маєте робочий веб-сервер). Якщо ви маєте
    проблеми з встановленням PHP, ми пропонуємо поставити ваші запитання
    через <link xlink:href="&url.php.mailing-lists;">список розсилки, стосовно
    інсталяції</link>. Якщо ж ви вирішете обрати більш простіший спосіб, можете
    <link xlink:href="&url.installkits;">знайти готовий пакет</link>
    для вашої операційної системи, що автоматично встановлює все вищезазначене
    кількома кліками миші. Встановлювати веб-сервер з підтримкою PHP
    досить просто на будь-якій Операційній Системі, включаючи MacOSX, Linux та
    Windows. На Linux вам, можливо, згодяться <link xlink:href="&url.rpmfind;">rpmfind</link>
    та <link xlink:href="&url.rpmfind.pbone;">PBone</link> при пошуку RPMs-пакетів.
    Можно також використовувати <link
     xlink:href="&url.apt-get;">apt-get</link> для пошуку пакетів під Debian.
   </para>
  </section>

  <section xml:id="tutorial.firstpage">
   <info><title>Перша сторінка на PHP</title></info>
   <para>
    Створіть файл з ім'ям <filename>hello.php</filename> в кореневій директорії
    вашого веб-сервера (<varname>DOCUMENT_ROOT</varname>) 
    та додайте в нього такий вміст:
   </para>
   <para>
    <example>
     <info><title>Перший скрипт на PHP: <filename>hello.php</filename></title></info>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>Тестуємо PHP</title>
 </head>
 <body>
 <?php echo '<p>Привіт, Світ</p>'; ?> 
 </body>
</html>
]]>
     </programlisting>
     <simpara>
      Щоб отримати доступ до цього файла, використовуйте браузер - в адресному
      рядку введіть назву вашого веб-сервера та допишіть
      <literal>/hello.php</literal>. Якщо ви розробляєте скрипти локально (на
      своєму домашньому комп'ютері) введена адреса
      повинна мати приблизно такий вигляд <literal>http://localhost/hello.php</literal>
      чи <literal>http://127.0.0.1/hello.php</literal>, але це залежить від
      конфігурації вашого веб-сервера. Якщо все встановлено коректно, ваш файл
      повинен оброблятись через PHP та видаватись наступний вміст для браузера:
     </simpara>
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>Тестуємо PHP</title>
 </head>
 <body>
 <p>Привіт, Світ</p>
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>
    Цей код надзвичайно простий, а тому вам навіть не потрібно використовувати
    PHP, щоб створити таку сторінку. Все що робить PHP - це виводить:
    <literal>Привіт, Світ</literal> через вираз <function>echo</function>.
    Зауважте, що файл <emphasis>не зобов'язаний бути виконавчим</emphasis>
    або ще якось відрізнятись. Сервер визначив, що цей файл повинен оброблятись
    через PHP, оскільки він має закінчення ".php", про яке в налаштуваннях
    веб-сервера сказано, що його повинна обробляти саме PHP. Сприймайте його як
    нормальний файл HTML, що має набір спеціальних тегів, завдяки яким можна
    робити купу цікавих речей.
   </para>
   <para>
    Якщо цей приклад нічого не виводить, чи видається вікно для завантаження,
    або ж весь файл показується в текстовому вигляді, швидше за все, що
    на вашому сервері не активовано підтримку PHP, або його конфігурація не
    правильна. Попросіть адміністратора підключити PHP, використовуючи розділ
    <link linkend="install">Встановлення</link> даного посібника. Якщо
    ж ви розробляєте скрипти PHP дома (локально), вам також рекомендується
    прочитати цей розділ, щоб пересвідчитись, що ви все налаштували правильно.
    Преконайтесь також, що ви запитуєте доступ до файла через протокол http.
    Тобто, коли ви просто відкриєте файл через файлову систему, він не буде
    оброблятись PHP. Якщо проблеми все ж залишаються,
    не соромтесь попросити допомоги вибравши один з
    <link xlink:href="&url.php.support;">багатьох доступних способів</link>.
   </para>
   <para>
    Мета приклада - показати формат спеціальних тегів PHP.
    Тут ми використали <literal>&lt;?php</literal> в якості відкриваючого
    тега. Потім йдуть PHP команди, і на завершення PHP режима, ми
    додали закриваючий тег <literal>?&gt;</literal>. Таким чином ви можете в
    будь-якому місці входити і виходити з PHP режима всередині файла HTML. Детальніше
    про це читайте в розділі <link linkend="language.basic-syntax">
    базовий синтаксис PHP</link>.
   </para>
  
   <note>
    <info><title>Про Переведення Рядка</title></info>
    <para>
     Переведення рядків в HTML має мало значення, все ж, краще писати більш чистий та
     читабельний код HTML завдяки переведенню рядків. PHP буде видаляти переведення рядків,
     що йдуть зразу після закриваючого тега <literal>?&gt;</literal>. Це може бути
     надзвичайно корисним, коли ви вкладаєте багато блоків PHP чи підключаєте файли,
     що містять код PHP, який нічого не виводить. В той же час, це інколи буває
     трохи заплутаним. Ви можете додавати пробіли після закриття
     <literal>?&gt;</literal> щоб змусити виводити пробіли з переведенням рядка,
     або можете явно виводити переведення рядка всередині блока PHP через
     виклик echo чи print в останній команді.
    </para> 
   </note> 

   <note>
    <info><title>що до Текстових Редакторів</title></info>
    <para>
     Є багато текстових редакторів та Інтегрованих Середовищ Розробки (англ. - IDE),
     які можна використовувати для створення, редагування та упорядкування файлів PHP.
     Прогляньте <link xlink:href="&url.phpeditorlist;">Список деяких Редакторів PHP</link>.
     Якщо ви хочете порекомендувати редактор, будь-ласка, відвідайте дану сторінку
     та попросіть додати редактор до списку. Корисно мати редактор з підсвідкою
     синтаксиса.
    </para>
   </note>
   
   <note>
    <info><title>що до Текстових Процесорів</title></info>
    <para>
     Текстові процесори, такі як StarOffice Writer, Microsoft Word та Abiword
     не є оптимальними редакторами для PHP файлів. Якщо все ж вирішите
     використовувати один з них для тестових скриптів, то переконайтесь,
     що ви зберігаєте файл як <emphasis>простий текст</emphasis> (plain text)
     інакше PHP не зможе прочитати та виконати цей скрипт.
    </para>
   </note>
   
   <note>
    <info><title>що до Блокноту Windows</title></info>
    <para>
     Якщо ви пишете PHP скрипти використовуючи Блокнот Windows, переконайтесь,
     що ваші файли зберігаються з розширенням <filename>.php</filename>.
     (Блокнот автоматично додає розширення <filename>.txt</filename>, якщо
     не вжити заходів, описаних нижче.) Коли зберігаєте файл та вам пропонується
     надати назву для файла, візміть назву файла в лапки
     (наприклад "<filename>hello.php</filename>"). Окрім цього, в діалоговому
     вікні при збереженні файла, можна клікнути на спадаюче меню 'Текстові Документи'
     та змінити його на 'Всі Файли'. Після цього можна вводити назву файла
     без лапок.
    </para>
   </note>
  
   <para>
    Тепер, коли ви створили робочий PHP скрипт, прийшов час для створення
    самого знаменитого PHP скрипта! Зробіть виклик функції
    <function>phpinfo</function> і ви побачите багато корисної інформації про
    вашу систему та налаштування, такі як доступні
    <link linkend="language.variables.predefined">предвизначені змінні</link>, 
    завантажені PHP модулі, та параметри <link linkend="configuration">конфігурації</link>.
    Приділіть деякий час щоб проглянути цю важливу інформацію.
   </para>
   <para>
    <example>
     <info><title>Отримання системної інформації від PHP</title></info>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section xml:id="tutorial.useful">
   <info><title>Дещо Корисне</title></info>
   <para>
    Давайте тепер зробимо щось корисне. Ми збираємось перевірити який саме
    браузер використовує відвідувач. Для цього ми перевіримо рядок, який
    відправляє браузер як частину HTTP запита. Ця інформація зберігається в <link
    linkend="language.variables">змінній</link>. В PHP змінні завжди починаються
    зі знака долара. Зараз нам цікава змінна
    <varname>$_SERVER['HTTP_USER_AGENT']</varname>.
   </para>
   <note>
    <para>
     <varname>$_SERVER</varname> - це спеціальна зарезервована змінна PHP, що
     містить всю інформацію отриману від веб-сервера. Її також називають суперглобальною.
     Детальніша інформація знаходиться на сторінці
     <link linkend="language.variables.superglobals">суперглобальні змінні</link>.
     Ці спеціальні змінні з'явились в PHP починаючи з версії
     <link xlink:href="&url.php.release4.1.0;">4.1.0</link>. Раніше, з цією метою
     ми використовували масиви <varname>$HTTP_*_VARS</varname>,
     такі як <varname>$HTTP_SERVER_VARS</varname>. Не дивлячись на те, що ці
     масиви вже застарілі, вони до цих пір існують. (Прогляньте також зауваження
     стосовно <link linkend="tutorial.oldcode">старого коду</link>.)
    </para>
   </note>
   <para>
    Давайте подивимось на значення цієї змінної:
   </para>
   <para>
    <example>
     <info><title>Друк змінної (елемент масива)</title></info>
    <programlisting role="php">
<![CDATA[
<?php
echo $_SERVER['HTTP_USER_AGENT'];
?>
]]>
    </programlisting>
    <para>
     Скрипт надрукує приблизно таке:
    </para>
    <screen role="html">
Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko
    </screen>
   </example>
   </para>
   <para>
    В PHP існує багато <link linkend="language.types">типів</link> змінних.
    В попередньому прикладі ми друкували елемент
    <link linkend="language.types.array">Масива</link> (Array).
    Масиви можуть бути дуже корисними.
   </para>
   <para>
    <varname>$_SERVER</varname> є однією зі змінних, яку PHP автоматично
    створює для вас. Довший список таких змінних можна проглянути в розділі
    <link linkend="reserved.variables">Зарезервовані Змінні</link>, або 
    ж ви можете роздрукувати весь їх список викликавши функцію
    <function>phpinfo</function>, яку ми вже використовували в попередньому розділі.
   </para>
   <para>
    Можна вкладати декілька рядків коду всередині тегів PHP та створювати
    невеликі блоки коду, що можуть робити більше, ніж простий виклик echo.
    Наприклад, якщо ви хочете створити перевірку для Internet Explorer,
    це можна зробити так:
   </para>
   <para>
    <example>
     <info><title>Використання <link linkend="language.control-structures">
     контролюючих структур</link> та <link linkend="language.functions">функцій</link></title></info>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'Trident') !== FALSE) {
    echo 'Ви використовуєте Internet Explorer.<br />';
}
?>
]]>
     </programlisting>
     <para>
      Видача цього скрипта може бути такою:
     </para>
     <screen role="html">
<![CDATA[
Ви використовуєте Internet Explorer.<br />
]]>
     </screen>
    </example>
   </para>
   <para>
    Тут використовується кілька нових понять. По-перше, це вираз
    <link linkend="control-structures.if">if</link>.
    Якщо ви знайомі з базовим синтаксисом, що використовується в мові C,
    то цей вираз буде для вас теж знайомим. В іншому випадку, вам ймовірно
    слід підібрати книгу по PHP для початківців та прочитати перші кілька
    розділів, або прочитати главу <link linkend="langref">Довідник
    для PHP</link> даного посібника.
   </para>
   <para>
    Друге поняття, яке ми ввели - це виклик функції <function>strpos</function>.
    Дана функція вбудована в PHP, вона шукає підрядок
    (частину рядка) в наданому рядку. В даному випадку ми шукаємо підрядок
    <literal>'Trident'</literal> всередині значення змінної
    <varname>$_SERVER['HTTP_USER_AGENT']</varname>. І якщо підрядок буде знайдено,
    то функція поверне його положення відносно початку рядка. В противному
    разі, вона поверне &false; (хибний). Якщо ж вона не повертає &false;, вираз <link
    linkend="control-structures.if">if</link> буде оцінено як &true; (дійсний), та
    виконається код всередині {фігурних дужок}. В противному разі, код запускатись
    не буде. Спробуйте створити аналогічні приклади,
    використовуючи <link linkend="control-structures.if">if</link>, 
    <link linkend="control-structures.else">else</link>, та інші функції такі
    як <function>strtoupper</function> та 
    <function>strlen</function>. В даному посібнику є ще багато прикладів, майже
    по кожній функції. Якщо ви не впевнені як використовувати функції, то можна
    прочитати сторінки <link linkend="about.prototypes">як читати визначення
    функцій</link> та розділ про
    <link linkend="language.functions">функції PHP</link>.
   </para>
   <para>
    Ми можемо підти ще далі та показати як можна входити і виходити з режиму
    PHP навіть всередині виразу PHP:
   </para>
   <para>
    <example>
     <info><title>Змішаний код HTML та PHP</title></info>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'Trident') !== FALSE) {
?>
<h3>strpos() повернула не false</h3>
<p>Ви використовуєте Internet Explorer</p>
<?php
} else {
?>
<h3>strpos() повертає false</h3>
<p>Ви не використовуєте Internet Explorer</p>
<?php
}
?>
]]>
     </programlisting>
     <para>
      Приклад видачі скрипта:
     </para>
     <screen role="html">
<![CDATA[
<h3>strpos() повернула не false</h3>
<p>Ви використовуєте Internet Explorer</p>
]]>
     </screen>
    </example>
   </para>
   <para>
    Замість того, щоб використовувати в PHP вираз echo для виведення чогось, ми
    вийшли з режиму PHP та безпосередньо відправляємо код HTML. Тут дуже важливо
    відзначити, що таким чином не змінюється логічна структура скрипта. В кінцевому
    підсумку лише один з блоків HTML буде відправлено в браузер, в залежності від
    результата поверненого функцією <function>strpos</function>. Іншими словами,
    це залежить від того, чи буде знайдено рядок <literal>Trident</literal>, чи ні.
   </para>
  </section>
   
  <section xml:id="tutorial.forms">
   <info><title>Робота з формами</title></info>
   <para>
    Одна з самих потужних особливостей PHP - це її спосіб обробки HTML
    форм. Важливо знати, що будь-який елемент форми автоматично стає доступним
    для скрипта PHP. Детальнішу інформацію та приклади використання форм в PHP,
    можна прочитати в розділі
    <link linkend="language.variables.external">Змінні, отримані із зовнішніх джерел
    </link>. Тут ми продемонструємо приклади HTML форм:
   </para>
   <para>
    <example>
     <info><title>Проста HTML форма</title></info>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="post">
 <p>Ваше ім'я: <input type="text" name="name" /></p>
 <p>Ваш вік: <input type="text" name="age" /></p>
 <p><input type="submit" /></p>
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    В цій формі немає нічого особливого. Це звичайна HTML форма без будь-яких
    спеціальних тегів. Коли користувач заповнить цю форму і натисне кнопку
    відправки, буде викликано сторінку <filename>action.php</filename>.
    В цьому файлі можна написати щось таке:
   </para>
   <para>
    <example>
     <info><title>Друк даних з нашої форми</title></info>
     <programlisting role="php">
<![CDATA[
Привіт, <?php echo htmlspecialchars($_POST['name']); ?>.
Вам <?php echo (int)$_POST['age']; ?> років.
]]>
     </programlisting>
     <para>
      Зразок видачі цього скрипта:
     </para>
     <screen role="html">
<![CDATA[
Привіт, Костя. Вам 34 роки.
]]>
     </screen>
    </example>
   </para>
   <para>
    Записи в цьому скрипті, окрім <function>htmlspecialchars</function> та
    <literal>(int)</literal>, мають бути зрозумілими.
    Функція <function>htmlspecialchars</function> гарантує, що будь-який введений
    символ, який є спеціальним в HTML, правильно кодується, щоб ніхто не зміг
    ввести теги HTML чи Javascript на вашій сторінці. Оскільки ми знаємо, що
    поле age має бути числовим, ми просто
    <link linkend="language.types.typecasting">конвертуємо</link>
    його значення до <type>integer</type> (цілого), і таким чином позбуваємось
    від будь-яких сторонніх символів. PHP може це робити автоматично, якщо встановити
    розширення <link linkend="ref.filter">filter</link>.
    Змінні <varname>$_POST['name']</varname> та <varname>$_POST['age']</varname>
    автоматично встановлюються через PHP. Раніше ми використовували суперглобальну
    змінну <varname>$_SERVER</varname>; вище ми ввели просто ще одну суперглобальну
    змінну <varname>$_POST</varname>, котра містить всі POST-дані (відправлені
    дані). Зауважте, що <emphasis>method</emphasis> нашої форми вказано
    як POST. Якщо ми використовуємо метод <emphasis>GET</emphasis>, то дані форми
    будуть знаходитись в іншій суперглобальній змінній - в <varname>$_GET</varname>.
    Можна ще використовувати суперглобальну змінну <varname>$_REQUEST</varname>,
    якщо ви не впевнені яким методом відправлено вам дані. Ця змінна містить 
    об'єднані дані від методів GET, POST та COOKIE.
   </para>
   <para>
    В PHP також можна працювати з XForms, але, через деякий час, ви виявите, що
    зі звичайними HTML формами працюється комфортніше. З іншої сторони, хоча
    робота з XForms не для початківців, вони також можуть вас зацікавити. В
    наших наступних розділах є <link linkend="features.xforms">коротке
    ознайомлення для обробки даних, отриманих з XForms</link>. 
   </para>
  </section>

  <section xml:id="tutorial.oldcode">
   <info><title>Використання старих скриптів з новими версіями PHP</title></info>
   <para>
    Тепер, коли PHP виросла і є популярною скриптовою мовою, є дуже багато
    відкритих сховищ (репозиторіїв) та бібліотек, що містять код, доступний
    для використання всіма бажаючими. PHP розробники намагаються в значній мірі
    зберігати зворотну сумісність так, щоб скрипти написані для старих версій,
    також працювали (в ідеалі) без змін і в нових версіях PHP. На практиці,
    зазвичай деякі зміни все ж потрібні.
   </para>
   <para>
    Дві останні найбільш важливі зміни, які можуть вплинути на старий код:
    <itemizedlist>
     <listitem>
      <simpara>
       Застарівші масиви <varname>$HTTP_*_VARS</varname> вже стали недоступними
       починаючи з PHP 5.4.0. Наступні
       <link linkend="language.variables.superglobals">суперглобальні масиви</link>
       були введені в PHP <link xlink:href="&url.php.release4.1.0;">4.1.0</link>. 
       Це: <varname>$_GET</varname>, <varname>$_POST</varname>, 
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>, 
       <varname>$_FILES</varname>, <varname>$_ENV</varname>,
       <varname>$_REQUEST</varname>, та <varname>$_SESSION</varname>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Зовнішні змінні вже не реєструються в глобальній області початково.
       Іншими словами, починаючи з PHP
       <link xlink:href="&url.php.release4.2.0;">4.2.0</link> в файлі &php.ini;
       директива <link linkend="ini.register-globals">register_globals</link>
       початково має значення <emphasis>off</emphasis> (відключена).
       Рекомендований метод доступа до цих змінних - через суперглобальні масиви,
       згадані вище. Старі скрипти, книги, та посібники можуть вважати цю
       директиву <literal>on</literal> (включеною). Наприклад, якщо б ця директива
       була встановлена в <literal>on</literal>, можна було б використовувати
       змінну <varname>$id</varname>, отриману методом GET з адреси
       <literal>http://www.example.com/foo.php?id=42</literal>. Включена чи ні,
       директива, але дане значення можна отримати через <varname>$_GET['id']</varname>.
      </simpara>
     </listitem>
    </itemizedlist>
    Більш детально ці зміни описані в розділі
    <link linkend="language.variables.predefined">предвизначені змінні</link>.
   </para>
  </section>
  
  <section xml:id="tutorial.whatsnext">
   <info><title>Що далі?</title></info>
   <para>
    Тепер ви отримали знання, які допоможуть вам зрозуміти більшу частину матеріала
    даного посібника, а також деякі приклади скриптів, що доступні в архіві прикладів.
   </para>
   <para>
    Якщо ви хочете проглянути деякі презентації і слайти, що показують більше
    можливостей PHP, то можете проглянути матеріали PHP конференції: 
    <link xlink:href="&url.php.talks;">&url.php.talks;</link>
   </para>
  </section>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
