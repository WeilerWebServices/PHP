<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 333259 Maintainer: ktretyak Status: ready -->
<!-- $Revision$ -->
 <sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
  <title>Конструктори та Деструктори</title>

  <sect2 xml:id="language.oop5.decon.constructor">
   <title>Конструктор</title>
   <methodsynopsis xml:id="object.construct">
    <type>void</type><methodname>__construct</methodname>
    <methodparam choice="opt"><type>mixed</type><parameter>args</parameter><initializer>""</initializer></methodparam>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
    PHP 5 дозволяє розробникам оголошувати методи-конструктори. Класи, в яких
    оголошено метод-конструктор, будуть викликати його при створенні нового об'єкта.
    Це може бути корисним, коли потрібна ініціалізація об'єкта, перед його
    використанням.
   </para>
   <note>
    <simpara>
     Батьківський конструктор не викликається автоматично, якщо в дочірньому класі
     оголошено власний конструктор. Щоб виконався батьківський конструктор, необхідно
     викликати <function>parent::__construct</function> всередині дочірнього
     конструктора. Якщо ж в дочірньому класі не оголошено власний конструктор,
     то він може наслідуватись з батьківського класа як звичайний метод
     (у випадку, коли його не оголошено як приватний).
    </simpara>
   </note>
   <example>
    <title>використання уніфікованих конструкторів</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "В конструкторі класа BaseClass\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "В конструкторі класа SubClass\n";
   }
}

class OtherSubClass extends BaseClass {
    // Успадковує конструктор класа BaseClass
}

// Видає: В конструкторі класа BaseClass
$obj = new BaseClass();

// Видає:
// В конструкторі класа BaseClass
// В конструкторі класа SubClass
$obj = new SubClass();

// Видає: В конструкторі класа BaseClass
$obj = new OtherSubClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Для зворотньої сумісності, якщо PHP 5 не може знайти метод
    <link linkend="object.construct">__construct()</link> в поточному класі,
    та цей метод не успадковується від батьківського класа, то пошук буде продовжено
    по застарілій схемі - по назві метода, який співпадає з назвою класа.
    Тобто проблема сумісності може виникнути лише тоді, коли клас має метод
    <link linkend="object.construct">__construct()</link>, але раніше він
    використовувався не для створення об'єкта.
   </para>
   <para>
    На відміну від інших методів, PHP не буде генерувати помилки рівня
    <constant>E_STRICT</constant>, коли
    <link linkend="object.construct">__construct()</link> перевантажується з
    іншою кількістю параметрів, ніж має батьківський метод
    <link linkend="object.construct">__construct()</link>.
   </para>
   <para>
    Починаючи з PHP 5.3.3, методи з іменами, співпадаючими з останнім елементом
    іменованого простора класа, більше не будуть вважатись конструкторами. Ця зміна
    не стосується класів, без іменованого простору.
   </para>
   <example>
    <title>Конструктори в класах, що мають іменований простір</title>
    <programlisting role="php">
<![CDATA[
<?php
namespace Foo;
class Bar {
    public function Bar() {
        // вважається конструктором в PHP 5.3.0-5.3.2
        // вважається звичайним методом починаючи з PHP 5.3.3
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.decon.destructor">
   <title>Деструктор</title>
   <methodsynopsis xml:id="object.destruct">
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP 5 вводить концепцію деструктора, схожу з тим, що є в інших
    об'єктно-орієнтованих мовах, таких як C++. Метод деструктора буде викликатись
    зразу після того, як на нього не будуть посилатись визначені об'єкти, або
    в будь-якому порядку, під час завершення роботи скрипта.
   </para>
   <example>
    <title>Використання Деструктора</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass {
   function __construct() {
       print "В конструкторі\n";
       $this->name = "MyDestructableClass";
   }

   function __destruct() {
       print "Видалення " . $this->name . "\n";
   }
}

$obj = new MyDestructableClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Схоже з конструктором, батьківський деструктор не буде викликатись
    автоматично. Щоб запустити батьківський деструктор, потрібно явно викликати
    <function>parent::__destruct</function> в тілі деструктора.
    Також, як і у випадку з конструктором, якщо в дочірньому класі не оголошено
    деструктор, то він може успадковувати деструктор батька.
   </para>
   <para>
    Деструктор буде викликатись навіть коли виконання скрипта припиняється з
    використанням <function>exit</function>. Виклик <function>exit</function>
    в деструкторі, буде запобігати від виконання решти процедур завершення.
   </para>
   <note>
    <para>
     Викликаються деструктори, коли скрипти завершення роботи вже відправили
     HTTP заголовки. Робоча директорія, в фазі завершення скриптів, може
     відрізнятись в деяких SAPI (наприклад, в Apache).
    </para>
   </note>
   <note>
    <para>
     При спробі кинути виняток з деструктора (викликаного під час завершення
     роботи скрипта) призведе до фатальної помилки.
    </para>
   </note>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
