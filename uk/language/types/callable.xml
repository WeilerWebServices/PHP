<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 335289 Maintainer: ktretyak Status: ready -->
<!-- $Revision$ -->
<sect1 xml:id="language.types.callable">
 <title>Зворотні виклики (Callbacks / Callables)</title>
 
 <para>
  Починаючи з PHP 5.4, зворотні виклики можуть позначатись через тип
  <type>callable</type>, що означає - придатний для виклика. В даній
  документації тип <type>callback</type> вживають з тією ж метою.
 </para>

 <para>
  Деякі функції, наприклад, <function>call_user_func</function> або
  <function>usort</function> приймають визначені користувачем callback-функції
  в якості параметра. Callback-функції можуть бути не лише простими функціями,
  але також і методами об'єктів, включаючи статичні методи класів.
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>Передача зворотніх викликів</title>

  <para>
   Як аргумент, функція PHP передається по імені у вигляді рядка. Будь-яка
   вбудована або визначена користувачем функція може передаватись
   таким чином, за виключенням мовних конструкцій, таких як:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>, 
   <function>exit</function>, <function>isset</function>, 
   <function>list</function>, <function>print</function> або
   <function>unset</function>.
  </para>

  <para>
   Метод, вже створеного об'єкта, передається в масиві, де сам об'єкт
   має індекс 0, а його метод - індекс 1.
  </para>

  <para>
   Також в масиві можна передавати статичний метод класа, коли в індексі 0,
   замість об'єкта, йде назва класа. Починаючи з PHP 5.2.3, метод вже
   можна передавати в форматі <literal>'ClassName::methodName'</literal>.
  </para>

  <para>
   Окрім загальних функцій, визначених користувачем,
   <link linkend="functions.anonymous">anonymous functions</link>
   (анонімні функції) також можуть передаватись в якості callback-параметрів.
  </para>

  <para>
   <example>
    <title>
     callback-функцій
    </title>
    <programlisting role="php">
<![CDATA[
<?php 

// Приклад callback-функції
function my_callback_function() {
    echo 'Привіт, Світ!';
}

// Приклад callback-метода
class MyClass {
    static function myCallbackMethod() {
        echo 'Привіт, Світ!';
    }
}

// Тип 1: Простий callback
call_user_func('my_callback_function'); 

// Тип 2: Виклик статичного метода класа
call_user_func(array('MyClass', 'myCallbackMethod')); 

// Тип 3: Виклик метода об'єкта
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Тип 4: Виклик статичного метода класа (Починаючи з PHP 5.2.3)
call_user_func('MyClass::myCallbackMethod');

// Тип 5: Виклик відносного статичного метода (Починаючи з PHP 5.3.0)
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Передача анонімної функції в якості сallback-параметра
    </title>
   <programlisting role="php">
<![CDATA[
<?php
// Наша анонімна функція
$double = function($a) {
    return $a * 2;
};

// Це наш діапазон номерів
$numbers = range(1, 5);

// Використовуємо анонімну функцію як callback-параметр для 
// перемноження на 2 кожного елемента в нашому діапазоні
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  <note>
   <simpara>
    В PHP 4, необхідно було використовувати посилання для створення callback,
    який вказує на актуальний об'єкт, а не на його копію. Для уточнень,
    прогляньте
    <link linkend="language.references">Пояснення Посилань</link>.
   </simpara>
  </note>

  &note.func-callback-exceptions;
 </sect2>

</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
