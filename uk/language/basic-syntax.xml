<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 335256 Maintainer: ktretyak Status: ready -->
<!-- $Revision$ -->
 <chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
  <title>Базовий синтаксис</title>
  <sect1 xml:id="language.basic-syntax.phptags">
   <title>Теги PHP</title>
   <para>
    Коли PHP обробляє файл, вона шукає відкриваючі та закриваючі теги,
    тобто <literal>&lt;?php</literal> та <literal>?&gt;</literal>,
    які говорять PHP, що між ними потрібно починати і завершувати інтерпретацію
    кода. Обробка в такій манері дозволяє PHP бути вбудованою у різного роду
    документи, оскільки код, за межами пари з відкриваючим та закриваючим
    тегами, ігнорується обробником PHP.
   </para>
   <para>
    PHP також дозволяє короткий відкриваючий тег <literal>&lt;?</literal> (в
    цьому випадку закриваючий тег не змінюється,
    але використовуйте його обережно,
    оскільки він доступний, тільки якщо його підключено через директиву
    <link linkend="ini.short-open-tag">short_open_tag</link> у конфігураційному
    файлі &php.ini;, або якщо PHP було сконфігуровано з параметром
    <option>--enable-short-tags</option>).
   </para>
   <para>
    Якщо файл має лише PHP-код, краще не вказувати закриваючий тег PHP в кінці
    файла. Це запобігає випадковості додавання пробіла або нового рядка після
    закриваючого тега PHP, що може спричиняти небажаний ефект, оскільки PHP
    починає буферизацію виводу, коли програміст не має наміру будь-що
    виводити в своєму скрипті.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo "Hello world";

// ... ще код

echo "Останній вивід";

// тут скрипт завершується без додавання закриваючого тега PHP
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.phpmode">
   <title>Відмежування від HTML</title>
   <para>
    Все, що за межами пари з відкриваючим та закриваючим тегами, ігнорується
    обробником PHP. Таким чином можна обробляти PHP-файли зі змішаним вмістом, тобто
    вбудовувати PHP-код в HTML-документи, наприклад, при створенні
    шаблонів.
    <example>
     <programlisting role="php">
<![CDATA[
<p>Ця частина коду буде проігнорована PHP, але показуватиметься через браузер.</p>
<?php echo 'В той час, як ця частина коду буде оброблятись.'; ?>
<p>І цей код - також буде проігноровано PHP, але показуватиметься через браузер.</p>
]]>
     </programlisting>
    </example>
    Такий код обробляється як і очікується, оскільки коли інтерпретатор PHP
    зустрічає закриваючий тег ?&gt; він просто починає виводити все, що
    знаходить, допоки не зустріне інший відкриваючий тег. Але є два виключення,
    коли інтерпретатор не виводить вміст після закриваючого тега:
    по-перше, якщо безпосередньо далі йде символ нового рядка - про це можна
    прочитати на сторінці
    <link linkend="language.basic-syntax.instruction-separation">поділ інструкцій</link>;
    і по-друге, якщо наступний код знаходиться всередині тіла умовного оператора
    (в такому разі інтерпретатор визначає результат в умові, перед тим як
    вирішити що потрібно виводити). Дивіться наступний приклад.
   </para>
   <para>
    <example>
     <title>Розмежування коду PHP та HTML з використанням умовних операторів</title>
     <programlisting role="php">
<![CDATA[
<?php if ($expression == true): ?>
  Цей текст буде показано, якщо змінна $expression матиме значення true,
  тобто вираз if ($expression == true) буде дійсним.
<?php else: ?>
  В противному разі буде виводитись цей текст.
<?php endif; ?>
]]>
     </programlisting>
    </example>
    В даному прикладі PHP буде пропускати ті блоки, де умова виразу не виконується,
    навіть не дивлячись на те, що ці блоки знаходяться за межами відкриваючого
    та закриваючого PHP-тегів, PHP-інтерпретатор просто перестрибуватиме їх.
   </para>
   <para>
    Для виводу великих блоків текста, вихід з PHP-режиму
    є більш ефективним, ніж відправка всього текста через
    <function>echo</function> чи <function>print</function>.
   </para>
   <para>
    Існує чотири різних пари з відкриваючими та закриваючими тегами, які можна
    використовувати в PHP. Дві із них, &lt;?php ?&gt; та
    &lt;script language="php"&gt; &lt;/script&gt;, завжди доступні.
    Дві інші пари - це короткі теги та теги в стилі
    <productname>ASP</productname>, які можна включати та відключати у
    конфігураційному файлі &php.ini;. Отже, хоча деякі люди вважають зручними
    короткі теги та теги в стилі <productname>ASP</productname>, вони є менш
    портативними, та взагалі то не рекомендуються.
    <note>
     <para>
      Якщо ви вставляєте блоки PHP вередині XML чи XHTML, вам потрібно
      використовувати теги &lt;?php ?&gt; щоб код залишався сумісним згідно зі
      стандартом.
     </para>
    </note>
   </para>
   <para>
    <example>
     <title>Різні варіанти відкриваючих та закриваючих тегів PHP</title>
     <programlisting role="php">
<![CDATA[
1.  <?php echo 'якщо ви хочете обробляти PHP-код всередині XHTML або XML
                документів, використовуйте такі теги'; ?>

2.  <script language="php">
        echo 'деякі редактори (наприклад FrontPage) не обробляють інструкції
              всередині таких тегів';
    </script>

3.  <? echo 'цей код знаходиться всередині коротких тегів PHP'; ?>
    А код в таких тегах <?= 'тут якийсь текст' ?>
    є скороченням для коду <? echo 'тут якийсь текст' ?>

4.  <% echo 'Також, якщо хочете, можете використовувати теги в ASP-стилі'; %>
    А код в таких тегах <%= $змінна; %>
    є скороченням для коду <% echo $змінна; %>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Хоча теги, показані в пунктах 1 та 2, завжди є доступними, теги, показані
    в пункті 1, є найбільш вживаними, та є рекомендованим, на відміну від тегів
    в пункті 2.
   </para>
   <para>
    Короткі теги (пункт 3) є доступними, тільки якщо вони підключені через
    директиву <link linkend="ini.short-open-tag">short_open_tag</link>
    в конфігураційному файлі &php.ini;, або якщо PHP було сконфігуровано з
    параметром <option>--enable-short-tags</option>.
   </para>
   <para>
    Теги в стилі <productname>ASP</productname> (пункт 4) доступні, тільки коли
    вони підключені через директиву <link linkend="ini.asp-tags">asp_tags</link>
    в конфігураційному файлі &php.ini;.
   </para>
   <para>
    <note>
     <para>
      Використання коротких тегів краще уникати при розробці застосунків
      чи бібліотек, що призначаються для поширення, або при розміщенні скриптів
      на PHP-серверах, які знаходяться не під вашим контролем, оскільки короткі
      теги можуть не підтримуватись. Для портативності, переконайтесь, що ви
      не використовуєте короткі теги.
     </para>
    </note>
    <note>
     <para>
      У версіях PHP 5.2 та рініших, парсер не дозволяв використовувати
      тільки відкриваючі теги <literal>&lt;?php</literal> без використання
      закриваючих тегів. Це стало можливим починаючи з PHP 5.3, при наявності
      одного чи кількох пробілів після відкриваючого тега.
     </para>
    </note>
    <note>
     <para>
      Починаючи з PHP 5.4, короткий тег <literal>&lt;?=</literal> завжди
      розпізнається та є дійсним, незалежно від того, чи включена директива
      <link linkend="ini.short-open-tag">short_open_tag</link>.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.instruction-separation">
   <title>Поділ інструкцій</title>
   <para>
    Так як і C чи Perl, PHP вимагає завершення інструкцій символом
    крапки з комою в кінці кожного виразу. Закриваючий тег в блоці PHP-коду
    автоматично зумовить додавання символа крапки з комою; тобто вам не
    потрібно завершувати останній рядок PHP-блоку символом крапки з комою.
    Закриваючий тег також зумовить видалення символа нового рядка, що йде
    безпосередньо зразу після нього, якщо він є.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Це перевірка';
?>

<?php echo 'Це перевірка' ?>

<?php echo 'Ми опустили останній закриваючий тег';
]]>
     </programlisting>
    </informalexample>
    <note>
     <para>
      Закриваючий тег PHP-блока в кінці файла є необов'язковим,
      а в деяких випадках його відсутність є корисною при використанні
      <function>include</function> чи <function>require</function>, оскільки
      небажаний пробіл в кінці файлів не додається, та у вас все ще
      залишається можливість додавати заголовки для відповіді пізніше. Це також
      є зручним, якщо ви використовуєте буферизацію виводу, та не хотіли б
      бачити небажаних пробілів в кінці файлів при їх підключенні.
     </para>
    </note>
   </para>
  </sect1>
  <sect1 xml:id="language.basic-syntax.comments">
   <title>Коментарі</title>
   <para>
    PHP підтримує коментарі в стилі 'C', 'C++', Unix та shell (Perl). Наприклад:

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 'Це перевірка'; // Це однорядковий коментар в стилі C++
    
    /* Це багаторядковий коментар
       і в цьому рядку можна писати щось */
       
    echo 'Це вже інша перевірка';
    
    echo 'Завершальна перевірка'; # Це однорядковий коментар в стилі shell
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Однорядкові коментарі закоментовуються тільки до кінця рядка
    або поточного блока PHP-коду, дивлячись що йде першим.
    Це означає, що HTML-код після <literal>// ... ?&gt;</literal>
    чи <literal># ...  ?&gt;</literal> БУДЕ надруковано, оскільки закриваючий
    тег ?&gt; перериває PHP-режим та включає HTML-режим, і
    <literal>//</literal> чи <literal>#</literal> не впливають на це.
    Якщо конфігураційна директива <link linkend="ini.asp-tags">asp_tags</link>
    включена, такий же ефект буде з тегами <literal>// %&gt;</literal> та
    <literal># %&gt;</literal>. Лише тег <literal>&lt;/script&gt;</literal>
    не перериває PHP-режиму в однорядкових коментарях.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<h1>Це <?php # echo 'простий';?> приклад</h1>
<p>Заголовок, що у верхньому рядку, буде виводити 'Це  приклад'.</p>
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Коментарі в стилі 'C' завершуються, коли зустрічається перша ж
    послідовність <literal>*/</literal>. Потрібно обережно використовувати такі
    коментарі, та перевіряти чи не створили ви вкладених коментарів в такому
    стилі. Досить легко це зробити, якщо намагатись закоментовувати великий
    блок коду.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
 /*
    echo 'Це перевірка'; /* Цей коментар спричинить проблеми */
 */
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
