<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 334592 Maintainer: ktretyak Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose>Руйнує задані змінні</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>unset</function> руйнує задані змінні. 
  </para>
  <para>
   Поведінка <function>unset</function> всередині функції може варіюватись
   в залежності від типу змінної, яку ви намагаєтесь зруйнувати.
  </para>
  <para>
   Якщо через <function>unset</function> намагаєтесь зруйнувати глобальну
   змінну всередині функції, то в результаті буде зруйнована лише локальна
   змінна. Змінна, в області видимості виклику, збереже таке ж
   значення, яке в неї було перед викликом <function>unset</function>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function destroy_foo() 
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
bar
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Щоб зруйнувати глобальну змінну через <function>unset</function> всередині
   функції, використовуйте масив <varname>$GLOBALS</varname> ось так:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   Якщо через <function>unset</function> намагаєтесь зруйнувати змінну, яка
   передається ПО ЛІНКУ всередині функції, то в результаті буде зруйнована лише локальна
   змінна. Змінна, в області видимості виклику, збереже таке ж
   значення, яке в неї було перед викликом <function>unset</function>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar) 
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
something
something
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Якщо статичну змінну руйнують через <function>unset</function> всередині
   функції, <function>unset</function> руйнуватиме змінну тільки в контексті
   решти коду функції. Наступні виклики будуть відновлювати попереднє
   значення змінної.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Перед руйнуванням: $bar, ";
    unset($bar);
    $bar = 23;
    echo "після руйнування: $bar\n";
}

foo();
foo();
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
Перед руйнуванням: 1, після руйнування: 23
Перед руйнуванням: 2, після руйнування: 23
Перед руйнуванням: 3, після руйнування: 23
]]>
    </screen>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Змінна, яку потрібно зруйнувати.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
       Інша змінна ...
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>unset</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
// руйнація однієї змінної
unset($foo);

// руйнація одного елемента з масива
unset($bar['quux']);

// руйнація більше, ніж однієї змінної
unset($foo1, $foo2, $foo3);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Приведення типу через <literal>(unset)</literal></title>
    <para>
     Приведення типу через <literal>(unset)</literal> часто плутають з функцією
     <function>unset</function>. Приведення типу <literal>(unset)</literal>
     задіюється лише для приведення до типу <literal>NULL</literal>, як
     доповнення до ряду з іншими приведеннями типів. В такому разі відбувається
     не редагування змінної, а саме приведення її типу.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$name = 'Felipe';

var_dump((unset) $name);
var_dump($name);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
string(6) "Felipe"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    Є можливість руйнувати навіть властивості об'єкта в поточній області видимості.
   </para>
  </note>
  <note>
   <para>
    Починаючи з PHP 5, немає можливості руйнувати <literal>$this</literal>
    всередині метода об'єкта.
   </para>
  </note>
  <note>
   <para>
    При використанні <function>unset</function> для недоступних властивостей
    об'єкта, буде викликатись метод
    <link linkend="object.unset">__unset()</link>, якщо його оголошено.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><link linkend="object.unset">__unset()</link></member>
    <member><function>array_splice</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
