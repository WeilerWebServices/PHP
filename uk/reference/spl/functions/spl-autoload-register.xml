<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 343899 Maintainer: ktretyak Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.spl-autoload-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>spl_autoload_register</refname>
  <refpurpose>Реєструє задану функцію, як таку, що впроваджує механізм автозавантаження</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>spl_autoload_register</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>autoload_function</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>throw</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>prepend</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Реєструє функцію автозавантаження в черзі функцій spl, та активує цю чергу, якщо
   її не було активовано раніше. 
  </para>
  <para>
   Якщо ваш код містить функцію, що впроваджує механізм <function>__autoload</function>,
   то її потрібно явно реєструвати в черзі __autoload. Така необхідність є,
   оскільки <function>spl_autoload_register</function> буде фактично замінювати
   механізм кешування для функції <function>__autoload</function>
   або через функцію <function>spl_autoload</function>, або через
   <function>spl_autoload_call</function>.
  </para>
  <para>
   <function>spl_autoload_register</function> дозволяє реєструвати зразу декілька
    функцій для автозавантаження. Вона фактично створює чергу з цих функцій
    та запускає кожну з них в порядку їх визначення. Це відрізняє її від функції
   <function>__autoload</function>, яку можна визначати лише один раз.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>autoload_function</parameter></term>
     <listitem>
      <para>
       Функція, яку буде зареєстровано для автозавантаження. Якщо цей параметр
       не передавати, то буде зареєстровано типову (by default) реалізацію
       механізма автозавантаження через <function>spl_autoload</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>throw</parameter></term>
     <listitem>
      <para>
       Цей параметр визначає чи повинна
       <function>spl_autoload_register</function> кидати винятки, коли
       <parameter>autoload_function</parameter> не може бути зареєстрованою.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prepend</parameter></term>
     <listitem>
      <para>
       Якщо цей параметр дорівнює TRUE, то функція
       <function>spl_autoload_register</function> поставить
       <parameter>autoload_function</parameter> на початок черги, а не
       позаду.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Було введено підтримку Просторів Імен.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Було додано параметр <parameter>prepend</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>spl_autoload_register</function> як альтернатива для функції <function>__autoload</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// function __autoload($class) {
//     include 'classes/' . $class . '.class.php';
// }

function my_autoloader($class) {
    include 'classes/' . $class . '.class.php';
}

spl_autoload_register('my_autoloader');

// Або, можна використовувати анонімні функції, що доступні з PHP 5.3.0
spl_autoload_register(function ($class) {
    include 'classes/' . $class . '.class.php';
});

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Використання <function>spl_autoload_register</function>, коли клас не завантажується</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function test($name) {
        print '[['. $name .']]';
    }
}

spl_autoload_register(__NAMESPACE__ .'\Foo::test'); // Починаючи з PHP 5.3.0

new InexistentClass;

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
[[Foobar\InexistentClass]]
Fatal error: Class 'Foobar\InexistentClass' not found in ...
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>__autoload</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
