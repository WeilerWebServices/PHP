<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.28 $ -->

<chapter xml:id="libvirt.longlong" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Interger ranges between libvirt and PHP</title>
  <para>
      This page address the integer range conflict between PHP and Libvirt. You should read this if you do use functions that could return numbers bigger than 2^31 (i.e. 2GB in case of functions returning bytes).
  </para>
  <para>
      Problem description: A lot of libvirt functions do return unsigned long long values (64bit unsigned). On the other hand, PHP  does use long for all integers. This means that the largest number on 32bit systems is 2147483647. In case of bytes it means only 2GB. What happen when you try to return larger number may vary a lot. It seems that on 64bit platforms PHP can handle 64 bit signed numbers but this is not confirmed.
  </para>
  <para>
      Because of this many functions will return possibly large numbers as string. As PHP uses implicit type conversion this is not a big issue (and you can disable it via &php.ini; option). You can encounter these basic situations:
    <orderedlist>
        <listitem><para>If you need to output the value, you can safely print the string and there will be no difference</para></listitem>
        <listitem><para>If you are sure that the returned number is within the range, you can use it as number and PHP will cast it for you when needed</para></listitem>
        <listitem><para>If you are sure that your platform will handle 64bit numbers correctly, you can disable this behaviour via php.ini <option>libvirt.longlong_to_string</option> option</para></listitem>
        <listitem><para>In all the other cases you can uses gm functions for multiprecision arithmetics. You will probably convert the string to gmp number, divide it and use as number.</para>
 <example>
  <title>Handling of large numbers using multiprecision library</title>
  <programlisting role="php">
<![CDATA[
<?php
     // suppose that we have number of I/O reads in $reads
    $reads_div_int=gmp_intval(gmp_div($reads,1024)) ;  //note the implicit convertsion from string to gmp_number.
}
?>
]]>
  </programlisting>
</example>
<para>GMP does of course provide more arithmetic operations than division but converting bytes to kilobytes or megabytes is probably the most common operation.</para>
</listitem>
    </orderedlist>
</para>
<para>
If you are sure that you platform can handle 64bit numbers and you do not want to use conversion to string, you can disable this behaviour in &php.ini; via option <option>libvirt.longlong_to_string</option>. By default it is set to 1 (convert long long to string), setting it to 0 will force php-libvirt to return long long as long.
</para> 
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

