<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 347419 Maintainer: yago Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<chapter xml:id="introduction" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <info><title>Introducción</title></info>
 
 <section xml:id="intro-whatis">
  <info><title>¿Qué es PHP?</title></info>
  <para>
   <acronym>PHP</acronym> (acrónimo recursivo de <literal>PHP: Hypertext
   Preprocessor</literal>) es un lenguaje de código abierto
   muy popular especialmente adecuado para el desarrollo web y que
   puede ser incrustado en HTML.
  </para>
  <para>
   Bien, pero ¿qué significa realmente? Un ejemplo nos aclarará las cosas:
  </para>
  <para>
   <example>
    <info><title>Un ejemplo introductorio</title></info>
    <programlisting role="php">
<![CDATA[
<!DOCTYPE html>
<html>
    <head>
        <title>Ejemplo</title>
    </head>
    <body>

        <?php
            echo "¡Hola, soy un script de PHP!";
        ?>

    </body>
</html>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   En lugar de usar muchos comandos para mostrar HTML (como en C o en Perl),
   las páginas de PHP contienen HTML con código incrustado que hace
   "algo" (en este caso, mostrar "¡Hola, soy un script de PHP!).
   El código de PHP está encerrado entre las <link
   linkend="language.basic-syntax.phpmode">etiquetas especiales
   de comienzo y final <code>&lt;?php</code> y <code>?&gt;</code></link>
   que permiten entrar y salir del "modo PHP".
  </para>
  <para>
   Lo que distingue a PHP de algo del lado del cliente como Javascript
   es que el código es ejecutado en el servidor, generando HTML
   y enviándolo al cliente. El cliente recibirá
   el resultado de ejecutar el script, aunque no se sabrá
   el código subyacente que era. El servidor web puede ser configurado incluso
   para que procese todos los ficheros HTML con PHP, por lo que no hay manera
   de que los usuarios puedan saber qué se tiene debajo de la manga.
  </para>
  <para>
   Lo mejor de utilizar PHP es su extrema simplicidad para el
   principiante, pero a su vez ofrece muchas características
   avanzadas para los programadores profesionales. No sienta miedo de
   leer la larga lista de características de PHP. En unas pocas
   horas podrá empezar a escribir sus primeros scripts.
  </para>
  <para>
   Aunque el desarrollo de PHP está centrado en la programación de scripts del lado
   del servidor, se puede utilizar para muchas otras cosas. Siga leyendo y descubra
   más en la sección <link linkend="intro-whatcando">¿Qué puede hacer PHP?</link>,
   o vaya directo al <link linkend="tutorial">tutorial
   introductorio</link> si solamente está interesado en programación web.
  </para>
 </section>
 
 <section xml:id="intro-whatcando">
  <info><title>¿Qué puede hacer PHP?</title></info>
  <para>
   Cualquier cosa. PHP está enfocado principalmente a la programación de scripts del lado
   del servidor, por lo que se puede hacer cualquier cosa que pueda hacer otro programa
   CGI, como recopilar datos de formularios, generar páginas con contenidos dinámicos, o
   enviar y recibir cookies. Aunque PHP puede hacer mucho más.
  </para>
  <para>
   Existen principalmente tres campos principales donde se usan scripts de PHP.
   <itemizedlist>
    <listitem>
     <simpara>
      Scripts del lado del servidor. Este es el campo más
      tradicional y el foco principal. Son necesarias tres
      cosas para que esto funcione: el analizador de PHP (módulo CGI
      o servidor), un servidor web y un navegador web. Es necesario 
      ejecutar el servidor con una instalación de PHP conectada.
      Se puede acceder al resultado del programa de PHP con un navegador,
      viendo la página de PHP a través del servidor. Todo esto se
      puede ejecutar en su máquina si está experimentado
      con la programación de PHP. Véase la sección sobre las
      <link linkend="install">instrucciones de instalación</link>
      para más información.
     </simpara>
    </listitem>
    <listitem>
     <simpara>      
      Scripts desde la línea de comandos. Se puede crear un script de PHP
      y ejecutarlo sin necesidad de un servidor o navegador.
      Solamente es necesario el analizador de PHP para utilizarlo de esta manera.
      Este tipo de uso es ideal para scripts que se ejecuten con regularidad
      empleando cron (en *nix o Linux) o el Planificador de tareas (en
      Windows). Estos scripts también pueden usarse para tareas simples de
      procesamiento de texto. Véase la sección <link
      linkend="features.commandline">Uso de PHP en la línea de comandos</link>
      para más información.       
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Escribir aplicaciones de escritorio. Probablemente PHP no sea
      el lenguaje más apropiado para crear aplicaciones de
      escritorio con una interfaz gráfica de usuario, pero si se
      conoce bien PHP, y se quisiera utilizar algunas características
      avanzadas de PHP en aplicaciones del lado del cliente,
      se puede utilizar PHP-GTK para escribir dichos programas. También es
      posible de esta manera escribir aplicaciones independientes de una
      plataforma. PHP-GTK es una extensión de PHP, no disponible en la
      distribución principal. Si está interesado
      en PHP-GTK, puede visitar su propio <link xlink:href="&url.php.gtk;">
      sitio web</link>.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   PHP puede <link linkend="install">emplearse</link> en todos los sistemas operativos principales,
   incluyendo Linux, muchas variantes de Unix (incluyendo HP-UX, Solaris y OpenBSD),
   Microsoft Windows, macOS, RISC OS y probablemente otros más.
   PHP admite la mayoría de servidores web de hoy en día, incluyendo
   Apache, IIS, y muchos otros. Esto incluye cualquier servidor
   web que pueda utilizar el binario de PHP FastCGI, como lighttpd
   y nginx. PHP funciona tanto como módulo como procesador de CGI.
  </para>
  <para>
   De modo que con PHP, se tiene la libertad de elegir el sistema
   operativo y el servidor web. Además, se tiene la posibilidad de
   utilizar programación por procedimientos o programación orientada
   a objetos (POO), o una mezcla de ambas.
  </para>
  <para>
   Con PHP no se está limitado a generar HTML. Entre las capacidades de PHP
   se incluyen la creación de imágenes, ficheros PDF e incluso películas Flash
   (usando libswf y Ming) generadas sobre la marcha. También se puede generar
   fácilmente cualquier tipo de texto, como XHTML y cualquier otro tipo de fichero XML.
   PHP puede autogenerar estos ficheros y guardarlos en el sistema 
   de ficheros en vez de imprimirlos en pantalla, creando una caché
   en el lado del servidor para contenido dinámico.    
  </para>
  <para>
   Una de las características más potentes y destacables de PHP es su
   soporte para un <link linkend="refs.database">amplio abanico de bases de datos</link>.
   Escribir una página web con acceso a una base de datos es increíblemente simple utilizando
   una de las extensiones específicas de bases de datos (p.ej., para <link linkend="book.mysqli">mysql</link>),
   o utilizar una capa de abstracción como <link linkend="book.pdo">PDO</link>, o conectarse
   a cualquier base de datos que admita el estándar de Conexión Abierta a Bases de Datos por medio
   de la extensión <link linkend="book.uodbc">ODBC</link>. Otras bases de datos podrían utilizar
   <link linkend="book.curl">cURL</link> o <link linkend="book.sockets">sockets</link>,
   como lo hace CouchDB.
  </para>
  <para>
   PHP también cuenta con soporte para comunicarse con otros servicios usando protocolos
   tales como LDAP, IMAP, SNMP, NNTP, POP3, HTTP, COM (en Windows) y
   muchos otros. También se pueden crear sockets de red puros e
   interactuar usando cualquier otro protocolo. PHP tiene soporte para el intercambio
   de datos complejos de WDDX entre virtualmente todos los lenguajes de programación
   web. Y hablando de interconexión, PHP tiene soporte para la
   instalación de objetos de Java y emplearlos de forma transparente
   como objetos de PHP.
  </para>
  <para>
   PHP tiene útiles características de <link linkend="refs.basic.text">procesamiento de texto</link>,
   las cuales incluyen las expresiones regulares compatibles con Perl (<link linkend="book.pcre">PCRE</link>),
   y muchas extensiones y herramientas para el <link linkend="refs.xml">acceso y análisis de documentos XML</link>.
   PHP estandariza todas las extensiones XML sobre el fundamento sólido de <link linkend="book.libxml">libxml2</link>,
   y amplía este conjunto de características añadiendo soporte para <link linkend="book.simplexml">SimpleXML</link>,
   <link linkend="book.xmlreader">XMLReader</link> y <link linkend="book.xmlwriter">XMLWriter</link>.
  </para>
  <para>
   Existen otras extensiones interesantes, las cuales están categorizadas
   <link linkend="extensions">alfabéticamente</link> y por <link linkend="funcref">categoría</link>.
   También hay extensiones adicionales de PECL que podrían estar documentadas o no
   dentro del manual de PHP, tal como <link xlink:href="&url.xdebug;">XDebug</link>.
  </para>
  <para>
   Como se puede apreciar, esta página no es suficiente para enumerar todas
   las características y beneficios que ofrece PHP. Consulte
   las secciones <link linkend="install">Instalación
   de PHP</link> y <link linkend="funcref">Referencia de
   las funciones</link> para una explicación de las extensiones
   mencionadas aquí.
  </para>
 </section>
 
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
