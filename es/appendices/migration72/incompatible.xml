<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 348153 Maintainer: andresdzphp Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<sect1 xml:id="migration72.incompatible">
 <title>Cambios incompatibles hacia atrás</title>

 <sect2 xml:id="migration72.incompatible.number_format-no-neg-zero">
  <title>Evitar que <function>number_format</function> devuelva el cero negativo</title>

  <para>
   Anteriormente, era posible que la función <function>number_format</function>
   devolviera <literal>-0</literal>. Aunque esto es perfectamente válido
   de acuerdo con la especificación de punto flotante IEEE 754, esta peculiaridad no era
   deseable para mostrar los números formateados en una forma legible para los humanos.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(number_format(-0.01)); // now outputs string(1) "0" instead of string(2) "-0"
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-array-casts">
  <title>Convertir las claves numéricas de objetos y arrays</title>

  <para>
   Las claves numéricas ahora se manejan mejor cuando se hacen arrays de objetos y
   objetos en arrays (ya sea de un modo explícito o por
   <function>settype</function>).
  </para>

  <para>
   Esto significa que las claves de números integer (o números integer en string) de los array que están siendo
   lanzados a los objetos son ahora accesibles:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// array to object
$arr = [0 => 1];
$obj = (object)$arr;
var_dump(
    $obj,
    $obj->{'0'}, // ahora accesible
    $obj->{0} // ahora accesible
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["0"]=>    // la clave string ahora, en lugar de la clave de los números integer
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   Y las claves de números enteros (o string de números enteros) de los objetos que están siendo 
   lanzados a los array son ahora accesibles:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// object to array
$obj = new class {
    public function __construct()
    {
        $this->{0} = 1;
    }
};
$arr = (array)$obj;
var_dump(
    $arr,
    $arr[0], // ahora accesible
    $arr['0'] // ahora accesible
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(1) {
  [0]=>    // clave integer ahora, en lugar de la clave de string
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.no-null-to-get_class">
  <title>No se permite pasar &null; a <function>get_class</function></title>

  <para>
   Anteriormente, pasar &null; a la función <function>get_class</function> 
   daría a conocer el nombre de la clase adjunta. Este comportamiento ya ha sido
   eliminado, donde se emitirá un <constant>E_WARNING</constant> en su lugar. Para 
   lograr el mismo comportamiento que antes, el argumento debe ser simplemente omitido.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.warn-on-non-countable-types">
  <title>Advertencia al contar los tipos no contables</title>

  <para>
   Una advertencia <constant>E_WARNING</constant> se emitirá ahora cuando se intente
   contar (<function>count</function>) tipos no contables (esto incluye la
   función alias <function>sizeof</function>).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(
    count(null), // NULL si no es contable
    count(1), // integers no son contables
    count('abc'), // strings no son contables
    count(new stdclass), // objetos que no implementen la interfaz Countable no son contables
    count([1,2]) // arrays son contables
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d
int(0)
int(1)
int(1)
int(1)
int(2)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-ext-to-objects">
  <title>Mover ext/hash de los recursos a los objetos</title>

  <para>
   Como parte de la migración a largo plazo lejos de los recursos, la extensión <link linkend="book.hash">Hash</link>
   se ha actualizado para utilizar objetos en lugar de recursos. El cambio debería ser perfecto para los
   desarrolladores de PHP, excepto cuando
   <function>is_resource</function> ha hecho comprobaciones (que necesitará ser
   actualizado a <function>is_object</function> en su lugar).
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.ssl-tls-defaults">
  <title>Mejorar los valores por omisión de SSL/TLS</title>

  <para>
   Se han hecho los siguientes cambios a los valores predeterminados:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <literal>tls://</literal> ahora por omisión a TLSv1.0 o TLSv1.1 o TLSv1.2
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>ssl://</literal> un alias de <literal>tls://</literal>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Las constantes <literal>STREAM_CRYPTO_METHOD_TLS_*</literal> por omisión a TLSv1.0
     o TLSv1.1 + TLSv1.2, en lugar de sólo TLSv1.0
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.incompatible.gettype-on-closed-resource">
  <title><function>gettype</function> devolviendo valores en recursos cerrados</title>

  <para>
   Anteriormente, usar <function>gettype</function> en un recurso cerrado devolvería
   un string de <literal>"unknown type"</literal>. Ahora, un string de
   <literal>"resource (closed)"</literal> es devuelto.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.is_object-on-incomplete_class">
  <title><function>is_object</function> y <classname>__PHP_Incomplete_Class</classname></title>

  <para>
   Anteriormente, usar <function>is_object</function> en la clase 
   <classname>__PHP_Incomplete_Class</classname> devolvería &false;.
   Ahora, &true; será devuelto.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.undefined-constants">
  <title>Promover el nivel de error de las constantes no definidas</title>

  <para>
   Las referencias no cualificadas a constantes no definidas generarán ahora una 
   advertencia <constant>E_WARNING</constant> (en vez de una <constant>E_NOTICE</constant>).
   En la próxima versión principal de PHP, generarán 
   excepciones <classname>Error</classname>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.windows-support">
  <title>Soporte de Windows</title>

  <para>
   Las versiones mínimas oficialmente soportadas de Windows son ahora Windows 7/Server
   2008 R2.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.trait-properties">
  <title>Comprobación de los valores de propiedad predeterminados de los rasgos (traits)</title>

  <para>
   Las comprobaciones de compatibilidad de los valores de propiedad de los rasgos
   por omisión ya no se realizarán.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-reserved-word">
  <title><literal>object</literal> para los nombres de las clases</title>

  <para>
   El nombre <literal>object</literal> fue previamente reservado en PHP 7.0.
   Esto ahora se ha reservado con fuerza, prohibiendo su uso como nombre de clase, rasgo
   o nombre de interfaz.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.netware-support">
  <title>Soporte de NetWare</title>

  <para>
   El soporte para NetWare ha sido eliminado.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.array-unique">
  <title><function>array_unique</function> con <constant>SORT_STRING</constant></title>

  <para>
   Mientras que <function>array_unique</function> con <constant>SORT_STRING</constant>
   antes copiaba el array y eliminaba los elementos no únicos (sin empaquetar
   el array después), ahora se construye un nuevo array añadiendo
   los elementos únicos. Esto puede dar lugar a diferentes índices numéricos.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.bcmod-and-floats">
  <title>Cambios con floats en la función <function>bcmod</function></title>

  <para>
   La función <function>bcmod</function> ya no trunca números fraccionarios
   a números enteros. Como tal, su comportamiento ahora sigue
   <function>fmod</function>, en lugar del operador <literal>%</literal>.
   Por ejemplo <literal>bcmod('4', '3.5')</literal> ahora devuelve
   <literal>0.5</literal> en lugar de <literal>1</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-functions">
  <title>Funciones de hash y hash no criptográficas</title>

  <para>
   Las funciones <function>hash_hmac</function>, <function>hash_hmac_file</function>,
   <function>hash_pbkdf2</function>, y <function>hash_init</function> (con
   <constant>HASH_HMAC</constant>) ya no aceptan los no criptográficos
   hashes.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.json_decode-changes">
  <title>Opciones de la función <function>json_decode</function></title>

  <para>
   La opción de la función <function>json_decode</function>,
   <constant>JSON_OBJECT_AS_ARRAY</constant>, es ahora usada si el segundo
   parámetro (asociativo) es &null;. Anteriormente,
   <constant>JSON_OBJECT_AS_ARRAY</constant> siempre fue ignorado.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.rand-mt_rand-output">
  <title>Salida de <function>rand</function> y <function>mt_rand</function></title>

  <para>
   secuencias generadas por <function>rand</function> y
   <function>mt_rand</function> para una semilla específica puede diferir de PHP 7.1 en
   máquinas de 64 bits (debido a la fijación de un error de sesgo de módulo en la 
   aplicación).
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.sqlsafe_mode-ini-setting">
  <title>La eliminación de la configuración ini <link linkend="ini.sql.safe-mode"><parameter>sql.safe_mode</parameter></link></title>

  <para>
   La configuración ini <parameter>sql.safe_mode</parameter> ha sido eliminada.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.date_parse_from_format">
  <title>Cambios a las funciones <function>date_parse</function> y <function>date_parse_from_format</function></title>

  <para>
   El elemento <literal>zone</literal> de el array devuelto por las funciones <function>date_parse</function> 
   y <function>date_parse_from_format</function> ahora representan segundos en vez de
   minutos, y su signo está invertido. Por ejemplo <literal>-120</literal>
   es ahora <literal>7200</literal>.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
