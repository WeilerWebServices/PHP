<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 348383 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->
<appendix xml:id="filters" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Lista de filtros disponibles</title>
 <para>
  La siguiente es una lista de unos cuantos filtros de secuencia integrados
  que puede usar con <function>stream_filter_append</function>.
  Su versión de PHP puede tener más filtros (o menos) que aquellos
  que aparecen aquí.
 </para>

 <para>
  Vale la pena anotar una ligera asimetría entre
  <function>stream_filter_append</function> y
  <function>stream_filter_prepend</function>. Cada secuencia en PHP contiene
  un pequeño <emphasis>búfer de lectura</emphasis> en donde almacena los
  bloques de datos recibidos desde el sistema de archivos u otro recurso
  para procesar los datos de la forma más eficiente. Tan pronto como los
  datos son tomados del recurso y colocados en el búfer interno de la
  secuencia, éstos son procesados inmediatamente a través de cualquier
  filtro adjunto sin importar que la aplicación PHP esté lista para los
  datos o no. Si los datos están en el búfer de lectura cuando un filtro es
  <emphasis>añadido al final</emphasis>, los datos serán procesados
  inmediatamente a través del filtro haciendo parecer que el proceso fuera
  transparente. Sin embargo, si los datos están en el búfer de lectura
  cuando un filtro es <emphasis>adjuntado al comienzo</emphasis>, los datos
  <emphasis>NO</emphasis> serán procesados a través del filtro. En su lugar
  esperará a que el siguiente bloque de datos sea recuperado del recurso.
 </para>

 <para>
  Para una lista de filtros instalados en su versión de PHP, use
  <function>stream_get_filters</function>.
 </para>

 <section xml:id="filters.string">
  <title>Filtros de String</title>

  <simpara>
   Cada uno de estos filtros hace precisamente lo que su nombre implica y
   corresponden al comportamiento de una función de manejo de strings php incorporada.
   Para obtener más información sobre un filtro determinado, consulte la página del manual de
   la función correspondiente.
  </simpara>

  <section xml:id="filters.string.rot13">
   <title>string.rot13</title>
   <simpara>
    El uso de este filtro es equivalente a procesar todos los datos de la secuencia a través
    de la función <function>str_rot13</function>.
   </simpara>
   <example>
    <title>string.rot13</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.rot13');
fwrite($fp, "Esto es una prueba.\n");
/* Salida:  Guvf vf n grfg.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.toupper">
   <title>string.toupper</title>
   <simpara>
    El uso de este filtro es equivalente a procesar todos los datos de la secuencia a través
    de la función <function>strtoupper</function>.
   </simpara>
   <example>
    <title>string.toupper</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.toupper');
fwrite($fp, "Esto es una prueba.\n");
/* Salida:  ESTO ES UNA PRUEBA.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.tolower">
   <title>string.tolower</title>
   <simpara>
    El uso de este filtro es equivalente a procesar todos los datos de la secuencia a través
    de la función <function>strtolower</function>.
   </simpara>
   <example>
    <title>string.tolower</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.tolower');
fwrite($fp, "Esto es una prueba.\n");
/* Salida:  esto es una prueba.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.strip_tags">
   <title>string.strip_tags</title>
   <simpara>
    El uso de este filtro es equivalente a procesar todos los datos de la secuencia a través
    de la función <function>strip_tags</function>.
    Acepta parámetros en una de dos formas:
    Ya sea como un string que contiene una lista de etiquetas similares a el
    segundo parámetro de la función <function>strip_tags</function>,
    o como un array de nombres de etiqueta.
   </simpara>
   <para>
    &warn.deprecated.feature-7-3-0;
   </para>
   <example>
    <title>string.strip_tags</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, "<b><i><u>");
fwrite($fp, "<b>texto en negrita</b> ampliado a un <h1>título de nivel 1</h1>\n");
fclose($fp);
/* Imprime:  <b>texto en negrita</b> ampliado a un título de nivel 1   */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u'));
fwrite($fp, "<b>texto en negrita</b> ampliado a un <h1>título de nivel 1</h1>\n");
fclose($fp);
/* Imprime:  <b>texto en negrita</b> ampliado a un título de nivel 1   */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.convert">
  <title>Filtros de conversión</title>

  <simpara>
   Como los filtros string.*, los filtros convert.* realiza acciones
   similares a sus nombres.
   Para obtener más información sobre un filtro determinado, consulte la página del manual de
   la función correspondiente.
  </simpara>

  <section xml:id="filters.convert.base64">
   <title>convert.base64-encode y convert.base64-decode</title>
   <simpara>
    El uso de estos filtros equivale a procesar todos los datos de la secuencia a través de
    las funciones <function>base64_encode</function> y <function>base64_decode</function>
    respectivamente.
    <literal>convert.base64-encode</literal> soporta parámetros dados como
    un array asociativo. Si el parámetro <parameter>line-length</parameter> se da, la
    salida de base64 se dividirá en trozos de <parameter>line-length</parameter>
    caracteres cada uno.  Si el parámetro <parameter>line-break-chars</parameter> se da, cada
    porción será delimitada por los caracteres dados. Estos parámetros le dan
    el mismo efecto que el uso de <function>base64_encode</function> con
    <function>chunk_split</function>.
   </simpara>
   <example>
    <title>
     convert.base64-encode &amp;
     convert.base64-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode');
fwrite($fp, "Esto es una prueba.\n");
fclose($fp);
/* Outputs:  VGhpcyBpcyBhIHRlc3QuCg==  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($fp, "Esto es una prueba.\n");
fclose($fp);
/* Outputs:  VGhpcyBp
          :  cyBhIHRl
          :  c3QuCg==  */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-decode');
fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");
fclose($fp);
/* Salida:  Esto es una prueba.  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.covert.quoted-printable">
   <title>convert.quoted-printable-encode y convert.quoted-printable-decode</title>
   <simpara>
    El uso de la versión decodificada de este filtro equivale a procesar todo el flujo 
    de datos a través de las funciones <function>quoted_printable_decode</function>.
    No existe una función equivalente a <literal>convert.quoted-printable-encode</literal>.
    <literal>convert.quoted-printable-encode</literal> soporta parámetros dados como
    un array asociativo. Además de los parámetros soportados por 
    <literal>convert.base64-encode</literal>, <literal>convert.quoted-printable-encode</literal>
    también soporta argumentos booleanos <parameter>binary</parameter> y
    <parameter>force-encode-first</parameter>.
    <literal>convert.base64-decode</literal> sólo soporta los
    parámetros <parameter>line-break-chars</parameter> como un tipo sugerido 
    para quitar la carga útil codificada.
   </simpara>
   <example>
    <title>
     convert.quoted-printable-encode &amp;
     convert.quoted-printable-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.quoted-printable-encode');
fwrite($fp, "Esto es una prueba.\n");
/* Outputs:  =Esto es una prueba.=0A  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.convert.iconv">
   <title>convert.iconv.*</title>
   <simpara>
    Los filtros <literal>convert.iconv.*</literal> están disponibles, si el
    soporte <link linkend="book.iconv">iconv</link> está habilitado, y su uso es
    equivalente a procesar todos los datos de la secuencia con <function>iconv</function>.
    Estos filtros no soportan parámetros, sino que esperan que la entrada y
    codificaciones de salida que se darán como parte del nombre del filtro, es decir, ya sea como
    <literal>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</literal> o
    <literal>convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</literal>
    (ambas notaciones son semánticamente equivalentes).
   </simpara>

   <example>
    <title>convert.iconv.*</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.iconv.utf-16le.utf-8');
fwrite($fp, "T\0h\0i\0s\0 \0i\0s\0 \0a\0 \0t\0e\0s\0t\0.\0\n\0");
fclose($fp);
/* Salida: Esto es una prueba. */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.compression">
  <title>Filtros de compresión</title>

  <simpara>
   Mientras que los <link linkend="wrappers.compression">Envoltorios de compresión</link>
   proporcionan una forma de crear
   ficheros gzip y bz2 compatibles con el sistema de archivos local, no proporcionan un 
   medio para la compresión generalizada sobre los flujos de la red, ni proporcionan un medio 
   para comenzar con un flujo no comprimido y la transición a uno comprimido.  
   Para ello, se puede aplicar un filtro de compresión a cualquier recurso de flujo en cualquier momento.
  </simpara>

  <note>
   <simpara>
    Los filtros de compresión <emphasis>no</emphasis> generan cabeceras y avances
    utilizadas por las utilidades de línea de comando como <literal>gzip</literal>. Sólo comprimen
    y descomprimen las porciones de carga útil de los flujos de datos comprimidos.
   </simpara>
  </note>

  <section xml:id="filters.compression.zlib">
   <title>zlib.deflate y zlib.inflate</title>
   <simpara>
    <literal>zlib.deflate</literal> (compresión) y
    <literal>zlib.inflate</literal> (descompresión) son implementaciones de
    los métodos de compresión descritos en <link xlink:href="&url.rfc;1951">RFC 1951</link>.
    Los filtros <literal>deflate</literal> toma hasta tres parámetros pasados como
    un array asociativo.

   <parameter>level</parameter> describe la intensidad de compresión (1-9).
   Números más grandes producen, por lo general, resultados más pequeños, al
   costo de tiempo de procesamiento adicional. Dos niveles de compresión
   especiales existen también: 0 (para no-compresión), y -1 (el valor
   predeterminado de zlib -- actualmente 6).

   <parameter>window</parameter> es el registro en base-2 del tamaño de
   ventana del circuito cerrado de compresión. Valores más altos (de hasta
   15 -- 32768 bytes) producen mejor compresión al costo de más memoria,
   mientras valores más bajos (alrededor de 9 -- 512 bytes) producen una
   compresión inferior en un espacio de memoria más pequeño. El tamaño de
   <parameter>window</parameter> es actualmente <constant>15</constant>.

   <parameter>memory</parameter> es una escala que indica cuánta memoria
   debería ser reservada. Los valores válidos están en el rango de 1
   (reserva mínima) a 9 (reserva máxima). Esta reserva de memoria afecta
   únicamente la repidez y no tiene impacto en el tamaño del resultado
   generado.
   </simpara>

   <note>
    <simpara>
     Debido a que el nivel de compresión es el parámetro más comúnmente usado, puede ser alternativamente
     proporcionado como un valor entero simple (en lugar de un elemento de array).
    </simpara>
   </note>

  <simpara>
    Los filtros de compresión zlib.* están disponibles con PHP desde la
    versión <literal>5.1.0</literal> si el soporte de <link
    linkend="ref.zlib">zlib</link> se encuentra habilitado. También están
    disponibles como una característica portada de vuelta en la versión
    <literal>5.0.x</literal>, instalando el paquete <link
    xlink:href="&url.pecl.package;zlib_filter">zlib_filter</link> desde <link
    xlink:href="&url.pecl;">PECL</link>.
  </simpara>

   <example>
    <title>
     <literal>zlib.deflate</literal> y
     <literal>zlib.inflate</literal>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$params = array('level' => 6, 'window' => 15, 'memory' => 9);

$texto_original = "Esto es una prueba.\nEsto es solo una prueba.\nEsta no es una cadena importante.\n";
echo "El texto original tiene " . strlen($texto_original) . " caracteres.\n";

$da = fopen('test.deflated', 'w');
stream_filter_append($da, 'zlib.deflate', STREAM_FILTER_WRITE, $params);
fwrite($da, $texto_original);
fclose($da);

echo "El archivo comprimido tiene " . filesize('test.deflated') . " bytes.\n";
echo "El texto original era:\n";
/* Use readfile y zlib.inflate para descomprimir al vuelo */
readfile('php://filter/zlib.inflate/resource=test.deflated');

/* Genera la salida:

El texto original tiene 79 caracteres.
El archivo comprimido tiene 59 bytes.
El texto original era:
Esto es una prueba.
Esto es solo una prueba.
Esta no es una cadena importante.

 */
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>
     <literal>zlib.deflate</literal> simple
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$texto_original = "Esto es una prueba.\nEsto es solo una prueba.\nEsta no es una cadena importante.\n";
echo "El texto original tiene " . strlen($texto_original) . " caracteres.\n";

$da = fopen('test.deflated', 'w');
/* Aqui "6" indica el nivel 6 de compresion */
stream_filter_append($da, 'zlib.deflate', STREAM_FILTER_WRITE, 6);
fwrite($da, $texto_original);
fclose($da);

echo "El archivo comprimido tiene " . filesize('test.deflated') . " bytes.\n";

/* Genera la salida:

El texto original tiene 79 caracteres.
El archivo comprimido tiene 53 bytes.

 */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.compression.bzip2">
   <title>bzip2.compress y bzip2.decompress</title>
  <simpara>
   <literal>bzip2.compress</literal> y <literal>bzip2.decompress</literal>
   funcionan de la misma forma que los filtros zlib descritos anteriormente.
   El filtro <literal>bzip2.compress</literal> acepta hasta dos parámetros
   dados como elementos de una matriz asociativa:

   <parameter>blocks</parameter> es un valor entero desde 1 hasta 9 que
   indica el número de bloques de 100kbytes de memoria a reservar para el
   espacio de trabajo.

   <parameter>work</parameter> es también un valor entero que va desde 0 a
   250, e indica cuánto esfuerzo debe invertirse para expandir usando el
   método de compresión normal antes de caer en un método más lento pero más
   confiable. Modificar este parámetro afecta únicamente la rapidez de
   compresién. Ni el tamaño de la salida comprimida ni el uso de memoria se
   modifican por este valor. Un factor de trabajo de 0 le indica a la
   biblioteca bzip que debe usar el valor interno predeterminado.

   El filtro <literal>bzip2.decompress</literal> sólo acepta un parámetro,
   el cual puede ser pasado como un valor booleano ordinario, o como el
   elemento <parameter>small</parameter> de una matriz asociativa.

   <parameter>small</parameter>, cuando se define a un valor &true;, le
   indica a la biblioteca bzip de realice una descompresión con una cantidad
   de memoria mínima, al costo de la rapidez.
  </simpara>

  <simpara>
    Las filtros de compresión bzip2.* se encuentran disponibles con PHP
    desde la versión <literal>5.1.0</literal> si el soporte de <link
    linkend="ref.bzip2">bz2</link> se encuentra habilitado. También se
    encuentran disponibles como una característica portada hacia atrás en la
    versión <literal>5.0.x</literal>, instalando el paquete <link
    xlink:href="&url.pecl.package;bz2_filter">bz2_filter</link> desde <link
    xlink:href="&url.pecl;">PECL</link>.
  </simpara>

   <example>
    <title>
     <literal>bzip2.compress</literal> y
     <literal>bzip2.decompress</literal>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$param = array('blocks' => 9, 'work' => 0);

echo "El archivo original tiene " . filesize('LICENSE') . " bytes.\n";

$da = fopen('LICENSE.compressed', 'w');
stream_filter_append($da, 'bzip2.compress', STREAM_FILTER_WRITE, $param);
fwrite($da, file_get_contents('LICENSE'));
fclose($da);

echo "El archivo comprimido tiene " . filesize('LICENSE.compressed') . " bytes.\n";

/* Genera la salida:

El archivo original tiene 3288 bytes.
El archivo comprimido tiene 1488 bytes.

 */
?>
]]>
    </programlisting>
   </example>
  </section>
  </section>

 <section xml:id="filters.encryption">
  <title>Filtros de encriptación</title>

  <para>
    Los filtros de cifrado son especialmente útiles para el cifrado de archivos y flujos.
  </para>

  <section xml:id="filters.encryption.mcrypt">
   <title>mcrypt.* y mdecrypt.*</title>
   <para>
     &warn.deprecated.feature-7-1-0;
   </para>

  <simpara>
   <literal>mcrypt.*</literal> y <literal>mdecrypt.*</literal> ofrecen
   encripción y desencripción simétrica usando libmcrypt. Ambos conjuntos de
   filtros soportan los mismos algoritmos disponibles a la <link
   linkend="ref.mcrypt">extensión mcrypt</link> en la forma de
   <literal>mcrypt.ciphername</literal>, en donde
   <parameter>ciphername</parameter> es el nombre del cifrado que debe ser
   pasado a <function>mcrypt_module_open</function>. Los siguientes cinco
   parámetros se encuentran disponibles también:
  </simpara>

   <para>
    <table>
     <title>parámetros del filtro mcrypt</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Parámetro</entry>
        <entry>¿Requerido?</entry>
        <entry>Por omisión</entry>
        <entry>Valores de ejemplo</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>mode</entry>
        <entry>Optional</entry>
        <entry>cbc</entry>
        <entry>cbc, cfb, ecb, nofb, ofb, stream</entry>
       </row>
       <row>
        <entry>algorithms_dir</entry>
        <entry>Optional</entry>
        <entry>ini_get('mcrypt.algorithms_dir')</entry>
        <entry>Ubicación de los módulos de los algoritmos</entry>
       </row>
       <row>
        <entry>modes_dir</entry>
        <entry>Optional</entry>
        <entry>ini_get('mcrypt.modes_dir')</entry>
        <entry>Ubicación de los módulos de los modos</entry>
       </row>
       <row>
        <entry>iv</entry>
        <entry>Required</entry>
        <entry>N/A</entry>
        <entry>Típicamente 8, 16, o 32 bytes de datos binarios.  Depende del cifrado</entry>
       </row>
       <row>
        <entry>key</entry>
        <entry>Required</entry>
        <entry>N/A</entry>
        <entry>Típicamente 8, 16, o 32 bytes de datos binarios.  Depende del cifrado</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <example>
    <title>Encriptar/Desencriptar con Blowfish</title>
    <programlisting role="php">
<![CDATA[
<?php
//$key que se supone que ha sido generado previamente
$iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC);
$iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM);
$fp = fopen('encrypted-file.enc', 'wb');
fwrite($fp, $iv);
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key);
stream_filter_append($fp, 'mcrypt.blowfish', STREAM_FILTER_WRITE, $opts);
fwrite($fp, 'message to encrypt');
fclose($fp);

//desencriptar...
$fp = fopen('encrypted-file.enc', 'rb');
$iv = fread($fp, $iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC));
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key)
stream_filter_append($fp, 'mdecrypt.blowfish', STREAM_FILTER_READ, $opts);
$data = rtrim(stream_get_contents($fp));//trims off null padding
fclose($fp);
echo $data;
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Encriptar el archivo usando AES-128 CBC con SHA256 HMAC en PHP 5.5+</title>
    <programlisting role="php">
<![CDATA[
<?php
AES_CBC::encryptFile($password, "plaintext.txt", "encrypted.enc");
AES_CBC::decryptFile($password, "encrypted.enc", "decrypted.txt");

class AES_CBC
{
   protected static $KEY_SIZES = array('AES-128'=>16,'AES-192'=>24,'AES-256'=>32);
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; } //default AES-128
   public static function encryptFile($password, $input_stream, $aes_filename){
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $fin = fopen($input_stream, "rb");
      $fc = fopen($aes_filename, "wb+");
      if (!empty($fin) && !empty($fc)) {
         fwrite($fc, str_repeat("_", 32) );//marcador de posición, SHA256 HMAC irá aquí más tarde
         fwrite($fc, $hmac_salt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $esalt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mcrypt.rijndael-128', STREAM_FILTER_WRITE, $opts);
         $infilesize = 0;
         while (!feof($fin)) {
            $block = fread($fin, 8192);
            $infilesize+=strlen($block);
            fwrite($fc, $block);
         }
         $block_size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
         $padding = $block_size - ($infilesize % $block_size);//$padding es un número del 1 al 16
         fwrite($fc, str_repeat(chr($padding), $padding) );//realizar el relleno de PKCS7
         fclose($fin);
         fclose($fc);
         $hmac_raw = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
         $fc = fopen($aes_filename, "rb+");
         fwrite($fc, $hmac_raw);//sobrescribir el marcador de posición
         fclose($fc);
      }
   }
   public static function decryptFile($password, $aes_filename, $out_stream) {
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $hmac_raw = file_get_contents($aes_filename, false, NULL,  0, 32);
      $hmac_salt = file_get_contents($aes_filename, false, NULL, 32, $iv_size);
      $hmac_calc = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
      $fc = fopen($aes_filename, "rb");
      $fout = fopen($out_stream, 'wb');
      if (!empty($fout) && !empty($fc) && self::hash_equals($hmac_raw,$hmac_calc)) {
         fread($fc, 32+$iv_size);//skip sha256 hmac and salt
         $esalt = fread($fc, $iv_size);
         $iv    = fread($fc, $iv_size);
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mdecrypt.rijndael-128', STREAM_FILTER_READ, $opts);
         while (!feof($fc)) {
            $block = fread($fc, 8192);
            if (feof($fc)) {
               $padding = ord($block[strlen($block) - 1]);//asume el relleno del PKCS7
               $block = substr($block, 0, 0-$padding);
            }
            fwrite($fout, $block);
         }
         fclose($fout);
         fclose($fc);
      }
   }
   private static function hash_equals($str1, $str2) {
      if(strlen($str1) == strlen($str2)) {
         $res = $str1 ^ $str2;
         for($ret=0,$i = strlen($res) - 1; $i >= 0; $i--) $ret |= ord($res[$i]);
         return !$ret;
      }
      return false;
   }
   private static function calculate_hmac_after_32bytes($password, $hsalt, $filename) {
      static $init=0;
      $init or $init = stream_filter_register("user-filter.skipfirst32bytes", "FileSkip32Bytes");
      $stream = 'php://filter/read=user-filter.skipfirst32bytes/resource=' . $filename;
      $hkey = hash_pbkdf2("sha256", $password, $hsalt, $iterations=1000, 24, $raw=true);
      return hash_hmac_file('sha256', $stream, $hkey, $raw=true);
   }
}
class FileSkip32Bytes extends php_user_filter
{
   private $skipped=0;
   function filter($in, $out, &$consumed, $closing)  {
      while ($bucket = stream_bucket_make_writeable($in)) {
         $outlen = $bucket->datalen;
         if ($this->skipped<32){
            $outlen = min($bucket->datalen,32-$this->skipped);
            $bucket->data = substr($bucket->data, $outlen);
            $bucket->datalen = $bucket->datalen-$outlen;
            $this->skipped+=$outlen;
         }
         $consumed += $outlen;
         stream_bucket_append($out, $bucket);
      }
      return PSFS_PASS_ON;
   }
}
class AES_128_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; }
}
class AES_192_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-192']; }
}
class AES_256_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-256']; }
}
]]>
    </programlisting>
   </example>
  </section>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
