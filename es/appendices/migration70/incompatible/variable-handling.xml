<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339621 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<sect2 xml:id="migration70.incompatible.variable-handling">
 <title>Cambios en el manejo de variables</title>
 
 <para>
  PHP 7 ahora emplea un árbol sintáctico abstracto al analizar ficheros. Esto
  ha permitido muchas mejoras en el lenguaje que antes eran
  imposibles debido a las limitaciones del analizador empleado en versiones previas
  de PHP, aunque ha resultado en la eliminación de unos pocos casos especiales por
  razones de consistencia, dando así lugar a roturas de retrocompatibilidad. Dichos casos
  están detallados a continuación.
 </para>
 
 <sect3 xml:id="migration70.incompatible.variable-handling.indirect">
  <title>
   Cambios en el manejo de variables, propiedades y métodos indirectos
  </title>
  
  <para>
   El acceso indirecto a variables, propiedades y métodos ahora se
   evalúa estrictamente de izquierda a derecha, en contraste a la mezcla anterior
   de casos especiales. La tabla de abajo muestra los cambios en el orden de
   evaluación.
  </para>
  
  <para>
   <table>
    <title>Antigua y nueva evaluación de expresiones indirectas</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Expresión</entry>
       <entry>Interpretación de PHP 5</entry>
       <entry>Interpretación de PHP 7</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <code>$$foo['bar']['baz']</code>
       </entry>
       <entry>
        <code>${$foo['bar']['baz']}</code>
       </entry>
       <entry>
        <code>($$foo)['bar']['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']()</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']()</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>Foo::$bar['baz']()</code>
       </entry>
       <entry>
        <code>Foo::{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>(Foo::$bar)['baz']()</code>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  
  <para>
   El código que emplee el orden antiguo de evaluación de derecha a izquierda debe ser rescrito
   para utilizar explícitamente el orden de evaluación con llaves (véase la columna de
   en medio de arriba). Esto hará al código compatible con PHP 7.x y
   retrocompatible con PHP 5.x.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.variable-handling.list">
  <title>Cambios al manejo de <function>list</function></title>
  
  <sect4 xml:id="migration70.incompatible.variable-handling.list.order">
   <title>
    <function>list</function> ya no asigna variables en orden inverso
   </title>
   
   <para>
    <function>list</function> ahora asigna valores a variables en el orden
    en el que estas se definen, en vez de en orden inverso. En general, esto solamente
    afecta al caso donde <function>list</function> se emplea junto
    con el operador de array <code>[]</code>, como se muestra a continuación:
   </para>
   
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list($a[], $a[], $a[]) = [1, 2, 3];
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(3)
  [1]=>
  int(2)
  [2]=>
  int(1)
}
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </informalexample>
   
   <para>
    En general, se recomienda no depender del orden en el que ocurren
    las asignaciones de <function>list</function>, ya que este es un detalle de
    implementación que podría cambiar en el futuro.
   </para>
  </sect4>
  
  <sect4 xml:id="migration70.incompatible.variable-handling.list.empty">
   <title>Se han eliminado las asignaciones vacías de <function>list</function></title>
   
   <para>
    Las construcciones de <function>list</function> ya no pueden estar vacías. Lo siguiente
    ya no es válido:
   </para>
   
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list() = $a;
list(,,) = $a;
list($x, list(), $y) = $a;
?>
]]>
    </programlisting>
   </informalexample>
  </sect4>
  
  <sect4 xml:id="migration70.incompatible.variable-handling.list.string">
   <title><function>list</function> no puede desempaquetar <type>string</type>s</title>
   
   <para>
    <function>list</function> ya no puede desempaquetar variables de tipo
    <type>string</type>. Debería usarse <function>str_split</function> en su lugar.
   </para>
  </sect4>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.variable-handling.array-order">
  <title>
   Cambio en el ordenamiento de arrays cuando los elementos se crean automáticamente
   durante las asignaciones por referencia
  </title>
  
  <para>
   El orden de los elementos de un array ha cambiado cuando dichos elementos han
   sido creados automáticamente haciendo referencia a ellos en una asignación
   por referencia. Por ejemplo:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.variable-handling.global">
  <title>&global; solamente acepta variables simples</title>
  
  <para>
   Ya no se pueden utilizar <link linkend="language.variables.variable">variables
   variables</link> con la palabra reservada &global;. Se puede emplear la sintaxis
   de llaves para emular el comportamiento anterior si fuera necesario:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function f() {
    // Válido solamente en PHP 5.
    global $$foo->bar;

    // Válido en PHP 5 y 7.
    global ${$foo->bar};
}
?>
]]>
   </programlisting>
  </informalexample>
  
  <para>
   Como principio general, se desaconseja el uso de &global; con algo que no sea
   una simple variable.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.variable-handling.parentheses">
  <title>
   Los paréntesis alrededor de argumentos de una función ya no afectan al comportamiento
  </title>
  
  <para>
   En PHP 5, el uso de paréntesis redundantes alrededor de un argumento de una función podía
   silenciar advertencias del estándar estricto cuando el argumento de dicha función era pasado por
   referencia. Estas advertencias ahora se emiten siempre.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function obtenerArray() {
    return [1, 2, 3];
}

function arrayAlCuadrado(array &$a) {
    foreach ($a as &$v) {
        $v **= 2;
    }
}

// Genera una advertencia en PHP 7.
arrayAlCuadrado((obtenerArray()));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Notice: Only variables should be passed by reference in /tmp/test.php on line 13
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
