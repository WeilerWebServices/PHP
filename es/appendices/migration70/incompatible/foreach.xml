<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337376 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<sect2 xml:id="migration70.incompatible.foreach">
 <title>Cambios en &foreach;</title>
 
 <para>
  Se han realizado cambios menores en el comportamiento de la estructura de control
  &foreach;, principalmente alrededor del manejo del puntero de arrays interno y
  la modificación del array en su recorrido.
 </para>
 
 <sect3 xml:id="migration70.incompatible.foreach.array-pointer">
  <title>&foreach; ya no cambia el puntero de arrays interno</title>
  
  <para>
   Antes de PHP 7, el puntero de arrays interno era modificado mientras el array
   se recorría con &foreach;. Este ya no es el caso, como se muestra
   en el siguiente ejemplo:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0, 1, 2];
foreach ($array as &$val) {
    var_dump(current($array));
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(1)
int(2)
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(0)
int(0)
]]>
   </screen>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.foreach.by-value">
  <title>La iteración de &foreach; por valor opera sobre una copia del array</title>
  
  <para>
   Al utilizar el modo predeterminado de iteración por valor, &foreach; ahora opera sobre una
   copia del array a recorrer en lugar del array en sí. Esto significa
   que los cambios realizados a un array durante una iteración no afectarán a los
   valores que se recorren.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.foreach.by-ref">
  <title>Se ha mejorado el comportamiento de la iteración de &foreach; por referencia</title>
  
  <para>
   Cuando se itera por referencia, &foreach; ahora realizará un trabajo mejor realizando
   un seguimiento de los cambios hechos en el array durante la iteración. Por ejemplo,
   al añadir valores a un array mientras se recorre dará como resultado también
   el recorrido de los valores añadidos:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0];
foreach ($array as &$val) {
    var_dump($val);
    $array[1] = 1;
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(0)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(1)
]]>
   </screen>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.foreach.object">
  <title>Iteración de objetos no <classname>Traversable</classname>s</title>
  
  <para>
   Recorrer un objeto no <classname>Traversable</classname> ahora tendrá
   el mismo comportamiento que recorrer arrays por referencia. Esto
   resulta en que la
   <link linkend="migration70.incompatible.foreach.by-ref">mejora del comportamiento al modificar un array durante la iteración</link>
   se aplique también cuando se añaden propiedades a o se eleminan de un
   objeto.
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
