<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341799 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<sect2 xml:id="migration70.incompatible.other">
 <title>Otros cambios retroincompatibles</title>
 
 <sect3 xml:id="migration70.incompatible.other.new-by-ref">
  <title>No se pueden asignar nuevos objetos por referencia</title>
  
  <para>
   El resultado de la sentencia &new; ya no se puede asignar a una variable
   por referencia:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class C {}
$c =& new C;
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
Deprecated: Assigning the return value of new by reference is deprecated in /tmp/test.php on line 3
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Parse error: syntax error, unexpected 'new' (T_NEW) in /tmp/test.php on line 3
]]>
   </screen>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.classes">
  <title>Nombres de clase, interfaz y rasgo inválidos</title>
  
  <para>
   Los siguientes nombres no se pueden emplear para nombrar a clases, interfaces o rasgos:
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara><type>bool</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>int</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>float</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>string</type></simpara>
   </listitem>
   <listitem>
    <simpara>&null;</simpara>
   </listitem>
   <listitem>
    <simpara>&true;</simpara>
   </listitem>
   <listitem>
    <simpara>&false;</simpara>
   </listitem>
  </itemizedlist>
  
  <para>
   Tampoco deberían utilizarse los siguientes nombres. Aunque no
   generan un error en PHP 7.0, están reservados para un uso futuro, por lo que
   deberían considerarse obsoletos.
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara><type>resource</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>object</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>mixed</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>numeric</type></simpara>
   </listitem>
  </itemizedlist>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.php-tags">
  <title>Eliminación de las etiquetas ASP y de script de PHP</title>
  
  <para>
   Se ha eliminado el soporte para usar etiquetas ASP y de script para delimitar código de PHP.
   Las etiquetas afectadas son:
  </para>
  
  <table>
   <title>Etiquetas ASP y de script eliminadas</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Etiqueta de apertura</entry>
      <entry>Etiqueta de cierre</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><code>&lt;%</code></entry>
      <entry><code>%&gt;</code></entry>
     </row>
     <row>
      <entry><code>&lt;%=</code></entry>
      <entry><code>%&gt;</code></entry>
     </row>
     <row>
      <entry><code>&lt;script language="php"&gt;</code></entry>
      <entry><code>&lt;/script&gt;</code></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.incompatible-this">
  <title>Eliminación de llamadas desde contextos incompatibles</title>
  
  <para>
   <link linkend="migration56.deprecated.incompatible-context">Ya obsoletas en PHP 5.6</link>,
   las llamadas estáticas realizadas a un método no estático con un contexto incompatible
   resultarán ahora en la tenencia del método llamado de una variable
   <literal>$this</literal> indefinida y en la emisión de una advertencia de obsolescencia.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    public function prueba() { var_dump($this); }
}

// Nota: NO extiende a A
class B {
    public function llamadaAMétodoNoEstáticoDeA() { A::prueba(); }
}

(new B)->llamadaAMétodoNoEstáticoDeA();
?>
]]>
   </programlisting>
   &example.outputs.56;
   <screen>
<![CDATA[
Deprecated: Non-static method A::prueba() should not be called statically, assuming $this from incompatible context in /tmp/test.php on line 8
object(B)#1 (0) {
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Deprecated: Non-static method A::prueba() should not be called statically in /tmp/test.php on line 8

Notice: Undefined variable: this in /tmp/test.php on line 3
NULL
]]>
   </screen>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.yield">
  <title>&yield; ahora es un operador asociativo derecho</title>
  
  <para>
   El constructor &yield; ya no requiere paréntesis, ya que ha pasado
   a ser un operador asociativo derecho con precedencia entre
   <literal>print</literal> y <literal>=&gt;</literal>. Esto puede resultar en un
   cambio de comportamiento:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo yield -1;
// Anteriormente era interpretado como
echo (yield) - 1;
// Y ahora es intrepretado como
echo yield (-1);

yield $foo or die;
// Anteriormente era interpretado como
yield ($foo or die);
// Y ahora es intrepretado como
(yield $foo) or die;
?>
]]>
   </programlisting>
  </informalexample>
  
  <para>
   Los paréntesis se pueden emplear para desambiguar estos casos.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.func-parameters">
  <title>Las funciones no pueden tener varios parámetros con el mismo nombre</title>
  
  <para>
   Ya no es posible definir dos o más parámetros de función con el
   mismo nombre. Por ejemplo, el siguiente método generará un error
   <constant>E_COMPILE_ERROR</constant>:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function foo($a, $b, $sin_usar, $sin_usar) {
    //
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.func-parameter-modified">
  <title>Las funciones que inspeccionan argumentos informan del valor del parámetro <emphasis>actual</emphasis></title>
  
  <para>
   <function>func_get_arg</function>, <function>func_get_args</function>,
   <function>debug_backtrace</function> y las excepciones de información de rastreo ya no
   informarán del valor original que fue pasado a un paramétro, en su lugar
   proporcionarán el valor actual (el cual podría haber sido modificado).
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function foo($x) {
    $x++;
    var_dump(func_get_arg(0));
}
foo(1);?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
1
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
2
]]>
   </screen>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.multiple-default">
  <title>Las sentencias switch no pueden tener varios bloques default</title>
  
  <para>
   Ya no es posible definir dos o más bloques default en una sentencia
   switch. Por ejemplo, la siguiente senetencia switch generará un error
   <constant>E_COMPILE_ERROR</constant>:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch (1) {
    default:
    break;
    default:
    break;
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.http-raw-post-data">
  <title>Eliminación de <varname>$HTTP_RAW_POST_DATA</varname></title>
  
  <para>
   <varname>$HTTP_RAW_POST_DATA</varname> ya no está disponible. Debería usarse el flujo
   <link linkend="wrappers.php.input"><literal>php://input</literal></link>
   en su lugar.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.ini-comments">
  <title>Eliminación de los comentarios <literal>#</literal> en ficheros INI</title>
  
  <para>
   Se ha eliminado el soporte para los comentarios prefijados con <literal>#</literal> en los ficheros
   INI. Se debe emplear en su lugar <literal>;</literal> (punto y coma). Este cambio
   se aplica a &php.ini;, así como a ficheros manejados por
   <function>parse_ini_file</function> y <function>parse_ini_string</function>.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.json-to-jsond">
  <title>JSON extension replaced with JSOND</title>
  
  <para>
   Se ha reemplazado la extensión JSON por JSOND ocasionando tres roturas de RC
   (retocompatibilidad). La primera, un número no puede finalizar con un punto decimal (esto es,
   <literal>34.</literal> debe cambiarse para que sea o <literal>34.0</literal> o
   <literal>34</literal>). La segunda, al utilizar notación científica, el
   exponente <literal>e</literal> no debe seguir inmediatamente a un punto decimal
   (esto es, <literal>3.e3</literal> se debe cambiar para que sea o
   <literal>3.0e3</literal> o <literal>3e3</literal>).
   Finalmente, una cadena vacía ya no se considera un JSON válido.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.internal-function-failure-overflow">
  <title>Fallo de funciones internas en un desbordamiento</title>
  
  <para>
   Anteriormente, las funciones internas truncaban de forma silenciosa números producidos desde
   coacciones de tipo float a integer cuando el float era demasiado grande de representar como un
   integer. Ahora, se emitirá un E_WARNING y se devolverá &null;.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.fixes-custom-session-handler">
  <title>Reparaciones en los valores de devolución de gestores de sesión personalizados</title>
  
  <para>
   Cualquier función declarada implementada por gestores de sesión personalizados que devuelvan
   o &false; o <literal>-1</literal> serán errores fatales. Si desde estas funciones
   se devuelve cualquier valor distinto de un booleano, <literal>-1</literal>, o
   <literal>0</literal>, fallarán y se emitirá un
   E_WARNING.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.other.sort-order">
  <title>Sort order of equal elements</title>
  <para>
   El algoritmo de ordenación interno ha sido mejorado, lo cual puede resultar en
   un orden diferente de elementos, que se comparan como iguales, que antes.
  </para>
  <note>
   <para>
    No dependa del orden de los elementos que se comparan como iguales; podría cambiar
    en cualquier momento.
   </para>
  </note>
 </sect3>
 
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
