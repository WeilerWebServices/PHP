<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338464 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<sect2 xml:id="migration70.incompatible.error-handling">
 <title>Cambios en el manejo de errores y excepciones</title>
 
 <para>
  Muchos errores fatales y errores fatales recuperables han sido convertidos en excepciones en
  PHP 7. Estas excepciones de error heredan de la clase <classname>Error</classname>,
  la cual implementa en sí la interfaz <classname>Throwable</classname>,
  (la interfaz base que heredan todas las excepciones).
 </para>
 
 <para>
  Esto significa que los manejadores de errores personalizados podrían no desencadenarse debido a que
  podrían lanzarse excepciones en su lugar (causando nuevos errores fatales para excepciones
  <classname>Error</classname> no capturadas).
 </para>
 
 <para>
  Se puede encontrar una descripción más completa de cómo operan los errores en PHP 7
  en la <link linkend="language.errors.php7">página de errores de PHP 7</link>. Esta guía
  de migración simplemente enumerará los cambios que afectan a la
  retrocompatiblidad.
 </para>

 <sect3 xml:id="migration70.incompatible.error-handling.set-exception-handler">
  <title>
   Ya no se garantiza que <function>set_exception_handler</function>
   reciba objetos <classname>Exception</classname>
  </title>

  <para>
   El código que implemente un manejador de excepciones registrado con
   <function>set_exception_handler</function> empleando una declaración de tipo de
   <classname>Exception</classname> causará un error fatal cuando sea
   lance un objeto <classname>Error</classname>.
  </para>

  <para>
   Si el manejador necesita funcionar tanto en PHP 5 como en PHP 7, se debería eliminar la
   declaración de tipo del manejador, mientras que el código que sea migrado para que
   funcione exclusivamente en PHP 7 puede simplemente reemplazar la
   declaración de tipo <classname>Exception</classname> con
   <classname>Throwable</classname> en su lugar.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Código de la era de PHP 5 que no funcionará.
function handler(Exception $e) { ... }
set_exception_handler('handler');

// Compatible con PHP 5 y 7.
function handler($e) { ... }

// Solo PHP 7.
function handler(Throwable $e) { ... }
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.error-handling.constructors">
  <title>Los constructores internos siempre lanzan excepciones en caso de fallo</title>
  
  <para>
   Previamente, algunas clases internas devolvían &null; o un objeto inutilizable
   cuando el constructor fallaba. Ahora, todas las clases internas lanzan una
   <classname>Exception</classname> en tal caso, de la misma forma que las clases
   de usuario ya deben de hacerlo.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.error-handling.parse">
  <title>Los errores de análisis lanzan un objeto <classname>ParseError</classname></title>
  
  <para>
   Los errores de análisis ahora lanzan un objeto <classname>ParseError</classname>. El
   manejo de errores para <function>eval</function> ahora debería incluir un bloque &catch;
   que permita manejar dicho error.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.error-reporting.e-strict">
  <title>Cambios en la severidad de avisos E_STRICT</title>
  
  <para>
   Todos los avisos de <constant>E_STRICT</constant> han sido reclasificados a
   otros niveles. Se mantiene la consntante <constant>E_STRICT</constant>, por lo que llamadas como
   <literal>error_reporting(E_ALL|E_STRICT)</literal> no ocasionarán ningún error.
  </para>
  <para>
   <table>
    <title>Cambios en la severidad de avisos de <constant>E_STRICT</constant></title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Situación</entry>
       <entry>Nuevo nivel/comportamiento</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Indexación mediante un recurso</entry>
       <entry><constant>E_NOTICE</constant></entry>
      </row>
      <row>
       <entry>Métodos estáticos abstractos</entry>
       <entry>Aviso eliminado, no genera un error</entry>
      </row>
      <row>
       <entry>'Redefinición' de un constructor</entry>
       <entry>Aviso eliminado, no genera un error</entry>
      </row>
      <row>
       <entry>Discordancia de la signatura durante la herencia</entry>
       <entry><constant>E_WARNING</constant></entry>
      </row>
      <row>
       <entry>Misma propiedad (compatible) en dos rasgos empleados</entry>
       <entry>Aviso eliminado, no genera un error</entry>
      </row>
      <row>
       <entry>Acceso a una propiedad estática de forma no estática</entry>
       <entry><constant>E_NOTICE</constant></entry>
      </row>
      <row>
       <entry>Solamente las variables deberían ser asignadas por referencia</entry>
       <entry><constant>E_NOTICE</constant></entry>
      </row>
      <row>
       <entry>Solamente las variables deberían ser pasadas por referencia</entry>
       <entry><constant>E_NOTICE</constant></entry>
      </row>
      <row>
       <entry>Llamada a métodos no estáticos de forma estática</entry>
       <entry><constant>E_DEPRECATED</constant></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
