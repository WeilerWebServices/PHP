<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339704 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<sect2 xml:id="migration70.incompatible.integers">
 <title>Cambios en el manejo del tipo <type>integer</type></title>
 
 <sect3 xml:id="migration70.incompatible.integers.invalid-octals">
  <title>Literales de octal inválidos</title>
  
  <para>
   Previamente, los literales de octal que contenían números inválidos eran truncados
   silenciosamente (<literal>0128</literal> era tomado como <literal>012</literal>).
   Ahora, un literal de octal inválido causará un error de análisis.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.integers.negative-bitshift">
  <title>Desplazamientos negativos de bits</title>
  
  <para>
   Los desplazamientos de bit mediante números negativos ahora lanzan un
   <classname>ArithmeticError</classname>:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(1 >> -1);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(0)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Fatal error: Uncaught ArithmeticError: Bit shift by negative number in /tmp/test.php:2
Stack trace:
#0 {main}
  thrown in /tmp/test.php on line 2
]]>
   </screen>
  </informalexample>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.integers.out-of-range">
  <title>Desplazamientos de bits fuera de rango</title>
  
  <para>
   Los desplazamientos de bits (en cualquier dirección) fuera del ancho de bit de un
   <type>integer</type> siempre resultarán en 0. Anteriormente, el comportamiento de
   dichos desplazamientos dependía de la arquitectura.
  </para>
 </sect3>
 
 <sect3 xml:id="migration70.incompatible.integers.div-by-zero">
  <title>Cambios en la División por Cero</title>
  
  <para>
   Anteriormente, cuando se empleaba 0 como divisor de los operadores de
   división (/) o módulo (%), se emitía un error de tipo E_WARNING y
   se devolvía <constant>false</constant>. Ahora, el operador de división
   devuelve un valor de tipo float así como +INF, -INF, o NAN tal como se especifica en el IEEE 754. El error E_WARNING del
   operador de módulo ha sido eliminado, lanzando ahora una excepción
   <classname>DivisionByZeroError</classname>.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(3/0);
var_dump(0/0);
var_dump(0%0);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
Warning: Division by zero in %s on line %d
bool(false)

Warning: Division by zero in %s on line %d
bool(false)

Warning: Division by zero in %s on line %d
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Warning: Division by zero in %s on line %d
float(INF)

Warning: Division by zero in %s on line %d
float(NAN)

PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in %s line %d
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
