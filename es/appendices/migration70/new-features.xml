<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342554 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration70.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuevas características</title>
 
 <sect2 xml:id="migration70.new-features.scalar-type-declarations">
  <title>Declaraciones de tipo escalar</title>
  
  <para>
   Las
   <link linkend="functions.arguments.type-declaration">declaraciones de tipo</link> escalar
   son de dos tipos: coercitivo (por defecto) y estricto. Ahora se pueden forzar
   los siguientes tipos para parámetros (tanto coercitiva como estrictamente): cadenas de caracteres
   (<type>string</type>), números enteros (<literal>int</literal>), números
   decimales (<type>float</type>), y booleanos (<literal>bool</literal>). Estos
   se añaden a los tipos introducidos en PHP 5: nombres de clases, interfaces,
   <type>array</type>s y <type>callable</type>s.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Modo coercitivo
function sumaDeEnteros(int ...$enteros)
{
    return array_sum($enteros);
}

var_dump(sumaDeEnteros(2, '3', 4.1));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(9)
]]>
   </screen>
  </informalexample>
  
  <para>
   Para habilitar el modo estricto se debe colocar una simple directiva &declare; al
   inicio del fichero. Esto siginfica que la rigurosidad de la tipificación de escalares se
   configura en función de cada fichero. Esta directiva no solamente afecta a las declaraciones
   de tipo de parámetros, sino también al tipo de devolución de una función (véanse las
   <link linkend="functions.returning-values.type-declaration">declaraciones de tipo de devolución</link>),
   a funciones internas de PHP, y a funciones de extensiones
   cargadas.
  </para>
  
  <para>
   Se puede encontrar la documentación completa y ejemplos de las declaraciones de tipo escalar en
   la
   referencia de
   <link linkend="functions.arguments.type-declaration">declaraciones de tipo</link>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.return-type-declarations">
  <title>Declaraciones de tipo de devolución</title>
  
  <para>
   PHP 7 añade soporte para
   <link linkend="functions.returning-values.type-declaration">declaraciones de tipo de devolución</link>.
   Similarmente a las
   <link linkend="functions.arguments.type-declaration">declaraciones de tipo de argumento</link>,
   las declaraciones de tipo de devolución especifican el tipo del valor que será
   devuelto por una función. Están disponibles los mismos
   <link linkend="functions.arguments.type-declaration.types">tipos</link>
   tanto para las declaraciones de tipo de devolución como para las declaraciones
   de tipo de argumento.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function sumarArrays(array ...$arrays): array
{
    return array_map(function(array $array): int {
        return array_sum($array);
    }, $arrays);
}

print_r(sumarArrays([1,2,3], [4,5,6], [7,8,9]));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => 6
    [1] => 15
    [2] => 24
)
]]>
   </screen>
  </informalexample>
  
  <para>
   Se puede encontrar la documentación completa y ejemplos de las declaraciones de tipo de devolución en
   la
   referencia de las
   <link linkend="functions.returning-values.type-declaration">declaraciones de tipo de devolución</link>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.null-coalesce-op">
  <title>Operador de fusión de null</title>
  
  <para>
   El operador de fusión de null (<literal>??</literal>) se ha añadido como
   aliciente sintáctico para el caso común de la necesidad de utilizar un operador ternario junto
   con <function>isset</function>. Devuelve su primer operando
   si existe y no es &null;; de lo contrario devuelve su segundo operando.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Obntener el valor de $_GET['usuario'] y devolver 'nadie'
// si no existe.
$nombre_usuario = $_GET['usuario'] ?? 'nadie';
// Esto equivale a:
$nombre_usuario = isset($_GET['usuario']) ? $_GET['usuario'] : 'nadie';

// La fusión se puede encadenar: esto devolverá el primer
// valor definido de $_GET['usuario'], $_POST['usuario'],
// y 'nadie'.
$nombre_usuario = $_GET['usuario'] ?? $_POST['usuario'] ?? 'nadie';
?>
]]>
   </programlisting>
  </informalexample>
  
  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>
 
 <sect2 xml:id="migration70.new-features.spaceship-op">
  <title>El operador nave espacial</title>
  <para>
   El operador nave espacial se emplea para comparar dos expresiones. Devuelve -1, 0 
   o 1 cuando <varname>$a</varname> es respectivamente menor, igual, o mayor
   que <varname>$b</varname>. Las comparaciones se realizan según las
   <link linkend="types.comparisons">reglas de comparación de tipos</link> usuales de PHP.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Números enteros
echo 1 <=> 1; // 0
echo 1 <=> 2; // -1
echo 2 <=> 1; // 1

// Numeros decimales
echo 1.5 <=> 1.5; // 0
echo 1.5 <=> 2.5; // -1
echo 2.5 <=> 1.5; // 1
 
// Cadenas de caracteres
echo "a" <=> "a"; // 0
echo "a" <=> "b"; // -1
echo "b" <=> "a"; // 1
?>
]]>
   </programlisting>
  </informalexample>
  
  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>
 
 <sect2 xml:id="migration70.new-features.define-array">
  <title>Arrays constantes con <function>define</function></title>
  
  <para>
   Ahora se pueden definir constantes de <type>array</type> con
   <function>define</function>. En PHP 5.6, solamente se podían definir con
   &const;.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
define('ANIMALES', [
    'perro',
    'gato',
    'pájaro'
]);

echo ANIMALES[1]; // imprime "gato"
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.anonymous-classes">
  <title>Clases anónimas</title>
  
  <para>
   Se ha añadido soporte para clases anónimas mediante <literal>new
   clase</literal>. Estas se pueden utilizar en lugar de definiciones de clases completas
   para objetos desechables:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
interface Logger {
    public function log(string $msg);
}

class Application {
    private $logger;

    public function getLogger(): Logger {
         return $this->logger;
    }

    public function setLogger(Logger $logger) {
         $this->logger = $logger;
    }
}

$app = new Application;
$app->setLogger(new class implements Logger {
    public function log(string $msg) {
        echo $msg;
    }
});

var_dump($app->getLogger());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(class@anonymous)#2 (0) {
}
]]>
   </screen>
  </informalexample>
  
  <para>
   La documentación completa se puede encontrar en la
   <link linkend="language.oop5.anonymous">referencia de clases anónimas</link>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.unicode-codepoint-escape-syntax">
  <title>Sintaxis de escape de puntos de códigos de Unicode</title>
  
  <para>
   Esta sintaxis toma un punto de código de Unicode en forma hexadecimal, e imprime ese
   punto de código en UTF-8 a un string con entrecomillado doble o a un heredoc. Se
   acepta cualquier punto de código válido, siendo los ceros iniciales opcionales.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
echo "\u{aa}";
echo "\u{0000aa}";
echo "\u{9999}";
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ª
ª (lo mismo que antes pero con ceros iniciales opcinales)
香
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.closure-call-method">
  <title><methodname>Closure::call</methodname></title>
  
  <para>
   <methodname>Closure::call</methodname> es una manera más eficiente y abreviada
   de vincular temporalmente un ámbito de objeto a un cierre e invocarlo.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {private $x = 1;}

// Código anterior a PHP 7
$getX = function() {return $this->x;};
$getXCB = $getX->bindTo(new A, 'A'); // cierre intermedio
echo $getXCB();

// Código de PHP 7+
$getX = function() {return $this->x;};
echo $getX->call(new A);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
1
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.filtered-unserialize">
  <title>Filtros para <function>unserialize</function></title>
  
  <para>
   Esta característica busca el proporcionar una mejor seguridad al deserializar objetos en
   datos no fiables. Previene de posibles inyecciones de código al capacitar al
   desarrollador a crear listas blancas de clases que deden ser deserializadas.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// convertir todos los objetos a un objeto __PHP_Incomplete_Class
$data = unserialize($foo, ["allowed_classes" => false]);

// convertir todos los objetos a un objeto __PHP_Incomplete_Class excepto a los de MiClase y MiClase2
$data = unserialize($foo, ["allowed_classes" => ["MiClase", "MiClase2"]]);

// comportamiento predeterminado (lo mismo que omitir el segundo argumento) que acepta todas las clases
$data = unserialize($foo, ["allowed_classes" => true]);
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.intlchar">
  <title><classname>IntlChar</classname></title>
  
  <para>
   La nueva clase <classname>IntlChar</classname> busca exponer funcionalidad
   adicional de ICU. La clase en sí define varios métodos estáticos y
   constantes que se pueden emplear para manipular caracteres Unicode.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

printf('%x', IntlChar::CODEPOINT_MAX);
echo IntlChar::charName('@');
var_dump(IntlChar::ispunct('!'));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
10ffff
COMMERCIAL AT
bool(true)
]]>
   </screen>
  </informalexample>
  
  <para>
   Para utilizar esta clase debe estar instalada la extensión <link linkend="book.intl">Intl</link>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.expectations">
  <title>Previsiones</title>
  
  <para>
   Las <link linkend="function.assert.expectations">previsiones</link> son una
   mejora retrocompatible con la antigua función <function>assert</function>.
   Con ellas se pueden realizar afirmaciones sin coste en código de producción,
   proporcionando la capacidad de lanzar excepciones personalizadas cuando la afirmación falla.
  </para>
  
  <para>
   Mientras que la API antigua se siguie manteniendo por compatibilidad,
   <function>assert</function> ahora es un constructor de lenguaje, permitiendo que el primer
   parámetro sea una expresión en lugar de solamente un <type>string</type> a
   evaluar o un valor de tipo <type>boolean</type> a probar.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
ini_set('assert.exception', 1);

class ErrorPersonalizado extends AssertionError {}

assert(false, new ErrorPersonalizado('Un mensaje de error'));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught ErrorPersonalizado: Un mensaje de error
]]>
   </screen>
  </informalexample>
  
  <para>
   Se pueden encontrar los detalles completos de esta característica, incluyendo cómo
   configurarla tanto en entornos de desarrollo como de producción, en la
   <link linkend="function.assert.expectations">sección de previsiones</link>
   de la referencia de <function>assert</function>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.group-use-declarations">
  <title>Declaraciones de <literal>use</literal> en grupo</title>
  
  <para>
   Las clases, funciones y constantes que se importen desde el mismo &namespace;
   ahora pueden ser agrupadas en una única sentencia &use.namespace;.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Código anterior a PHP 7
use un\espacioDeNombres\ClaseA;
use un\espacioDeNombres\ClaseB;
use un\espacioDeNombres\ClaseC as C;

use function un\espacioDeNombres\fn_a;
use function un\espacioDeNombres\fn_b;
use function un\espacioDeNombres\fn_c;

use const un\espacioDeNombres\ConstA;
use const un\espacioDeNombres\ConstB;
use const un\espacioDeNombres\ConstC;

// código de PHP 7+
use un\espacioDeNombres\{ClaseA, ClaseB, ClaseC as C};
use function un\espacioDeNombres\{fn_a, fn_b, fn_c};
use const un\espacioDeNombres\{ConstA, ConstB, ConstC};
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.generator-return-expressions">
  <title>Expresiones 'return' en generadores</title>
  
  <para>
   Esta característica se basa en la funcionalidad de los generadores introducida en PHP 5.5.
   Habilita a la sentencia <literal>return</literal> para utilizarla dentro de
   un generador para que pueda devolver una expresión final (la devolución por
   referencia no está permitida). Este valor se puede obtener empleando el nuevo
   método <literal>Generator::getReturn()</literal>, el cual solamente se puede utilizar
   una vez que el generador ha finalizado de producir valores.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$gen = (function() {
    yield 1;
    yield 2;

    return 3;
})();

foreach ($gen as $val) {
    echo $val, PHP_EOL;
}

echo $gen->getReturn(), PHP_EOL;
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
]]>
   </screen>
  </informalexample>
  
  <para>
   La capacidad de devolver explícitamente un valor final desde un generador
   (quizá desde una forma de computación de corutina) es útil debido a que puede ser
   específicamente manejado por el código del cliente que ejecuta el generador. Esto es mucho
   más simple que forzar al código del cliente a comprobar primero si el valor
   final se ha generado y luego, si es asi,
   manejar dicho valor específicamente.
  </para>
 </sect2>
 <sect2 xml:id="migration70.new-features.generator-delegation">
  <title>Delegación de generadores</title>
  
  <para>
   Los generadores ahora pueden delegar a otro generador,
   objeto <classname>Traversable</classname> o <type>array</type>
   de forma automática, sin la necesidad de escribir «clichés» en el generador
   más externo con la construcción &yield.from;.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function gen()
{
    yield 1;
    yield 2;
    yield from gen2();
}

function gen2()
{
    yield 3;
    yield 4;
}

foreach (gen() as $val)
{
    echo $val, PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
4
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.intdiv">
  <title>División entera con <function>intdiv</function></title>
  
  <para>
   La nueva función <function>intdiv</function> realiza una división entera
   de sus operandos y la devuelve.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(intdiv(10, 3));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.session-options">
  <title>Opciones de sesión</title>
  
  <para>
   <function>session_start</function> ahora acepta un <type>array</type> de
   opciones que sobrescriben las
   <link linkend="session.configuration">directivas de configuración de sesiones</link>
   establecidas normalmente en php.ini.
  </para>
  
  <para>
   Estas opciones también se han ampliado para admitir
   <link linkend="ini.session.lazy-write">session.lazy_write</link>, la cual está
   activada de forma predeterminada y causa que PHP solamente sobrescriba cualquier fichero de sesión si los
   datos de sesión han cambiado, y <literal>read_and_close</literal>, la cual es
   una opción que se puede pasar solo a <function>session_start</function> para
   indicar que los datos de sesión deberían ser leídos y luego la sesión debería
   ser cerrada inmediatamente sin cambios.
  </para>
  
  <para>
   Por ejemplo, para establecer
   <link linkend="ini.session.cache-limiter">session.cache_limiter</link> a
   <literal>private</literal> e inmediatamente cerrar la sesión después de
   leerla:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
session_start([
    'cache_limiter' => 'private',
    'read_and_close' => true,
]);
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.preg-repace-callback-array-function">
  <title><function>preg_replace_callback_array</function></title>
  
  <para>
   Con la nueva función <function>preg_replace_callback_array</function>,
   el código escrito es más claro al emplear la
   función <function>preg_replace_callback</function>. Antes de PHP 7,
   las retrollamadas que necesitaban ser ejecutadas por cada expresión regular requerían
   que la función de retrollamda fuera contaminada con muchas ramificaciones.
  </para>
  
  <para>
   Ahora, las retrollamadas se pueden registrar para cada expresión regular usando un
   array asociativo, donde la clave es una expresión regular y el valor es una
   retrollamada.
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.csprng-functions">
  <title>Funciones de <link linkend="book.csprng">CSPRNG</link></title>
  
  <para>
   Se han añadido dos nuevas funciones para generar números enteros y cadenas de
   caractéres criptográficamente seguros de una forma multiplataforma:
   <function>random_bytes</function> y <function>random_int</function>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.list-arrayaccess">
  <title>
   <function>list</function> siempre desempaqueta objetos que implementen
   <classname>ArrayAccess</classname>
  </title>
  
  <para>
   Anteriormente, no se garantizaba que <function>list</function> operase
   correctamente con objetos que implementasen <classname>ArrayAccess</classname>.
   Esto ha sido arreglado.
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.others">
  <title>Otras características</title>
  <itemizedlist>
   <listitem>
    <simpara>
     Se ha añadido el acceso a miembros de clase al clonar,
     p.ej. <literal>(clone $foo)-&gt;bar()</literal>.
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
