<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 349711 Maintainer: andresdzphp Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<sect1 xml:id="migration73.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Cambios incompatibles con el pasado</title>

 <sect2 xml:id="migration73.incompatible.core">
  <title>Núcleo PHP</title>

  <sect3 xml:id="migration73.incompatible.core.heredoc-nowdoc">
   <title>Interpretación de la etiqueta final Heredoc/Nowdoc</title>

   <para>
    Debido a la introducción de la <link
    linkend="migration73.new-features.core.heredoc">sintaxis flexible
    heredoc/nowdoc</link>, los documentos string que contienen la etiqueta final dentro de su cuerpo
    pueden causar errores de sintaxis o cambios de la interpretación. Por ejemplo en:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$str = <<<FOO
abcdefg
   FOO
FOO;
?>
]]>
     </programlisting>
    </informalexample>
    la aparición de <literal>FOO</literal> con sangría, previamente no tenía ningún
    significado especial. Ahora se interpretará como el final de la cadena heredoc y
    el siguiente <literal>FOO;</literal> provocará un error de sintaxis. Este problema
    siempre se puede resolver eligiendo una etiqueta final que no aparezca dentro del
    contenido de la cadena.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.continue-targeting-switch">
   <title>Continuar problemas del modificador de adventencias</title>

   <para>
    Declaraciones de <literal>continue</literal> dirigidas a <literal>switch</literal>
    las estructuras de flujo de control ahora generarán una advertencia. En php la
    declaración <literal>continue</literal> es equivalente atargeting switch is equivalent to
    <literal>break</literal>, mientras estas se comportan como <literal>continue 2</literal>
    en otros lenguajes.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
while ($foo) {
    switch ($bar) {
      case "baz":
         continue;
         // Warning: "continue" el modificador equivale a
         //          "break". ¿Te referías a usar "continue 2"?
   }
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.arrayaccess">
   <title>Interpretación estricta de las claves Integer en String ArrayAccess</title>

   <para>
    Acceos de array de tipo <literal>$obj["123"]</literal>, donde
    <literal>$obj</literal> implementa <classname>ArrayAccess</classname> y
    <literal>"123"</literal> es un integer <type>string</type> literal ya no
    dará como resultado una conversión implícita a integer, p.e.,
    <literal>$obj->offsetGet("123")</literal> se llamará en lugar de
    <literal>$obj->offsetGet(123)</literal>. Esto coincide para el comportamiento existente
    para los no literales. El comportamiento de arrays no se ve afectado de ninguna manera, ellos
    continuan explícitamente convirtiendo claves de string integrales a enteros.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.static-properties">
   <title>Propiedades estáticas ya no separadas por asignación de referencia</title>

   <para>
    En PHP, las propiedades estáticas se comparten entre las clases heredadas, a menos que
    la propiedad estática se invalide explícitamente en una clase secundaria. Sin embargo, debido a un
    macanismo de implementación fue posible separar las propiedades estáticas asignando una
    referencia. Esta laguna ha sido arreglada.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class Test {
    public static $x = 0;
}
class Test2 extends Test { }

Test2::$x = &$x;
$x = 1;

var_dump(Test::$x, Test2::$x);
// Previously: int(0), int(1)
// Now:        int(1), int(1)
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.reference-unwrapping">
   <title>Referencias devueltas por Array y accesos a la propiedad se desenvuelven inmediatamente</title>

   <para>
    Referencias devueltas por array y accesos a la propiedad se desenvuelven ahora
    como parte del acceso. Esto significa que ya no es posible modificar la referencia
    entre el acceso y el uso del valor de acceso:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr = [1];
$ref =& $arr[0];
var_dump($arr[0] + ($arr[0] = 2));
// Previously: int(4), Now: int(3)
?>
]]>
     </programlisting>
    </informalexample>
    Esto hace que el comportamientos de las referencias y no referencias sea consistente. Por favor
    note que la lectura y escritura de un valor dentro de una sola expresión permanece
    como un comportamiento indefinido y puede cambiar de nuevo en el futuro.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.traversable-unpacking">
   <title>Argumento Unpacking de Traversables con claves no enteras ya no se permiten</title>

   <para>
    Argumento unpacking dejó de funcionar con <classname>Traversable</classname>s
    con las claves no enteras. El siguiente código funcionó en PHP 5.6-7.2 por accidente.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(...$args) {
    var_dump($args);
}
function gen() {
    yield 1.23 => 123;
}
foo(...gen());
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.misc">
   <title>Varios</title>

   <para>
    La utilidad <filename>ext_skel</filename> ha sido completamente rediseñada con
    nuevas opciones y algunas opciones antiguas eliminadas. Ahora está escrito en PHP
    y no tiene dependencias externas.
   </para>

   <para>
    Soporte para el BeOS ha sido retirado.
   </para>

   <para>
    Excepciones lanzadas debido a la conversión automática de advertencias a excepciones en
    modo <literal>EH_THROW</literal> (e.j. algunas excepciones
    <classname>DateTime</classname>) ya no ocupan el estado <function>error_get_last</function>. Como
    tal, ahora funcionan de la misma manera que las excepciones lanzadas manualmente.
   </para>

   <para>
    <classname>TypeError</classname> ahora informa de tipos erróneos como
    <literal>int</literal> y <literal>bool</literal> en lugar de
    <literal>integer</literal> y <literal>boolean</literal>, respectivamente.
   </para>

   <para>
    Variables no definidas pasadas a <function>compact</function> será ahora
    reportado como un aviso.
   </para>

   <para>
    <function>getimagesize</function> y funciones relacionadas ahora reportan el tipo
    mime de las imágenes BMP como <literal>image/bmp</literal> en lugar de
    <literal>image/x-ms-bmp</literal>, ya que el primero ha sido registrado en
    la IANA (véase <link xlink:href="&url.rfc;7903">RFC 7903</link>).
   </para>

   <para>
    <function>stream_socket_get_name</function> devolverá ahora las direcciones IPv6
    envueltas entre paréntesis. Por ejemplo <literal>"[::1]:1337"</literal> será
    devuelto en lugar de <literal>"::1:1337"</literal>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration73.incompatible.bc">
  <title>BCMath Matemáticas de Precisión Arbitraria</title>

  <para>
   Todas las advertencias lanzadas por las <link linkend="ref.bc">funciones BCMath</link> son
   ahora usadas por el manejo de errores de PHP. Anteriormente algunas advertencias han sido
   escritas directamente a stderr.
  </para>

  <para>
   <function>bcmul</function> y <function>bcpow</function> ahora devuelven los números
   con la escala solicitada. Anteriormente, los números devueltos pueden haber omitido
   los ceros decimales.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.imap">
  <title>IMAP, POP3 y NNTP</title>

  <para>
   Los inicio de sesión <command>rsh</command>/<command>ssh</command> están desactivados por defecto.
   Use <link
   linkend="ini.imap.enable-insecure-rsh">imap.enable_insecure_rsh</link> si quiere
   habilitarlos. Tenga en cuenta que la biblioteca IMAP no filtra los nombres de los buzones
   antes de pasarlos al comando
   <command>rsh</command>/<command>ssh</command>, pasando así datos no confiables a esta función con
   <command>rsh</command>/<command>ssh</command> habilitado es inseguro.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mbstring">
  <title>Multibyte String</title>

  <para>
    Debido al soporte añadido a las capturas nombradas, <literal>mb_ereg_*()</literal>
    los patrones que utilizan las capturas nombradas se comportarán de forma diferente. En particular
    las capturas nombradas formarán parte de las coincidencias y <function>mb_ereg_replace</function>
    interpretará sintaxis adicional. Véase <link
    linkend="migration73.new-features.mbstring.named-captures">Capturas
    Nombradas</link> para más información.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mysqli">
  <title>Extensión mejorada de MySQL</title>

  <para>
   Las declaraciones preparadas ahora reportan correctamente los segundos fraccionarios para
   <literal>DATETIME</literal>, <literal>TIME</literal> y
   <literal>TIMESTAMP</literal> columnas con especificador de decimales (e.j.
   <literal>TIMESTAMP(6)</literal> cuando se usan microsegundos). Anteriormente, la
   parte de los segundos fraccionarios fue simplemente omitida de los valores devueltos.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.pdo-mysql">
  <title>Funciones MySQL (PDO_MYSQL)</title>

  <para>
   Las declaraciones preparadas ahora reportan correctamente los segundos fraccionarios para
   <literal>DATETIME</literal>, <literal>TIME</literal> y
   <literal>TIMESTAMP</literal> columnas con especificador de decimales (e.j.
   <literal>TIMESTAMP(6)</literal> cuando se usa microsegundos). Anteriormente, la
   parte de los segundos fraccionarios fue simplemente omitida de los valores devueltos. Por favor
   tenga en cuenta que esto sólo afecta a la utilización de <link
   linkend="ref.pdo-mysql">PDO_MYSQL</link> con los preparados emulados apagados
   (e.j. usando la funcionalidad de la preparación nativa). Las declaraciones que
   utilizan conexiones que tienen <constant>PDO::ATTR_EMULATE_PREPARES</constant>=&true;
   (que es el valor por defecto) no se vieron afectados por el fallo arreglado y ya han
   obtenido los valores de segundos fraccionarios adecuados al motor.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.reflection">
  <title>Reflection</title>

  <para>
   La exportación <link linkend="book.reflection">Reflection</link> a string utiliza ahora
   <literal>int</literal> y <literal>bool</literal> en lugar de
   <literal>integer</literal> y <literal>boolean</literal>, respectivamente.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.spl">
  <title>Biblioteca estándar de PHP (SPL)</title>

  <para>
   Si un autocargador <link linkend="book.spl">SPL</link> lanza una excepción,
   los siguientes autocargadores no serán ejecutados. Anteriormente todos los autocargadores eran
   ejecutados y las excepciones estaban encadenadas.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.simplexml">
  <title>SimpleXML</title>

  <para>
   Las operaciones matemáticas con objetos <link
   linkend="book.simplexml">SimpleXML</link> tratarán ahora el texto como
   un <type>integer</type> o <type>float</type>, lo que sea más apropieado.
   Anteriormente los valores se trataban como <type>integer</type>s incondicionalmente.
  </para>
 </sect2>


</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
