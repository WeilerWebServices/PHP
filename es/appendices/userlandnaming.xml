<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 340765 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->
<appendix xml:id="userlandnaming" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Guía de entorno de usuario para nombres</title>
 <para>
  La siguiente es una guía para saber cómo elegir el mejor nombre para los
  identificadores del código del entorno del usuario PHP. Cuando se eligen
  nombres para cualquier código que crea símbolos en el global namespace,
  es importante tener en cuenta los siguientes lineamientos para evitar que en
  futuras versiones de PHP estos choquen con los símbolos elegidos.
 </para>
 
 <section xml:id="userlandnaming.globalnamespace">
  <title>Global Namespace</title>
  <para>
   Aquí hay una visión general de las construcciones de código que van al espacio de nombres global:
  </para>
  
  <itemizedlist>
   <listitem><para>funciones</para></listitem>
   <listitem><para>clases</para></listitem>
   <listitem><para>interfaces</para></listitem>
   <listitem><para>constantes (no constanstes de clase)</para></listitem>
   <listitem><para>variables definidas fuera de funciones/métodos</para></listitem>
  </itemizedlist>
 </section>
 
 <section xml:id="userlandnaming.rules">
  <title>Reglas</title>
  <para>
   La siguiente lista muestra un resumen de los derechos que se reserva el
   proyecto PHP para sí mismo, cuando elige los nombres para los nuevos
   identificadores internos.
   La guía definitiva son los
   <link xlink:href="&url.userlandnaming.cs;">ESTÁNDARES DE CODIFICACION</link> oficiales:
  </para>
  
  <itemizedlist>
   <listitem>
    <para>
     PHP es el propietario de el namespace de nivel superior, pero trata de 
     encontrar una descripción decente de nombres y evitar así futuros choques.
    </para>
   </listitem>
   <listitem>
    <para>
     Los nombres de función usan guion bajo entre palabras, mientras que los
     nombres de las clases usan las reglas <literal>camelCase</literal> o <literal>PascalCase</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     PHP antepondrá a cualquier símbolo global de una extensión el nombre de
     de la extensión. (En el pasado, han habido numerosas excepciones a esta regla).
     Ejemplos:
    </para>
    
    <itemizedlist>
     <listitem><para><function>curl_close</function></para></listitem>
     <listitem><para><function>mysql_query</function></para></listitem>
     <listitem><para>PREG_SPLIT_DELIM_CAPTURE</para></listitem>
     <listitem><para>new DOMDocument()</para></listitem>
     <listitem>
      <para>
       <function>strpos</function> (ejemplo de un error del pasado)
      </para>
     </listitem>
     <listitem><para>new SplFileObject()</para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Iteradores y Excepciones son como siempre, simplemente postfijados con
     "<literal>Iterator</literal>" y <literal>Exception</literal>."
     Ejemplos:
    </para>
    <itemizedlist>
     <listitem><para><classname>ArrayIterator</classname></para></listitem>
     <listitem><para><classname>LogicException</classname></para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     PHP se reserva todos los simbolos que comienzan con <literal>__</literal>
     como magicos. Es recomendado que no se creen simbolos que comiencen con
     <literal>__</literal> en PHP a menos que se quiera usar una funcionalidad
     magica documentada. Ejemplos:
    </para>
    <itemizedlist>
     <listitem><para><link linkend="object.get">__get()</link></para></listitem>
     <listitem><para><function>__autoload</function></para></listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>
 </section>
 
 <section xml:id="userlandnaming.tips">
  <title>Tips</title>
  <para>
   Con el fin de escribir código que funcione en el futuro, se recomienda no
   colocar muchas variables, funciones o clases en el espacio de nombres global. Esto
   prevendrá de conflictos de nombres con código de terceros así como con posibles
   adiciones futuras al lenguaje.
  </para>
  <para>
   Una manera común de evitar conflictos con nombres de funciones y clases es
   añadirlos a su propio
   <link linkend="language.namespaces">espacio de nombres</link> dedicado.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

namespace MiProyecto;

function mi_función() {
    return true;
}

\MiProyecto\mi_función();
]]>
   </programlisting>
  </informalexample>
  <para>
   Esto todavía necesita que se mantenga la cuenta de los espacios de nombres ya utilizados, pero una vez
   que se decido el espacio de nombres que se va a usar se pueden añadir todas las funciones y
   clases e él sin tener que pensar más en conflictos.
  </para>
  <para>
   Es una buena práctica limitar el número de variables añadidas al
   ámbito global para evitar conflictos de nombres con código
   de terceros.
  </para>
  <note>
   <title>Ámbito de variables</title>
   <para>
    Debido a las <link linkend="language.variables.scope">reglas de ámbito</link> de PHP,
    las variables definidas dentro de funciones y métodos no están en el ámbito global
    y, por tanto, no pueden crear conflictos con otras variables definidas en el ámbito global.
   </para>
  </note>
 </section>
 
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
