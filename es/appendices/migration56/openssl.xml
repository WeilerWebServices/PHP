<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335214 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration56.openssl" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Cambios de OpenSSL en PHP 5.6.x</title>
 
 <sect2 xml:id="migration56.openssl.peer-verification">
  <title>Las envolturas de flujos ahora verifican los certificados del par y los nombres de host por omisión al utilizar SSL/TLS</title>
  
  &migration56.openssl.peer-verification;
 </sect2>
 
 <sect2 xml:id="migration56.openssl.fingerprint">
  <title>Huellas digitales de certificados</title>
  
  <para>
   Se ha añadido soporte para extraer y verificar huellas digitales de
   certificados. Se ha añadido <function>openssl_x509_fingerprint</function>
   para extraer una huella digital de un certificado X.509, y se han añadido dos
   opciones de <link linkend="context.ssl">contexto de flujo SSL</link>:
   <literal>capture_peer_cert</literal> para capturar el certificado X.509
   del par, y <literal>peer_fingerprint</literal> para confirmar que el
   certificado del par debería coincidir con la huella digital dada.
  </para>
 </sect2>
 
 <sect2 xml:id="migration56.openssl.ciphers">
  <title>Cifradores predeterminados actualizados</title>
  
  <para>
   Los cifradores predeterminados empleados por PHP han sido actualizados a una lista más segura
   basada en las
   <link xlink:href="&url.openssl.ciphers.mozilla;">recomendaciones de cifradores de Mozilla</link>,
   con dos exclusiones adicionales: cifradores Diffie-Hellman anónimos, y RC4.
  </para>
  
  <para>
   Se puede acceder a la lista mediante la nueva constante
   <constant>OPENSSL_DEFAULT_STREAM_CIPHERS</constant>, y se puede
   sobrescribir (como en versiones anteriores de PHP) estableciendo
   la opción de contexto
   <link linkend="context.ssl.ciphers"><parameter>ciphers</parameter></link>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration56.openssl.tls-compression">
  <title>Compresión deshabilitada de forma predeterminada</title>
  
  <para>
   La compresión SSL/TLS ha sido deshabilitada de forma predeterminada para mitigar el
   ataque CRIME. PHP 5.4.13 añadió la opción de contexto
   <link linkend="context.ssl.disable-compression"><parameter>disable_compression</parameter></link>
   para poder deshabilitar la compresión: ahora está establecida a
   &true; (es decir, la compresión está deshabilitada) de forma predeterminada.
  </para>
 </sect2>
 
 <sect2 xml:id="migration56.openssl.honor-cipher-order">
  <title>Permitir que los servidores prefieran su orden de cifradores</title>
  
  <para>
   Se ha añadido la opción de contexto <parameter>honor_cipher_order</parameter>
   de SSL para que los servidores de flujos encriptados mitiguen las vulnerabilidades BEAST
   prefiriendo los cifradores del servidor a los del cliente.
  </para>
 </sect2>
 
 <sect2 xml:id="migration56.openssl.metadata">
  <title>Acceder al cifrador y protocolo negociados</title>
  
  <para>
   Ahora se puede acceder al protocolo y cifrador que eran negociados para un
   flujo encriptado mediante <function>stream_get_meta_data</function> o
   <function>stream_context_get_options</function> cuando la opción de contexto
   <parameter>capture_session_meta</parameter> de SSL está establecida a
   &true;.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['ssl' => [
    'capture_session_meta' => TRUE
]]);
 
$html = file_get_contents('https://google.com/', FALSE, $ctx);
$meta = stream_context_get_options($ctx)['ssl']['session_meta'];
var_dump($meta);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(4) {
  ["protocol"]=>
  string(5) "TLSv1"
  ["cipher_name"]=>
  string(20) "ECDHE-RSA-AES128-SHA"
  ["cipher_bits"]=>
  int(128)
  ["cipher_version"]=>
  string(11) "TLSv1/SSLv3"
}
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration56.openssl.forward-secrecy">
  <title>Nuevas opciones para secreto hacia adelante perfecto en servidores de flujos encriptados</title>
  
  <para>
   Los flujos de clientes encriptados ya admiten secreto hacia adelante perfecto (PFS por sus siglas en inglés), ya que está
   generalmente controlado por el servidor. Los flujos encriptados de servidores de PHP emplean
   certificados capaces del secreto hacia adelante perfecto no necesitan tomar ninguna
   acción adicional para habilitar PFS; sin embargo, se han añadido varias opciones de contexto
   de SSL para permitir un mayor control sobre PFS y tratar con cualquier
   problema de compatibilidad que pudiera surgir. 
  </para>
  
  <variablelist>
   <varlistentry>
    <term><parameter>ecdh_curve</parameter></term>
    <listitem>
     <para>
      Esta opción permite la selección de una curva específica a emplear con cifradores
      ECDH. Si no se especifca, se empleará <literal>prime256v1</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>dh_param</parameter></term>
    <listitem>
     <para>
      Una ruta a un fichero que contiene parámetros para el intercambio de claves Diffie-Hellman,
      tal como el creado por el siguiente comando:
     </para>
     <programlisting role="shell">
<![CDATA[
openssl dhparam -out /path/to/my/certs/dh-2048.pem 2048
]]>
     </programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_dh_use</parameter></term>
    <listitem>
     <para>
      Si se establece a &true;, se creará un nuevo par de claves cuando se emplean
      parámetros Diffie-Hellman, mejorando así el secreto hacia adelante.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_ecdh_use</parameter></term>
    <listitem>
     <para>
      Si se establece a &true;, se generará siempre un nuevo par de claves cuando se
      negocian cifradores ECDH. Esto mejora el secreto hacia adelante.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>
 
 <sect2 xml:id="migration56.openssl.crypto-method">
  <title>Selección de la versión de SSL/TLS</title>
  
  <para>
   Ahora es posible seleccionar versiones específicas de SSL y TLS mediante la
   opción de contexto <parameter>crypto_method</parameter> de SSL o estableciendo un
   transporte esepecífico al crear una envoltura de flujos (por ejemplo, llamando a
   <function>stream_socket_client</function> o
   <function>stream_socket_server</function>).
  </para>
  
  <para>
   La opción de contexto <parameter>crypto_method</parameter> de SSL acepta una
   máscara de bit que enumere los protocolos que están permitidos, como lo hace
   <parameter>crypto_type</parameter> de
   <function>stream_socket_enable_crypto</function>.
   <!-- TODO: link to full list, which is too big for this page but should be
              in the crypto_method and stream_socket_enable_crypto()
              documentation. -->
  </para>
  
  <segmentedlist>
   <title>Versiones de protocolo seleccionadas y opciones correspondientes</title>
   <segtitle>Protocolo/s</segtitle>
   <segtitle>Indicador del cliente</segtitle>
   <segtitle>Indicador del servidor</segtitle>
   <segtitle>Transporte</segtitle>
   <seglistitem>
    <seg>Cualquier versión de TLS o SSL</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_SERVER</constant></seg>
    <seg><literal>ssl://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>Cualquier versión de TLS</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_SERVER</constant></seg>
    <seg><literal>tls://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.0</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_SERVER</constant></seg>
    <seg><literal>tlsv1.0://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.1</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_SERVER</constant></seg>
    <seg><literal>tlsv1.1://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.2</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_SERVER</constant></seg>
    <seg><literal>tlsv1.2://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>SSL 3</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_SERVER</constant></seg>
    <seg><literal>sslv3://</literal></seg>
   </seglistitem>
  </segmentedlist>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// Requerir TLS 1.0 o superior al emplear file_get_contents():
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLS_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Requerir TLS 1.1 o 1.2:
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT |
                           STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Conectar usando el transoporte de socket de flujo tlsv1.2:// .
$sock = stream_socket_client('tlsv1.2://google.com:443/');

?>
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration56.openssl.default-certificate-paths">
  <title>Se ha añadido <function>openssl_get_cert_locations</function></title>
  
  <para>
   Se ha añadido la función <function>openssl_get_cert_locations</function>:
   devuelve las ubicaciones predeterminadas en las cuales PHP buscará 
   paquetes de CA.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(openssl_get_cert_locations());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(8) {
  ["default_cert_file"]=>
  string(21) "/etc/pki/tls/cert.pem"
  ["default_cert_file_env"]=>
  string(13) "SSL_CERT_FILE"
  ["default_cert_dir"]=>
  string(18) "/etc/pki/tls/certs"
  ["default_cert_dir_env"]=>
  string(12) "SSL_CERT_DIR"
  ["default_private_dir"]=>
  string(20) "/etc/pki/tls/private"
  ["default_default_cert_area"]=>
  string(12) "/etc/pki/tls"
  ["ini_cafile"]=>
  string(0) ""
  ["ini_capath"]=>
  string(0) ""
}
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration56.openssl.spki">
  <title>Soporte para SPKI</title>
  
  <para>
   Se ha añadido soporte para generar, extraer y verificar claves públicas firmadas
   y retos (SPKAC por sus siglas en inglés). Se han añadido
   <function>openssl_spki_new</function>, <function>openssl_spki_verify</function>,
   <function>openssl_spki_export_challenge</function>, y
   <function>openssl_spki_export</function> para crear, verificar y
   exportar claves públicas PEM y retos asociados de SPKAC generadas desde
   un elemento <literal>KeyGen</literal> de HTML5.
  </para>
  
  <variablelist>
   <varlistentry>
    <term><parameter>openssl_spki_new</parameter></term>
    <listitem>
     <para>
      Genera una nueva SPKAC usando una clave privada, un string con un reto y un
      algoritmo de hash.
     </para>
     
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
SPKAC=MIIBXjCByDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3L0IfUijj7+A8CPC8EmhcdNoe5fUAog7OrBdhn7EkxFButUp40P7+LiYiygYG1TmoI/a5EgsLU3s9twEz3hmgY9mYIqb/rb+SF8qlD/K6KVyUORC7Wlz1Df4L8O3DuRGzx6/+3jIW6cPBpfgH1sVuYS1vDBsP/gMMIxwTsKJ4P0CAwEAARYkYjViMzYxMTktNjY5YS00ZDljLWEyYzctMGZjNGFhMjVlMmE2MA0GCSqGSIb3DQEBAwUAA4GBAF7hu0ifzmjonhAak2FhhBRsKFDzXdKIkrWxVNe8e0bZzMrWOxFM/rqBgeH3/gtOUDRS5Fnzyq425UsTYbjfiKzxGeCYCQJb1KJ2V5Ij/mIJHZr53WYEXHQTNMGR8RPm7IxwVXVSHIgAfXsXZ9IXNbFbcaLRiSTr9/N4U+MXUWL7
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><parameter>openssl_spki_verify</parameter></term>
    <listitem>
     <para>
      Verifica la SPKAC provista.
     </para>
     
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
var_dump(openssl_spki_verify($spkac));
?>
]]>
      </programlisting>
     </informalexample>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><parameter>openssl_spki_export_challenge</parameter></term>
    <listitem>
     <para>
      Exporta retos asociados desde la SPKAC provista.
     </para>
     
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
$challenge = openssl_spki_export_challenge($spkac):
echo $challenge;
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
challenge string
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><parameter>openssl_spki_export</parameter></term>
    <listitem>
     <para>
      Exporta la clave pública RSA con formato PEM desde la SPKAC.
     </para>
     
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
echo openssl_spki_export($spkac);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcvQh9SKOPv4DwI8LwSaFx02h7
l9QCiDs6sF2GfsSTEUG61SnjQ/v4uJiLKBgbVOagj9rkSCwtTez23ATPeGaBj2Zg
ipv+tv5IXyqUP8ropXJQ5ELtbXPUN/gvw7cO5EbPHr/7eMhbpw8Gl+AfWxW5hLW8
MGw/+AwwjHBOwong/QIDAQAB
-----END PUBLIC KEY-----
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
