<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342102 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration71.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuevas características</title>
 
 <sect2 xml:id="migration71.new-features.nullable-types">
  <title>Tipos 'nullable'</title>
  
  <para>
   Las declaraciones de tipos para parámetros y valores de retorno ahora se pueden marcar como
   «nullable» prefijando el nombre del tipo con un signo de cierre de interrogación. Esto significa
   que, así como el tipo especificado, se puede pasar &null; como un argumento, o 
   ser devuelto como un valor, respectivamente.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function testReturn(): ?string
{
    return 'elePHPant';
}

var_dump(testReturn());

function testReturn(): ?string
{
    return null;
}

var_dump(testReturn());

function test(?string $name)
{
    var_dump($name);
}

test('elePHPant');
test(null);
test();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(10) "elePHPant"
NULL
string(10) "elePHPant"
NULL
Uncaught Error: Too few arguments to function test(), 0 passed in...
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.void-functions">
  <title>Funciones 'void'</title>
  
  <para>
   Se ha introducido un tipo de retorno, <type>void</type>. Las funciones declaradas con
   'void' como su tipo de retorno deben o bien omitir su sentencia 'return' totalmente,
   o utilizar una sentencia 'return' vacía. &null; no es un valor de retorno válido para una
   función 'void'.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function intercambiar(&$izquierdo, &$derecho) : void
{
    if ($izquierdo === $derecho) {
        return;
    }

    $tmp = $izquierdo;
    $izquierdo = $derecho;
    $derecho = $tmp;
}

$a = 1;
$b = 2;
var_dump(intercambiar($a, $b), $a, $b);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
null
int(2)
int(1)
]]>
   </screen>
  </informalexample>
  
  <para>
   El uso del valor de retorno de una función 'void' simplemente se evalúa a
   &null;, sin emitir advertencias. Las razón de esto es porque las advertencias
   implicarían el uso de funciones genéricas de orden mayor.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.symmetric-array-destructuring">
  <title>Desestructuración de arrays simétricos</title>
  
  <para>
   La sintaxis abreviada de array (<literal>[]</literal>) se puede usar ahora para
   desestructurar arrays para asignaciones (incluyendo dentro de
   <literal>foreach</literal>) como alternativa a la sintaxis
   <function>list</function> existente, la cual aún se admite.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$datos = [
    [1, 'Tom'],
    [2, 'Fred'],
];

// Estilo de list()
list($id1, $nombre1) = $datos[0];

// Estilo de []
[$id1, $list] = $datos[0];

// Estilo de list()
foreach ($datos as list($id, $nombre)) {
    // aquí va la lógica con $id y $nombre
}

// Estilo de []
foreach ($datos as [$id, $nombre]) {
    // aquí va la lógica con $id y $nombre
}
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.class-constant-visibility">
  <title>Visibilidad de las constantes de clase</title>
  
  <para>
   Se ha añadido soporte para especificar la visibilidad de constantes de clase.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class ConstDemo
{
    const PUBLIC_CONST_A = 1;
    public const PUBLIC_CONST_B = 2;
    protected const PROTECTED_CONST = 3;
    private const PRIVATE_CONST = 4;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.iterable-pseudo-type">
  <title>El seudotipo <type>iterable</type></title>
  
  <para>
   Se ha introducido un nuevo seudotipo (similar a <type>callable</type>)
   llamado <type>iterable</type>. Se puede utilizar en parámetros
   y tipos de retorno, donde acepta tanto arrays u objetos que implementen
   la interfaz <classname>Traversable</classname>. Con respecto a la subtipificación,
   los tipos de parámetros de clases hijas podrían ampliar una declaración de la madre de <type>array</type> 
   o <classname>Traversable</classname> a <type>iterable</type>. Con los tipos de retorno,
   las clases hijas podrían reducir un tipo de retorno de la madre de <type>iterable</type> a
   <type>array</type> o un objeto que implemente <classname>Traversable</classname>.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function iterator(iterable $iter)
{
    foreach ($iter as $val) {
        //
    }
}
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.mulit-catch-exception-handling">
  <title>Manejo de multicaptura de excepciones</title>
  
  <para>
   Ahora se pueden especificar múltiples excepciones por bloque catch con el carácter
   tubería (<literal>|</literal>). Esto es útil para cuando diferentes
   excepciones de diferentes jerarquías de clases son manejadas como la misma.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
try {
    // algo de código
} catch (FirstException | SecondException $e) {
    // manejar la primera y segunda excepción
}
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.support-for-keys-in-list">
  <title>Soporte para claves en <function>list</function></title>
  
  <para>
   Ahora se pueden especificar claves en <function>list</function>, o en su nueva sintaxis
   abreviada <literal>[]</literal>. Esto habilita la desestructuración de arrays con
   claves no enteras o no secuenciales.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$datos = [
    ["id" => 1, "nombre" => 'Tom'],
    ["id" => 2, "nombre" => 'Fred'],
];

// Estilo de list()
list("id" => $id1, "nombre" => $nombre1) = $datos[0];

// Estilo de []
["id" => $id1, "nombre" => $nombre1] = $datos[0];

// Estilo de list()
foreach ($datos as list("id" => $id, "nombre" => $nombre)) {
    // aquí va la lógica con $id y $nombre
}

// Estilo de []
foreach ($datos as ["id" => $id, "nombre" => $nombre]) {
    // aquí va la lógica con $id y $nombre
}
]]>
   </programlisting>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.support-for-negative-string-offsets">
  <title>Soporte para índices negativos de cadenas</title>
  
  <para>
   Se ha añadido soporte para índices negativos de cadenas a las
   <link linkend="book.strings">funciones de manipulación de cadenas</link>
   que acepten índices, así como a la
   <link linkend="language.types.string.substr">indexación de cadenas</link> con
   <literal>[]</literal> o <literal>{}</literal>. En tales casos, un índice
   negativo se interpreta como un índice desde el final de la cadena.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump("abcdef"[-2]);
var_dump(strpos("aabbcc", "b", -3));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string (1) "e"
int(3)
]]>
   </screen>
  </informalexample>
  
  <para>
   Los índices negativos de cadenas y arrays ahora tambíen se admiten en la sintaxis
   del paso de una variable dentro de cadenas.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$string = 'bar';
echo "The last character of '$string' is '$string[-1]'.\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
The last character of 'bar' is 'r'.
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.support-for-aead-in-ext-openssl">
  <title>Soporte para AEAD en ext/openssl</title>
  
  <para>
   Se ha añadido soporte para AEAD (modos GCM y CCM) ampliando las funciones
   <function>openssl_encrypt</function> y
   <function>openssl_decrypt</function> con parámetros adicionales.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.convert-callables-to-closures">
  <title>Conversión de 'callables' <classname>Closure</classname> con <methodname>Closure::fromCallable</methodname></title>
  
  <para>
   Se ha introducido un nuevo método estático a la clase <classname>Closure</classname>
   para poder convertir de forma sencilla <type>callable</type>s a
   objetos <classname>Closure</classname>.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class Test
{
    public function exposeFunction()
    {
        return Closure::fromCallable([$this, 'privateFunction']);
    }

    private function privateFunction($param)
    {
        var_dump($param);
    }
}

$privFunc = (new Test)->exposeFunction();
$privFunc('some value');
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(10) "some value"
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.asynchronous-signal-handling">
  <title>Manejo de señales asíncronas</title>
  
  <para>
   Se ha introducido una nueva función llamada <function>pcntl_async_signals</function>
   para habilitar el manejo de señales asíncronas sin el empleo de «ticks» (lo cual
   introduce mucha sobrecarga).
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
pcntl_async_signals(true); // turn on async signals

pcntl_signal(SIGHUP,  function($sig) {
    echo "SIGHUP\n";
});

posix_kill(posix_getpid(), SIGHUP);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
SIGHUP
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.new-features.http2-server-push-support-in-ext-curl">
  <title>Soporte para 'push' del servidor HTTP/2 en ext/curl</title>
  
  <para>
   Se ha añadido soporte para 'push' del servidor a la extensión CURL (requiere
   la versión 7.46 y superior). Esto se puede aprovechar a través de la
   función <function>curl_multi_setopt</function> con la nueva
   constante <constant>CURLMOPT_PUSHFUNCTION</constant>. Las constantes
   <constant>CURL_PUSH_OK</constant> y <constant>CURL_PUSH_DENY</constant> también han sido
   añadidas, por lo que la ejecución de la retrollamada 'push' del servidor pueda ser
   aprobada o denegada.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
