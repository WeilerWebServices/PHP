<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342916 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration71.incompatible">
 <title>Cambios retroincompatibles</title>
 
 <sect2 xml:id="migration71.incompatible.too-few-arguments-exception">
  <title>Lanzamiento de una excepción al pasar muy pocos argumentos a una función</title>
  
  <para>
   Anteriormente se emitía una advertencia al invocar funciones definidas por el usuario
   con muy pocos argumentos. Ahora, esta advertencia ha sido promovida a una excepción de tipo
   Error. Este cambio solamente se aplica a funciones definidas por el usuario, no a funciones
   internas. Por ejemplo:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function test($param){}
test();
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in %s on line %d and exactly 1 expected in %s:%d
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.forbid-dynamic-calls-to-scope-introspection-functions">
  <title>Prohibición de llamadas dinámicas a funciones de introspección de alcance</title>
  
  <para>
   Se han prohibido las llamadas dinámicas a ciertas funciones (de la forma
   <literal>$func()</literal> o <literal>array_map('extract', ...)</literal>,
   etc.). Estas funciones bien inspeccionan o modifican otro ámbito, presentando
   así un comportamiento ambiguo y poco fiable. Las funciones son las siguientes:
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara>
     <function>assert</function> - con una cadena como primer argumento
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>compact</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>extract</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_arg</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_num_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>get_defined_vars</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>mb_parse_str</function> - con un argumento
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>parse_str</function> - con un argumento
    </simpara>
   </listitem>
  </itemizedlist>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
(function () {
    $func = 'func_num_args';
    $func();
})();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: Cannot call func_num_args() dynamically in %s on line %d
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.invalid-class-names">
  <title>Nombres de clases, interfaces o rasgos no válidos</title>
  
  <para>
   Los siguientes nombres no se pueden usar como nombres de clases, interfaces o rasgos:
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara><type>void</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>iterable</type></simpara>
   </listitem>
  </itemizedlist>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.numerical-strings-scientific-notation">
  <title>Las conversiones de cadenas numéricas ahora respetan la notación científica</title>
  
  <para>
   Las operaciones y conversiones de enteros en cadenas de numéricas ahora respetan
   la notación científica. Esto también incluye la operación 'cast' a <literal>(int)</literal>
   y l as siguientes funciones: <function>intval</function> (donde
   la base es 10), <function>settype</function>, <function>decbin</function>,
   <function>decoct</function>, y <function>dechex</function>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.fixes-to-mt_rand-algorithm">
  <title>Correcciones al algoritmo <function>mt_rand</function></title>
  
  <para>
   <function>mt_rand</function> ahora utilizará predeterminadamente la versión corregida
   del algoritmo Mersenne Twister. Si se confiaba en la salida 
   determinista de <function>mt_srand</function>, la constante
   <constant>MT_RAND_PHP</constant> con la capacidad de preservar la implementación
   antigua (incorrecta) mediante un segundo parámetro opcional adicional a
   <function>mt_srand</function>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.rand-srand-aliases">
  <title>
   <function>rand</function> es un alias de <function>mt_rand</function> y
   <function>srand</function> de <function>mt_srand</function>
  </title>
  
  <para>
   <function>rand</function> y <function>srand</function> ahora son alias de
   <function>mt_rand</function> y <function>mt_srand</function>,
   respectivamente. Esto significa que la salida de las siguientes funciones ha
   cambiado: <function>rand</function>, <function>shuffle</function>,
   <function>str_shuffle</function>, y <function>array_rand</function>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.delete-control-character-in-identifiers">
  <title>Rechazar el caracter de control de borrado ASCII en identificadores</title>
  
  <para>
   El caracter de control de borrado ASCII (<literal>0x7F</literal>) ya no se puede
   usar en identificadores que no estén entrecomillados.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.error_log-syslog">
  <title>
   <parameter>error_log</parameter> cambia con el valor
   <literal>syslog</literal>
  </title>
  
  <para>
   Si el ajuste ini de <parameter>error_log</parameter> se establece a
   <literal>syslog</literal>, los niveles de error de PHP se corresponden con los
   niveles de error de syslog. Esto ofrece un mayor diferenciación en los registros
   de errores, al contrario que el enfoque anterior, donde todos los errores eran registrados
   con el nivel 'notice' solamente.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.dont-call-destructors">
  <title>No invocar a destructores en objetos incompletos</title>
  
  <para>
   Ahora, los destructores nunca son invocados en objetos que lanzan una excepción durante
   la ejecución de su constructor. En versiones anteriores, este comportamiento
   dependía de si al objeto se le hacía referencia fuera del constructor (p.ej.,
   mediante el rastreo de una excepción).
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.call_user_func-with-ref-args">
  <title>
   Manejo de <function>call_user_func</function> de argumentos de referencia
  </title>
  
  <para>
   <function>call_user_func</function> ahora generará siempre una advertencia
   al llamar a funciones que esperan referencias como argumentos. Anteriormente
   esto dependía de si la llamada era totalmente cualificada.
  </para>
  <para>
   Además, <function>call_user_func</function> y
   <function>call_user_func_array</function> ya no abortarán la llamada a
   la función es este caso. La advertencia de "expected reference" (se esperaba una referencia)
   será emitida, aunque la llamada procederá como siempre.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.empty-string-index-operator">
  <title>
   El operador de índice vacío ya no se admite más para cadenas
  </title>
  
  <para>
   La aplicación del operador de índice vacío a una cadena (p.ej. <literal>$str[] = $x</literal>)
   lanza un error fatal en lugar de convertirla a un array silenciosamente.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.removed-ini-directives">
  <title>Directivas ini eliminadas</title>
  
  <para>
   Las siguientes directivas ini han sido eliminadas:
  </para>
  
  <itemizedlist>
   <listitem>
    <simpara>
     <parameter>session.entropy_file</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.entropy_length</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_function</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_bits_per_character</parameter>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.array-order">
  <title>
   Cambio en la ordenación de arrays cuando los elementos son creados automáticamente durante
   asignaciones por referencia
  </title>
  
  <para>
   El orden de los elementos de un array ha cambiado cuando estos elementos han
   sido creados automáticamente mediante una asignación por referencia.
   Por ejemplo:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.70;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.71;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.sort-order">
  <title>Ordenación de elementos iguales</title>
  <para>
   El algoritmo de ordenación interno se ha mejorado, lo que podría resultar en
   una ordenación diferente de los elementos que se comparan como iguales.
  </para>
  <note>
   <para>
    No confíe en el orden de elementos que se comparan como iguales; podría cambiar
    en cualquier momento.
   </para>
  </note>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.e-recoverable">
  <title>Mensaje de error para los errores E_RECOVERABLE</title>
  <para>
   El mensaje de error para errores E_RECOVERABLE ha cambiado de "Catchable
   fatal error" a "Recoverable fatal error".
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.unserialize">
  <title>Parámetro $options de unserialize()</title>
  <para>
   El elemento <literal>allowed_classes</literal> del parámetro $options de
   <function>unserialize</function> ahora está estrictamente tipificado, es decir, si
   se da un valor distinto a un <type>array</type> o un <type>boolean</type>,
   unserialize() devuelve &false; y emite un <constant>E_WARNING</constant>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.datetime-microseconds">
  <title>DateTime constructor incorporates microseconds</title>
  <para>
   <classname>DateTime</classname> y <classname>DateTimeImmutable</classname>
   ahora incorporan adecuadamente microsegundos al ser construidos desde el momento actual,
   ya sea explícitamente o con una cadena relativa(p.ej., <literal>"first day of next
   month"</literal>). Esto significa que la simple comparación de dos instancias recién
   creadas ahora probablemente devuelva &false; en lugar de &true;:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
new DateTime() == new DateTime();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.fatal-errors-to-error-exceptions">
  <title>Conversión de errores fatales a excepciones <classname>Error</classname></title>
  <para>
   En la extensión Date, los datos de serialización inválidos para las
   clases <classname>DateTime</classname> o <classname>DatePeriod</classname>,
   o el fallo de inicialización de una zona horaria desde datos serializados, ahora lanzarán
   una excepción <classname>Error</classname> desde los métodos
   <methodname>__wakeup</methodname> o <methodname>__set_state</methodname>,
   en lugar de resultar en un error fatal.
  </para>
  
  <para>
   En la extensión DBA, las funciones que modifican datos (como
   <function>dba_insert</function>) ahora lanzarán una
   excepción <classname>Error</classname> en lugar de emitir un error fatal
   capturable si la clave no contiene exactamente dos elementos.
  </para>
  
  <para>
   En la extensión DOM, un esquema inválido o contextos de validación RelaxNG ahora
   lanzarán una excepción <classname>Error</classname> en lugar de resultar en un
   error fatal. De manera similar, el intento de registrar una clase nodo que no
   extienda la clase base apropiada, o el intento de leer una propiedad inválida
   o escribir en una propiedad de solo lectura, también lanzará una
   excepción <classname>Error</classname>.
  </para>
  
  <para>
   En la extensión IMAP, las direcciones de correo electrónica mayores de 16385 bytes lanzarán una
   excepción <classname>Error</classname> en lugar de resultar en un error fatal.
  </para>
  
  <para>
   En la extensión Intl, el fallo al invocar al constructor padre en una clase que
   extiende <classname>Collator</classname> antes de invocar a los métodos padres
   ahora lanzará una excepción <classname>Error</classname> en lugar de resultar en un
   error fatal recuperable. También, clonar un
   objeto <classname>Transliterator</classname> ahora lanzará una
   excepción <classname>Error</classname> en caso de fallo al clonar el transliterador
   interno en lugar de resultar en un error fatal.
  </para>
  
  <para>
   En la extensión LDAP, proporcionar un tipo de modificación desconocido a
   <function>ldap_batch_modify</function> ahora lanzará una
   excepción <classname>Error</classname> en lugar de resultar en un error fatal.
  </para>
  
  <para>
   En la extensión bstring, las funciones <function>mb_ereg</function> y
   <function>mb_eregi</function> ahora lanzarán una
   excepción <classname>ParseError</classname> si se proporciona una expresión de
   PHP inválida y se emplea la opción 'e'.
  </para>
  
  <para>
   En la extensión Mcrypt, las funciones <function>mcrypt_encrypt</function> y
   <function>mcrypt_decrypt</function> ahora lanzarán una
   excepción <classname>Error</classname> en lugar de resultar en un error fatal
   si mcrypt no puede ser inicializado.
  </para>
  
  <para>
   En la extensión mysqli, el intento de leer una propiedad inválidad o escribir en
   una propiedad de solo lectura ahora lanzará una excepción <classname>Error</classname>
   en lugar de resultar en un error fatal.
  </para>
  
  <para>
   En la extensión Reflection, el fallo al recuperar un objeto de reflexión o
   recuperar una propiedad de un objeto ahora lanzará una excepción
   <classname>Error</classname> en lugar de resultar en un error fatal.
  </para>
  
  <para>
   En la extensión Session, los manejadores de sesiones propios que no devuelvan cadenas
   para los ID de sesción ahora lanzarán una excepción <classname>Error</classname>
   en lugar de resultar en un error fatal cuando una función sea invocada y deba
   generar un ID de sesión.
  </para>
  
  <para>
   En la extensión SimpleXML, la creación de un atributo sin nombre o duplicado ahora
   lanzará una excepción <classname>Error</classname> en lugar de resultar en
   un error fatal.
  </para>
  
  <para>
   En la extensión SPL, el intento de clonar un
   objeto <classname>SplDirectory</classname> ahora lanzará una
   excepción <classname>Error</classname> en lugar de resultar en un error
   fatal. De forma simiarl, invocar a <methodname>ArrayIterator::append</methodname> cuando
   se recorre un objeto también lanzará una excepción
   <classname>Error</classname>.
  </para>
  
  <para>
   En la extensión estándar, la función <function>assert</function>, al
   proporcionarle un argumento de cadena a su primer parámetro, ahora lanzará una
   excepción <classname>ParseError</classname> en lugar de resultar en un
   error fatal capturable si el código de PHP no es válido. De forma similar, invocar a
   <function>forward_static_call</function> fuera del ámbito de una clase ahora también
   lanzará una excepción <classname>Error</classname>.
  </para>
  
  <para>
   En la extensión Tidy, la creación manual de un objeto <classname>tidyNode</classname>
   ahora lanzará una excepción <classname>Error</classname> en lugar de
   resultar en un error fatal.
  </para>
  
  <para>
   En la extensión WDDX, una referencia circular al serializar ahora lanzará
   una excepción <classname>Error</classname> en lugar de resultar en un error
   fatal.
  </para>
  
  <para>
   En la extensión XML-RPC, una referencia circular al serializar ahora lanzará
   una instancia de una excepción <classname>Error</classname> en lugar de
   resultar en un error fatal.
  </para>
  
  <para>
   En la extensión Zip, el método <methodname>ZipArchive::addGlob</methodname>
   ahora lanzará una excepción <classname>Error</classname> en lugar de
   resultar en un error fatal si el soporte para 'glob' no está disponible.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.lexical-names">
  <title>Las variables vinculadas léxicamente no pueden reutilizar nombres</title>
  
  <para>
   Las variables vinculadas a un <link linkend="functions.anonymous">cierre</link> mediante
   el constructor <literal>use</literal> no pueden utilizar el mismo nombre que cualquier
   &link.superglobals;, <varname>$this</varname>, o cualquier parámetro. Por
   ejemplo, todas estas definiciones de funciones resultarán en error fatal:
   
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$f = function () use ($_SERVER) {};
$f = function () use ($this) {};
$f = function ($param) use ($param) {};
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.long2ip">
  <title>Cambio del tipo del parámetro de long2ip()</title>
  <para>
   <function>long2ip()</function> ahora espera un <type>int</type> en vez de un
   <type>string</type>.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.json">
  <title>Codificación y decodificación de JSON</title>
  <para>
   El ajuste ini <parameter>serialize_precision</parameter> ahora controla la
   precisión de serialización al codificar 'doubles'.
  </para>
  <para>
   La decodificación de una clave vacía ahora resulta en un nombre de propiedad vacío,
   en lugar de <literal>_empty_</literal> como nombre de propiedad.
   
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
var_dump(json_decode(json_encode(['' => 1])));
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  [""]=>
  int(1)
}
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Al proporcionar la bandera <constant>JSON_UNESCAPED_UNICODE</constant> a
   <function>json_encode</function>, las secuencias U+2028 y U+2029 ahora son
   escapadas.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.mbstring">
  <title>
   Cambios en la semántica de los parámetros de <function>mb_ereg</function>
   y <function>mb_eregi</function>
  </title>
  <para>
   El tercer parámetro de las funciones <function>mb_ereg</function> y
   <function>mb_eregi</function> (<parameter>regs</parameter>) ahora será
   establecido a un array vacío si no hubieron coincidencias. Anteriormente, el
   parametro era modificado.
  </para>
 </sect2>
 
 <sect2 xml:id="migration71.incompatible.openssl">
  <title>Eliminación del soporte para el flujo sslv2</title>
  <para>
   El flujo sslv2 se ha eliminado de OpenSSL.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
