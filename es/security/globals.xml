<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336340 Maintainer: jpberdejo Status: ready -->
<!-- Reviewed: no -->
<!-- splitted from ./index.xml, last change in rev 1.66 -->
<chapter xml:id="security.globals" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Usando Register Globals</title>
 &warn.deprecated.feature-5-3-0.removed-5-4-0;
 <para>
  Quizás el cambio más controversial en <acronym>PHP</acronym> fue cuando el valor predeterminado
  para la directiva de <acronym>PHP</acronym> <link linkend="ini.register-globals">
  register_globals</link> pasó de ON a OFF en <acronym>PHP</acronym>
  <link xlink:href="&url.php.release4.2.0;">4.2.0</link>. La dependencia sobre esta
  directiva era bastante común y muchas personas ni siquiera sabía que existía
  y asumían sólo que ese era el modo como <acronym>PHP</acronym> funcionaba. Esta página explicará cómo se puede
  escribir código inseguro con esta directiva, pero tenga en cuenta que la
  directiva en si misma no es insegura sino el uso inapropiado de ella.
 </para>
 <para>
  Cuando está activada, register_globals inyectará los scripts con todo
  tipo de variables, como las de peticiones provenientes de formularios <acronym>HTML</acronym>. Esto,
  unido al hecho de que <acronym>PHP</acronym> no requiere la inicialización de variables,
  significa que es muy fácil escribir código inseguro. Fue una decisión
  difícil, pero la comunidad de <acronym>PHP</acronym> decidió desactivar esta directiva por
  defecto. Cuando está activada, las personas usan variables que en realidad no se sabe a ciencia cierta
  de dónde provienen y solo queda asumir. Las variables internas que son
  definidas en el script mismo son mezcladas con los datos requeridos enviados por
  los usuarios y al deshabilitar register_globals se cambia esto. Vamos a demostrar
  con un ejemplo del uso incorrecto de register_globals:
 </para>
 <para>
  <example>
   <title>Ejemplo de uso incorrecto con register_globals = on</title>
   <programlisting role="php">
<![CDATA[
<?php
// $authorized = true Se define sólo si el usuario está autenticado
if (authenticated_user()) {
    $authorized = true;
}

// Debido a que no se inicializa $authorized como false, esta podría ser
// definida a través de register_globals, como desde GET auth.php?authorized=1
// ¡Por lo tanto, cualquier persona puede verse como autenticada!
if ($authorized) {
    include "/highly/sensitive/data.php";
}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Cuando está register_globals = on, la lógica anterior podría verse comprometida. Cuando
    está deshabilitada, <varname>$authorized</varname> no puede definirse a través de peticiones, así que
    estará bien, aunque realmente en general es una buena práctica de programación
    inicializar las variables primero. Por ejemplo, en el ejemplo anterior se puede
    haber realizado primero algo como <literal>$authorized = false</literal>. Hacer esto
    primero significa que el código anterior podría funcionar con register_globals activado o desactivado ya
    que los usuarios de forma predeterminada no serían autorizados.
   </para>
   <para>
    Otro ejemplo es aquel de las <link linkend="ref.session">sesiones</link>.
    Cuando está register_globals = on, se puede usar también
    <varname>$username</varname> en el siguiente ejemplo, pero nuevamente se debe
    notar que <varname>$username</varname> también puede provenir de otros
    medios, tal como GET (a través de la <acronym>URL</acronym>).
   </para>
   <para>
    <example>
     <title>Ejemplo de uso de sesiones con register_globals on u off</title>
     <programlisting role="php">
<![CDATA[
<?php
// No se sabría por dónde proviene $username, pero se sabe que $_SESSION es
// para datos de sesión.
if (isset($_SESSION['username'])) {

    echo "Hello <b>{$_SESSION['username']}</b>";

} else {

    echo "Hello <b>Guest</b><br />";
    echo "Would you like to login?";

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Incluso es posible tomar medidas preventivas para advertir cuando se 
    haga un intento de falsificación. Si se sabe previamente con exactitud el lugar de donde una variable
    debería provenir, se puede verificar si los datos enviados
    provienen de una clase inapropiada de sumisión. Si bien no
    garantiza que los datos no han sido falsificados, esto requiere que un atacante
    adivine el medio apropiado para falsificar. Si no importa de donde provienen los datos
    requeridos, se puede usar <varname>$_REQUEST</varname> ya que contiene
    una mezcla de datos GET, POST y COOKIE. Ver también la sección del manual sobre
    el uso de <link linkend="language.variables.external">variables desde fuentes externas
    sources</link>.
   </para>
   <para>
    <example>
     <title>Detección de envenenamiento simple de variables</title>
     <programlisting role="php">
<![CDATA[
<?php
if (isset($_COOKIE['MAGIC_COOKIE'])) {

    // MAGIC_COOKIE viene de una cookie.
    // ¡Asegúrese de validar la información de la cookie!

} elseif (isset($_GET['MAGIC_COOKIE']) || isset($_POST['MAGIC_COOKIE'])) {

   mail("admin@example.com", "Posible intento de ataque", $_SERVER['REMOTE_ADDR']);
   echo "Violación de seguridad, el administrador ha sido alertado.";
   exit;

} else {

   // MAGIC_COOKIE no se establece a través de este REQUEST

}
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Por supuesto, simplemente deshabilitar register_globals no quiere decir que su código
    es seguro. Cada pieza de datos que es remitida, también debe ser
    verificada de otras formas. ¡Siempre valide los datos de los usuarios e inicialice
    sus variables! Para chequear por variables no inicializadas, se puede usar
    <function>error_reporting</function> para mostrar
    errores de nivel <constant>E_NOTICE</constant>.
   </para>
   <para>
    Para obtener información sobre la emulación de register_globals activado o desactivado, consulte este <link linkend="faq.misc.registerglobals">FAQ</link>.
   </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

