<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335216 Maintainer: gerardocdc Status: ready -->
<!-- Reviewed: no Maintainer: seros -->
<sect1 xml:id="language.types.object">
 <title>Objetos</title>
 
 <sect2 xml:id="language.types.object.init">
  <title>Inicialización de objetos</title>
  
  <para>
   Para crear un nuevo <type>object</type>, utilice la sentencia <literal>new</literal> 
   para instanciar una clase:
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class foo
{
    function hacer_algo()
    {
        echo "Haciendo algo."; 
    }
}

$bar = new foo;
$bar->hacer_algo();
?>
]]>
   </programlisting>
  </informalexample>
  
  <simpara>
   Para una descripción completa, véase el capítulo
   <link linkend="language.oop5">Clases y objetos</link>.
  </simpara>
  
 </sect2>
 
 <sect2 xml:id="language.types.object.casting">
  <title>Conversión a un objeto</title>
  
  <para>
   Si un <type>object</type> se convierte en un <type>object</type>, éste no se
   modifica. Si un valor de cualquier otro tipo se convierte en un 
   <type>object</type>, se crea una nueva instancia de la clase
   <literal>stdClass</literal> incorporada. Si el valor es &null;, la nueva instancia
   estará vacía. Un <type>array</type> se convierte en un <type>object</type> con las propiedades
   nombradas como claves y los valores correspondientes, con la excepción de las claves numéricas, las cuales
   serán inaccesibles a menos que sean recorridas.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$obj = (object) array('1' => 'foo');
var_dump(isset($obj->{'1'})); // muestra 'bool(false)'
var_dump(key($obj)); // muestra 'int(1)'
?>
]]>
   </programlisting>
  </informalexample>
  
  <para>
   Para cualquier otro valor, una variable miembro llamada <literal>scalar</literal> contendrá
   el valor.
  </para>
  
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$obj = (object) 'ciao';
echo $obj->scalar;  // muestra 'ciao'
?>
]]>
   </programlisting>
  </informalexample>
  
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
