<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342988 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.types.iterable">
 <title>Iterables</title>
 
 <para>
  <type>Iterable</type> es un seudotipo introducido en PHP 7.1. Acepta cualquier
  &array; u objeto que implemente la interfaz <classname>Traversable</classname>.
  Estos dos tipos se recorren con &foreach; y se pueden emplear
  con <command>yield from</command> dentro de un <link
  linkend="language.generators">generador</link>.
 </para>
 
 <sect2 xml:id="language.types.iterable.using">
  <title>Empleo de iterables</title>
  
  <para>
   Iterable se puede usar como tipo de parámetro para indicar que una función
   requiere un conjunto de valores, pero que no importa la forma del dicho conjunto
   ya que se utiizará con &foreach;. Si un valor  no es un array o una
   instancia de <classname>Traversable</classname>, se
   lanzará un <classname>TypeError</classname>.
  </para>
  
  <para>
   <example>
    <title>
     Ejemplo de de tipo de parámetro iterable
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function foo(iterable $iterable) {
    foreach ($iterable as $valor) {
        // ...
    } 
}

?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   Los parámetros declarados como iterable pueden usar &null; o un array como valor
   predeterminado.
  </para>
  
  <para>
   <example>
    <title>
     Ejemplo de valor predeterminado de un parámetro iterable
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function foo(iterable $iterable = []) {
    // ...
}

?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   Iterable se puede usar como tipo de retorno para indicar que una función
   devolverá un valor iterable. Si el valor devuelto no es un array o una instancia
   de <classname>Traversable</classname>, se lanzará un
   <classname>TypeError</classname>.
  </para>
  
  <para>
   <example>
    <title>
     Ejemplo de tipo de retorno iterable
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function bar(): iterable {
    return [1, 2, 3];
}

?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   Las funciones que declaren su tipo de retorno como también pueden ser <link
   linkend="language.generators">generadores</link>.
  </para>
  
  <para>
   <example>
    <title>
     Ejemplo de tipo de retorno de generadro iterable
    </title>
    <programlisting role="php">
<![CDATA[
<?php

function gen(): iterable {
    yield 1;
    yield 2;
    yield 3;
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </sect2>
 
 <sect2 xml:id="language.types.iterable.variance">
  <title>Varianza del tipo iterable</title>
  
  <para>
   Las clases que extiendan/implementen podrían ampliar los métodos usando &array; o
   <classname>Traversable</classname> como tipos de parámetro a
   <type>iterable</type> o reducir los tipos de retorno de <type>iterable</type> a
   &array; o <classname>Traversable</classname>.
  </para>
  
  <para>
   <example>
    <title>
     Ejemplo de varianza del tipo iterable
    </title>
    <programlisting role="php">
<![CDATA[
<?php

interface Ejemplo {
    public function method(array $array): iterable;
}

class ImplementaciónDeEjemplo implements Ejemplo {
    public function method(iterable $iterable): array {
        // Parámetro ampliado y tipo de retorno reducido.
    }
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </sect2>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
