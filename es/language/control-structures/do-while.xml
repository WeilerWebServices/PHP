<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 312947 Maintainer: jpberdejo Status: ready -->

<sect1 xml:id="control-structures.do.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>do-while</literal></title>
 <?phpdoc print-version-for="dowhile"?>
 <simpara>
  Los bucles <literal>do-while</literal> son muy similares a los
  bucles <literal>while</literal>, excepto que la expresión verdadera es
  verificada al final de cada iteración en lugar que al principio.
  La diferencia principal con los bucles <literal>while</literal> es
  que está garantizado que corra la primera iteración de un bucle 
  <literal>do-while</literal> (la expresión verdadera sólo es verificada al
  final de la iteración), mientras que no necesariamente va a correr con un
  bucle <literal>while</literal> regular (la expresión verdadera es
  verificada al principio de cada iteración, si se evalúa como
  &false; justo desde el comienzo, la ejecución del
  bucle terminaría inmediatamente).
 </simpara>
 <para>
  Hay una sola sintaxis para bucles <literal>do-while</literal>:

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$i = 0;
do {
    echo $i;
} while ($i > 0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
   El bucle de arriba se ejecutaría exactamente una sola vez, ya que después de la primera 
   iteración, cuando la expresión verdadera es verificada, se evalúa como
   &false; (<varname>$i</varname> no es mayor que 0) y termina la ejecución
   del bucle.
 </simpara>
 <para>
  Los usuarios avanzados de C pueden estar familiarizados con un uso distinto del
  bucle <literal>do-while</literal>, para permitir parar la ejecución en
  medio de los bloques de código, mediante el encapsulado con
  <literal>do-while</literal> (0), y utilizando la sentencia <link
  linkend="control-structures.break"><literal>break</literal></link>.
  El siguiente fragmento de código demuestra esto:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
do {
    if ($i < 5) {
        echo "i no es lo suficientemente grande";
        break;
    }
    $i *= $factor;
    if ($i < $minimum_limit) {
        break;
    }
   echo "i está bien";

    /* procesar i */

} while (0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  No se preocupe si no se entiende esto completamente o en absoluto.
  Se pueden codificar scripts e incluso scripts potentes sin usar esta
  'característica'.
  Desde PHP 5.3.0, es posible utilizar el operador
  <link linkend="control-structures.goto"><literal>goto</literal></link>
  en lugar de este hack.
 </simpara>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

