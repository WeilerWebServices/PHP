<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 349649 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<refentry xml:id="closure.bindto" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Closure::bindTo</refname>
  <refpurpose>
   Duplicar el cierre con un objeto vinculado y ámbito de clase nuevos
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>Closure</type><methodname>Closure::bindTo</methodname>
   <methodparam><type>object</type><parameter>newthis</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>newscope</parameter>
    <initializer>"static"</initializer></methodparam>
  </methodsynopsis>
  <para>
   Crea y devuelve una nueva <link linkend="functions.anonymous">función
   anónima</link> con el cuerpo y variables vinculadas como ésta, pero
   posiblemente con un objeto vinculado diferente y un nuevo ámbito de clase.
  </para>
  
  <para>
   El "objeto vinculado" determina el valor que <literal>$this</literal>
   tendrá en el cuerpo de la función, y el "ámbito de clase" representa una clase
   que determina los miembros privados y protegidos a los que será capaz
   de acceder la función anónima. Concretamente, los miembros que serán
   visibles son los mismos que si la función anónima fuese un método de
   la clase dada como valor del parámetro
   <parameter>newscope</parameter>.
  </para>
  
  <para>
   Los cierres estáticos no pueden tener ningún objeto vinculado (el valor del parámetro
   <parameter>newthis</parameter> debería ser &null;), pero esta función puede,
   no obstante, usarse para cambiar su ámbito de clase.
  </para>
  
  <para>
   Esta función se asegurará de que a un cierre no estático que tenga una instancia
   vinculada se le aplique un ámbito y viceversa. En este punto,
   los cierres no estáticos que le son dados un ámbito, excepto una instancia &null;, son hechos
   estáticos, y los cierres no estáticos y sin ámbito que le son dados una instancia no
   nula se les aplica un ámbito de clase no especificado.
  </para>
  
  <note>
   <para>
    Si solamente se quieren duplicar las funciones anónimas, se puede usar
    <link linkend="language.oop5.cloning">cloning</link> en su lugar.
   </para>
  </note>
  
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>newthis</parameter></term>
    <listitem>
     <para>
      El objeto al que la función anónima dada debería ser vinculado, o
      &null; para que el cierre sea desvinculado.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>newscope</parameter></term>
    <listitem>
     <para>
      El ámbito de la clase a la que se va a asociar el cierre, o
      'static' para mantener el actual. Si se proporciona un objeto, el tipo del
      mismo se usará en su lugar. Esto determina la visibilidad de métodos
      protegidos y privados del objeto vinculado.
      No se permite pasar (un objeto de) una clase interna a este parémtro.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el objeto <classname>Closure</classname> recién creado
   &return.falseforfailure;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <parameter>newscope</parameter> ya no puede ser (un objeto de) una clase
        interna, lo cual era posible antes de esta versión.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>Closure::bindTo</function></title>
   <programlisting role="php">
<![CDATA[
<?php

class A {
    function __construct($val) {
        $this->val = $val;
    }
    function getClosure() {
        //devuelve el cierre vinculado a este objeto y el ámbito
        return function() { return $this->val; };
    }
}

$ob1 = new A(1);
$ob2 = new A(2);

$cl = $ob1->getClosure();
echo $cl(), "\n";
$cl = $cl->bindTo($ob2);
echo $cl(), "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
1
2
]]>
   </screen>
  </example>
 </refsect1>
 
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="functions.anonymous">Funciones anónimas</link></member>
   <member><methodname>Closure::bind</methodname></member>
  </simplelist>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
