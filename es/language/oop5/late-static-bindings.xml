<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 305233 Maintainer: chuso Status: ready -->
<!-- Reviewed: no Maintainer: seros -->
<sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
 <title>Enlaces estáticos en tiempo de ejecución</title>
 <para>
  Desde su versión 5.3.0, PHP incorpora una nueva funcionalidad llamada enlace estático en tiempo de
  ejecución ("late static bindings" en inglés) que permite referirse referencias a la clase invocada en un contexto de herencia estática.
 </para>
 
 <para>
  De forma más precisa, un enlace estático en tiempo de ejecución funciona almacenando el nombre de clase de
  la última llamada que no tenga «propagación». En el caso de llamadas a métodos estáticos,
  se trata de la clase nombrada explícitamente (normalmente la que precede al operador 
  <link linkend="language.oop5.paamayim-nekudotayim"><literal>::</literal></link>);
  en los casos de llamadas a métodos no estáticos, es clase del objeto. Una
  «llamada con propagación» es una llamada estática que precedida por <literal>self::</literal>,
  <literal>parent::</literal>, <literal>static::</literal>, o, siguiendo
  la jerarquía de clases, <function>forward_static_call</function>.
  <!-- technically, static:: may be non forwarding, but it's irrelevant -->
  
  La función <function>get_called_class</function> puede utilizarse para obtener
  una cadena con el nombre de la clase invocada, y <literal>static::</literal>
  revela cuál es su alcance. 
 </para>
 
 <para>
  A esta funcionalidad se le ha llamado «enlace estático en tiempo de ejecución» teniendo en cuenta un punto
  de vista interno. «Enlace en tiempo de ejecución» viene del hecho de que <literal>static::</literal>
  no será resuelto usando la clase donde el método está definido, sino que en su lugar se
  calculará utilizando información en tiempo de ejecución.
  
  También se le llamó «enlace estático» debido a que se puede utilizar
  (entre otras cosas) para llamadas a métodos estáticos.
 </para>
 
 <sect2 xml:id="language.oop5.late-static-bindings.self">
  <title>Limitaciones de <literal>self::</literal></title>
  <para>
   Las referencias estáticas a la clase en uso, como <literal>self::</literal> o 
   <literal>__CLASS__</literal>, se resuelven empleando la clase a la que
   pertenece la función:
  </para>
  <example>
   <title>Uso de <literal>self::</literal></title>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        self::who();
    }
}

class B extends A {
    public static function who() {
        echo __CLASS__;
    }
}

B::test();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
A
]]>
   </screen>
  </example>
  
 </sect2>
 
 <sect2 xml:id="language.oop5.late-static-bindings.usage">
  <title>Uso de enlaces estático en tiempo de ejecución</title>
  
  <para>
   Los enlaces estáticos en tiempo de ejecución tratan de resolver esta limitación empleando una
   palabra reservada que se refiera a la clase invocada inicialmente en tiempo de ejecución;
   básicamente, una palabra reservada que permita referirse a
   a <literal>B</literal> desde <literal>test()</literal>, según el ejemplo
   anterior. Se decidió no crear una nueva palabra reservada, si no utilizar
   en su lugar <literal>static</literal>, que ya era reservada.
  </para>
  
  <example>
   <title>Uso básico de <literal>static::</literal></title>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function who() {
        echo __CLASS__;
    }
    public static function test() {
        static::who(); // He aquí el enlace estático en tiempo de ejecución
    }
}

class B extends A {
    public static function who() {
        echo __CLASS__;
    }
}

B::test();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
B
]]>
   </screen>
  </example>
  <note>
   <para>
    En contextos no estáticos, la clase invocada será la clase de la instancia del
    objeto. Dado que <literal>$this-></literal> trata de invocar métodos
    privados desde su mismo ámbito, el uso de <literal>static::</literal> puede dar
    diferentes resultados. Otra diferencia es que <literal>static::</literal>
    sólo puede referirse a propiedades estáticas.
   </para>
  </note>
  <example>
   <title>Uso de <literal>static::</literal> en un contexto no estático</title>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    private function foo() {
        echo "¡Éxito!\n";
    }
    public function test() {
        $this->foo();
        static::foo();
    }
}

class B extends A {
   /* foo() se copiará en B, por lo tanto su ámbito seguirá siendo A
    * y la llamada tendrá éxito */
}

class C extends A {
    private function foo() {
        /* se reemplaza el método original; el ámbito del nuevo es ahora C */
    }
}

$b = new B();
$b->test();
$c = new C();
$c->test();   //falla
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
¡Éxito!
¡Éxito!
¡Éxito!


Fatal error:  Call to private method C::foo() from context 'A' in /tmp/test.php on line 9
]]>
   </screen>
  </example>
  <note>
   <para>
    En una llamada que se resuelva como estática, la resolución de enlaces estáticos
    en tiempo de ejecución se detendrá sin propagarse. Por otra parte, las
    llamadas estáticas que utilicen palabras reservadas como <literal>parent::</literal> o
    <literal>self::</literal> sí propagarán la información de llamada.
   </para>
   <example>
    <title>Llamadas que propagan y que no propagan la información de llamada</title>
    <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function foo() {
        static::who();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}

class B extends A {
    public static function test() {
        A::foo();
        parent::foo();
        self::foo();
    }

    public static function who() {
        echo __CLASS__."\n";
    }
}
class C extends B {
    public static function who() {
        echo __CLASS__."\n";
    }
}

C::test();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
C
C
]]>
    </screen>
   </example>
  </note>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

