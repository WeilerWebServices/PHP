<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338507 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<sect1 xml:id="language.oop5.iterations" xmlns="http://docbook.org/ns/docbook">
 <title>Iteración de objetos</title>
 <para>
  
  PHP 5 ofrece una manera para definir objetos, por lo que es posible recorrer
  una lista de elementos con, por ejemplo, una sentencia &foreach;. Por defecto,
  se utilizarán todas las propiedades <link linkend="language.oop5.visibility">visibles</link>
  para la iteración.
  
 </para>
 
 <example>
  <title>Iteración simple de un objeto</title>
  <programlisting role="php">
<![CDATA[
<?php
class MiClase
{
    public $var1 = 'valor 1';
    public $var2 = 'valor 2';
    public $var3 = 'valor 3';

    protected $protected = 'variable protegida';
    private   $private   = 'variable privada';

    function iterateVisible() {
       echo "MiClase::iterateVisible:\n";
       foreach ($this as $clave => $valor) {
           print "$clave => $valor\n";
       }
    }
}

$clase = new MiClase();

foreach($clase as $clave => $valor) {
    print "$clave => $valor\n";
}
echo "\n";


$clase->iterateVisible();

?>
]]>
  </programlisting>
  &example.outputs;
  <screen role="php">
<![CDATA[
var1 => valor 1
var2 => valor 2
var3 => valor 3

MiClase::iterateVisible:
var1 => valor 1
var2 => valor 2
var3 => valor 3
protected => variable protegida
private => variable privada
]]>
  </screen>
  
 </example>
 
 <para>
  Como se muestra en la salida, &foreach; recorre todas las propiedades
  <link linkend="language.oop5.visibility">visibles</link> a las que se pueden
  acceder.
 </para>
 <para>
  Para dar un paso más, se puede implementar la <link linkend="language.oop5.interfaces">interfaz</link>
  <interfacename>Iterator</interfacename>.
  Esto permite al objeto decidir cómo será iterado y qué valores
  estarán disponibles en cada iteración.
 </para>
 
 <example>
  <title>Iteración de un objeto implementando Iterator</title>
  <programlisting role="php">
<![CDATA[
<?php
class MiIterador implements Iterator
{
    private $var = array();
    
    public function __construct($array)
    {
        if (is_array($array)) {
            $this->var = $array;
        }
    }

    public function rewind()
    {
        echo "rebobinando\n";
        reset($this->var);
    }

    public function current()
    {
        $var = current($this->var);
        echo "actual: $var\n";
        return $var;
    }

    public function key()
    {
        $var = key($this->var);
        echo "clave: $var\n";
        return $var;
    }

    public function next()
    {
        $var = next($this->var);
        echo "siguiente: $var\n";
        return $var;
    }

    public function valid()
    {
        $clave = key($this->var);
        $var = ($clave !== NULL && $clave !== FALSE);
        echo "válido: $var\n";
        return $var;
    }

}

$valores = array(1,2,3);
$it = new MiIterador($valores);

foreach ($it as $a => $b) {
    print "$a: $b\n";
}
?>
]]>
  </programlisting>
  &example.outputs;
  <screen role="php">
<![CDATA[
rebobinando
válido: 1
actual: 1
clave: 0
0: 1
siguiente: 2
válido: 1
actual: 2
clave: 1
1: 2
siguiente: 3
válido: 1
actual: 3
clave: 2
2: 3
siguiente:
válido:
]]>
  </screen>
  
 </example>
 
 <para>
  La <link linkend="language.oop5.interfaces">interfaz</link>
  <interfacename>IteratorAggregate</interfacename>
  se puede usar como alternativa para implementar todos los métodos de
  <interfacename>Iterator</interfacename>.
  <interfacename>IteratorAggregate</interfacename> solamente requiere la
  implementación de un único método,
  <methodname>IteratorAggregate::getIterator</methodname>, el cual debería devolver
  una instancia de una clase que implemente <interfacename>Iterator</interfacename>.
 </para>
 
 <example>
  <title>Iteración de un objeto implementando IteratorAggregate</title>
  <programlisting role="php">
<![CDATA[
<?php
class MiColección implements IteratorAggregate
{
    private $items = array();
    private $cuenta = 0;

    // Se requiere la definición de la interfaz IteratorAggregate
    public function getIterator() {
        return new MiIterador($this->items);
    }

    public function add($valor) {
        $this->items[$this->cuenta++] = $valor;
    }
}

$colección = new MiColección();
$colección->add('valor 1');
$colección->add('valor 2');
$colección->add('valor 3');

foreach ($colección as $clave => $val) {
    echo "clave/valor: [$clave -> $val]\n\n";
}
?>
]]>
  </programlisting>
  &example.outputs;  
  <screen role="php">
<![CDATA[
rebobinando
actual: valor 1
válido: 1
actual: valor 1
clave: 0
clave/valor: [0 -> valor 1]

siguiente: valor 2
actual: valor 2
válido: 1
actual: valor 2
clave: 1
clave/valor: [1 -> valor 2]

siguiente: valor 3
actual: valor 3
válido: 1
actual: valor 3
clave: 2
clave/valor: [2 -> valor 3]

siguiente:
actual:
válido:
]]>
  </screen>
  
 </example>
 
 <note>
  <para>
   Para más ejemplos de iteradores, véase la
   <link linkend="spl.iterators">extensión SPL</link>.
  </para>
 </note>
 
 <note>
  <para>
   Los usuarios de PHP 5.5 y posteriores pueden investigar los
   <link linkend="language.generators">generadores</link>, los cuales posibilitan una
   forma alternativa de definir iteradores.
  </para>
 </note>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
