<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339705 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: seros -->

<sect1 xml:id="language.oop5.interfaces" xmlns="http://docbook.org/ns/docbook">
 <title>Interfaces de objetos</title>
 <para>
  Las interfaces de objetos permiten crear código con el cual especificar qué
  métodos deben ser implementados por una clase, sin tener que definir cómo estos
  métodos son manipulados.
 </para>
 <para>
  Las interfaces se definen de la misma manera que una clase, aunque reemplazando la palabra reservada
  <literal>class</literal> por la palabra reservada <literal>interface</literal> y sin que ninguno de sus
  métodos tenga su contenido definido.
 </para>
 <para>
  Todos los métodos declarados en una interfaz deben ser públicos, ya que ésta
  es la naturaleza de una interfaz.
 </para>
 <sect2 xml:id="language.oop5.interfaces.implements">
  <title><literal>implements</literal></title>
  <para>
   Para implementar una interfaz, se utiliza el operador <literal>implements</literal>.
   Todos los métodos en una interfaz deben ser implementados dentro de la clase; el no
   cumplir con esta regla resultará en un error fatal. Las clases pueden implementar
   más de una interfaz si se deseara, separándolas cada una por una coma.
  </para>
  <note>
   <para>
    Antes de PHP 5.3.9, una clase no puede implementar dos interfaces que
    especifiquen un método con el mismo nombre, ya que podría causar ambigüedad.
    Las versiones más recientes de PHP permiten esto siempre y cuando los métodos duplicados
    tengan la misma firma.
   </para>
  </note>
  <note>
   <para>
    Las interfaces se pueden extender al igual que las clases utilizando el operador
    <link linkend="language.oop5.inheritance">extends</link>.
   </para>
  </note>
  <note>
   <para>
    La clase que implemente una interfaz debe utilizar exactamente las mismas
    estructuras de métodos que fueron definidos en la interfaz. De no cumplir
    con esta regla, se generará un error fatal.
   </para>
  </note>
 </sect2>
 <sect2 xml:id="language.oop5.interfaces.constants">
  <title><literal>Constantes</literal></title>
  <para>
   Es posible tener constantes dentro de las interfaces. Las constantes de interfaces
   funcionan como las <link linkend="language.oop5.constants">constantes de clases</link>
   excepto porque no pueden ser sobrescritas por una clase/interfaz que las herede.
  </para>
 </sect2>
 <sect2 xml:id="language.oop5.interfaces.examples">
  &reftitle.examples;
  <example xml:id="language.oop5.interfaces.examples.ex1">
   <title>Ejemplo de interfaz</title>
   <programlisting role="php">
<![CDATA[
<?php

// Declarar la interfaz 'iTemplate'
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implementar la interfaz
// Ésto funcionará 
class Template implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
  
    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }
 
        return $template;
    }
}
// Ésto no funcionará
// Error fatal: La Clase BadTemplate contiene un método abstracto
// y por lo tanto debe declararse como abstracta (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}
?>
]]>
   </programlisting>
  </example>
  <example xml:id="language.oop5.interfaces.examples.ex2">
   <title>Interfaces extensibles</title>
   <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b extends a
{
    public function baz(Baz $baz);
}

// Ésto sí funcionará
class c implements b
{
    public function foo()
    {
    }

    public function baz(Baz $baz)
    {
    }
}

// Ésto no funcionará y resultará en un error fatal
class d implements b
{
    public function foo()
    {
    }

    public function baz(Foo $foo)
    {
    }
}
?>
]]>
   </programlisting>
  </example>
  <example xml:id="language.oop5.interfaces.examples.ex3">
   <title>Herencia múltiple de interfaces</title>
   <programlisting role="php">
<![CDATA[
<?php
interface a
{
    public function foo();
}

interface b
{
    public function bar();
}

interface c extends a, b
{
    public function baz();
}

class d implements c
{
    public function foo()
    {
    }

    public function bar()
    {
    }

    public function baz()
    {
    }
}
?>
]]>
   </programlisting>
  </example>
  <example xml:id="language.oop5.interfaces.examples.ex4">
   <title>Interfaces con constantes</title>
   <programlisting role="php">
<![CDATA[
<?php
interface a
{
    const b = 'Interface constant';
}

// Imprime: Interface constant
echo a::b;


// Sin embargo ésto no funcionará ya que no está permitido
// sobrescribir constantes
class b implements a
{
    const b = 'Class constant';
}
?>
]]>
   </programlisting>
  </example>
  <para>
   Una interfaz, junto con la determinación de tipos, proveen una buena forma de asegurarse
   que determinado objeto contiene métodos particulares. Vea el operador
   <link linkend="language.operators.type">instanceof</link> y la
   <link linkend="language.oop5.typehinting">declaración de tipos</link>.
  </para>
 </sect2>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->