<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339448 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Propiedades</title>
 
 <para>
  Las variables pertenecientes a una clase se llaman "propiedades".
  También se les puede llamar usando otros términos como "atributos"
  o "campos", pero para los propósitos de esta referencia se va a utilizar 
  "propiedades". Éstas se definen usando una de las palabras reservadas
  <literal>public</literal>, <literal>protected</literal>,
  o <literal>private</literal>, seguido de una declaración normal
  de variable. Esta declaración puede incluir una inicialización, pero
  esta inicialización debe ser un valor constante, es decir, debe poder
  ser evaluada durante la compilación y no depender de información
  generada durante la ejecución.
 </para>
 <para>
  Véase la <xref linkend="language.oop5.visibility" /> para más
  información sobre el significado de
  <literal>public</literal>, <literal>protected</literal>,
  y <literal>private</literal>.
 </para>
 <note>
  <para>
   Con el fin de mantener la compatibilidad con PHP 4, PHP 5 continuará
   aceptando el uso de la palabra reservada <literal>var</literal> en la
   declaración de propiedades en lugar de (o además de)
   <literal>public</literal>, <literal>protected</literal>,
   o <literal>private</literal>. Sin embargo, <literal>var</literal> ya
   no es necesaria. Entre las versiones 5.0 y 5.1.3 de PHP, el uso de
   <literal>var</literal> fue considerado obsoleto y emitía una advertencia de
   nivel <constant>E_STRICT</constant>; pero a partir de PHP 5.1.3 ya no está
   obsoleta y no se emite la advertencia.
  </para>
  <para>
   Si se declara una propiedad utilizando <literal>var</literal> en lugar
   de <literal>public</literal>, <literal>protected</literal>,
   o <literal>private</literal>, PHP tratará dicha propiedad
   como si hubiera sido definida como <literal>public</literal>.
  </para>
 </note>
 <para>
  Dentro de los métodos de una clase, se puede acceder a las propiedades no estáticas utilizando
  <literal>-&gt;</literal> (el operador de objeto): <varname>$this-&gt;propiedad</varname>
  (donde <literal>propiedad</literal> es el nombre de la propiedad).
  A las propiedades estáticas se puede acceder utilizando <literal>::</literal> (doble dos puntos):
  <varname>self::$propiedad</varname>. Véase <link linkend="language.oop5.static">la palabra reservada 'static'</link>
  para más información sobre la diferencia entre propiedades estáticas y no estáticas.
 </para>
 <para>
  La pseudovariable <varname>$this</varname> está disponible dentro de
  cualquier método de clase cuando éste es invocado dentro del contexto
  de un objeto. <varname>$this</varname> es una referencia al objeto
  invocador (usualmente el objeto al cual pertenece el método,
  aunque puede que sea otro objeto si el método es llamado
  <link linkend="language.oop5.static">estáticamente</link>
  desde el contexto de un objeto secundario).
 </para>
 
 <para>
  <example>
   <title>Declaración de propiedades</title>
   <programlisting role="php">
<![CDATA[
<?php
class ClaseSencilla
{
   // Válido a partir de PHP 5.6.0:
   public $var1 = 'hola ' . 'mundo';
   // Válido a partir de PHP 5.3.0:
   public $var2 = <<<EOD
hola mundo
EOD;
   // Válido a partir de PHP 5.6.0:
   public $var3 = 1+2;
   // Declaraciones de propiedades inválidas:
   public $var4 = self::miMétodoEstático();
   public $var5 = $myVar;

   // Declaraciones de propiedades válidas:
   public $var6 = miConstante;
   public $var7 = array(true, false);

   // Válido a partir de PHP 5.3.0:
   public $var8 = <<<'EOD'
hola mundo
EOD;
}
?>
]]>
   </programlisting>   
  </example>
 </para>
 
 <note>
  <para>
   Existen varias funciones interesantes para manipular clases y objetos.
   Puede ser interesante echarle un vistazo a las
   <link linkend="ref.classobj">Funciones de clases/objetos</link>.
  </para>
 </note>
 
 <para>
  A partir de PHP 5.3.0, se puede utilizar
  <link linkend="language.types.string.syntax.heredoc">heredocs</link> y
  <link linkend="language.types.string.syntax.nowdoc">nowdocs</link>
  en cualquier contexto de datos estáticos, incluyendo la declaración
  de propiedades.
  <example>
   <title>Ejemplo del uso de nowdoc para inicializar una propiedad</title>
   <programlisting role="php">
<![CDATA[
<?php
class foo {
   // A paritr de PHP 5.3.0
   public $bar = <<<'EOT'
bar
EOT;
   public $baz = <<<EOT
baz
EOT;
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <note>
  <para>
   Se añadio soporte para Nowdoc y Heredoc en PHP 5.3.0.
  </para>
 </note>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
