<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 340236 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->
<sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
 <title>Operador de Resolución de Ámbito (::)</title>
 
 <para>
  El Operador de Resolución de Ámbito (también denominado Paamayim Nekudotayim)
  o en términos simples, el doble dos-puntos, es un token que permite acceder
  a elementos <link linkend="language.oop5.static">estáticos</link>,
  <link linkend="language.oop5.constants">constantes</link>, y sobrescribir
  propiedades o métodos de una clase.
 </para>
 
 <para>
  Cuando se hace referencia a estos items desde el exterior de la
  definición de la clase, se utiliza el nombre de la clase.
 </para>
 
 <para>
  A partir de PHP 5.3.0, es posible hacer referencia a una clase usando una variable.
  El valor de la variable no puede ser una palabra clave (por ej., <literal>self</literal>,
  <literal>parent</literal> y <literal>static</literal>).
 </para>
 
 <para>
  Paamayim Nekudotayim podría, en un principio, parecer una extraña elección
  para bautizar a un doble dos-puntos. Sin embargo, mientras se escribía el
  Zend Engine 0.5 (que utilizó PHP 3), asi es como el equipo Zend decidió
  bautizarlo. En realidad, significa doble dos-puntos - en Hebreo!
 </para>
 
 <example>
  <title>:: desde el exterior de la definición de la clase</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'Un valor constante';
}

$classname = 'MyClass';
echo $classname::CONST_VALUE; // A partir de PHP 5.3.0

echo MyClass::CONST_VALUE;
?>
]]>
   </programlisting>
  </example>
  
  <para>
   Las tres palabras claves especiales <varname>self</varname>, <varname>parent</varname> y 
   <varname>static</varname> son utilizadas para acceder a propiedades y métodos desde el interior 
   de la definición de la clase.
  </para>
  
  <example>
   <title>:: desde el interior de la definición de la clase</title>
   <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass
{
    public static $my_static = 'variable estática';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

$classname = 'OtherClass';
$classname::doubleColon(); // A partir de PHP 5.3.0

OtherClass::doubleColon();
?>
]]>
   </programlisting>
  </example>
  
  <para>
   Cuando una clase extendida sobrescribe la definición parent de un método,
   PHP no invocará al método parent. Depende de la clase extendida el hecho de
   llamar o no al método parent. Esto también se aplica a definiciones de
   métodos <link linkend="language.oop5.decon">Constructores y Destructores</link>,
   <link linkend="language.oop5.overloading">Sobrecarga</link>, y
   <link linkend="language.oop5.magic">Mágicos</link>.
  </para>
  
  <example>
   <title>Invocando a un método parent</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
    }
}

class OtherClass extends MyClass
{
    // Sobrescritura de definición parent
    public function myFunc()
    {
        // Pero todavía se puede llamar a la función parent
        parent::myFunc();
        echo "OtherClass::myFunc()\n";
    }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
   </programlisting>
  </example>
  <para>
   Véase también <link linkend="language.oop5.basic.class.this">algunos ejemplos de 
   trucos de llamadas estáticas </link>.
  </para>
  
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
