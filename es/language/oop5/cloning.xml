<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 346157 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: yago -->
<sect1 xml:id="language.oop5.cloning" xmlns="http://docbook.org/ns/docbook">
 <title>Clonación de Objetos</title>
 
 <para>
  No siempre se desea crear una copia de un objeto replicando todas sus propiedades
  completamente. Un buen ejemplo que ilustra la necesidad de contar con un constructor
  de copias, sería si tuviéramos un objeto que represente una ventana en GTK y el
  objeto almacene los recursos de esta ventana GTK, de forma que cuando creas un duplicado
  el comportamiento esperado sería una nueva ventana con las mismas propiedades, y que
  el nuevo objeto referencie a los recursos de la nueva ventana. Otro ejemplo es si un
  objeto hace referencia a otro objeto necesario, de forma que cuando se realiza una
  réplica del objeto principal, se espera que se cree una nueva instancia de este otro
  objeto, de forma que la réplica tenga su propia copia.
 </para>
 
 <para>
  Para crear una copia de un objeto se utiliza la palabra clave <emphasis>clone</emphasis> (que invoca,
  si fuera posible, al método <link linkend="object.clone">__clone()</link> del objeto). No se puede llamar al método
  <link linkend="object.clone">__clone()</link> de un objeto directamente. 
 </para>
 
 <informalexample>
  <programlisting>
<![CDATA[
$copia_de_objeto = clone $objeto;
]]>
  </programlisting>
 </informalexample>
 
 <para>
  Cuando se clona un objeto, PHP llevará a cabo una copia superficial de
  las propiedades del objeto. Las propiedades que sean referencias a otras
  variables, mantendrán las referencias.
 </para>
 
 <methodsynopsis xml:id="object.clone">
  <type>void</type><methodname>__clone</methodname>
  <void/>
 </methodsynopsis>
 
 <para>
  Una vez que la clonación ha finalizado, se llamará al método <link linkend="object.clone">__clone()</link>
  del nuevo objeto (si el método <link linkend="object.clone">__clone()</link> estuviera definido), para permitirle
  realizar los cambios necesarios sobre sus propiedades.
 </para>
 
 <example>
  <title>Clonación de un objeto</title>
  <programlisting role="php">
<![CDATA[
<?php
class SubObject
{
    static $instances = 0;
    public $instance;

    public function __construct() {
        $this->instance = ++self::$instances;
    }

    public function __clone() {
        $this->instance = ++self::$instances;
    }
}

class MyCloneable
{
    public $object1;
    public $object2;

    function __clone()
    {
        // Forzamos la copia de this->object, si no
        // hará referencia al mismo objeto.
        $this->object1 = clone $this->object1;
    }
}

$obj = new MyCloneable();

$obj->object1 = new SubObject();
$obj->object2 = new SubObject();

$obj2 = clone $obj;


print("Objeto Original:\n");
print_r($obj);

print("Objeto Clonado:\n");
print_r($obj2);

?> 
]]>
  </programlisting>
  &example.outputs;
  <screen role="php">
<![CDATA[
Objeto Original:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 1
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
Objeto Clonado:
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 3
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
]]>
   
  </screen>
  
 </example>
 
 <para>
  PHP 7.0.0 introdujo la posibilidad de acceder a un miembro del objeto
  recién clonado en una única expresión:
 </para>
 <example>
  <title>Acceder a un miembre del objeto recién clonado</title>
  <programlisting role="php">
<![CDATA[
<?php
$dateTime = new DateTime();
echo (clone $dateTime)->format('Y');
?>
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
2016
]]>
   </screen>
 </example>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
