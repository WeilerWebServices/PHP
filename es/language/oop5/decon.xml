<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341633 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->
<sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
 <title>Constructores y destructores</title>
 
 <sect2 xml:id="language.oop5.decon.constructor">
  <title>Constructor</title>
  <methodsynopsis xml:id="object.construct">
   <type>void</type><methodname>__construct</methodname>
   <methodparam choice="opt"><type>mixed</type><parameter>args</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   PHP 5 permite a los desarrolladores declarar métodos constructores para las
   clases. Aquellas que tengan un método constructor lo invocarán en cada nuevo
   objeto creado, lo que lo hace idóneo para cualquier inicialización que
   el objeto pueda necesitar antes de ser usado.
  </para>
  <note>
   <simpara>
    Los constructores padres no son llamados implícitamente si la clase hija define
    un constructor. Para ejecutar un constructor padre, se requiere invocar a
    <function>parent::__construct</function> desde el constructor hijo.
    Si el hijo no define un constructor, entonces se puede heredar de la clase
    madre como un método de clase normal (si no fue declarada como
    privada).
   </simpara>
  </note>
  <example>
   <title>Utilización de nuevos constructores unificados</title>
   <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "En el constructor BaseClass\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "En el constructor SubClass\n";
   }
}

class OtherSubClass extends BaseClass {
    // heredando el constructor BaseClass
}

// En el constructor BaseClass
$obj = new BaseClass();

// En el constructor BaseClass
// En el constructor SubClass
$obj = new SubClass();

// En el constructor BaseClass
$obj = new OtherSubClass();
?> 
]]>
   </programlisting>
  </example>
  <para>
   Por motivos de retrocompatibilidad con PHP 3 y PHP 4, si PHP no puede encontrar una
   función <link linkend="object.construct">__construct()</link> de una clase
   dada, se buscará
   la función constructora del estilo antiguo, por el nombre de la clase.
   Efectivamente, esto significa que en el único caso en el que se tendría
   compatibilidad es si la clase tiene un método llamado
   <link linkend="object.construct">__construct()</link> que fuese utilizado para
   diferentes semáticas.
  </para>
  <!-- Not using an entity because I want specific wording here, since we're
   not deprecating constructors in general. -->
  <warning>
   <simpara>
    Los constructores del estilo antiguo están <emphasis>OBSOLETOS</emphasis> en PHP 7.0, por
    lo que serán eliminados en una futura versión. Se debería utilizar siempre
    <link linkend="object.construct">__construct()</link> en código nuevo.
   </simpara>
  </warning>
  <para>
   A diferencia con otros métodos, PHP no generará un mensaje de error a
   nivel de <constant>E_STRICT</constant> cuando <link linkend="object.construct">__construct()</link>
   es sobrescrito con diferentes parámetros que los métodos padre 
   <link linkend="object.construct">__construct()</link> tienen.
  </para>
  <para>
   A partir de PHP 5.3.3, los métodos con el mismo nombre que el último
   elemento de una clase en un nombre de espacios no serán más tratados
   como un constructor. Este cambio no afecta a clases sin espacio de nombres.
  </para>
  <example>
   <title>Constructores en clases pertenecientes a un nombre de espacios</title>
   <programlisting role="php">
<![CDATA[
<?php
namespace Foo;
class Bar {
    public function Bar() {
        // Tratado como constructor en PHP 5.3.0 - 5.3.2
        // Tratado como método regular a partir de PHP 5.3.3
    }
}
?>
]]>
   </programlisting>
  </example>
 </sect2>
 
 <sect2 xml:id="language.oop5.decon.destructor">
  <title>Destructor</title>
  <methodsynopsis xml:id="object.destruct">
   <type>void</type><methodname>__destruct</methodname>
   <void />
  </methodsynopsis>
  <para>
   PHP 5 introduce un concepto de destructor similar al de otros
   lenguajes orientados a objetos, tal como C++. El método destructor 
   será llamado tan pronto como no hayan otras referencias a un objeto 
   determinado, o en cualquier otra circunstancia de finalización.
  </para>
  <example>
   <title>Ejemplo de Destructor</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass {
   function __construct() {
       print "En el constructor\n";
       $this->name = "MyDestructableClass";
   }

   function __destruct() {
       print "Destruyendo " . $this->name . "\n";
   }
}

$obj = new MyDestructableClass();
?>
]]>
   </programlisting>
  </example>
  <para>
   Como los constructores, los destructores padre no serán llamados
   implícitamente por el motor. Para ejecutar un destructor padre, se
   deberá llamar explícitamente a <function>parent::__destruct</function>
   en el interior del destructor. También como los constructores, una clase child 
   puede heredar el destructor de los padres si no implementa uno propio.
  </para>
  <para>
   El destructor será invocado aún si la ejecución del script es detenida
   usando <function>exit</function>. Llamar a <function>exit</function> en un
   destructor evitará que se ejecuten las rutinas restantes de finalización.
  </para>
  <note>
   <para>
    Los destructores invocados durante la finalización del script tienen
    los headers HTTP ya enviados. El directorio de trabajo en la fase de
    finalización del script puede ser diferente con algunos SAPIs (por ej., Apache).
   </para>
  </note>
  <note>
   <para>
    Intentar lanzar una excepción desde un destructor (invocado en la finalización
    del script) causa un error fatal.
   </para>
  </note>
 </sect2>
 
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
