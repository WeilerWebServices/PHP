<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325214 Maintainer: seros Status: ready -->
<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<refentry xml:id="runkit.sandbox-parent" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Runkit_Sandbox_Parent</refname>
  <refpurpose>
   Clase Runkit Anti-Sandbox
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;

  <methodsynopsis>
   <type>void</type><methodname>Runkit_Sandbox_Parent::__construct</methodname>
   <void/>
  </methodsynopsis>

  <para>
   Instanciar la clase <classname>Runkit_Sandbox_Parent</classname>
   desde dentro de un entorno de aislamiento de procesos creado desde la
   clase <classname>Runkit_Sandbox</classname> proporciona algunos
   medios (controlados) para que un aislamiento de procesos hijo acceda a su padre.
  </para>

  &note.runkit.sandbox;

  <para>
   Para que cualquier característica de <classname>Runkit_Sandbox_Parent</classname>
   funcione, el soporte debe estar habilitado sobre una base del aislamiento de procesos
   habilitando la bandera <literal>parent_access</literal> desde el contexto
   padre.
  </para>

  <example>
   <title>Trabajar con variables en un aislamiento de procesos (sandbox)</title>
   <programlisting role="php">
<![CDATA[
<?php
$sandbox = new Runkit_Sandbox();
$sandbox['parent_access'] = true;
?>
]]>
   </programlisting>
  </example>

 </refsect1>

 <refsect1 role="variables">
  <title>Acceder a las Variables del Padre</title>
  <para>
   Al igual que con el acceso a variables en un aislamiento de procesos, las variables
   del padre de un aislamiento de procesos se puede leer y escribir como propiedades de
   la clase <classname>Runkit_Sandbox_Parent</classname>.
   El acceso a la lectura de variables padre puede estar habilitado con
   el ajuste <literal>parent_read</literal> (además
   del ajuste base <literal>parent_access</literal>).
   El acceso a escritura, a su vez, se habilita a través del
   ajuste <literal>parent_write</literal>.
  </para>

  <para>
   A diferencia del acceso a variables de un hijo del aislamiento de procesos, el ámbito de la variable
   no está limitado sólo a globales. Estableciendo el
   ajuste <literal>parent_scope</literal> a un valor entero
   apropiado se pueden examinar otros ámbitos en la pila de
   llamadas activas. Un valor de 0 (Predeterminado) dirigirá
   el acceso a variables al ámbito global. 1 apuntará al acceso
   a varables en cualquier ámbito de variables que estuviera activo en el momento en el que
   el bloque del código del aislamiento de proceosos actual estuviera ejecutándose. Valores mayores
   recorren hacia atrás las funciones que llamaron a las funciones
   que llevaron al código de ejecución del aislamiento de procesos que intentó acceder
   a sus propias variables padre.
  </para>

  <example>
   <title>Acceder a las varibales padre</title>
   <programlisting role="php">
<![CDATA[
<?php
$php = new Runkit_Sandbox();
$php['parent_access'] = true;
$php['parent_read'] = true;

$prueba = "Global";

$php->eval('$PARENT = new Runkit_Sandbox_Parent;');

$php['parent_scope'] = 0;
uno();

$php['parent_scope'] = 1;
uno();

$php['parent_scope'] = 2;
uno();

$php['parent_scope'] = 3;
uno();

$php['parent_scope'] = 4;
uno();

$php['parent_scope'] = 5;
uno();

function uno() {
    $prueba = "uno()";
    dos();
}

function dos() {
    $prueba = "dos()";
    tres();
}

function tres() {
    $prueba = "tres()";
    $GLOBALS['php']->eval('var_dump($PARENT->prueba);');
}
?>
]]>
   </programlisting>
  </example>
  &example.outputs;
  <screen>
<![CDATA[
string(6) "Global"
string(7) "tres()"
string(5) "dos()"
string(5) "uno()"
string(6) "Global"
string(6) "Global"
]]>
  </screen>
 </refsect1>

 <refsect1 role="functions">
  <title>Llamar a las Funciones Padre</title>
  <para>
   Igual que con el acceso del aislamiento de procesos, un aislamiento de procesos puede acceder a sus funciones
   padre siempre que haya sido habilitada la configuración apropiada.
   Habilitar <literal>parent_call</literal> permitirá al aislamiento de procesos
   llamar a todas las funciones disponibles en el ámbito padre. Los constructores
   del lenguaje están controlados cada uno por sus propias configuraciones:
   <function>print</function> y <function>echo</function> son
   habilitadas con <literal>parent_echo</literal>.
   <function>die</function> y <function>exit</function> son
   habilitadas con <literal>parent_die</literal>.
   <function>eval</function> es habilitada con <literal>parent_eval</literal>
   mientras que <function>include</function>, <function>include_once</function>,
   <function>require</function>, y <function>require_once</function>
   son habilitadas a través de <literal>parent_include</literal>.
  </para>

 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
