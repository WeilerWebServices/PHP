<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343899 Maintainer: edwincartagenah Status: ready -->
<!-- Reviewed: yes Maintainer: edwincartagenah -->

<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>
   Verificar que los contenidos de una variable puedan ser llamados como una
   función
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>syntax_only</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">callable_name</parameter></methodparam>
  </methodsynopsis>
  <para>
   Verifica que los contenidos de una variable puedan ser llamados como una función.
   Esto permite revisar que los contenidos de una variable contengan el nombre de una 
   función válida, o que un array contenga un objeto adecuadamente codificado y un nombre de función.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       El valor a revisar
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>solo_sintaxis</parameter></term>
     <listitem>
      <para>
       Si es &true; la función solo verifica que
       <parameter>nombre</parameter> pueda ser una función o un método. Solo rechazará 
    variables simples que no sean cadenas, o un array que no tenga una estructura 
    válida para ser usado como llamada de retorno. Se espera que las matrices válidas 
    tengan solo 2 entradas, la primera de las cuales es un objeto o una cadena, y la segunda una cadena.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callable_name</parameter></term>
     <listitem>
      <para>
       Recibe el "nombre que puede ser llamado". En el ejemplo siguiente
       aquél es "algunaClase:algunMetodo". Tenga en cuenta, sin embargo, que a pesar de
       la implicación de que algunaClase::algunMetodo() es un método
       estático que puede ser llamado, este no es el caso.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve &true; si <parameter>var</parameter> puede ser llamado, &false; 
   de lo contrario.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>is_callable</function></title>
    <programlisting role="php">
<![CDATA[
<?php
//  Cómo chequear una variable para ver si puede ser llamada
//  como una función.

//
//  Variable simple que contiene una función
//

function algunaFuncion() 
{
}

$variableFuncion = 'algunaFuncion';

var_dump(is_callable($variableFuncion, false, $nombre_a_llamar));  // bool(true)

echo $nombre_a_llamar, "\n";  // algunaFuncion

//
//  Array que contiene un método
//

class algunaClase {

  function algunMetodo() 
  {
  }

}


$unObjeto = new algunaClase();

$variableMetodo = array($unObjeto, 'algunMetodo');

var_dump(is_callable($variableMetodo, true, $nombre_a_llamar));  //  bool(true)

echo $nombre_a_llamar, "\n";  //  algunaClase::algunMetodo

?>
]]>
    </programlisting>
   </example>   
   <example>
    <title>Función <function>is_callable</function> y constructores</title>
    <simpara>
     A partir de PHP 5.3.0 la función <function>is_callable</function> reporta constructores como
     que no se pueden llamar. Esto afecta el estilo de los constructores de PHP 5
     (<literal>__construct</literal>) así también el estilo de los constructors de PHP 4 (por ejemplo
     metodos con el mismo nombre de la clase). Anteriormente, ambos casos han sido
     considerados como llamables.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function __construct() {}
    public function foo() {}
}

var_dump(
    is_callable(array('Foo', '__construct')),
    is_callable(array('Foo', 'foo'))
);
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(false)
]]>
    </screen>
   </example>
  </para>   
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
