<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331179 Maintainer: yago Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.intval" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>intval</refname>
  <refpurpose>Obtiene el valor entero de una variable</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>intval</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>base</parameter><initializer>10</initializer></methodparam>
  </methodsynopsis>
  <para>
   Devuelve el valor <type>integer</type> de una <parameter>var</parameter>,
   con la especificada <parameter>base</parameter> para la conversión
   (por defecto es base 10). No debería ser usado en objetos, si es usado
   emitirá un error de nivel <constant>E_NOTICE</constant>
   y devolverá 1.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       El valor escalar a convertir a un entero
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>base</parameter></term>
     <listitem>
      <para>
       La base para la conversión
      </para>
      <note>
       <para>
        Si <parameter>base</parameter> es 0, la base usada estará determinada
        por el formato de <parameter>var</parameter>:
        <itemizedlist>
         <listitem>
          <simpara>
           si el string incuye el prefijo "0x" (o "0X"), la base se tomará
           como 16 (hex); si no,
          </simpara>
         </listitem>
         <listitem>
          <simpara>
           si el string comienza con "0", la base se tomará como 8 (octal);
           si no,
          </simpara>
         </listitem>
         <listitem>
          <simpara>
           la base se toma como 10 (decimal).
          </simpara>
         </listitem>
        </itemizedlist>
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El valor entero de <parameter>var</parameter> en caso de éxito, o 0 en
   caso de error. Arrays vacíos devuelven 0, arrays no vacíos devuelven 1.
  </para>
  <para>
   El valor máximo depende del sistema. Los sistemas de 32 bits tienen un 
   rango máximo para un entero con signo que va desde -2147483648 a 2147483647. Así, por ejemplo, 
   en tal sistema, <literal>intval('1000000000000')</literal> devolverá 
   2147483647. El valor máximo para un entero con signo en sistemas de 64 bits es
   9223372036854775807.
  </para>
  <para>
   Las cadenas muy probablemente devolverán 0, aunque esto depende de los 
   carácteres del extremo izquierdo de la cadena. Aplican las reglas comunes para 
   <link linkend="language.types.integer.casting">moldeado de enteros</link>.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplos de <function>intval</function></title>
    <para>
     Los siguientes ejemplos se basan en un sistema de 32 bits.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
echo intval(42);                      // 42
echo intval(4.2);                     // 4
echo intval('42');                    // 42
echo intval('+42');                   // 42
echo intval('-42');                   // -42
echo intval(042);                     // 34
echo intval('042');                   // 42
echo intval(1e10);                    // 1410065408
echo intval('1e10');                  // 1
echo intval(0x1A);                    // 26
echo intval(42000000);                // 42000000
echo intval(420000000000000000000);   // 0
echo intval('420000000000000000000'); // 2147483647
echo intval(42, 8);                   // 42
echo intval('42', 8);                 // 34
echo intval(array());                 // 0
echo intval(array('foo', 'bar'));     // 1
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    El parámetro <parameter>base</parameter> no tiene ningún efecto a menos que el
    parámetro <parameter>var</parameter> sea una cadena.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="changelog"><!-- {{{ -->
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Lanza <constant>E_NOTICE</constant> y
        devuelve 1, cuando se pasa un objecto a
        <parameter>var</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>boolval</function></member>
    <member><function>floatval</function></member>
    <member><function>strval</function></member>
    <member><function>settype</function></member>
    <member><function>is_numeric</function></member>
    <member><link linkend="language.types.type-juggling">Manipulación de tipos</link></member>
    <member><link linkend="ref.bc">Funciones matemáticas de precisión arbitraria de BCMath</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
