<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330268 Maintainer: jesusruiz Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.debug-zval-dump" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>debug_zval_dump</refname>
  <refpurpose>Vuelca a la salida una cadena con la representación de un valor interno de zend</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>debug_zval_dump</methodname>
   <methodparam><type>mixed</type><parameter>variable</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Volcar a la salida una cadena con la representación de un valor interno de zend.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>variable</parameter></term>
     <listitem>
      <para>
       La variable a ser evaluada
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo <function>debug_zval_dump</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hola Mundo';
$var2 = '';

$var2 =& $var1;

debug_zval_dump(&$var1);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
&string(11) "Hola Mundo" refcount(3)
]]>
    </screen>
   </example>
  </para>
  <note>
   <title>Cuidado con <literal>refcount</literal></title>
   <para>
    El valor <literal>refcount</literal> devuelto por esta función no es
    evidente en determinadas circunstancias. Por ejemplo, un desarrollador puede
    esperar que el ejemplo anterior indique un <literal>refcount</literal> de
    <literal>2</literal>. La tercera referencia se crea cuando se realiza la
    llamada a <function>debug_zval_dump</function>.
   </para>
   <para>
    Este comportamiento se agrava aún más cuando una variable no se pasa a
    <function>debug_zval_dump</function> por referencia. Para ilustrar esto, considere
    una versión ligeramente modificada del ejemplo anterior:
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hola Mundo';
$var2 = '';

$var2 =& $var1;

debug_zval_dump($var1); // esta vez, no pasada por referencia
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hola Mundo" refcount(1)
]]>
     </screen>
    </example>
   </para>
   <para>
    Por qué <literal>refcount(1)</literal>? Porque una copia de <literal>$var1</literal> es
    realizada, cuando se llama a la función.
   </para>
   <para>
    Esta función se hace aún <emphasis>más</emphasis> confusa cuando una
    variable con un <literal>refcount</literal> de <literal>1</literal> es
    pasada (por copia/valor):
   </para>
   <para>
    <example>
     <title/>
     <programlisting role="php">
<![CDATA[
<?php
$var1 = 'Hola Mundo';

debug_zval_dump($var1);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(11) "Hola Mundo" refcount(2)
]]>
     </screen>
    </example>
   </para>
   <para>
    Un <literal>refcount</literal> de <literal>2</literal>, aquí, no es extremedamente
    evidente. Especialmente teniendo en cuenta los ejemplos anteriores. ¿Qué ha ocurrido?
   </para>
   <para>
    Cuando una variable tiene una sola referencia (como ocurría con <literal>$var1</literal>
    antes de que fuera utilizada como un argumento para <function>debug_zval_dump</function>),
    el motor de PHP optimiza la manera en que se pasa a una función.
    Internamente, PHP trata <literal>$var1</literal> como una referencia (en esa
    <literal>refcount</literal> se incrementa para el ámbito de esa
    función), con la salvedad de que <emphasis>si</emphasis> la referencia pasa a ser 
    aprobada por escrito y, una copia es realizada, pero sólo en el momento de
    la escritura. Esto se conoce como "copiar al escribir."
   </para>
   <para>
    Así que, si <function>debug_zval_dump</function> pasa a escribir en su único
    parámetro (y no lo hace), es entonces cuando se haría una copia. Hasta entonces, el
    parámetro sigue siendo una referencia, haciendo que <literal>refcount</literal> sea
    incrementado a <literal>2</literal> en el ámbito de la función llamada.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>var_dump</function></member>
    <member><function>debug_backtrace</function></member>
    <member><link linkend="language.references">Explicación de las Referencias</link></member>
    <member><link xlink:href="&url.derick.references;">Explicación de las Referencias (por Derick Rethans)</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
