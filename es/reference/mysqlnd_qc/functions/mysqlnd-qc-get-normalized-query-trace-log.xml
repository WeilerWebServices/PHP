<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325489 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.mysqlnd-qc-get-normalized-query-trace-log" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>mysqlnd_qc_get_normalized_query_trace_log</refname>
  <refpurpose>Devuelve un registro de rastreo de consultas normalizadas para cada consulta inspeccionada por la caché de consultas</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type>
   <methodname>mysqlnd_qc_get_normalized_query_trace_log</methodname>
   <void />
  </methodsynopsis>
  <para>
   Devuelve un registro de rastreo de consultas normalizadas para cada consulta inspeccionada por la caché de consultas.
   La recopilación del registro de rastreo está deshabilitada de forma predeterminada. Para recopilar
   el registro de rastreo se ha de establecer la directiva de configuración de PHP
   <literal>mysqlnd_qc.collect_normalized_query_trace</literal> a
   <literal>1</literal>
  </para>
  <para>
   Las entradas en el registro de rastreo están agrupadas por la sentencia de consulta normalizada.
   Dicha sentencia es la sentencia de consulta en donde todos los valores de sus
   parámetros han sido reemplazados por un signo de interrogación. Por ejemplo, Las dos
   sentencias <literal>SELECT id FROM test WHERE id = 1</literal> y
   <literal>SELECT id FROM test WHERE id = 2</literal> son normalizadas como
   <literal>SELECT id FROM test WHERE id = ?</literal>. Siempre que una sentencia
   sea inspeccionada por la caché de consultas y coincida con el patrón de sentencia normalizado,
   sus estadísticas son agrupadas por la cadena de sentencia normalizada.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un array con el registro de consutas. Cada entrada de la lista contiene
   la cadena de consulta normalizada en información detallada.
  </para>
  
  <informaltable>
   <tgroup cols="2">
    <colspec colwidth="1*"/>
    <colspec colwidth="9*"/>
    <thead>
     <row>
      <entry>Clave</entry>
      <entry>Descripción</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <literal>query</literal>
      </entry>
      <entry>
       La cadena de sentencia normalizada.
      </entry>
     </row>
     <row>
      <entry>
       <literal>occurences</literal>
      </entry>
      <entry>
       Cuántas sentencias han coincidido con la cadena de sentencia
       normalizada además de la que creó la entrada en el registro.
       Este valor es cero si una sentencia ha sido normalizada, su representación
       normalizada ha sido añadida al registro y ninguna consulta inspeccionada
       por PECL/mysqlnd_qc tiene la misma cadena de sentencia normalizada.
      </entry>
     </row>
     <row>
      <entry>
       <literal>eligible_for_caching</literal>
      </entry>
      <entry>
       Si una sentencia podría ser almacenada en caché. Una sentencia candidata para ser
       almacenada en caché no tiene que ser almacenada necesariamente. No es posible indicar
       con certeza cuántas sentencias almacenadas en caché han contribuido a la
       entrada del registro de la sentencia normalizada acumulada. Sin embargo, comparando
       el tiempo de ejecución mínimo y medio se puede hacer una estimación fundamentada.
      </entry>
     </row>
     <row>
      <entry>
       <literal>avg_run_time</literal>
      </entry>
      <entry>
       El tiempo de ejecución medio de todas las consultas que contribuyen a la
       entrada del registro. El tiempo de ejcución es el intervalo entre el envío de la
       sentencia de consulta a MySQL y el recibimiento de la respuesta desde MySQL.
      </entry>
     </row>
     <row>
      <entry>
       <literal>avg_store_time</literal>
      </entry>
      <entry>
       El tiempo de almacenamiento medio de todas las consultas que contribuyen a la
       entrada del registro. El tiempo de almacenamiento es el tiempo necesario para obtener
       un conjunto de resultados de una sentencia desde el sevidor al cliente, y
       almacenarlo en el cliente.
      </entry>
     </row>
     <row>
      <entry>
       <literal>min_run_time</literal>
      </entry>
      <entry>
       El tiempo de ejecución mínimo de todas las consultas que contribuyen a la
       entrada del registro.
      </entry>
     </row>
     <row>
      <entry>
       <literal>min_store_time</literal>
      </entry>
      <entry>
       El tiempo de almacenamiento mínimo de todas las consultas que contribuyen a la
       entrada del registro.
      </entry>
     </row>
     <row>
      <entry>
       <literal>max_run_time</literal>
      </entry>
      <entry>
       El tiempo de ejecución máximo de todas las consultas que contribuyen a la
       entrada del registro.
      </entry>
     </row>
     <row>
      <entry>
       <literal>max_store_time</literal>
      </entry>
      <entry>
       El tiempo de almacenamiento máximo de todas las consultas que contribuyen a la
       entrada del registro.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>mysqlnd_qc_get_normalized_query_trace_log</function></title>
   <programlisting role="ini">
<![CDATA[
mysqlnd_qc.collect_normalized_query_trace=1
]]>
   </programlisting>
   <programlisting role="php">
<![CDATA[
<?php
/* Conectar, crear y rellenar la tabla test */
$mysqli = new mysqli("host", "usuario", "contraseña", "esquema", "puerto", "socket");
$mysqli->query("DROP TABLE IF EXISTS test");
$mysqli->query("CREATE TABLE test(id INT)");
$mysqli->query("INSERT INTO test(id) VALUES (1), (2)");

/* no almacenanda en caché */
$res = $mysqli->query("SELECT id FROM test WHERE id = 1");
var_dump($res->fetch_assoc());
$res->free();

/* colocada en caché */
$res = $mysqli->query("/*" . MYSQLND_QC_ENABLE_SWITCH . "*/" . "SELECT id FROM test WHERE id = 2");
var_dump($res->fetch_assoc());
$res->free();

/* coincidencia en la caché */
$res = $mysqli->query("/*" . MYSQLND_QC_ENABLE_SWITCH . "*/" . "SELECT id FROM test WHERE id = 2");
var_dump($res->fetch_assoc());
$res->free();

var_dump(mysqlnd_qc_get_normalized_query_trace_log());
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
array(1) {
  ["id"]=>
  string(1) "1"
}
array(1) {
  ["id"]=>
  string(1) "2"
}
array(1) {
  ["id"]=>
  string(1) "2"
}
array(4) {
  [0]=>
  array(9) {
    ["query"]=>
    string(25) "DROP TABLE IF EXISTS test"
    ["occurences"]=>
    int(0)
    ["eligible_for_caching"]=>
    bool(false)
    ["avg_run_time"]=>
    int(0)
    ["min_run_time"]=>
    int(0)
    ["max_run_time"]=>
    int(0)
    ["avg_store_time"]=>
    int(0)
    ["min_store_time"]=>
    int(0)
    ["max_store_time"]=>
    int(0)
  }
  [1]=>
  array(9) {
    ["query"]=>
    string(27) "CREATE TABLE test (id INT )"
    ["occurences"]=>
    int(0)
    ["eligible_for_caching"]=>
    bool(false)
    ["avg_run_time"]=>
    int(0)
    ["min_run_time"]=>
    int(0)
    ["max_run_time"]=>
    int(0)
    ["avg_store_time"]=>
    int(0)
    ["min_store_time"]=>
    int(0)
    ["max_store_time"]=>
    int(0)
  }
  [2]=>
  array(9) {
    ["query"]=>
    string(40) "INSERT INTO test (id ) VALUES (? ), (? )"
    ["occurences"]=>
    int(0)
    ["eligible_for_caching"]=>
    bool(false)
    ["avg_run_time"]=>
    int(0)
    ["min_run_time"]=>
    int(0)
    ["max_run_time"]=>
    int(0)
    ["avg_store_time"]=>
    int(0)
    ["min_store_time"]=>
    int(0)
    ["max_store_time"]=>
    int(0)
  }
  [3]=>
  array(9) {
    ["query"]=>
    string(31) "SELECT id FROM test WHERE id =?"
    ["occurences"]=>
    int(2)
    ["eligible_for_caching"]=>
    bool(true)
    ["avg_run_time"]=>
    int(159)
    ["min_run_time"]=>
    int(12)
    ["max_run_time"]=>
    int(307)
    ["avg_store_time"]=>
    int(10)
    ["min_store_time"]=>
    int(8)
    ["max_store_time"]=>
    int(13)
  }
}
]]>
   </screen>
   
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     <link linkend="mysqlnd-qc.configuration">Configuración en tiempo de ejecución</link>
    </member>
    <member>
     <link linkend="ini.mysqlnd-qc.collect-query-trace">mysqlnd_qc.collect_normalized_query_trace</link>
    </member>
    <member>
     <link linkend="ini.mysqlnd-qc.time-statistics">mysqlnd_qc.time_statistics</link>
    </member>
    <member>
     <function>mysqlnd_qc_get_query_trace_log</function>
    </member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
