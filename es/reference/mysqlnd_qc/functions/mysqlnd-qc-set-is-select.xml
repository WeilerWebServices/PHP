<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325489 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.mysqlnd-qc-set-is-select" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>mysqlnd_qc_set_is_select</refname>
  <refpurpose>Instala una llamada de retorno que decide si una sentencia es almacenada en caché</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type>
   <methodname>mysqlnd_qc_set_is_select</methodname>
   <methodparam>
    <type>string</type>
    <parameter>callback</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Instala una llamada de retorno que decide si una sentencia es almacenada en caché.
  </para>
  <para>
   Hay varias maneras de indicarle a PELC/mysqlnd_qc que almacene en caché una consulta.
   Por omisión, PECL/mysqlnd_qc intenta almacenar en caché un a consulta si está habilitado el almacenamiento
   de todas las consultas o si la cadena de consulta comienza con una sugerencia SQL en particular.
   El complemento invoca internamente a una función llamada <literal>is_select()</literal>
   para averiguarlo. Esta función interna puede ser reemplazada con una llamada de retorno definida por el usuario.
   Entonces, dicha llamada de retorno definida por el usuario es responsable de decidir si el complemento
   intentará almacenar en caché una consulta. Debido a que la función interna es reemplazada por la llamada
   de retorno, ésta obtiene control total. La llamada de retorno es libre de ignorar
   el ajuste de configuración <literal>mysqlnd_qc.cache_by_default</literal>
   y las sugerencias SQL.
  </para>
  <para>
   La llamada de retorno se invoca para cada sentencia inspeccionada por el complemento.
   Se le proporciona la cadena de sentencia como parámetro. La llamada de retorno devuelve
   &false; si la sentencia no fuera almacenada en caché. Devuelve &true; para
   hacer que el complemento intente almacenar en caché el conjunto de resultados de la sentencia, si exite.
   A una entrada de la caché creada de tal manera se le da el TTL predeterminado establecido con la
   directiva de configuración de PHP <literal>mysqlnd_qc.ttl</literal>.
   Si se usara un TTL diferente, la llamada de retorno devuelve un valor
   numérico que se usará como TTL.
  </para>
  <para>
   La función interna <literal>is_select</literal> es parte de la interfaz interna
   del gestor de almacenamiento en caché. Por lo tanto, un gestor de almacenamiento definido
   por el usuario ofrece las mismas capacidades.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>mysqlnd_qc_set_is_select</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/* llamada de retorno que decide si una consulta es almacenada en caché */
function is_select($query) {
  static $patterns = array(
   /* true - usar lo predeterminado por mysqlnd_qc.ttl */
   "@SELECT\s+.*\s+FROM\s+test@ismU" => true,
   /* 3 - usar TTL = 3 segundos */
   "@SELECT\s+.*\s+FROM\s+news@ismU" => 3
  );
  /* comprobar si la consulta coincide con el patrón */
  foreach ($patterns as $pattern => $ttl) {
    if (preg_match($pattern, $query)) {
      printf("is_select(%45s): almacenada en caché\n", $query);
      return $ttl;
    }
  }
  printf("is_select(%45s): no almacenada en caché\n", $query);
  return false;
}
mysqlnd_qc_set_is_select("is_select");

/* Conectar, crear y rellenar la tabla test */
$mysqli = new mysqli("host", "usuario", "contraseña", "esquema");
$mysqli->query("DROP TABLE IF EXISTS test");
$mysqli->query("CREATE TABLE test(id INT)");
$mysqli->query("INSERT INTO test(id) VALUES (1), (2), (3)");

/* colocada en la caché */
$mysqli->query("SELECT id FROM test WHERE id = 1");
/* coincidencia con la caché */
$mysqli->query("SELECT id FROM test WHERE id = 1");
/* colocada en la caché */
$mysqli->query("SELECT * FROM test");
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
is_select(                    DROP TABLE IF EXISTS test): no almacenada en caché
is_select(                    CREATE TABLE test(id INT)): no almacenada en caché
is_select(    INSERT INTO test(id) VALUES (1), (2), (3)): no almacenada en caché
is_select(             SELECT id FROM test WHERE id = 1): almacenada en caché
is_select(             SELECT id FROM test WHERE id = 1): almacenada en caché
is_select(                           SELECT * FROM test): almacenada en caché
]]>
   </screen>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     <link linkend="mysqlnd-qc.configuration">Configuración en tiempo de ejecución</link>
    </member>
    <member>
     <link linkend="ini.mysqlnd-qc.ttl">mysqlnd_qc.ttl</link>
    </member>
    <member>
     <link linkend="ini.mysqlnd-qc.cache-by-default">mysqlnd_qc.cache_by_default</link>
    </member>
    <member>
     <function>mysqlnd_qc_set_user_handlers</function>
    </member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
