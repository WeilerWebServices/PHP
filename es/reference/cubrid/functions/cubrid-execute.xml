<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 344090 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<refentry xml:id="function.cubrid-execute" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_execute</refname>
  <refpurpose>Ejecutar una sentencia SQL preparada</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>cubrid_execute</methodname>
   <methodparam><type>resource</type><parameter>conn_identifier</parameter></methodparam>  
   <methodparam><type>string</type><parameter>sql</parameter></methodparam>  
   <methodparam choice="opt"><type>int</type><parameter>option</parameter><initializer>0</initializer></methodparam>  
  </methodsynopsis>
  <methodsynopsis>
   <type>bool</type><methodname>cubrid_execute</methodname>
   <methodparam><type>resource</type><parameter>request_identifier</parameter></methodparam>  
   <methodparam choice="opt"><type>int</type><parameter>option</parameter><initializer>0</initializer></methodparam>  
  </methodsynopsis>
  <para>
   La función <function>cubrid_execute</function> se usa para ejecutar la
   sentencia SQL dada. Ejecuta la consulta usando
   <parameter>conn_identifier</parameter> y SQL, y luego devuelve el
   gestor de solicitud creado. Se usa para la simple ejecución de la consulta,
   donde el parámetro de enlace no es necesario. Además, la 
   función <function>cubrid_execute</function> se usa para ejecutar la
   sentencia preparada por medio de <function>cubrid_prepare</function> y
   <function>cubrid_bind</function>. En este momento se necesitan especificar
   los argumentos <parameter>request_identifier</parameter> y
   <parameter>option</parameter>.
  </para>
  <para>
   El argumento <parameter>option</parameter> se usa para determinar si recibir el OID
   después de la ejecución de la consulta y si ejecutar la consulta en modo síncrono
   o asíncrono. Se pueden especificar CUBRID_INCLUDE_OID y CUBRID_ASYNC (o
   CUBRID_EXEC_QUERY_ALL si se desea ejecutar múltiples sentencias SQL) usando
   un operador OR a nivel de bit. Si no se especifica, ninguna de
   ellas será seleccionada. Si la bandera CUBRID_EXEC_QUERY_ALL está activa, el modo
   síncrono (sync_mode) se usa para devolver los resultados de la consulta, y en esos casos las
   siguientes reglas serán aplicadas:
  </para>
  <para>
   <simplelist>
    <member>El valor devuelto es el resultado de la primera petición.</member>
    <member>
     Si sucede un error en la consulta, la ejecución se procesa como un
     fallo.
    </member>
    <member>
     En una consulta compuesta por c1, c2, c3, si sucede
     un error en c2 después del éxito de la ejecución de c1, el resultado de c1 permanece
     válido. Esto es, los éxitos previos en las ejecucuiones de consultas no se repiten
     cuando sucede un error.
    </member>
    <member>
     Si una consulta se ejecuta de forma satisfactoria, el resultado de la segunda consulta puede
     obtenerse usando la función <function>cubrid_next_result</function>.
    </member>
   </simplelist>
  </para>
  <para>
   Si el primer argumento es <parameter>request_identifier</parameter> para
   ejecutar la función <function>cubrid_prepare</function>, se puede especificar
   una opción, solamente CUBRID_ASYNC.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>conn_identifier</parameter></term>
     <listitem><para>Identificador de conexión.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sql</parameter></term>
     <listitem><para>SQL a ser ejecutado.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>option</parameter></term>
     <listitem><para>La opción de ejecución de la consulta CUBRID_INCLUDE_OID, CUBRID_ASYNC, CUBRID_EXEC_QUERY_ALL.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>request_identifier</parameter></term>
     <listitem><para>Identificador de <function>cubrid_prepare</function>.</para></listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gestor de solicitud, cuando el proceso tiene éxito y el primer parámetro es
   conn_identifier; &true;, cuando el proceso tiene éxito y el primer argumento es
   request_identifier. 
  </para>
  <para>
   &false;, cuando el proceso no tiene éxito.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.4.0</entry>
       <entry>
        Añade CUBRID_EXEC_QUERY_ALL como opción nueva.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>cubrid_execute</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$conn = cubrid_connect("localhost", 33000, "demodb");

$result = cubrid_execute($conn, "SELECT code FROM event WHERE name='100m Butterfly' and gender='M'", CUBRID_ASYNC);
$row = cubrid_fetch_array($result, CUBRID_ASSOC);
$event_code = $row["code"];

cubrid_close_request($result);

$history_req = cubrid_prepare($conn, "SELECT * FROM history WHERE event_code=?");
cubrid_bind($history_req, 1, $event_code, "number");
cubrid_execute($history_req);

printf("%-20s %-9s %-10s %-5s\n", "athlete", "host_year", "score", "unit");
while ($row = cubrid_fetch_array($history_req, CUBRID_ASSOC)) {
    printf("%-20s %-9s %-10s %-5s\n", 
        $row["athlete"], $row["host_year"], $row["score"], $row["unit"]);
}

cubrid_close_request($history_req);

cubrid_disconnect($conn);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
athlete              host_year score      unit 
Phelps Michael       2004      51.25      time 
]]>
   </screen>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_prepare</function></member>
    <member><function>cubrid_bind</function></member>
    <member><function>cubrid_next_result</function></member>
    <member><function>cubrid_close_request</function></member>
    <member><function>cubrid_commit</function></member>
    <member><function>cubrid_rollback</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
