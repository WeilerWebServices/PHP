<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343899 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<refentry xml:id="function.cubrid-connect-with-url" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_connect_with_url</refname>
  <refpurpose>Establecer el entorno para la conexión al servidor de CUBRID</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>cubrid_connect_with_url</methodname>
   <methodparam><type>string</type><parameter>conn_url</parameter></methodparam>  
   <methodparam choice="opt"><type>string</type><parameter>userid</parameter></methodparam>  
   <methodparam choice="opt"><type>string</type><parameter>passwd</parameter></methodparam>  
   <methodparam choice="opt"><type>bool</type><parameter>new_link</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   La función <function>cubrid_connect_with_url</function> se usa para
   establecer el entorno de conexión a su servidor usando la información
   de conexión pasada con un argumento de cadena de url. Si la característica HA está
   habilitada en CUBRID, se debe especificar la información de conexión del
   servidor de emergencia, el cual se usa para la recuperación de fallos cuando sucede uno, en
   el argumento de cadena de url de esta función. Si el nombre de usuario y la contraseña no se
   dan se realizará la conexión "PUBLIC" por omisión.
  </para>
  <para>
   &lt;url&gt; ::= CUBRID:&lt;host&gt;:&lt;db_name&gt;:&lt;db_user&gt;:&lt;db_password&gt;:[?&lt;properties&gt;]
  </para>
  <para>
   &lt;properties&gt; ::= &lt;property&gt; [&amp;&lt;property&gt;]
  </para>
  <para>
   &lt;properties&gt; ::= alhosts=&lt;alternative_hosts&gt;[ &amp;rctime=&lt;time&gt;]
  </para>
  <para>
   &lt;properties&gt; ::= login_timeout=&lt;milli_sec&gt;
  </para>
  <para>
   &lt;properties&gt; ::= query_timeout=&lt;milli_sec&gt;
  </para>
  <para>
   &lt;properties&gt; ::= disconnect_on_query_timeout=true|false
  </para>
  <para>
   &lt;alternative_hosts&gt; ::= &lt;standby_broker1_host&gt;:&lt;port&gt; [,&lt;standby_broker2_host&gt;:&lt;port&gt;]
  </para>
  <para>
   &lt;host&gt; := HOSTNAME | IP_ADDR
  </para>
  <para>
   &lt;time&gt; := SECOND
  </para>
  <para>
   &lt;milli_sec&gt; := MILLI SECOND
  </para>
  <para>
   <simplelist>
    <member>host : Un nombre de host o dirección IP de la base de datos maestra</member>
    <member>db_name : Un nombre de la base de datos</member>
    <member>db_user : Un nombre del usuario de la base de datos</member>
    <member>db_password : Una contraseña de usuario de la base de datos</member>
    <member>
     alhosts: Especifica la información del agente del servidor de emergencia, el cual se
     usa para la recuperación de fallos cuando es imposible conectar al servidor activo.
     Se pueden especificar múltiples agentes para la recuperación de fallos, y la conexión a los agentes
     se intenta en el orden listado en alhosts
    </member>
    <member>rctime : Un intervalo entre los intentos de conexión al agente activo en
     el que ocurrió el fallo. Después de que ocurra un fallo, el sistema se conecta al
     agente especificado por althosts (recuperación de fallos), finaliza la transacción, y después
     intenta conectarse al agente activo de la base de datos maestra cada rctime.
     El valor predeterminado es 600 segundos.
    </member>
    <member>
     login_timeout : Valor de tiempo de espera (unidad: mseg.) para la identificación en la base de datos. El valor
     predeterminado es 0, lo que significa un aplazamiento infinito.
    </member>
    <member>
     query_timeout : Valor de tiempo de espera (unidad: mseg.) para la solicitud de consulta. Cuando finaliza
     el tiempo de espera, se envía al servidor un mensaje para cancelar la transferencia de la consulta. El valor
     devuelto puede depender de de la configuración de disconnect_on_query_timeout; incluso si el
     mensaje para cancelar una petición es enviado al servidor, tal peticioón puede realizarse.
    </member>
    <member>
     disconnect_on_query_timeout : Configura un valor para establecer si devolver inmediantamente
     un error de función que está siendo ejecutada al finalizar el tiempo de espera. El valor predeterminado es false.
    </member>
   </simplelist>
  </para>
  <note>
   <para>
    <literal>?</literal> y <literal>:</literal>, que son usados como identificadores
    en el URL de conexión de PHP, no pueden ser incluidos en la contraseña. El siguiente es
    un ejemplo de una contraseña que no es válida para usarla como URL de conexión ya que contiene
    "<literal>?:</literal>".
   </para>
   <para>
    $url = "CUBRID:localhost:33000:tdb:dba:12?:?login_timeout=100";
   </para>
   <para>
    Las contraseñas que contengan <literal>?</literal> o <literal>:</literal>
    se pueden pasar como un parámetro aparte.
   </para>
   <para>
    $url = "CUBRID:localhost:33000:tbd:::?login_timeout=100";
   </para>
   <para>
    $conn = cubrid_connect_with_url($url, "dba", "12?");
   </para>
   <para>
    Si el usuario o la contraseña están vacíos no se podrá borrar "<literal>:</literal>". He aquí un
    ejemplo:
   </para>
   <para>
    $url = "CUBRID:localhost:33000:demodb:::";
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>conn_url</parameter></term>
     <listitem><para>Una cadena de caracteres que contiene la información de conexión al servidor.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>userid</parameter></term>
     <listitem><para>El nombre de usuario de la base de datos.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>passwd</parameter></term>
     <listitem><para>La contraseña del usuario.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>new_link</parameter></term>
     <listitem><para>Si se hace una segunda llamada a
      <function>cubrid_connect_with_url</function> con los mismos argumentos,
      no se establecerá una nueva conexión, en su lugar, se devolverá el identificador
      de conexión de la conexión ya abierta. El
      parámetro <parameter>new_link</parameter> modifica este comportamiento y
      hace que <function>cubrid_connect_with_url</function> abra siempre una nueva
      conexión, incluso si <function>cubrid_connect_with_url</function> fue
      llamada antes con los mismos parámetros.</para></listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El identificador de conexión, cuando el proceso tiene éxito.
  </para>
  <para>
   &false;, cuando el proceso no tiene éxito.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>cubrid_connect_with_url</function>, url sin propiedades</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn_url = "CUBRID:localhost:33000:demodb:dba::";
$con = cubrid_connect_with_url($conn_url);

if ($con) {
   echo "Se conectó con éxito";
   cubrid_execute($con, "create table person(id int,name char(16))");
   $req =cubrid_execute($con, "insert into person values(1,'James')");

   if ($req) {
      cubrid_close_request($req);
      cubrid_commit($con);
   } else {
      cubrid_rollback($con);
   }
   cubrid_disconnect($con);
}
?>
]]>
   </programlisting>
  </example>
  
  <example>
   <title>Ejemplo de <function>cubrid_connect_with_url</function>, url con propiedades</title>
   <programlisting role="php">
<![CDATA[
<?php
$conn_url = "CUBRID:127.0.0.1:33000:demodb:dba::?login_timeout=100"
$con = cubrid_connect_with_url ($conn_url);

if ($con) {
   echo "Se conectó con éxito";
   cubrid_execute($con, "create table person(id int,name char(16))");
   $req =cubrid_execute($con, "insert into person values(1,'James')");

   if ($req) {
      cubrid_close_request($req);
      cubrid_commit($con);
   } else {
      cubrid_rollback($con);
   }
   cubrid_disconnect($con);
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_connect</function></member>
    <member><function>cubrid_pconnect</function></member>
    <member><function>cubrid_pconnect_with_url</function></member>
    <member><function>cubrid_disconnect</function></member>
    <member><function>cubrid_close</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
