<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338913 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="mysqlinfo.concepts" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Conceptos</title>
 <para>
  Estos conceptos son específicos para los controladores de MYSQL para PHP.
 </para>
 
 <section xml:id="mysqlinfo.concepts.buffering">
  <title>Consultas almacenadas y no almacenadas en buffer</title>
  
  <para>
   Las consultas usan el modo de almacenamiento en buffer por omisión. Esto significa que los resultados de
   las consultas son transferidos inmediatamente del Servidor MySQL a PHP donde luego se mantienen en la memoria
   del proceso de PHP. Esto permite operaciones adicionales como la cuenta del
   número de filas y mover (buscar) el puntero actual del resultado. También permite
   emitir más consultas en la misma conexión mientras se trabaja con el conjunto de resultados.
   El lado negativo del modo de almacenamiento en buffer es que los conjuntos de resultados grandes requieren
   bastante más memoria. La memoria se mantendrá ocupada hasta que todas las referencias al
   conjunto de resultados sean desestablecidas o se libere explícitamente el conjunto de resultados, lo que
   automáticamente ocurrirá durante la finalización de la última petición. La terminología "resultado almacenado" también se usa
   para el modo de almacenamiento en buffer, ya que el conjunto de resultados completo se almacena de una vez.
  </para>
  
  <note>
   <para>
    Cuando se usa libmysqlclient como biblioteca, el límite de memoria de PHP no contará la memoria usada
    por los conjuntos de resultados a menos que los datos sean puestos en variables de PHP. Con mysqlnd,
    la memoria tenida en cuenta incluirá el conjunto de resultados completo.
   </para>
  </note>
  
  <para>
   Las consultas de MySQL no almacenadas en buffer ejecutan la consulta y luego devuelven un <type>resource</type>
   mientras los datos aún siguen esperado en el servidor MySQL a que sean extraidos. Esto utiliza menos memoria
   por parte de PHP, pero puede incrementar la carga del servidor. A menos que se obtenga el conjunto de resultados
   completo del servidor no se podrán enviar más consultas en la misma conexión. Las consultas no almacenada
   en buffer también pueden ser descritas como "resultados de uso".
  </para>
  
  <para>
   Siguiendo estas características, las consultas almacenadas en buffer deberían usarse en casos donde se espera
   solamente un conjunto de resultados limitado o se necesite conocer la cantidad de filas devueltas antes de leer
   todas las filas. El modo de no almacenamiento en buffer debería usarse cuando se esperesn resultados grandes.
  </para>
  
  <!-- @TODO
    - Add list of issues people run into with unbuffered queries
    - Add list of specific use cases for when unbuffered queries are useful
    - Question: Unbuffered queries still require all rows to be returned or resource free before executing another? Applies to all extensions?
    - Show "free_result" functions / unset usage with buffered queries 8double-check with Andrey on mysqlnd optimizations
   -->
  
  <para>
   Ya que las consultas almacenadas en buffer son las predeterminadas, los ejemplos de abajo demuestran cómo
   ejecutar consultas no almacenadas en buffer con cada API.
  </para>
  
  <example>
   <title>Ejemplo de consulta no almacenada en buffer: mysqli</title>
   <programlisting role="php">
<![CDATA[
<?php
$mysqli  = new mysqli("localhost", "mi_usuario", "mi_contraseña", "world");
$res_sin_buffer = $mysqli->query("SELECT Name FROM City", MYSQLI_USE_RESULT);

if ($res_sin_buffer) {
   while ($fila = $res_sin_buffer->fetch_assoc()) {
       echo $fila['Name'] . PHP_EOL;
   }
}
$res_sin_buffer->close();
?>
]]>
   </programlisting>
  </example>
  
  <example>
   <title>Ejemplo de consulta no almacenada en buffer: pdo_mysql</title>
   <programlisting role="php">
<![CDATA[
<?php
$pdo = new PDO("mysql:host=localhost;dbname=world", 'mi_usuario', 'mi_contraseña');
$pdo->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, false);

$res_sin_buffer = $pdo->query("SELECT Name FROM City");
if ($res_sin_buffer) {
   while ($fila = $res_sin_buffer->fetch(PDO::FETCH_ASSOC)) {
       echo $fila['Name'] . PHP_EOL;
   }
}
?>
]]>
   </programlisting>
  </example>
  
  <example>
   <title>Ejemplo de consulta no almacenada en buffer: mysql</title>
   <programlisting role="php">
<![CDATA[
<?php
$conexión = mysql_connect("localhost", "mi_usuario", "mi_contraseña");
$bd = mysql_select_db("world");

$res_sin_buffer = mysql_unbuffered_query("SELECT Name FROM City");
if ($res_sin_buffer) {
   while ($fila = mysql_fetch_assoc($res_sin_buffer)) {
       echo $fila['Name'] . PHP_EOL;
   }
}
?>
]]>
   </programlisting>
  </example>
 </section>
 
 <section xml:id="mysqlinfo.concepts.charset">
  <title>Conjuntos de caracteres</title>
  
  <para>
   De forma ideal, un conjunto de caracteres apropiado será establecido a nivel del servidor, que está descrito
   dentro de la sección <link xlink:href="&url.mysql.charsets.config;">Configuración del conjunto de caracteres</link>
   del manual del Servidor MySQL. De forma alternativa, cada API de MySQL ofrece métodos para establecer
   el conjunto de caracteres en tiempo de ejecución.
  </para>
  
  <caution>
   <title>El conjunto de caracteres y el escape de caracteres</title>
   <para>
    El conjunto de caracteres debería entenderse y ser definido, ya que afecta a cada
    acción, e incluye implicaciones de seguridad. Por ejemplo, el mecanismo de escape
    (p.ej., <function>mysqli_real_escape_string</function> para mysqli, <function>mysql_real_escape_string</function>
    para mysql, y <methodname>PDO::quote</methodname> para PDO_MySQL) cumplirá con
    esta configuración. Es importante darse cuenta que estas funciones no usarán el conjunto de
    caracteres que está definido en una consulta, por lo que, por ejemplo, lo siguiente no tendrá efecto
    sobre ellas:
   </para>
  </caution>
  
  <example>
   <title>Problemas al establecer el conjunto de caracteres con SQL</title>
   <programlisting role="php">
<![CDATA[
<?php

$mysqli = new mysqli("localhost", "mi_usuario", "mi_contraseña", "world");

// NO afectará a $mysqli->real_escape_string();
$mysqli->query("SET NAMES utf8");

// NO afectará a $mysqli->real_escape_string();
$mysqli->query("SET CHARACTER SET utf8");

// Pero esto sí afectará a $mysqli->real_escape_string();
$mysqli->set_charset('utf8'));

// Y esto NO le afectará (utf-8 frente a utf8) -- no emplee guiones aquí
$mysqli->set_charset('utf-8');
?>
]]>
   </programlisting>
  </example>
  
  <para>
   Abajo hay ejemplos que demuestran cómo alterar adecuadamente el conjunto de caracteres en tiempo de ejecución
   usando cada API.
  </para>
  
  <note>
   <title>Posible confusión con UTF-8</title>
   <para>
    Debido a que los nombres de los conjuntos de caracteres no contienen guiones, la cadena
    "utf8" es válida en MySQL para establecer el conjunto de caracteres a UTF-8. La cadena
    "utf-8" no es válida para cambiar el
    conjunto de caracteres.
   </para>
  </note>
  
  <example>
   <title>Ejemplo para establecer el conjunto de caracteres: mysqli</title>
   <programlisting role="php">
<![CDATA[
<?php
$mysqli = new mysqli("localhost", "mi_usuario", "mi_contraseña", "world");

printf("Conjunto de caracteres inicial: %s\n", $mysqli->character_set_name());

if (!$mysqli->set_charset('utf8')) {
    printf("Error cargando el conjunto de caracteres utf8: %s\n", $mysqli->error);
    exit;
}

echo "Información del nuevo conjunto de caracteres:\n";
print_r( $mysqli->get_charset() );

?>
]]>
   </programlisting>
  </example>
  
  <example>
   <title>Ejemplo para establecer el conjunto de caracteres: <link linkend="ref.pdo-mysql.connection">pdo_mysql</link></title>
   <para>
    Nota: Sólo funciona a partir de PHP 5.3.6.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$pdo = new PDO("mysql:host=localhost;dbname=world;charset=utf8", 'mi_usuario', 'mi_contraseña');
?>
]]>
   </programlisting>
  </example>
  
  <example>
   <title>Ejemplo para establecer el conjunto de caracteres: mysql</title>
   <programlisting role="php">
<![CDATA[
<?php
$conexión = mysql_connect("localhost", "mi_usuario", "mi_contraseña");
$bd   = mysql_select_db("world");

echo 'Conuunto de caracteres inicial: ' .  mysql_client_encoding($conexión) . "\n";

if (!mysql_set_charset('utf8', $conexión)) {
    echo "Error: No se pudo establecer el conjunto de caracteres.\n";
    exit;
}

echo 'El conjunto de caracteres actual es: ' .  mysql_client_encoding($conexión);
?>
]]>
   </programlisting>
  </example>  
 </section>
 
</chapter>
