<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343888 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<refentry xml:id="sdo-das-relational.executepreparedquery" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SDO_DAS_Relational::executePreparedQuery</refname>
  <refpurpose>
   Ejecuta una consulta SQL pasada como una sentencia preparada, con una
   lista de valores para sustituir los parámetros de sustitución, y devuelve los
   resultados como un grafo de datos normalizado
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>SDODataObject</type>
   <methodname>SDO_DAS_Relational::executePreparedQuery</methodname>
   <methodparam>
    <type>PDO</type>
    <parameter>database_handle</parameter>
   </methodparam>
   <methodparam>
    <type>PDOStatement</type>
    <parameter>prepared_statement</parameter>
   </methodparam>
   <methodparam>
    <type>array</type>
    <parameter>value_list</parameter>
   </methodparam>
   <methodparam choice="opt">
    <type>array</type>
    <parameter>column_specifier</parameter>
   </methodparam>
  </methodsynopsis>

  &warn.experimental.func;

  <para>
   Ejecuta una consulta dada en una base de datos relacional,
   usando el gestor de bases de datos proporcionado.
   Difiere del método más simle
   <function>executeQuery</function>
   en que toma una sentencia preparada y una lista de valores.
   Esta es la llamada apropiada a usar cuando la sentencia se
   ejecuta varias veces con diferentes argumentos, y por lo tanto
   existe un beneficio de rendimiento a tener en cuenta de preparar la
   sentencia sólo una vez, o cuando la sentencia SQL contiene
   varios valores tomados de un origen que en el que no se puede confiar completamente.
   En este último caso puede no ser seguro construir la sentencia SQL
   simplemente concatenando las partes de la sentencia,
   ya que los valores pueden contener piezas de SQL. 
   Para evitar esto, el llamado ataque de inyección SQL,
   es más seguro preparar la sentencia SQL con parámetros de sustitución
   (también conocidos como marcadores de parámetros, denotados por '?') y proporcionar una
   lista de valores a ser sustituidos como un argumento aparte.
   En principio, esta función es la misma que
   <function>executeQuery</function> en el hecho que
   usa el modelo construye desde los metadatos
   para interpretar el conjunto de resultados y devolver un grafo de datos.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>PDO_database_handle</term>
     <listitem>
      <para>
       Construido usando la extensión PDO.
       Una típica línea para construir un gestor de bases de datos PDO podría parecerse
       a esta:
       <programlisting role="php" xml:id="sdodasrel.epq.examples.pdo">
<![CDATA[
$dbh = new PDO("mysql:dbname=COMPANYDB;host=localhost",DATABASE_USER,DATABASE_PASSWORD);
]]>
       </programlisting>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>prepared_statement</term>
     <listitem>
      <para>
       Una sentencia SQL preparada para ser ejecutada en la base de datos.
       Habrá sido preparada por el método
       <function>prepare</function>
       de PDO.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>value_list</term>
     <listitem>
      <para>
       Un array con los valores a ser sustituidos en la
       sentencia SQL en lugar de los parámetros de sustitución. En el caso
       de que no existan parámetros de sustitución o marcadores de parámetros en la
       sentencia SQL, este argumento se puede especificar como &null;
       o como un array vacío. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>column_specifier</term>
     <listitem>
      <para>
       El DAS Relacional necesita examinar el conjunto de resultados y,
       para cada columna, conocer de qué tabla y de qué columna de
       esa tabla proviene.
       En algunas circunstancias puede encontrar esta información por sí mismo,
       pero otras veces no puede.
       En estos casos se necesita un especificador de columna,
       el cual es un array que identifica las columnas.
       Cada entrada del array es siplemente una cadena de la forma
       <varname>nombre-tabla.nombre_columna</varname>.
      </para>
          

      <para>
       El especificador de columna es necesario cuando existen nombres de
       comlumnas duplicadas en los metadatos de la base de datos,
       Por ejemplo, en la base de datos usada en los ejemplos,
       todas las tablas tienen una columna
       <varname>id</varname>
       y una columna
       <varname>nombre</varname>.
       Cuando el DAS Relacional obtiene el conjunto de resultados desde PDO,
       puede realizar esto con el atributo PDO_FETCH_ASSOC, 
       el cual causará que las columnas del conjunto de resultados
       sean etiquetadas con el nombre de columna, pero no distinguirá
       duplicados.
       Así que esto solamente funcionará cuando no existan dupicados
       posibles en el conjunto de resultados.
      </para>
          
      <para>
       En resumen, se ha de especificar un array de especificadores de columnas siempre que
       exista cualquier duda sobre qué columna podría pertenecer qué tabla y
       solamente omitirlo cuando cada nombre de columna de los metadatos de la base de datos sea único.
      </para>
          
      <para>
       Todos los ejemplos de la sección
       <link linkend="sdodasrel.examples">Ejemplos</link>
       utilizan un especificador de columna.
       Hay un ejemplo en el directorio
       <filename>Scenarios</filename>
       de la instalación que no lo usa:
       aquel que trabaja con la tabla empleados solamente,
       y ya que trabaja con una sola table,
       no pueden existir nombre de columnas duplicados.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un grafor de datos.
   Específicamente, devuelve un objeto raíz de un tipo especial.
   Bajo esta raíz estarán los datos del conjunto de resultados.
   El objeto raíz tendrá una propiedad de contención polievaluada
   con el mismo nombre que el tipo raíz de la aplicación
   especificado en el constructor,
   y esa propiedad contendrá uno o más objetos de datos
   del tipo raíz de la aplicación.
  </para>
  <para>
   En el caso en que la consulta no devuelve datos,
   aún se devolverá el objeto raíz de la aplicación, pero
   la propiedad de contención para el tipo raíz de la aplicación estará vacía.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   <function>SDO_DAS_Relational::executePreparedQuery</function>
   puede lanzar una <classname>SDO_DAS_Relational_Exception</classname> si no puede
   construir el grafo de datos correctamente.
   Esto puede suceder por varias razones:
   por ejemplo, si encuentra que el no tiene claves primarias
   en el conjunto de resultados para todos los objetos.
   También captura cualquer excepción de PDO y obtiene información de
   deiagnóstico de PDO, que incluye una
   <classname>SDO_DAS_Relational_Exception</classname> que lanza después.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Recuperar un objeto de datos usando
    <function>executePreparedQuery</function></title>
    <para>
     En este ejemplo se recupera un único objeto de datos desde la base de datos
     - o posiblemente más de uno si existe una compañía
     llamada 'Acme'. Se utiliza echo con las propiedades
     <varname>nombre</varname>
     e
     <varname>id</varname>
     por cada compañía devuelta.
    </para>
    <para>
     Se pueden encontrar otros ejemplo del uso de
     <function>executePreparedQuery</function>
     en el código de ejemplo proporcionado nen
     <filename>sdo/DAS/Relational/Scenarios</filename>.
    </para>
    <programlisting role="php" xml:id="sdodasrel.functions.epq.1c-r">
<![CDATA[
<?php
require_once 'SDO/DAS/Relational.php';
require_once 'company_metadata.inc.php';

/**************************************************************
 * Construir el DAS con los metadatos
 ***************************************************************/
$das = new SDO_DAS_Relational ($metadatos_bd,'compañía',$metadatos_referencia_SDO);

/**************************************************************
 * Obtener una conexión a la base de datos
 ***************************************************************/
$gbd = new PDO(PDO_DSN,DATABASE_USER,DATABASE_PASSWORD);

/**************************************************************
 * Emitir una consulta para obtener un objeto compañía - posiblemente más si existen
 * Usar una consulta preparada con un parámetro de sustitución.
 ***************************************************************/
$nombre = 'Acme';
$sentencia_pdo = $gbd->prepare('select nombre, id from compañía where nombre=?');
$root = $das->executePreparedQuery(
    $gbd, 
    $sentencia_pdo,
    array($nombre), 
    array('compañía.nombre', 'compañía.id'));

/**************************************************************
 * Usar echo con el nombre y el id
 ***************************************************************/
foreach ($root['compañía'] as $compañía) {
    echo "La compañía obtenida de la base de datos tiene como nombre = " . 
    $compañía['nombre'] . " e id " . $compañía['id'] . "\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
