<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: bng5 Status: ready -->
<refentry xml:id="function.inotify-init" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>inotify_init</refname>
  <refpurpose>Inicializa una instancia inotify</refpurpose>
 </refnamediv>
 
 <refsect1 role="description"><!-- {{{ -->
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>inotify_init</methodname>
   <void />
  </methodsynopsis>
  <para>
   Inicializar una instancia inotify para usar con
   <function>inotify_add_watch</function>
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   Un recurso de secuencia o &false; en caso de error.
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="examples"><!-- {{{ -->
  &reftitle.examples;
  <para>
   <example xml:id="inotify-init.example.basic"><!-- {{{ -->
    <title>Ejemplo de uso de inotify</title>
    <programlisting role="php">
<![CDATA[
<?php
// Abrir una instancia inotify
$fd = inotify_init();

// Observar __FILE__ por cambios en los metadatos (por ejemplo: mtime)
$watch_descriptor = inotify_add_watch($fd, __FILE__, IN_ATTRIB);

// genera un evento
touch(__FILE__);

// Leer eventos
$eventos = inotify_read($fd);
print_r($eventos);

// Los siguientes métodos permiten utilizar funciones inotify sin bloqueo en inotify_read():

// - Usando stream_select() en $fd:
$read = array($fd);
$write = null;
$except = null;
stream_select($read,$write,$except,0);

// - Usando stream_set_blocking() en $fd
stream_set_blocking($fd, 0);
inotify_read($fd); // No hace ningún bloqueo, y devuelve false si no hay eventos pendientes

// - Usando inotify_queue_len() para comprobar si la lista de eventos no está vacía
$queue_len = inotify_queue_len($fd); // Si > 0, inotify_read() no bloqueará

// Dejar de observar __FILE__ por cambios en los metadatos
inotify_rm_watch($fd, $watch_descriptor);

// Cierra la instancia inotify
// This may have closed all watches if this was not already done
// Esto puede haber cerrado todos los seguimientos, si no se hizo ya
fclose($fd);

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(
  array(
    'wd' => 1,     // Equivale a $ watch_descriptor
    'mask' => 4,   // bit IN_ATTRIB establecido
    'cookie' => 0, // id único para conectar los eventos relacionados (por ejemplo:
                   // eventos IN_MOVE_FROM IN_MOVE_TO)
    'name' => '',  // el nombre de un fichero (por ejemplo: si se monitorean los
                   // cambios en un directorio)
  ),
);
]]>
    </screen>
   </example><!-- }}} -->
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="seealso"><!-- {{{ -->
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>inotify_add_watch</function></member>
    <member><function>inotify_rm_watch</function></member>
    <member><function>inotify_queue_len</function></member>
    <member><function>inotify_read</function></member>
    <member><function>fclose</function></member>
   </simplelist>
  </para>
 </refsect1><!-- }}} -->

</refentry>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

