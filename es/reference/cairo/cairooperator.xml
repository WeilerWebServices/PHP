<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 321707 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.cairooperator" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>La clase CairoOperator</title>
 <titleabbrev>CairoOperator</titleabbrev>
 
 <partintro>
  
  <!-- {{{ CairoOperator intro -->
  <section xml:id="cairooperator.intro">
   &reftitle.intro;
   <para>
    Se usa para establecer el operador de composición para todas las operaciones de dibujo de cairo.
   </para>
   <para>
    El operador por defecto es <constant>CairoOperator::OVER</constant>
   </para>
   <para>
    Los operadores marcados como ilimitados modifican sus destinos incluso fuera de la capa de máscara (es decir,
    sus efectos no están limitados por la capa de máscara). Sin embargo, sus efectos pueden aún estar limitados por la manera de recortar.
   </para>
   <para>
    Para poner las cosas fáciles, las descripciones de los operadores documentan el comportamiento para cuando el origen y el destino
    son totalmente transparentes u opacos. La implementación actual también funciona para capas translúcidas.
    Para una explicación más detallada de los efectos de cada operador, incluídas las definiciones matemáticas,
    véase http://cairographics.org/operators/.
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="cairooperator.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>CairoOperator</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>CairoOperator</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.clear">CairoOperator::CLEAR</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.source">CairoOperator::SOURCE</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.over">CairoOperator::OVER</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.in">CairoOperator::IN</varname>
     <initializer>3</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.out">CairoOperator::OUT</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.atop">CairoOperator::ATOP</varname>
     <initializer>5</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.dest">CairoOperator::DEST</varname>
     <initializer>6</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.dest-over">CairoOperator::DEST_OVER</varname>
     <initializer>7</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.dest-in">CairoOperator::DEST_IN</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.dest-out">CairoOperator::DEST_OUT</varname>
     <initializer>9</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.dest-atop">CairoOperator::DEST_ATOP</varname>
     <initializer>10</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.xor">CairoOperator::XOR</varname>
     <initializer>11</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.add">CairoOperator::ADD</varname>
     <initializer>12</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="cairooperator.constants.saturate">CairoOperator::SATURATE</varname>
     <initializer>13</initializer>
    </fieldsynopsis>
    
   </classsynopsis>
   <!-- }}} -->
   
  </section>
  
  <!-- {{{ CairoOperator constants -->
  <section xml:id="cairooperator.constants">
   &reftitle.constants;
   <variablelist>
    
    <varlistentry xml:id="cairooperator.constants.clear">
     <term><constant>CairoOperator::CLEAR</constant></term>
     <listitem>
      <para>Limpia la capa destino (limitado)</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.source">
     <term><constant>CairoOperator::SOURCE</constant></term>
     <listitem>
      <para>Reemplaza la capa destino (limitado) </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.over">
     <term><constant>CairoOperator::OVER</constant></term>
     <listitem>
      <para>Dibuja la capa origen sobre la capa destino (limitado) </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.in">
     <term><constant>CairoOperator::IN</constant></term>
     <listitem>
      <para>Dibuja el origen donde hubo contenido destino (ilimitado) </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.out">
     <term><constant>CairoOperator::OUT</constant></term>
     <listitem>
      <para>Dibuja el origen donde no hubo contenido destino (ilimitado) </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.atop">
     <term><constant>CairoOperator::ATOP</constant></term>
     <listitem>
      <para>Dibuja el origen sobre el contenido destino y sólo allí </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.dest">
     <term><constant>CairoOperator::DEST</constant></term>
     <listitem>
      <para>Ignora el origen </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.dest-over">
     <term><constant>CairoOperator::DEST_OVER</constant></term>
     <listitem>
      <para>Dibuja el destino sobre el origen </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.dest-in">
     <term><constant>CairoOperator::DEST_IN</constant></term>
     <listitem>
      <para>Deja el destino sólo donde hubo contenido origen (ilimitado) </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.dest-out">
     <term><constant>CairoOperator::DEST_OUT</constant></term>
     <listitem>
      <para>Deja el destino sólo donde no hubo contenido origen </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.dest-atop">
     <term><constant>CairoOperator::DEST_ATOP</constant></term>
     <listitem>
      <para>Deja el destino sobre el contenido origen y sólo allí (ilimitado) </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.xor">
     <term><constant>CairoOperator::XOR</constant></term>
     <listitem>
      <para>Origen y destino se muestran donde sólo hay uno de ellos </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.add">
     <term><constant>CairoOperator::ADD</constant></term>
     <listitem>
      <para>Las capas origen y destino están acumuladas </para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="cairooperator.constants.saturate">
     <term><constant>CairoOperator::SATURATE</constant></term>
     <listitem>
      <para>Como <constant>CairoOperator::OVER</constant>, excepto que se asume que el origen y el destino son geométricos separados </para>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </section>
  <!-- }}} -->
  
  
 </partintro>
 
 
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
