<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: seros Status: ready -->
<refentry xml:id="function.stream-socket-server" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_socket_server</refname>
  <refpurpose>Crear un socket de servidor de dominio de Internet o de Unix</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>stream_socket_server</methodname>
   <methodparam><type>string</type><parameter>local_socket</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">errno</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">errstr</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>STREAM_SERVER_BIND | STREAM_SERVER_LISTEN</initializer></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>context</parameter></methodparam>
  </methodsynopsis>
  <para>
   Crea un socket de flujo o de datagrama en
   <parameter>local_socket</parameter>.    
  </para>
  <para>
   Esta función sólo crea un socket, para empezar a aceptar conexiones
   use <function>stream_socket_accept</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>local_socket</parameter></term>
     <listitem>
      <para>
       El tipo de socket creado se determina por el transporte
       especificado usando el formato de URL estándar: <literal>transporte://objetivo</literal>.
      </para>
      <para>
       Para sockets de Dominio de Internet (<constant>AF_INET</constant>) como TCP y UDP,
       la porción del <literal>objetivo</literal> del parámetro
       <parameter>remote_socket</parameter> debería consistir en
       un nombre de host o dirección IP seguida de dos puntos y un número de puerto. Para sockets
       de dominio de Unix, la porción del <literal>objetivo</literal> apuntará
       al archivo de socket del sistema de archivos.
      </para>
      <para>
       Dependiendo del entorno, los sockets de dominio Unix pueden no estar disponibles.
       Una lista de transportes disponibles se puede recuperar unsado
       <function>stream_get_transports</function>. Véase
       <xref linkend="transports"/> para una lista de transportes incluidos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>errno</parameter></term>
     <listitem>
      <para>
       Si los argumentos opcionales <parameter>errno</parameter> y <parameter>errstr</parameter>
       están presentes, serán establecidos para indicar el error a nivel de sistema
       ocurrido en las llamadas a nivel de sistema de <literal>socket()</literal>,
       <literal>bind()</literal>, y <literal>listen()</literal>. Si
       el valor devuelto en <parameter>errno</parameter> es
       <literal>0</literal> y la función devuelve &false;, es una indicación
       de que el error ocurrió antes de la llamada a <literal>bind()</literal>.
       Esto es lo más probable debido a un problema de inicialización del socket.
       Observe que los argumentos <parameter>errno</parameter> y
       <parameter>errstr</parameter> siempre serán pasados por referencia.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>errstr</parameter></term>
     <listitem>
      <para>
       Véase la descripción de <parameter>errno</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Campo de máscara de bits que puede ser establecido a cualquier combinación de banderas de
       conexión.
      </para>
      <note>
       <para>
        Para sockets UDP, se debe usar <constant>STREAM_SERVER_BIND</constant> como
        parámetro <parameter>flags</parameter>.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un flujo creado, o &false; si se produjo un error.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Usar sockets de servidor de TCP</title>
    <programlisting role="php">
<![CDATA[
<?php
$socket = stream_socket_server("tcp://0.0.0.0:8000", $errno, $errstr);
if (!$socket) {
  echo "$errstr ($errno)<br />\n";
} else {
  while ($conn = stream_socket_accept($socket)) {
    fwrite($conn, 'La fecha y hora actuales es ' . date('n/j/Y g:i a') . "\n");
    fclose($conn);
  }
  fclose($socket);
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   El ejemplo de abajo muestra cómo actuar como un servidor de hora que responde
   a peticiones de hora como se muestra en un ejemplo de <function>stream_socket_client</function>.
   <note>
    <simpara>
     La mayoría de los sistemas requieren acceso root para crear un socket de servidor sobre un
     puerto inferor a 1024.
    </simpara>
   </note>
   <example>
    <title>Usar sockets de servidor de UDP</title>
    <programlisting role="php">
<![CDATA[
<?php
$socket = stream_socket_server("udp://127.0.0.1:1113", $errno, $errstr, STREAM_SERVER_BIND);
if (!$socket) {
    die("$errstr ($errno)");
}

do {
    $pkt = stream_socket_recvfrom($socket, 1, 0, $peer);
    echo "$peer\n";
    stream_socket_sendto($socket, date("D M j H:i:s Y\r\n"), 0, $peer);
} while ($pkt !== false);

?>

]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &ipv6.brackets;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>stream_socket_client</function></member>
   <member><function>stream_set_blocking</function></member>
   <member><function>stream_set_timeout</function></member>
   <member><function>fgets</function></member>
   <member><function>fgetss</function></member>
   <member><function>fwrite</function></member>
   <member><function>fclose</function></member>
   <member><function>feof</function></member>
   <member>La <link linkend="ref.curl">extensión Curl</link></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
