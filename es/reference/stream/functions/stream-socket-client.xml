<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: seros Status: ready -->
<refentry xml:id="function.stream-socket-client" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_socket_client</refname>
  <refpurpose>Abrir una conexión de socket de dominio de Internet o Unix</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>stream_socket_client</methodname>
   <methodparam><type>string</type><parameter>remote_socket</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">errno</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">errstr</parameter></methodparam>
   <methodparam choice="opt"><type>float</type><parameter>timeout</parameter><initializer>ini_get("default_socket_timeout")</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>STREAM_CLIENT_CONNECT</initializer></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>context</parameter></methodparam>
  </methodsynopsis>
  <para>
   Inicia una conexión de flujo o datagrama al destino especificado
   por <parameter>remote_socket</parameter>. El tipo de socket creado
   se determina por el transporte especificado usando el formato de URL estándar:
   <literal>transporte://objetivo</literal>. Para sockets de Dominio de Internet
   (AF_INET) como TCP y UDP, la porción del <literal>objetivo</literal>
   del parámetro <parameter>remote_socket</parameter> debería consistir en
   un nombre de host o dirección IP seguida de dos puntos y un número de puerto. Para sockets
   de dominio de Unix, la porción de <parameter>target</parameter> apuntará
   al archivo de socket del sistema de archivos.
  </para>
  <note>
   <para>
    El flujo será abierto por defecto en modo de bloqueo. Se puede
    cambiar al modo de no bloqueo usando
    <function>stream_set_blocking</function>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters"><!-- {{{ -->
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>remote_socket</parameter></term>
     <listitem>
      <para>
       Dirección del socket al que se va a conectar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>errno</parameter></term>
     <listitem>
      <para>
       Será establecido al número de error a nivel de sistema si la conexión falla.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>errstr</parameter></term>
     <listitem>
      <para>
       Será establecido al mensaje de error a nivel de sistema si la conexión falla.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Número de segundos hasta que la llamda al sistema de <literal>connect()</literal>
       debería esperar.
       <note>
        <simpara>
         Este parámetro sólo se aplica cuando no se hace un intento de
         conexión asíncrona.
        </simpara>
       </note>
       <note>
        <para>
         Para establecer un tiempo de espera para lectura/escritura de información sobre el socket,
         use la función <function>stream_set_timeout</function>, ya que
         <parameter>timeout</parameter> sólo se aplica mientras se hace una conexión
         al socket.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Campo de máscara de bits que puede ser establecido a cualquier combinación de banderas de conexión.
       Actualmente la selección de banderas de conexión está limitada a
       <constant>STREAM_CLIENT_CONNECT</constant> (por defecto),
       <constant>STREAM_CLIENT_ASYNC_CONNECT</constant> y
       <constant>STREAM_CLIENT_PERSISTENT</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       Un recurso de contexto válido creado con <function>stream_context_create</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   Si se tuvo éxito, un recurso de flujo es devuelto, el cuál se puede
   usar junto con las demás funciones de archivo (tales como
   <function>fgets</function>, <function>fgetss</function>,
   <function>fwrite</function>, <function>fclose</function>, y
   <function>feof</function>), &false; si falló.
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Si falló, los argumentos <parameter>errno</parameter> y
   <parameter>errstr</parameter> serán rellenados con el error
   a nivel de sistema actual que ocurrió en la llamda a nivel de
   sistema de <literal>connect()</literal>. Si el valor devuelto en
   <parameter>errno</parameter> es <literal>0</literal> y la
   función devolvió &false;, es una indicación de que el error
   ocurrió antes de la llamada a <literal>connect()</literal>. Esto es
   lo más probable debido a un problema de inicialización del socket. Observe que
   los argumentos <parameter>errno</parameter> y
   <parameter>errstr</parameter> siempre serán pasados por
   referencia.
  </para>
 </refsect1><!-- }}} -->
 
 
 <refsect1 role="examples"><!-- {{{ -->
  &reftitle.examples;
  <para>
   <example xml:id="stream-socket-client.example.basic"><!-- {{{ -->
    <title>Ejemplo de <function>stream_socket_client</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = stream_socket_client("tcp://www.example.com:80", $errno, $errstr, 30);
if (!$fp) {
    echo "$errstr ($errno)<br />\n";
} else {
    fwrite($fp, "GET / HTTP/1.0\r\nHost: www.example.com\r\nAccept: */*\r\n\r\n");
    while (!feof($fp)) {
        echo fgets($fp, 1024);
    }
    fclose($fp);
}
?>
]]>
    </programlisting>
   </example><!-- }}} -->
   <example xml:id="stream-socket-client.example.daytime"><!-- {{{ -->
    <title>Usar una conexión UDP</title>
    <para>
     Recuperar el día y la hora desde el servicio "daytime" de UDP (puerto 13)
     en localhost.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$fp = stream_socket_client("udp://127.0.0.1:13", $errno, $errstr);
if (!$fp) {
    echo "ERROR: $errno - $errstr<br />\n";
} else {
    fwrite($fp, "\n");
    echo fread($fp, 26);
    fclose($fp);
}
?>
]]>
    </programlisting>
   </example><!-- }}} -->
  </para>
 </refsect1><!-- }}} -->

 <refsect1 role="notes"><!-- {{{ -->
  &reftitle.notes;
  <warning>
   <simpara>
     Los sockects UDP a veces parecerán estar abiertos sin un error,
     incluso si el host remoto es inalcanzable. El error sólo
     aparecerá cuando se lea o escriba información desde/en el socket.
     La razón de esto es que UDP es un protocolo no orientado a conexión,
     lo que significa que el sistema operativo no intenta establecer
     un enlace para el socket hasta que se necesite enviar o recibir informaicón.
   </simpara>
  </warning>
  &ipv6.brackets;
  <note>
   <para>
    Dependiendo del entorno, pueden no estar disponibles el dominio Unix
    o el tiempo de espera opcional de la conexión. Una lista de transportes
    disponibles se puede recuperar unsando <function>stream_get_transports</function>.
    Véase <xref linkend="transports"/> para una lista de transportes incluidos.
   </para>
  </note>
 </refsect1><!-- }}} -->

 <refsect1 role="seealso"><!-- {{{ -->
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stream_socket_server</function></member>
    <member><function>stream_set_blocking</function></member>
    <member><function>stream_set_timeout</function></member>
    <member><function>stream_select</function></member>
    <member><function>fgets</function></member>
    <member><function>fgetss</function></member>
    <member><function>fwrite</function></member>
    <member><function>fclose</function></member>
    <member><function>feof</function></member>
    <member><xref linkend="ref.curl" /></member>
   </simplelist>
  </para>
 </refsect1><!-- }}} -->

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
