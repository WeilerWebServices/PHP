<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 324430 Maintainer: seros Status: ready -->
<refentry xml:id="function.stream-filter-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_register</refname>
  <refpurpose>Registrar un filtro de flujo definido por el usuario</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>stream_filter_register</methodname>
   <methodparam><type>string</type><parameter>filtername</parameter></methodparam>
   <methodparam><type>string</type><parameter>classname</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>stream_filter_register</function> permite implementar
   un filtro propio sobre cualquier flujo registrado usado con las demás funciones
   de sistema de archivos (como <function>fopen</function>,
   <function>fread</function> etc.).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filtername</parameter></term>
     <listitem>
      <para>
       El nombre del filtro que va a ser registrado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>classname</parameter></term>
     <listitem>
      <para>
       Para implementar un filtro se necesita definir una clase como una extensión de
       <classname>php_user_filter</classname> con un número de funciones
       miembro. Cuando se lleva a cabo operaciones de lectura/escritura en el flujo
       al cuál el filtro está enlazado, PHP pasará la información a través de este
       filtro (y cualquier otro filtro enlazado a ese flujo) por lo que la
       información puede ser modificada como se desee. Se deben implementar los métodos
       exactamente como se describe en <classname>php_user_filter</classname> - hacerlo
       de otro modo conducirá a un comportamiento indefinido.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
  <para>
   <function>stream_filter_register</function> devolverá &false; si
   <parameter>filtername</parameter> ya está definido.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Filtro para poner en mayúsculas caracteres en el flujo <filename>foo-bar.txt</filename></title>
    <para>
     El ejemplo de abajo implementa un filtro llamado <literal>strtoupper</literal>
     en el flujo <filename>foo-bar.txt</filename> que pondrá en mayúsculas
     todos los caracteres de letras escritos en/leídos desde este flujo.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Definir nuestra clase de filtro */
class strtoupper_filter extends php_user_filter {
  function filter($entrada, $salida, &$consumido, $cerrar)
  {
    while ($recipiente = stream_bucket_make_writeable($entrada)) {
      $recipiente->data = strtoupper($recipiente->data);
      $consumido += $recipiente->datalen;
      stream_bucket_append($salida, $recipiente);
    }
    return PSFS_PASS_ON;
  }
}

/* Registrar nuestro filtro con PHP */
stream_filter_register("strtoupper", "strtoupper_filter")
    or die("Fallo al registrar el filtro");

$fp = fopen("foo-bar.txt", "w");

/* Enlazar el filtro al flujo recién abierto */
stream_filter_append($fp, "strtoupper");

fwrite($fp, "Fila1\n");
fwrite($fp, "Palabra - 2\n");
fwrite($fp, "Tan Sencillo Como 123\n");

fclose($fp);

/* Leer el contenido desde atrás
 */
readfile("foo-bar.txt");

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
FILA1
PALABRA - 2
TAN SENCILLO COMO 123
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Registrar una clase de filtro genérica para comparar múltiples nombres de filtro.</title>
    <programlisting role="php">
<![CDATA[
<?php

/* Definir nuestra clase de filtro */
class string_filter extends php_user_filter {
  var $modo;

  function filter($entrada, $salida, &$consumido, $cerrar)
  {
    while ($recipiente = stream_bucket_make_writeable($entrada)) {
      if ($this->mode == 1) {
        $recipiente->data = strtoupper($recipiente->data);
      } elseif ($this->mode == 0) {
        $recipiente->data = strtolower($recipiente->data);
      }

      $consumido += $recipiente->datalen;
      stream_bucket_append($salida, $recipiente);
    }
    return PSFS_PASS_ON;
  }

  function onCreate()
  {
    if ($this->filtername == 'str.toupper') {
      $this->mode = 1;
    } elseif ($this->filtername == 'str.tolower') {
      $this->mode = 0;
    } else {
      /* Se preguntó por otro filtro str.*,
         informar del fallo, por lo que PHP seguirá mirando */
      return false;
    }

    return true;
  }
}

/* Registrar nuestro filtro con PHP */
stream_filter_register("str.*", "string_filter")
    or die("Fallo al registrar el filtro");

$fp = fopen("foo-bar.txt", "w");

/* Enlazar el filtro al flujo recién abierto
   Alternativamente podríamos enlazar a str.tolower aquí */
stream_filter_append($fp, "str.toupper");

fwrite($fp, "Fila1\n");
fwrite($fp, "Palabra - 2\n");
fwrite($fp, "Tan Sencillo Como 123\n");

fclose($fp);

/* Leer el contenido desde atrás
 */
readfile("foo-bar.txt");

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
FILA1
PALABRA - 2
TAN SENCILLO COMO 123
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stream_wrapper_register</function></member>
    <member><function>stream_filter_append</function></member>
    <member><function>stream_filter_prepend</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
