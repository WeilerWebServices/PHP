<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338619 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.stream-filter-append" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_append</refname>
  <refpurpose>Enlaza un filtro a un flujo</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>stream_filter_append</methodname>
   <methodparam><type>resource</type><parameter>stream</parameter></methodparam>
   <methodparam><type>string</type><parameter>filtername</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>read_write</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>params</parameter></methodparam>
  </methodsynopsis>
  <para>
   Añade un nombre de filtro dado por <parameter>filtername</parameter> a la lista de filtros
   adjuntos a <parameter>stream</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stream</parameter></term>
     <listitem>
      <para>
       El flujo objetivo.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>filtername</parameter></term>
     <listitem>
      <para>
       El nombre del filtro.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>read_write</parameter></term>
     <listitem>
      <para>
       Por omisión, <function>stream_filter_append</function>
       enlazará el filtro a la <literal>cadena de filtros de lectura</literal>
       si el archivo fue abierto para lectura (esto es, Modo de Archivo:
       <literal>r</literal>, y/o <literal>+</literal>). El filtro
       también será enlazado a la <literal>cadena de filtros de escritura</literal>
       si el archivo fue abierto para escritura (esto es, Modo de Archivo:
       <literal>w</literal>, <literal>a</literal>, y/o <literal>+</literal>).
       <constant>STREAM_FILTER_READ</constant>,
       <constant>STREAM_FILTER_WRITE</constant>, y/o
       <constant>STREAM_FILTER_ALL</constant> también se pueden pasar al
       parámetro <parameter>read_write</parameter> para sobrescribir este comportamiento.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>params</parameter></term>
     <listitem>
      <para>
       Este filtro será añadido con los parámetros
       <parameter>params</parameter> especificados al <emphasis>final</emphasis> de
       la lista y por lo tanto será llamado el último durante las operaciones de flujo.
       Para añadir un filtro al principio de la lista use
       <function>stream_filter_prepend</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un recurso en caso de éxito o &false; en caso de fallo. El recurso se puede
   emplear para referirse a esta instnacia del filtro durante una llamada a
   <function>stream_filter_remove</function>.
  </para>

  <para>
   Se devuelve &false; si <parameter>stream</parameter> no es un recurso o
   si <parameter>filtername</parameter> no se puede localizar.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Antes de PHP 5.1.0, esta función devolvía &true; si se tuvo éxito
       &return.falseforfailure;.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Controlar dónde son aplicados los filtros</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Abrir un archivo de prueba para lectura y escritura */
$fp = fopen('prueba.txt', 'w+');

/* Aplicar el filtro ROT13 filter a la
 * cadena de filtros de escritura, pero no a la
 * cadena de filtros de lectura */
stream_filter_append($fp, "string.rot13", STREAM_FILTER_WRITE);

/* Escribir una cadena sencilla al archivo
 * será ROT13 transformado a la
 * salida */
fwrite($fp, "Esto es una prueba\n");

/* Retroceder al principio del archivo */
rewind($fp);

/* Leer el contenido del archivo desde atrás.
 * Si el filtro ha sido aplicado a la
 * cadena de filtros de lectura veríamos
 * el texto con el filtro ROT13 deshecho a su estado original */
fpassthru($fp);

fclose($fp);

/* Salida esperada
   ---------------

Rfgb rf han cehron

 */
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>Cuando se usan filtros personalizos (de usuario)</title>
   <simpara>
    <function>stream_filter_register</function> debe llamarse primero
    para registrar el filtro de usuario deseado en <parameter>filtername</parameter>.
   </simpara>
  </note>
  <note>
   <simpara>
    La información del flujo se lee desde recursos (locales y remotos) en trozos,
    con cualquier información sin consumir guardada en bufferes internos. Cuando un nuevo
    filtro se añade a un flujo, la información en los bufferes internos se procesa a través
    del nuevo filtro en ese momento. Esto difiere del comportamiento de
    <function>stream_filter_prepend</function>.
   </simpara>
  </note>
  <note>
   <simpara>
    Cuando un filtro se añade para lectura y escritura, se crean dos instancias
    del filtro. <function>stream_filter_append</function> se debe llamar dos veces
    con <constant>STREAM_FILTER_READ</constant> y 
    <constant>STREAM_FILTER_WRITE</constant> para obtener ambos recursos del filtro.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>stream_filter_register</function></member>
   <member><function>stream_filter_prepend</function></member>
   <member><function>stream_get_filters</function></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
