<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: jpberdejo Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.levenshtein" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>levenshtein</refname>
  <refpurpose>Cálculo de la distancia Levenshtein entre dos strings</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>str1</parameter></methodparam>
   <methodparam><type>string</type><parameter>str2</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>int</type><methodname>levenshtein</methodname>
   <methodparam><type>string</type><parameter>str1</parameter></methodparam>
   <methodparam><type>string</type><parameter>str2</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_ins</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_rep</parameter></methodparam>
   <methodparam><type>int</type><parameter>cost_del</parameter></methodparam>
  </methodsynopsis>
  <para>
   La distancia Levenshtein se define como el número mínimo de
   caracteres que se tienen que sustituir, insertar o borrar para transformar
   <parameter>str1</parameter> en <parameter>str2</parameter>.
   La complejidad del algoritmo es <literal>O(m*n)</literal>,
   donde <literal>n</literal> y <literal>m</literal> son la
   longitud de <parameter>str1</parameter> y
   <parameter>str2</parameter> (bastante bueno en comparación con
   <function>similar_text</function>, la cual es O(max(n,m)**3),
   pero sigue siendo costoso).
  </para>
  <para>
   En su forma más simple la función tomará sólo los dos
   strings como parámetros y calculará sólo el número de
   operaciones de insertar, reemplazar y eliminar, necesarias para transformar
   <parameter>str1</parameter> en <parameter>str2</parameter>.
  </para>
  <para>
   Una segunda variante tomará tres parámetros adicionales que
   definen el costo de las operaciones de insertar, reemplazar y eliminar. Esto
   es más general y adaptable que la primera variante, pero no
   tan eficiente.
  </para>
 </refsect1>

<refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str1</parameter></term>
     <listitem>
      <para>
       Uno de los strings a ser evaluados para la distancia Levenshtein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>str2</parameter></term>
     <listitem>
      <para>
       Uno de los strings a ser evaluados para la distancia Levenshtein.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_ins</parameter></term>
     <listitem>
      <para>
       Define el costo de inserción.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_rep</parameter></term>
     <listitem>
      <para>
       Define el costo de reemplazo.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cost_del</parameter></term>
     <listitem>
      <para>
       Define el costo de eliminación.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Esta función devuelve la distancia Levenshtein entre los
   dos strings argumentos ó -1, si uno de los strings argumentos
   es mayor que el límite de 255 caracteres.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>levenshtein</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// palabra de entrada mal escrita
$input = 'carrrot';

// array de palabras contra las cuales verificar
$words  = array('apple','pineapple','banana','orange',
                'radish','carrot','pea','bean','potato');

// no se ha encontrado la distancia más corta, aun
$shortest = -1;

// bucle a través de las palabras para encontrar la más cercana
foreach ($words as $word) {

    // calcula la distancia entre la palabra de entrada
    // y la palabra actual
    $lev = levenshtein($input, $word);

    // verifica por una coincidencia exacta
    if ($lev == 0) {

        // la palabra más cercana es esta (coincidencia exacta)
        $closest = $word;
        $shortest = 0;

        // salir del bucle, se ha encontrado una coincidencia exacta
        break;
    }

    // si esta distancia es menor que la siguiente distancia
    // más corta o si una siguiente palabra más corta aun no se ha encontrado
    if ($lev <= $shortest || $shortest < 0) {
        // establece la coincidencia más cercana y la distancia más corta
        $closest  = $word;
        $shortest = $lev;
    }
}

echo "Input word: $input\n";
if ($shortest == 0) {
    echo "Exact match found: $closest\n";
} else {
    echo "Did you mean: $closest?\n";
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Input word: carrrot
Did you mean: carrot?
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>soundex</function></member>
    <member><function>similar_text</function></member>
    <member><function>metaphone</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
