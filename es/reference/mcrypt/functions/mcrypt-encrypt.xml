<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341620 Maintainer: aeoris Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.mcrypt-encrypt" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mcrypt_encrypt</refname>
  <refpurpose>Cifra texto plano con los parámetros dados</refpurpose>
 </refnamediv>
 
 <refsynopsisdiv>
  &warn.deprecated.function-7-1-0;
 </refsynopsisdiv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mcrypt_encrypt</methodname>
   <methodparam><type>string</type><parameter>cipher</parameter></methodparam>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam><type>string</type><parameter>mode</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>iv</parameter></methodparam>
  </methodsynopsis>
  <para>
   Cifra los datos y los devuelve.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>cipher</parameter></term>
     <listitem>
      &mcrypt.parameter.cipher;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       La clave con la que los datos serán cifrados. Si el tamaño de la clave proporcionada no
       está soportado por el cifrador, la función emitirá una advertencia y devolverá &false;
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       Los datos que serán cifrados con el cifrador
       y modo dados a través de <parameter>cipher</parameter>
       y <parameter>mode</parameter>. Si el tamaño
       de la información no es n * blocksize, ésta
       será rellenada con '<literal>\0</literal>'.
      </para>
      <para>
       El texto cifrado devuelto puede ser mayor al tamaño de datos que fue
       especificado por el parámetro <parameter>data</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      &mcrypt.parameter.mode;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iv</parameter></term>
     <listitem>
      &mcrypt.parameter.iv.strict;
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve los datos cifrados, en formato cadena &return.falseforfailure;.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.6.0</entry>
       <entry>
        Tamaños incorrectos en <parameter>key</parameter> y <parameter>iv</parameter>
        ya no son admitidos. <function>mcrypt_encrypt</function> emitirá
        una advertencia y devolverá &false; si los datos de entrada son incorrectos. Anteriormente la clave y
        el IV eran rellenados con bytes '<literal>\0</literal>' hasta el siguiente tamaño válido.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>mcrypt_encrypt</function></title>
    <programlisting role="php">
<![CDATA[
<?php
    # --- ENCRYPTION ---

    # la clave debería ser binaria aleatoria, use scrypt, bcrypt o PBKDF2 para
    # convertir un string en una clave
    # la clave se especifica en formato hexadecimal
    $key = pack('H*', "bcb04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3");
    
    # mostrar el tamaño de la clave, use claves de 16, 24 o 32 bytes para AES-128, 192
    # y 256 respectivamente
    $key_size =  strlen($key);
    echo "Tamaño de la clave: " . $key_size . "\n";
    
    $plaintext = "Este estring estaba encriptado con AES-256 / CBC / ZeroBytePadding.";

    # crear una aleatoria IV para utilizarla co condificación CBC
    $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
    
    # crea un texto cifrado compatible con AES (tamaño de bloque Rijndael = 128)
    # para hacer el texto confidencial 
    # solamente disponible para entradas codificadas que nunca finalizan con el
    # el valor  00h (debido al relleno con ceros)
    $ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key,
                                 $plaintext, MCRYPT_MODE_CBC, $iv);

    # anteponer la IV para que esté disponible para el descifrado
    $ciphertext = $iv . $ciphertext;
    
    # codificar el texto cifrado resultante para que pueda ser representado por un string
    $ciphertext_base64 = base64_encode($ciphertext);

    echo  $ciphertext_base64 . "\n";

    # === ADVERTENCIA ===

    # El texto cifrado resultante no tiene añadida integridad o autenticidad
    # y no está protegido contra los ataques de relleno de oracle.
    
    # --- DESCIFRADO ---
    
    $ciphertext_dec = base64_decode($ciphertext_base64);
    
    # recupera la IV, iv_size debería crearse usando mcrypt_get_iv_size()
    $iv_dec = substr($ciphertext_dec, 0, $iv_size);
    
    # recupera el texto cifrado (todo excepto el $iv_size en el frente)
    $ciphertext_dec = substr($ciphertext_dec, $iv_size);

    # podrían eliminarse los caracteres con valor 00h del final del texto puro
    $plaintext_dec = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key,
                                    $ciphertext_dec, MCRYPT_MODE_CBC, $iv_dec);
    
    echo  $plaintext_dec . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Tamaño de la clave: 32
ENJW8mS2KaJoNB5E5CoSAAu0xARgsR1bdzFWpEn+poYw45q+73az5kYi4j+0haevext1dGrcW8Qi59txfCBV8BBj3bzRP3dFCp3CPQSJ8eU=
Este estring estaba encriptado con AES-256 / CBC / ZeroBytePadding.
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mcrypt_decrypt</function></member>
    <member><function>mcrypt_module_open</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
