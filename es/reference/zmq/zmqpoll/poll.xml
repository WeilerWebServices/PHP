<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343892 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="zmqpoll.poll" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQPoll::poll</refname>
  <refpurpose>Sondear los elementos</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>int</type><methodname>ZMQPoll::poll</methodname>
   <methodparam><type>array</type><parameter role="reference">readable</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">writable</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>
   Sondea los elementos en el conjunto de sondeo actual. Los elementos legibles y escribibles son devueltos en
   los parámetros <parameter>readable</parameter> y <parameter>writable</parameter> respectivamente. 
   Se puede utilizar <function>ZMQPoll::getLastErrors</function> para comprobar si existen errores.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>readable</parameter></term>
     <listitem>
      <para>
       Un array donde se sevuelven los flujos de PHP/ZMQSockets legibles. El array
       se limpiará al inicio de la operación.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>writable</parameter></term>
     <listitem>
      <para>
       Un array donde se sevuelven los flujos de PHP/ZMQSockets escribibles. El array
       se limpiará al inicio de la operación.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Tiempo de espera de la operación. -1 significa que el sondeo esperará hasta
       que al menos un elemento tenga actividad. Observe que desde la
       versión 1.0.0, el tiempo de espera del sondeo está definido en milisegundos, en lugar
       de en microsegundos.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>ZMQPoll</function></title>
    <para>
     Crear un servidor de sondeos sencillo
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Crear un socket, patrón de petición-respuesta (socket de respuesta) */
$context = new ZMQContext();
$server  = $context->getSocket(ZMQ::SOCKET_REP);

/* Vincular al puerta 5555 en 127.0.0.1 */
$server->bind("tcp://127.0.0.1:5555");

/* Crear un conjunto de sondeo nuevo para mensajes entrantes/salientes */
$poll = new ZMQPoll();

/* Añadir el objeto y escuchar la entrada/salida del sondeo */
$id = $poll->add($server, ZMQ::POLL_IN | ZMQ::POLL_OUT);
echo "Se añaió el objeto con id " . $id . "\n";

/* Inicializar los arrays readable y writable */
$readable = array();
$writable = array();

while (true) {
   /* Cantidad de eventos recuperados */
   $events = 0;

   try {
       /* Sondear hasta que haya algo que hacer */
       $events = $poll->poll($readable, $writable, -1);
       $errors = $poll->getLastErrors();

       if (count($errors) > 0) {
           foreach ($errors as $error) {
               echo "Error al sondear el objeto " . $error . "\n";
           }
       }
   } catch (ZMQPollException $e) {
       echo "Fallón el sondeo: " . $e->getMessage() . "\n";
   }

   if ($events > 0) {
       /* Recorrer los objetos legibles y los mensajes recibidos */
       foreach ($readable as $r) {
           try {
               echo "Mensaje recibido: " . $r->recv() . "\n";
           } catch (ZMQException $e) {
               echo "Falló la recepción: " . $e->getMessage() . "\n";
           }
       }

       /* Recorrer los objetos escribibles y enviar de vuelta los mensajes */
       foreach ($writable as $w) {
           try {
               $w->send("Got it!");
           } catch (ZMQException $e) {
               echo "Falló el envío: " . $e->getMessage() . "\n";
           }
       }
   }
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1> 
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un número entero que representa la cantidad de elementos con actividad. Lanza una ZMQPollException en caso de error.
  </para>
 </refsect1>
 
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
