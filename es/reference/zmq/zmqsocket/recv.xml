<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 347288 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="zmqsocket.recv" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ZMQSocket::recv</refname>
  <refpurpose>Recibir un mensaje</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>string</type><methodname>ZMQSocket::recv</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Recibe un mensaje de un socket. Por defecto, la recepción quedará en espera hasta que haya disponible un mensaje, a menos
   que se emplee la bandera <constant>ZMQ::MODE_DONTWAIT</constant>. Se puede emplear la opción de socket
   <constant>ZMQ::SOCKOPT_RCVMORE</constant> para recibir mensajes multiparte. Véase <function>ZMQSocket::setSockOpt</function>
   para más información.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Proporcionar banderas de modo para recibir mensajes multiparte o hacer que la operación no quede en espera. 
       Véanse las constantes <constant>ZMQ::MODE_*</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de send/recv</title>
    <para>
     Envío / respuesta sin esperas
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Crear un nuevo objeto cola, debe existir un servidor en el otro extremo */
$cola = new ZMQSocket(new ZMQContext(), ZMQ::SOCKET_REQ);
$cola->connect("tcp://127.0.0.1:5555");

/* Asginar el socket 1 a la cola, enviar y recibir */
$reintentos = 5;
$sending = true;

/* Iniciar y recorrer */
do {
    try {
        /* Intentar enviar / recibir */
        if ($sending) {
            echo "Enviando el mensaje\n";
            $cola->send("Este es un mensaje", ZMQ::MODE_DONTWAIT);
            $sending = false;
        } else {
            echo "Respuesta obtenida: " . $cola->recv(ZMQ::MODE_DONTWAIT) . "\n";
            break;
        }
    } catch (ZMQSocketException $e) {
        /* EAGAIN significa que la operación tendrá que esperar, reintentar */
        if ($e->getCode() === ZMQ::ERR_EAGAIN) {
            echo " - EAGAIN, reintentando ($reintentos)\n";
        } else {
            die(" - Error: " . $e->getMessage());
        }
    }
    /* Dormir un poco entre operaciones */
    usleep(5);
} while (--$reintentos);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Enviando el mensaje
 - Unable to execute operation, retrying (4)
Respuesta obtenida: Este es un mensaje
]]>
    </screen>    
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el mensaje. Lanza una ZMQSocketException en caso de error. 
   Si se emplea <constant>ZMQ::MODE_DONTWAIT</constant> y la operación debería quedar
   en espera, se devolverá el &boolean; false.
  </para>
 </refsect1>
 
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
