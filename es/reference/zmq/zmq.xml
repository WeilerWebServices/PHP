<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 342408 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.zmq" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>La clase ZMQ</title>
 <titleabbrev>ZMQ</titleabbrev>
 
 <partintro>
  
  <!-- {{{ ZMQ intro -->
  <section xml:id="zmq.intro">
   &reftitle.intro;
   <para>
    
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="zmq.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>ZMQ</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>ZMQ</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">Constantes</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-pair">ZMQ::SOCKET_PAIR</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-pub">ZMQ::SOCKET_PUB</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-sub">ZMQ::SOCKET_SUB</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-req">ZMQ::SOCKET_REQ</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-rep">ZMQ::SOCKET_REP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-xreq">ZMQ::SOCKET_XREQ</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-xrep">ZMQ::SOCKET_XREP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-push">ZMQ::SOCKET_PUSH</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-pull">ZMQ::SOCKET_PULL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-router">ZMQ::SOCKET_ROUTER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-dealer">ZMQ::SOCKET_DEALER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-xpub">ZMQ::SOCKET_XPUB</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-xsub">ZMQ::SOCKET_XSUB</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.socket-stream">ZMQ::SOCKET_STREAM</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-hwm">ZMQ::SOCKOPT_HWM</varname>
    </fieldsynopsis>    
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-sndhwm">ZMQ::SOCKOPT_SNDHWM</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-rcvhwm">ZMQ::SOCKOPT_RCVHWM</varname>
    </fieldsynopsis>    
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-affinity">ZMQ::SOCKOPT_AFFINITY</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-identity">ZMQ::SOCKOPT_IDENTITY</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-subscribe">ZMQ::SOCKOPT_SUBSCRIBE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-unsubscribe">ZMQ::SOCKOPT_UNSUBSCRIBE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-rate">ZMQ::SOCKOPT_RATE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-recovery-ivl">ZMQ::SOCKOPT_RECOVERY_IVL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-reconnect-ivl">ZMQ::SOCKOPT_RECONNECT_IVL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-reconnect-ivl-max">ZMQ::SOCKOPT_RECONNECT_IVL_MAX</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-mcast-loop">ZMQ::SOCKOPT_MCAST_LOOP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-sndbuf">ZMQ::SOCKOPT_SNDBUF</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-rcvbuf">ZMQ::SOCKOPT_RCVBUF</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-rcvmore">ZMQ::SOCKOPT_RCVMORE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-type">ZMQ::SOCKOPT_TYPE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-linger">ZMQ::SOCKOPT_LINGER</varname>
    </fieldsynopsis>  
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-backlog">ZMQ::SOCKOPT_BACKLOG</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-maxmsgsize">ZMQ::SOCKOPT_MAXMSGSIZE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-sndtimeo">ZMQ::SOCKOPT_SNDTIMEO</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-rcvtimeo">ZMQ::SOCKOPT_RCVTIMEO</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-ipv4only">ZMQ::SOCKOPT_IPV4ONLY</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-last-endpoint">ZMQ::SOCKOPT_LAST_ENDPOINT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-tcp-keepalive-idle">ZMQ::SOCKOPT_TCP_KEEPALIVE_IDLE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-tcp-keepalive-cnt">ZMQ::SOCKOPT_TCP_KEEPALIVE_CNT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-tcp-keepalive-intvl">ZMQ::SOCKOPT_TCP_KEEPALIVE_INTVL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-tcp-accept-filter">ZMQ::SOCKOPT_TCP_ACCEPT_FILTER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-tcp-accept-filter">ZMQ::SOCKOPT_TCP_ACCEPT_FILTER</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-delay-attach-on-connect">ZMQ::SOCKOPT_DELAY_ATTACH_ON_CONNECT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-xpub-verbose">ZMQ::SOCKOPT_XPUB_VERBOSE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-router-raw">ZMQ::SOCKOPT_ROUTER_RAW</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.sockopt-ipv6">ZMQ::SOCKOPT_IPV6</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.ctxopt-max-sockets">ZMQ::CTXOPT_MAX_SOCKETS</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.poll-in">ZMQ::POLL_IN</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.poll-out">ZMQ::POLL_OUT</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.mode-noblock">ZMQ::MODE_NOBLOCK</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.mode-dontwait">ZMQ::MODE_DONTWAIT</varname>
    </fieldsynopsis>    
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.mode-sndmore">ZMQ::MODE_SNDMORE</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.err-internal">ZMQ::ERR_INTERNAL</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.err-eagain">ZMQ::ERR_EAGAIN</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.err-enotsup">ZMQ::ERR_ENOTSUP</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.err-efsm">ZMQ::ERR_EFSM</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="zmq.constants.err-eterm">ZMQ::ERR_ETERM</varname>
    </fieldsynopsis>
    
    <classsynopsisinfo role="comment">Methods</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.zmq')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->
   
  </section>
  
  <!-- {{{ ZMQ constants -->
  <section xml:id="zmq.constants">
   &reftitle.constants;
   <section xml:id="zmq.constants.types">
    <title>Tipos de constantes de ZMQ</title>
    <variablelist>
     
     <varlistentry xml:id="zmq.constants.socket-pair">
      <term><constant>ZMQ::SOCKET_PAIR</constant></term>
      <listitem>
       <para>Patrón de par exclusivo</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-pub">
      <term><constant>ZMQ::SOCKET_PUB</constant></term>
      <listitem>
       <para>Socket publicador</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-sub">
      <term><constant>ZMQ::SOCKET_SUB</constant></term>
      <listitem>
       <para>Socket suscriptor</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-req">
      <term><constant>ZMQ::SOCKET_REQ</constant></term>
      <listitem>
       <para>Socket de petición</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-rep">
      <term><constant>ZMQ::SOCKET_REP</constant></term>
      <listitem>
       <para>Socket de respuesta</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-xreq">
      <term><constant>ZMQ::SOCKET_XREQ</constant></term>
      <listitem>
       <para>Alias de SOCKET_DEALER</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-xrep">
      <term><constant>ZMQ::SOCKET_XREP</constant></term>
      <listitem>
       <para>Alias de SOCKET_ROUTER</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-push">
      <term><constant>ZMQ::SOCKET_PUSH</constant></term>
      <listitem>
       <para>Socket "push" ascendente de tubería</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-pull">
      <term><constant>ZMQ::SOCKET_PULL</constant></term>
      <listitem>
       <para>Socket "pull" descendente de tubería</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-router">
      <term><constant>ZMQ::SOCKET_ROUTER</constant></term>
      <listitem>
       <para>Socket REP ampliado que puede dirigir réplicas a solicitantes</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-dealer">
      <term><constant>ZMQ::SOCKET_DEALER</constant></term>
      <listitem>
       <para>Sokect REQ ampliado que equilibra a todos los pares conectados</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-xpub">
      <term><constant>ZMQ::SOCKET_XPUB</constant></term>
      <listitem>
       <para>Similar to SOCKET_PUB, except you can receive subscriptions as messages.
        The subscription message is 0 (unsubscribe) or 1 (subscribe) followed by the topic.</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-xsub">
      <term><constant>ZMQ::SOCKET_XSUB</constant></term>
      <listitem>
       <para>Similar a SOCKET_SUB, excepto que se puede enviar suscripciones como mensajes. Véase SOCKET_XPUB para el formato.</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.socket-stream">
      <term><constant>ZMQ::SOCKET_STREAM</constant></term>
      <listitem>
       <para>Utilizada para enviar y recibir datos TCP de un par que no sea ØMQ. Disponible si se compila con ZeroMQ 4.0 o superior (Value: &integer;).</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-hwm">
      <term><constant>ZMQ::SOCKOPT_HWM</constant></term>
      <listitem>
       <para>La marca de agua para mensajes entrantes y salientes es un límite firme sobre el número máximo de mensajes salientes que ØMQ pondrá en cola en la memoria para cualquier único par con que se comunique el socket especificado. Establecer esta opción en un socket solamente afectará a las conexiones realizadas después de haber establecido esta opción. En ZeroMQ 3.x esto es una envoltura para establecer tanto SNDHWM como RCVHWM. (Valor: &integer;).</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-sndhwm">
      <term><constant>ZMQ::SOCKOPT_SNDHWM</constant></term>
      <listitem>
       <para>La opción ZMQ_SNDHWM establece la marca de agua alta para mensajes salientes en el socket especificado. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &integer;).</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-rcvhwm">
      <term><constant>ZMQ::SOCKOPT_RCVHWM</constant></term>
      <listitem>
       <para>La opción SOCKOPT_RCVHWM establece la marca de agua alta para mensajes entrantes en el socket especificado. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &integer;).</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-affinity">
      <term><constant>ZMQ::SOCKOPT_AFFINITY</constant></term>
      <listitem>
       <para>Establecer la afinidad del hilo de E/S (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-identity">
      <term><constant>ZMQ::SOCKOPT_IDENTITY</constant></term>
      <listitem>
       <para>Establecer la identidad del socket identity (Valor: &string;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-subscribe">
      <term><constant>ZMQ::SOCKOPT_SUBSCRIBE</constant></term>
      <listitem>
       <para>Establecer un filtro para mensajes. Válido para socket suscriptores socket (Valor: &string;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-unsubscribe">
      <term><constant>ZMQ::SOCKOPT_UNSUBSCRIBE</constant></term>
      <listitem>
       <para>Eliminar un filtro para mensajes. Válido para socket suscriptores (Valor: &string;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-rate">
      <term><constant>ZMQ::SOCKOPT_RATE</constant></term>
      <listitem>
       <para>Establecer la tasa para los socket de multidifusión (pgm) (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-recovery-ivl">
      <term><constant>ZMQ::SOCKOPT_RECOVERY_IVL</constant></term>
      <listitem>
       <para> Establecer el intervalo de recuperación de la multidifusión (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-reconnect-ivl">
      <term><constant>ZMQ::SOCKOPT_RECONNECT_IVL</constant></term>
      <listitem>
       <para> Establecer el intervañp de reconexión inicial (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-reconnect-ivl-max">
      <term><constant>ZMQ::SOCKOPT_RECONNECT_IVL_MAX</constant></term>
      <listitem>
       <para> Establecer el intervalo de reconexión máximo (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-mcast-loop">
      <term><constant>ZMQ::SOCKOPT_MCAST_LOOP</constant></term>
      <listitem>
       <para> Controlar el loopback de la multidifusión (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-sndbuf">
      <term><constant>ZMQ::SOCKOPT_SNDBUF</constant></term>
      <listitem>
       <para>Establecer el tamaño del buffer de transmisión del kernel (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-rcvbuf">
      <term><constant>ZMQ::SOCKOPT_RCVBUF</constant></term>
      <listitem>
       <para> Establecer el tamaño del buffer de recepción del kernel (Valor: &integer; >= 0)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-rcvmore">
      <term><constant>ZMQ::SOCKOPT_RCVMORE</constant></term>
      <listitem>
       <para>Recibir mensajes multiparte (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-type">
      <term><constant>ZMQ::SOCKOPT_TYPE</constant></term>
      <listitem>
       <para>Obtener el tipo de socket. Válido para getSockOpt (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-linger">
      <term><constant>ZMQ::SOCKOPT_LINGER</constant></term>
      <listitem>
       <para>El valor de permanencia ("linger") del socket. Especifica cuánto quedará esperando el socket
       intentando volcar mensajes después de haber sido cerrado (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-backlog">
      <term><constant>ZMQ::SOCKOPT_BACKLOG</constant></term>
      <listitem>
       <para>La opción SOCKOPT_BACKLOG establece la longitud máxima de la cola de las conexiones de pares salientes para el socket especificado; esto solamente se aplica a transportes orientados a conexión. (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-maxmsgsize">
      <term><constant>ZMQ::SOCKOPT_MAXMSGSIZE</constant></term>
      <listitem>
       <para>Limita el tamaño máximo del mensaje entrante. Un valor de -1 significa sin límite. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-sndtimeo">
      <term><constant>ZMQ::SOCKOPT_SNDTIMEO</constant></term>
      <listitem>
       <para>Establecer el tiempo de espera para la operación de envío del socket. Un valor de -1 significa sin límite. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-rcvtimeo">
      <term><constant>ZMQ::SOCKOPT_RCVTIMEO</constant></term>
      <listitem>
       <para>Establecer el tiempo de espera para la operación de recepción del socket. Un valor de -1 significa sin límite. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-ipv4only">
      <term><constant>ZMQ::SOCKOPT_IPV4ONLY</constant></term>
      <listitem>
       <para>Deshabilitar el soporte para IPV6 si es 1. Disponible si se compila con ZeroMQ 3.x (Valor: &integer;)</para>
      </listitem>
     </varlistentry>    
     
     <varlistentry xml:id="zmq.constants.sockopt-last-endpoint">
      <term><constant>ZMQ::SOCKOPT_LAST_ENDPOINT</constant></term>
      <listitem>
       <para>Obtener el último extremo conectado - para emplear con puertos comodín *. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &string;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-tcp-keepalive-idle">
      <term><constant>ZMQ::SOCKOPT_TCP_KEEPALIVE_IDLE</constant></term>
      <listitem>
       <para>Tiempo de inactividad para el mensaje "keepalive" de TCP. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-tcp-keepalive-cnt">
      <term><constant>ZMQ::SOCKOPT_TCP_KEEPALIVE_CNT</constant></term>
      <listitem>
       <para>Cuante de tiempo para el mensaje "keepalive" de TCP. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-tcp-keepalive-intvl">
      <term><constant>ZMQ::SOCKOPT_TCP_KEEPALIVE_INTVL</constant></term>
      <listitem>
       <para>Intervalo para el mensaje "keepalive" de TCP. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-delay-attach-on-connect">
      <term><constant>ZMQ::SOCKOPT_DELAY_ATTACH_ON_CONNECT</constant></term>
      <listitem>
       <para>Establecer un string CIDR para comparar con conexiones TCP entrantes. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &string;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-tcp-accept-filter">
      <term><constant>ZMQ::SOCKOPT_TCP_ACCEPT_FILTER</constant></term>
      <listitem>
       <para>Establecer un string CIDR para comparar con conexioines TCP entrantes. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &string;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-xpub-verbose">
      <term><constant>ZMQ::SOCKOPT_XPUB_VERBOSE</constant></term>
      <listitem>
       <para>Establcer el XPUB para recibir un mensaje de aplicación en cada instancia de una subscripción. Disponible si se compila con ZeroMQ 3.0 o superior (Valor: &string;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-router-raw">
      <term><constant>ZMQ::SOCKOPT_ROUTER_RAW</constant></term>
      <listitem>
       <para>Establece el modo puro ("raw") del ROUTER, cuando se establece a 1. En el modo puro, al usar el transporte tcp://, el socket leerá y escribirá sin el encuadrre de ZeroMQ.
        Disponible si se compila con ZeroMQ 4.0 o superior (Valor: &string;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.sockopt-ipv6">
      <term><constant>ZMQ::SOCKOPT_IPV6</constant></term>
      <listitem>
       <para>Habilitar IPV6. Disponible si se compila con ZeroMQ 4.0 o superior (Valor: &string;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.ctxopt-max-sockets">
      <term><constant>ZMQ::CTXOPT_MAX_SOCKETS</constant></term>
      <listitem>
       <para>El límite de socket para este contexto. Disponible si se compila con ZeroMQ 3.x o superior (Valor: &integer;)</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.poll-in">
      <term><constant>ZMQ::POLL_IN</constant></term>
      <listitem>
       <para>Sondeo para datos entrantes</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.poll-out">
      <term><constant>ZMQ::POLL_OUT</constant></term>
      <listitem>
       <para>Sondeo para datos salientes</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.mode-noblock">
      <term><constant>ZMQ::MODE_NOBLOCK</constant></term>
      <listitem>
       <para>Operación de no espera. Obsoleta, emplee ZMQ::MODE_DONTWAIT en su lugar</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.mode-dontwait">
      <term><constant>ZMQ::MODE_DONTWAIT</constant></term>
      <listitem>
       <para>Operación de no espera</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.mode-sndmore">
      <term><constant>ZMQ::MODE_SNDMORE</constant></term>
      <listitem>
       <para>Enviar un mensaje multiparte</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.device-forwarder">
      <term><constant>ZMQ::DEVICE_FORWARDER</constant></term>
      <listitem>
       <para>Dispositivo reenviador</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.device-queue">
      <term><constant>ZMQ::DEVICE_QUEUE</constant></term>
      <listitem>
       <para>Dispositivo de cola</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.device-streamer">
      <term><constant>ZMQ::DEVICE_STREAMER</constant></term>
      <listitem>
       <para>Dispositivo de flujo</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.err-internal">
      <term><constant>ZMQ::ERR_INTERNAL</constant></term>
      <listitem>
       <para>Error interno de la extensión ZMQ</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.err-eagain">
      <term><constant>ZMQ::ERR_EAGAIN</constant></term>
      <listitem>
       <para>Implica que la operación debería esperar esperar cuando se emplee ZMQ::MODE_DONTWAIT</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.err-enotsup">
      <term><constant>ZMQ::ERR_ENOTSUP</constant></term>
      <listitem>
       <para>La operación no está soportada por el tipo de socket</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.err-efsm">
      <term><constant>ZMQ::ERR_EFSM</constant></term>
      <listitem>
       <para>La operación no se pudo ejecutar debido a que el socket no está en un estado correcto</para>
      </listitem>
     </varlistentry>
     
     <varlistentry xml:id="zmq.constants.err-eterm">
      <term><constant>ZMQ::ERR_ETERM</constant></term>
      <listitem>
       <para>El contexto ha sido finalizado</para>
      </listitem>
     </varlistentry>
     
    </variablelist>
   </section>
  </section>
  <!-- }}} -->
  
  
 </partintro>
 
 &reference.zmq.entities.zmq;
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
