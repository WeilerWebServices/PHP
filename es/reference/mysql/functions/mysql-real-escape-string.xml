<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337755 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<refentry xml:id="function.mysql-real-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>Escapa caracteres especiales en una cadena para su uso en una sentencia SQL</refpurpose>
 </refnamediv>
 
 <refsynopsisdiv>
  <warning>
   &mysql.alternative.note;
   <simplelist role="alternatives">
    <member><function>mysqli_real_escape_string</function></member>
    <member><methodname>PDO::quote</methodname></member>
   </simplelist>
  </warning>
 </refsynopsisdiv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mysql_real_escape_string</methodname>
   <methodparam><type>string</type><parameter>unescaped_string</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>link_identifier</parameter><initializer>NULL</initializer></methodparam>
  </methodsynopsis>
  <para>
   Escapa caracteres especiales en la cadena dada por <parameter>unescaped_string</parameter>,
   teniendo en cuenta el conjunto de caracteres en uso de la conexión, para que
   sea seguro usarla en <function>mysql_query</function>. Si se van a insertar
   datos binarios, se ha de usar esta función.
  </para>
  <para>
   <function>mysql_real_escape_string</function> llama a la función mysql_real_escape_string
   de la biblioteca de MySQL, la cual antepone barras invertidas a los siguientes caracteres:
   <literal>\x00</literal>, <literal>\n</literal>,
   <literal>\r</literal>, <literal>\</literal>, <literal>'</literal>,
   <literal>"</literal> y <literal>\x1a</literal>.
  </para>
  <para>
   Esta función siempre debe usarse (con pocas excepciones) para hacer seguros
   los datos antes de enviar una consulta a MySQL.
  </para>
  
  <caution>
   <title>Seguridad: el conjunto de caracters predeterminado</title>
   <para>
    El conjunto de caracteres debe ser establecido o bien a nivel del servidor, o bien con
    la función <function>mysql_set_charset</function> de la API para que afecte a
    <function>mysql_real_escape_string</function>. Véase la sección sobre los conceptos
    de <link linkend="mysqlinfo.concepts.charset">conjuntos de caracters</link> para
    más información.
   </para>
  </caution>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>unescaped_string</parameter></term>
     <listitem>
      <para>
       La cadena a escapar.
      </para>
     </listitem>
    </varlistentry>
    &mysql.linkid.description;
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la cadena escapada, o &false; en caso de error.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Ejecutar esta función sin una conexión de MySQL presente también
   emitirá errores de nivel <constant>E_WARNING</constant> de PHP. Solo
   se ha de ejecutar con una conexión de MySQL válida presente.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo sencillo de <function>mysql_real_escape_string</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Conexión
$enlace = mysql_connect('anfitrión_mysql', 'usuario_mysql', 'contraseña_mysql')
    OR die(mysql_error());

// Consulta
$consulta = sprintf("SELECT * FROM users WHERE user='%s' AND password='%s'",
            mysql_real_escape_string($usuario),
            mysql_real_escape_string($contraseña));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>mysql_real_escape_string</function> requiere una conexión</title>
    <para>
     Este ejemplo muestra lo que sucede si no hay presente una conexión
     de MySQL al invocar a esta función.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// No nos hemos conectado a MySQL

$apellido  = "O'Reilly";
$_apellido = mysql_real_escape_string($apellido);

$consulta = "SELECT * FROM actors WHERE last_name = '$_apellido'";

var_dump($_apellido);
var_dump($consulta);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Warning: mysql_real_escape_string(): No such file or directory in /this/test/script.php on line 5
Warning: mysql_real_escape_string(): A link to the server could not be established in /this/test/script.php on line 5

bool(false)
string(41) "SELECT * FROM actors WHERE last_name = ''"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Un ejemplo de ataque de inyección de SQL</title>
    <programlisting role="php">
<![CDATA[
<?php
// No hemos comprobado $_POST['password'], ¡podría ser cualquier cosa que el usuario quisiera! Por ejemplo:
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR ''='";

// Consultar la base de datos para comprobar si existe algún usuario que coincida
$consulta = "SELECT * FROM users WHERE user='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($consulta);

// Esto significa que la consulta enviada a MySQL sería:
echo $consulta;
?>
]]>
    </programlisting>
    <para>
     La consulta enviada a MySQL:
    </para>
    <screen>
<![CDATA[
SELECT * FROM users WHERE user='aidan' AND password='' OR ''=''
]]>
    </screen>
    <para>
     Esto permitiría a alguien acceder a una sesión sin una contraseña válida.
    </para>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Se requiere una conexión a MySQL antes de usar
    <function>mysql_real_escape_string</function>, si no, se generará
    un error de nivel <constant>E_WARNING</constant>, y se devolverá &false;. 
    Si <parameter>link_identifier</parameter> no está definido, se
    usará la última conexión a MySQL.
   </para>
  </note>
  <note>
   <para>
    Si <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> está habilitado,
    primero se ha de aplicar <function>stripslashes</function> a los datos. Si se usa esta función
    en datos que ya han sido escapados, se escaparán dos veces.
   </para>
  </note>
  <note>
   <para>
    Si esta función no se utiliza para escapar los datos, la consulta es vulnerable a
    <link linkend="security.database.sql-injection">Ataques de inyección SQL</link>.
   </para>
  </note>
  <note>
   <simpara>
    <function>mysql_real_escape_string</function> no escapa
    <literal>%</literal> ni <literal>_</literal>. Estos son comodines en
    MySQL si se combinan con <literal>LIKE</literal>, <literal>GRANT</literal>,
    o <literal>REVOKE</literal>.
   </simpara>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_set_charset</function></member>
    <member><function>mysql_client_encoding</function></member>
    <member><function>addslashes</function></member>
    <member><function>stripslashes</function></member>
    <member>La directiva <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link></member>
    <member>La directiva <link linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
