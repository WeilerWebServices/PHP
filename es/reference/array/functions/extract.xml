<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343853 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->
<refentry xml:id="function.extract" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>extract</refname>
  <refpurpose>Importar variables a la tabla de símbolos actual desde un array</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>extract</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>EXTR_OVERWRITE</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefix</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Importa variables desde un array a la tabla de símbolos actual.
  </para>
  <para>
   Comprueba cada clave para ver si tiene un nombre de variable válido. 
   También comprueba las colisiones con las variables existentes en
   la tabla de símbolos.
  </para>
  <warning>
   <para>
    No use <function>extract</function> sobre datos no confiables, como la entrada del usuario
    (p.e. <varname>$_GET</varname>, <varname>$_FILES</varname>).
   </para>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Un array asociativo. Esta función trata a las claves como nombres de variables y
       a los valores como valores de variables. Por cada par clave/valor creará una
       variable en la tabla de símbolos actual, sujeta a los 
       parámetros <parameter>flags</parameter> y <parameter>prefix</parameter>.
      </para>
      <para>
       Se debe usar un array asociativo; un array indexado numéricamente
       no producirá resultados a menos que se use <constant>EXTR_PREFIX_ALL</constant> o
       <constant>EXTR_PREFIX_INVALID</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       La manera en que las claves no-válidas/numéricas y las colisiones son tratadas está determinda
       por el parámetro <parameter>flags</parameter>. Puede ser uno de los
       valores siguientes:
       <variablelist>
        <varlistentry>
         <term><constant>EXTR_OVERWRITE</constant></term>
         <listitem>
          <simpara>
           Si hay una colisión, sobrescribe la variable existente.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_SKIP</constant></term>
         <listitem>
          <simpara>
           Si hay una colisión, no sobrescribe la variable
           existente.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_SAME</constant></term>
         <listitem>
          <simpara>Si hay una colisión, prefija el nombre de la variable con
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_ALL</constant></term>
         <listitem>
          <simpara>
           Prefija todos los nombres de variables con
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_INVALID</constant></term>
         <listitem>
          <simpara>
           Sólo prefija los nombres de variables no-válidas/numéricas con
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Sobrescribe la variable sólo si ya existe en la
           tabla de símbolos actual, de otro modo no hace nada. Esto es útil
           para definir una lista de variables válidas y después extraer
           sólo aquellas variables que se definieron fuera de
           <varname>$_REQUEST</varname>, por ejemplo.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Crea nombres de variables con prefijo sólo si la versión no prefijada
           de la misma variable existe en la tabla de símbolos actual.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_REFS</constant></term>
         <listitem>
          <simpara>
           Extrae las variables como referencias. Esto significa que los
           valores de las variables importadas están todavía referenciados por los valores del
           parámetro <parameter>array</parameter>. Se puede usar esta bandera
           por sí misma o combinarla con cualquier otra bandera usando el operador OR en
           <parameter>flags</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Si no se especifica <parameter>flags</parameter>, se asume
       que es <constant>EXTR_OVERWRITE</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       Observe que <parameter>prefix</parameter> sólo es requerido si
       <parameter>flags</parameter> es <constant>EXTR_PREFIX_SAME</constant>,
       <constant>EXTR_PREFIX_ALL</constant>, <constant>EXTR_PREFIX_INVALID</constant>
       o <constant>EXTR_PREFIX_IF_EXISTS</constant>. Si
       el resultado prefijado no es un nombre de variable válido, ésta no es
       importada a la tabla de símbolos actual. Los prefijos son separados de las
       claves del array mediante un caracter de subrayado.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el número de variables importadas con éxito a la tabla de
   símbolos.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>extract</function></title>
    <para>
     Un posible uso de <function>extract</function> es importar a la
     tabla de símbolos las variables contenidas en un array asociativo devuelto por
     <function>wddx_deserialize</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Se supone que $var_array es un array devuelto desde
   wddx_deserialize */

$tamaño = "grande";
$var_array = array("color" => "azul",
                   "tamaño"  => "medio",
                   "forma" => "esfera");
extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$color, $tamaño, $forma, $wddx_tamaño\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
azul, grande, esfera, medio
]]>
    </screen>
    <para>
     El <varname>$tamaño</varname> no se ha sobrescrito ya que se especificó
     <constant>EXTR_PREFIX_SAME</constant>, lo que resulta en
     la creación de <varname>$wddx_tamaño</varname>. Si se hubiera especificado
     <constant>EXTR_SKIP</constant>, <varname>$wddx_tamaño</varname> no se habría creado.
     <constant>EXTR_OVERWRITE</constant> causaría que <varname>$tamaño</varname> tuviera
     el valor "medio", y <constant>EXTR_PREFIX_ALL</constant> resultaría en variables nuevas
     llamadas <varname>$wddx_color</varname>,
     <varname>$wddx_tamaño</varname>, y
     <varname>$wddx_forma</varname>.
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    No use <function>extract</function> en datos que no son de confianza, como
    las entradas de usuario
    (esto es, <varname>$_GET</varname>, <varname>$_FILES</varname>, etc.).
    Si lo hace, por ejemplo si quiere ejecutar temporalmente código antiguo que
    dependía de <link linkend="security.globals">register_globals</link>
    temporalmente, asegúrese de usar uno de los valores de
    <parameter>flags</parameter> que no sobrescriban, como
    <constant>EXTR_SKIP</constant>, y sepa que debería realizar la extracción
    en el mismo orden que fue definido en
    <link linkend="ini.variables-order">variables_order</link> dentro de
    <link linkend="ini">&php.ini;</link>.
   </para>
  </warning>
  <note>
   <para>
    Si aún
    tiene <link linkend="security.globals">register_globals</link>
    y está activado, si utiliza <function>extract</function>
    en <varname>$_FILES</varname> y
    especifica <constant>EXTR_SKIP</constant>, puede obtener resutados
    no deseados.
   </para>
   <warning>
    <para>
     Esto es una práctica no recomendada y sólo está documentada aquí por razones de
     complementación. El uso de
     <link linkend="security.globals">register_globals</link> está
     obsoleto y las llamadas a <function>extract</function> en información que no es
     de confianza tal como <varname>$_FILES</varname> es, como se observó arriba, un
     riesgo potencial de seguridad. Si se encuentra con esto, significa
     que está usando al menos dos malas prácticas de código.
    </para>
   </warning>
   <programlisting role="php">
<![CDATA[
<?php

/* Se supone que $archivoprueba es el nombre de una entrada de subida de archivo
   y que register_globals está activado. */

var_dump($archivoprueba);
extract($_FILES, EXTR_SKIP);
var_dump($archivoprueba);
var_dump($archivoprueba['tmp_name']);

?>
]]>
   </programlisting>
   <simpara>
    Se esperaría ver algo como lo siguiente:
   </simpara>
   <screen>
<![CDATA[
string(14) "/tmp/phpgCCPX8"
array(5) {
  ["name"]=>
  string(10) "somefile.txt"
  ["type"]=>
  string(24) "application/octet-stream"
  ["tmp_name"]=>
  string(14) "/tmp/phpgCCPX8"
  ["error"]=>
  int(0)
  ["size"]=>
  int(4208)
}
string(14) "/tmp/phpgCCPX8"
]]>
   </screen>
   <simpara>
    Sin embargo, en su lugar se ve algo como esto:
   </simpara>
   <screen>
<![CDATA[
string(14) "/tmp/phpgCCPX8"
string(14) "/tmp/phpgCCPX8"
string(1) "/"
]]>
   </screen>
   <para>
    Esto es a causa del hecho de que,
    ya que <link linkend="security.globals">register_globals</link> está
    activado, <varname>$archivoprueba</varname> ya existe en el
    ámbito global cuando se llamó a <function>extract</function>. Y
    ya que <constant>EXTR_SKIP</constant> está
    especificado, <varname>$archivoprueba</varname> no es sobrescrito con
    el contenido del array <constant>$_FILES</constant>
    por lo que <varname>$archivoprueba</varname> permanece como cadena.
    Ya que <link linkend="language.types.string.substr">a las cadenas se puede
    acceder usando la sintaxis de array</link> y la cadena no numérica
    <literal>tmp_name</literal> es interpretada como
    <literal>0</literal>, PHP
    ve <varname>$archivoprueba['tmp_name']</varname>
    como <varname>$archivoprueba[0]</varname>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>compact</function></member>
    <member><function>list</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
