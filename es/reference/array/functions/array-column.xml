<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 346011 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<refentry xml:id="function.array-column" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_column</refname>
  <refpurpose>Devuelve los valores de una sola columna del array de entrada</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array_column</methodname>
   <methodparam><type>array</type><parameter>input</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>column_key</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>index_key</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>array_column</function> devuelve los valores de una sola columna de
   <parameter>input</parameter>, identificado por la clave de columna
   <parameter>column_key</parameter>. Opcionalmente, se
   podría proporcionar una clave de índice, <parameter>index_key</parameter>,
   para indexar los valores del array devuelto por los valores de la columna
   <parameter>index_key</parameter> del array de entrada.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>input</parameter></term>
     <listitem>
      <para>
       Un array multidimensional o un array de objetos desde el que extraer una
       columna de valores. Si se proporciona un array de objetos, entonces se podrá
       extraer directamente las propiedades públicas. Para poder extraer las proiedades
       protegidas o privadas, la clase debe implementar los métodos mágicos
       <function>__get</function> y
       <function>__isset</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>column_key</parameter></term>
     <listitem>
      <para>
       La columna de valores a devolver. Este valor podría ser una clave de tipo integer de la
       columna de la cual obtener los datos, o podría ser una clave de tipo string para un
       array asociativo o nombre de propiedad. También prodría ser &null; para devolver
       array completos u objetos (útil junto con
       <parameter>index_key</parameter> para reindexar el array).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>index_key</parameter></term>
     <listitem>
      <para>
       La columna a usar como los índices/claves para el array devuelto. Este valor
       podría ser la clave de tipo integer de la columna, o podría ser el nombre de la clave de tipo string.
       El valor es <link linkend="language.types.array.key-casts">cast</link>
       como es habitual para las claves de array (Sin embargo, también se permiten los objetos que 
       soportan la conversión a string).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un array de valores que representa una sola columna del array de entrada.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        Se añadió la capacidad de que el parámetro <parameter>input</parameter> sea
        un array de objetos.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Obtener la columna de nombres del conjunto de resultados</title>
    <programlisting role="php">
<![CDATA[
<?php
// Array representando un conjunto de registros posibles devueltos desde una base de datos
$registros = array(
    array(
        'id' => 2135,
        'nombre' => 'John',
        'apellido' => 'Doe',
    ),
    array(
        'id' => 3245,
        'nombre' => 'Sally',
        'apellido' => 'Smith',
    ),
    array(
        'id' => 5342,
        'nombre' => 'Jane',
        'apellido' => 'Jones',
    ),
    array(
        'id' => 5623,
        'nombre' => 'Peter',
        'apellido' => 'Doe',
    )
);
 
$nombres = array_column($registros, 'nombre');
print_r($nombres);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [0] => John
    [1] => Sally
    [2] => Jane
    [3] => Peter
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     Obtener la columna de apellidos del conjunto de resultados, indexada por la columna "id"
    </title>
    <programlisting role="php">
<![CDATA[
<?php
// Se emplea el array $registros del Ejemplo #1
$apellidos = array_column($registros, 'apellido', 'id');
print_r($apellidos);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [2135] => Doe
    [3245] => Smith
    [5342] => Jones
    [5623] => Doe
)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>
     Obtener la columna de nombres de usuarios de la propiedad pública "nombre_usuario" de un
     objeto
    </title>
    <programlisting role="php">
<![CDATA[
<?php

class Usuario
{
    public $nombre_usuario;

    public function __construct(string $nombre_usuario)
    {
        $this->nombre_usuario = $nombre_usuario;
    }
}

$usuarios = [
    new Usuario('usuario 1'),
    new Usuario('usuario 2'),
    new Usuario('usuario 3'),
];

print_r(array_column($usuarios, 'nombre_usuario'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [0] => usuario 1
    [1] => usuario 2
    [2] => usuario 3
)
]]>
    </screen>
    </example>
  </para>
  <para>
   <example>
    <title>
     Obtener la columna de nombres de la propiedad privada "nombre" de un objeto
     empleando el método mágico <function>__get</function>.
    </title>
    <programlisting role="php">
<![CDATA[
<?php

class Persona
{
    private $name;

    public function __construct(string $nombre)
    {
        $this->nombre = $nombre;
    }

    public function __get($prop)
    {
        return $this->$prop;
    }

    public function __isset($prop) : bool
    {
        return isset($this->$prop);
    }
}

$gente = [
    new Persona('Fred'),
    new Persona('Jane'),
    new Persona('John'),
];

print_r(array_column($gente, 'nombre'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [0] => Fred
    [1] => Jane
    [2] => John
)
]]>
    </screen>
   </example>
   Si no se proporciona <function>__isset</function>, será devuelto un array
   vacío.
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member>
     <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="&url.arraycolumn.compat;">Implementación
      del espacio de usuario recomendada para PHP menor que 5.5</link>
    </member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
