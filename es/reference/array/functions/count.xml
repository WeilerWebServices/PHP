<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 346403 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<refentry xml:id="function.count" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>count</refname>
  <refpurpose>Cuenta todos los elementos de un array o algo de un objeto</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>count</methodname>
   <methodparam><type>mixed</type><parameter>array_or_countable</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>COUNT_NORMAL</initializer></methodparam>
  </methodsynopsis>
  <para>
   Cuenta todos los elementos en un array o algo de un objeto.
  </para>
  <para>
   En objetos, si se tiene
   <link linkend="ref.spl">SPL</link> instalado, se puede enganchar a 
   <function>count</function> implementado la interfaz
   <classname>Countable</classname>. Esta interfaz tiene solamente un método,
   <methodname>Countable::count</methodname>, el cual devuelve el valor retornado por
   la función <function>count</function>.
  </para>
  <para>
   Véase la sección <link linkend="language.types.array">Array</link> del manual 
   para una explicación detallada sobre cómo se implementan
   y usan los arrays en PHP.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array_or_countable</parameter></term>
     <listitem>
      <para>
       Un array o un objeto <classname>Countable</classname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       Si el parámetro opcional <parameter>mode</parameter> está establecido a
       <constant>COUNT_RECURSIVE</constant> (o 1), <function>count</function>
       contará el array de forma recursiva. Esto es particularmente útil para
       contar todos los elementos de un array multidimensional.
      </para>
      <caution>
       <para>
        <function>count</function> puede detectar recursividad para evitar un bucle
        infinito, pero emitirá un mensaje <constant>E_WARNING</constant> cada vez que lo
        haga (en caso de que el array se contenga a sí mismo más de una vez) y devolverá una
        cuenta mayor de la que se podría esperar.
       </para>
      </caution>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el número de elementos en <parameter>array_or_countable</parameter>,
   Cuando el parámetro no es un array ni un objecto con la interfaz
   <classname>Countable</classname> implementada,
   devolverá <literal>1</literal>.
   Existe una excepción, si <parameter>array_or_countable</parameter> es &null;,
   devolverá <literal>0</literal>.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>count</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$a[0] = 1;
$a[1] = 3;
$a[2] = 5;
var_dump(count($a));

$b[0]  = 7;
$b[5]  = 9;
$b[10] = 11;
var_dump(count($b));

var_dump(count(null));

var_dump(count(false));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
int(3)
int(3)

Warning: count(): Parameter must be an array or an object that implements Countable in … on line 12 // as of PHP 7.2
int(0)

Warning: count(): Parameter must be an array or an object that implements Countable in … on line 14 // as of PHP 7.2
int(1)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo de <function>count</function> recursivo</title>
    <programlisting role="php">
<![CDATA[
<?php
$comida = array('frutas' => array('naranja', 'plátano', 'manzana'),
                'verduras' => array('zanahoria', 'col', 'guisante'));

// Cuenta recursiva
echo count($comida, COUNT_RECURSIVE); // muestra 8

// Cuenta normal
echo count($comida); // muestra 2

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.2.0</entry>
      <entry>
       <function>count</function> generará una advertencia si se pasan tipos contables
       no válido al parámetro <parameter>array_or_countable</parameter>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>is_array</function></member>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><function>strlen</function></member>
    <member><function>is_countable</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
