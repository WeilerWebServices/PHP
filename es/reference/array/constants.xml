<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341282 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<appendix xml:id="array.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants.core;
 <para>
  <variablelist>
   <varlistentry xml:id="constant.case-lower">
    <term>
     <constant>CASE_LOWER</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>CASE_LOWER</constant> junto con
      <function>array_change_key_case</function> se utiliza para convertir
      claves de array a minúsculas. Es también la constante
      predefinida para <function>array_change_key_case</function>.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.case-upper">
    <term>
     <constant>CASE_UPPER</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>CASE_UPPER</constant> junto con
      <function>array_change_key_case</function> se utiliza para convertir
      claves de array a mayúsculas.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 
 <para> Indicadores de ordenado:
  <variablelist>
   <varlistentry xml:id="constant.sort-asc">
    <term>
     <constant>SORT_ASC</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>SORT_ASC</constant> se utiliza con
      <function>array_multisort</function> para ordenar ascendentemente.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sort-desc">
    <term>
     <constant>SORT_DESC</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>SORT_DESC</constant> se utiliza con
      <function>array_multisort</function> para ordenar descendentemente.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 
 <para> Indicadores de tipo de orden: utilizadas por varias funciones de ordenación
  <variablelist>
   <varlistentry xml:id="constant.sort-regular">
    <term>
     <constant>SORT_REGULAR</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>SORT_REGULAR</constant> se utiliza para comparar elementos normalmente.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sort-numeric">
    <term>
     <constant>SORT_NUMERIC</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>SORT_NUMERIC</constant> se utiliza para comparar elementos numéricamente.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sort-string">
    <term>
     <constant>SORT_STRING</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>SORT_STRING</constant> se utiliza para comparar elementos como cadenas.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sort-locale-string">
    <term>
     <constant>SORT_LOCALE_STRING</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>SORT_LOCALE_STRING</constant> se utiliza para comparar
      elementos como cadenas, basado en la localización actual. Agregada en PHP 5.0.2.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sort-natural">
    <term>
     <constant>SORT_NATURAL</constant> 
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>SORT_NATURAL</constant> se utiliza para comparar elementos como
      cadenas utilizando "orden natural", como <function>natsort</function>. Agregado en PHP 5.4.0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.sort-flag-case">
    <term>
     <constant>SORT_FLAG_CASE</constant> 
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>SORT_FLAG_CASE</constant> puede ser combinada
      (OR binario) con
      <constant>SORT_STRING</constant> o
      <constant>SORT_NATURAL</constant> para ordenar cadenas sin diferenciar mayúsculas y minúsculas. Agregado en PHP 5.4.0.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 
 <para> Opciones de filtrado:
  <variablelist>
   <varlistentry xml:id="constant.array-filter-use-key">
    <term>
     <constant>ARRAY_FILTER_USE_KEY</constant> 
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>ARRAY_FILTER_USE_KEY</constant> se utiliza con
      <function>array_filter</function> para pasar cada clave como el primer parámetro a la llamada de retorno proporcionada.
      Agregado en PHP 5.6.0.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.array-filter-use-both">
    <term>
     <constant>ARRAY_FILTER_USE_BOTH</constant> 
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      <constant>ARRAY_FILTER_USE_BOTH</constant> se utiliza con
      <function>array_filter</function> para pasar tanto el valor como la clave a la llamada de retorno proporcionada.
      Agregado en PHP 5.6.0.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 
 <variablelist>
  <varlistentry xml:id="constant.count-normal">
   <term>
    <constant>COUNT_NORMAL</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.count-recursive">
   <term>
    <constant>COUNT_RECURSIVE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-overwrite">
   <term>
    <constant>EXTR_OVERWRITE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-skip">
   <term>
    <constant>EXTR_SKIP</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-same">
   <term>
    <constant>EXTR_PREFIX_SAME</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-all">
   <term>
    <constant>EXTR_PREFIX_ALL</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-invalid">
   <term>
    <constant>EXTR_PREFIX_INVALID</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-prefix-if-exists">
   <term>
    <constant>EXTR_PREFIX_IF_EXISTS</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-if-exists">
   <term>
    <constant>EXTR_IF_EXISTS</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.extr-refs">
   <term>
    <constant>EXTR_REFS</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
