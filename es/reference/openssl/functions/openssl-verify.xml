<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 332644 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.openssl-verify">
 <refnamediv>
  <refname>openssl_verify</refname>
  <refpurpose>Verificar una firma</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>openssl_verify</methodname>
   <methodparam><type>string</type><parameter>data</parameter></methodparam>
   <methodparam><type>string</type><parameter>signature</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>pub_key_id</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>signature_alg</parameter><initializer>OPENSSL_ALGO_SHA1</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>openssl_verify</function> verifica que la firma
   <parameter>signature</parameter> es correcta para la información
   <parameter>data</parameter> especificada usando la clave pública asociada con
   <parameter>pub_key_id</parameter>. Ésta debe ser la clave pública que se
   corresponde con la clave privada usada para firmar.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       El string de datos utilizado anteriormente para generar la firma.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>signature</parameter></term>
     <listitem>
      <para>
       Un string binario puro generado por <function>openssl_sign</function> o por medios similares
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pub_key_id</parameter></term>
     <listitem>
      <para>
       <type>resource</type> - una clave, devuelta por <function>openssl_get_publickey</function>
      </para>
      <para>
       <type>string</type> - una clave con formato PEM; p.ej., "-----BEGIN PUBLIC KEY-----
       MIIBCgK..."
      </para>     
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>signature_alg</parameter></term>
     <listitem>
      <para>
       <type>int</type> - uno de estos <link linkend="openssl.signature-algos">Algoritmos de firma</link>.
      </para>
      <para>
       <type>string</type> - un string válido devuelto por <function>openssl_get_md_methods</function>; p.ej., "sha1WithRSAEncryption" o "sha512".
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve 1 si la firma es correcta, 0 si es incorrecta, y
   -1 si se produjo un error.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.0</entry>
       <entry>
        Se añadió el parámetro <parameter>signature_alg</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>openssl_verify</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// se asume que $data y $signature contienen la información y la firma

// obtener la clave pública desde el certifiado y prepararla
$pubkeyid = openssl_pkey_get_public("file://src/openssl-0.9.6/demos/sign/cert.pem");

// especificar si la firma es correcta o no
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1) {
    echo "buena";
} elseif ($ok == 0) {
    echo "mala";
} else {
    echo "alarmante, error verificando la firma";
}
// liberar la clave de la memoria
openssl_free_key($pubkeyid);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title><function>openssl_verify</function> example</title>
    <programlisting role="php">
<![CDATA[
<?php
// datos que se quieren firmar
$datos = 'mis datos';

// crear unas claves pública y privada nuevas
$private_key_res = openssl_pkey_new(array(
    "private_key_bits" => 2048,
    "private_key_type" => OPENSSL_KEYTYPE_RSA,
));
$details = openssl_pkey_get_details($private_key_res);
$public_key_res = openssl_pkey_get_public($details['key']);

// crear la firma
openssl_sign($datos, $firma, $private_key_res, "sha1WithRSAEncryption");

// comprobar la firma
$ok = openssl_verify($datos, $firma, $public_key_res, OPENSSL_ALGO_SHA1);
if ($ok == 1) {
    echo "válida";
} elseif ($ok == 0) {
    echo "no válida";
} else {
    echo "error: ".openssl_error_string();
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>openssl_sign</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
