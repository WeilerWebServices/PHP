<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343014 Maintainer: agarzon Status: ready -->

<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.openssl-csr-sign">
 <refnamediv>
  <refname>openssl_csr_sign</refname>
  <refpurpose>Firmar una CSR con otro certificado (o autofirmar) y generar un certificado</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>openssl_csr_sign</methodname>
   <methodparam><type>mixed</type><parameter>csr</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>cacert</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>priv_key</parameter></methodparam>
   <methodparam><type>int</type><parameter>days</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>configargs</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>serial</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>openssl_csr_sign</function> genera un recurso de certificado x509
   desde la CSR dada.
  </para>
  &note.openssl.cnf;
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>csr</parameter></term>
     <listitem>
      <para>
       Una CSR previamente generada por <function>openssl_csr_new</function>.
       También puede ser la ruta de una CSR codificada con PEM cuando se especifica con
       <filename>file://ruta/a/csr</filename> o una cadena exportada generada por
       <function>openssl_csr_export</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cacert</parameter></term>
     <listitem>
      <para>
       El certificado generado será firmado por <parameter>cacert</parameter>.
       Si <parameter>cacert</parameter> es &null;, el certificado generado
       será un certificado autofirmado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>priv_key</parameter></term>
     <listitem>
      <para>
       <parameter>priv_key</parameter> es la clave privada que se corresponde con
       <parameter>cacert</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>days</parameter></term>
     <listitem>
      <para>
       <parameter>days</parameter> especifica la duración durante la cuál el
       certificado generado será válido, en días.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>configargs</parameter></term>
     <listitem>
      <para>
       Se puede ajustar la firma de la CSR mediante <parameter>configargs</parameter>.
       Véase <function>openssl_csr_new</function> para más información acerca de
       <parameter>configargs</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>serial</parameter></term>
     <listitem>
      <para>
       El número de serie opcional del certificado emitido. Si no se especifica
       será 0 por defecto.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un recurso de certificado x509 si se tuvo éxito, &false; si falló.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>openssl_csr_sign</function> - firmar una
     CSR (cómo implementar su propia AC)</title>
    <programlisting role="php">
<![CDATA[
<?php
// Asumimos que este script está establecido para recivir una CSR que ha
// sido pegada al área de texto desde otra página
$csrdata = $_POST["CSR"];

// Firmaremos la petición usando nuestro propio certificado de "autoridad
// certificadora". También puede usar cualquier certificado para firmar otro, pero
// el proceso no vale de nada a menos que el certificado de firma sea acreditado
// por el software/usuarios que tratarán con el certificado recién firmado

// Necesitamos nuestro certificado de AC y su clave privada
$cacert = "file://ruta/a/ca.crt";
$privkey = array("file://ruta/a/ca.key", "su_frase_de_contraseña");

$usercert = openssl_csr_sign($csrdata, $cacert, $privkey, 365, array('digest_alg'=>'sha256') );

// Ahora mostramos el certificado generado por lo que el ususario puede
// copiarlo y pegarlo a su configuración local (tal como un archivo
// para guardar el certificado para su servidor SSL)
openssl_x509_export($usercert, $certout);
echo $certout;

// Mostrar cualquier error que ocurra
while (($e = openssl_error_string()) !== false) {
    echo $e . "\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
