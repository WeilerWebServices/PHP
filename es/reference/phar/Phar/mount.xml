<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330543 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phar.mount" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::mount</refname>
  <refpurpose>Montar un fichero o ruta externos en una ubicación virtual dentro de un archivo phar</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier> <modifier>public</modifier> <modifier>static</modifier> <type>void</type><methodname>Phar::mount</methodname>
   <methodparam><type>string</type><parameter>pharpath</parameter></methodparam>
   <methodparam><type>string</type><parameter>externalpath</parameter></methodparam>
  </methodsynopsis>
  <para>
   Al igual que con el concepto del sistema de ficheros de Unix de montar dispositivos externos en rutas dentro del
   árbol de directorios, <function>Phar::mount</function> siempre se refiere a ficheros y directorios
   externos como si estuvieran dentro de un archivo phar. Esto perimte una potente
   abstracción tal como referirse a ficheros de configuración externos como si estuvieran
   dentro del archivo.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pharpath</parameter></term>
     <listitem>
      <para>
       La ruta interna a usar dentro del archivo phar como la ubicación de la ruta montada.
       Debe ser una ruta relativa dentro del archivo phar, y no debe existir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>externalpath</parameter></term>
     <listitem>
      <para>
       Una ruta o un URL a un fichero o directorio externo a montar dentro del archivo phar.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   No devuelve nada. Lanza una excepción de tipo <classname>PharException</classname> en caso de fallo.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lanza una excepción de tipo <classname>PharException</classname> si ocurrió algún problema al montar la ruta.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>Phar::mount</function></title>
    <para>
     El siguiente ejemplo muestra el acceso a un fichero de configuración externo como si fuera
     una ruta dentro de un archivo phar.
    </para>
    <para>
     Lo primero, el código dentro de un archivo phar:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$configuración = simplexml_load_string(file_get_contents(
    Phar::running(false) . '/config.xml'));
?>
]]>
    </programlisting>
    <para>
     Lo siguiente, el código externo utilizado para montar el fichero de configuración:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// primero se establece la asociación entre el config.xml abstracto
// y el real del disco
Phar::mount('phar://config.xml', '/home/example/config.xml');
// ahora ejecutar la aplicación
include '/ruta/a/archivo.phar';
?>
]]>
    </programlisting>
    <para>
     Otro método es poner el codigo de montaje dentro de la rutina de interoperabilidad del archivo phar.
     Aquí está un ejemplo de establecer un fichero de
     configuración predeterminado si no se especifica una configuración de usuario:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// primero se establece la asociación entre el config.xml abstracto
// y el real del disco
if (defined('EXTERNAL_CONFIG')) {
    Phar::mount('config.xml', EXTERNAL_CONFIG);
    if (file_exists(__DIR__ . '/extra_config.xml')) {
        Phar::mount('extra.xml', __DIR__ . '/extra_config.xml');
    }
} else {
    Phar::mount('config.xml', 'phar://' . __FILE__ . '/default_config.xml');
    Phar::mount('extra.xml', 'phar://' . __FILE__ . '/default_extra.xml');
}
// ahora ejecutar la aplicación
include 'phar://' . __FILE__ . '/index.php';
__HALT_COMPILER();
?>
]]>
    </programlisting>
    <para>
     ...y el código externo para cargar este archivo phar:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
define('EXTERNAL_CONFIG', '/inicio/ejemplo/config.xml');
// ahora ejecutar la aplicación
include '/ruta/a/archivo.phar';
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
