<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330543 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phar.webphar" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::webPhar</refname>
  <refpurpose>mapPhar para archivos phar basados en web. Controlador principal para aplicaciones web</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier> <modifier>public</modifier> <modifier>static</modifier> <type>void</type><methodname>Phar::webPhar</methodname>
   <methodparam choice="opt"><type>string</type><parameter>alias</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>index</parameter><initializer>"index.php"</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>f404</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>mimetypes</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>rewrites</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>Phar::mapPhar</function> para archivos phar basados en web. Este método procesa
   <varname>$_SERVER['REQUEST_URI']</varname> y direcciona una petición de un navegador
   web a un fichero interno dentro de un archivo phar. En esencia, simula
   un servidor web, direccionando las peticiones al fichero correcto, enviando las cabeceras correctas
   y procesando ficheros PHP según sea necesario. Este poderoso método es parte de lo que hace sencillo
   convertir una apliación PHP existene en un archivo phar. Combinado con
   <function>Phar::mungServer</function> y <function>Phar::interceptFileFuncs</function>,
   cualquier aplicación web se puede utilizar sin modificaciones desde un archivo phar.
  </para>
  <para>
   <function>Phar::webPhar</function> debería llamarse
   solamente desde la rutina de interoperabilidad (stub) de un archivo phar (<link linkend="phar.fileformat.stub">aquí</link>
   hay más información de lo que es una rutina de interorperabilidad).
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>alias</parameter></term>
     <listitem>
      <para>
       El alias que puede usarse en las URL <literal>phar://</literal> para
       referirse a este archivo, en vez de su ruta completa.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>index</parameter></term>
     <listitem>
      <para>
       La ubicación dentro del phar del índice de directorios.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>f404</parameter></term>
     <listitem>
      <para>
       La ubicación del script a ejecutar cuando no se encuentra el fichero. Este
       script debería mostrar las cabeceras HTTP 404 apropiadas.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>mimetypes</parameter></term>
     <listitem>
      <para>
       Un array que mapea extensiones de fichero adicionales a tipos de MIME.
       Si el mapeo predeterminado es suficiente, se ha de pasar un array vacío.
       Por omisión, estas extensiones son mapeadas a estos tipos de MIME:
       <programlisting role="php">
<![CDATA[
<?php
$mimes = array(
    'phps' => Phar::PHPS, // pasa a highlight_file()
    'c' => 'text/plain',
    'cc' => 'text/plain',
    'cpp' => 'text/plain',
    'c++' => 'text/plain',
    'dtd' => 'text/plain',
    'h' => 'text/plain',
    'log' => 'text/plain',
    'rng' => 'text/plain',
    'txt' => 'text/plain',
    'xsd' => 'text/plain',
    'php' => Phar::PHP, // procesado como PHP
    'inc' => Phar::PHP, // procesado como PHP
    'avi' => 'video/avi',
    'bmp' => 'image/bmp',
    'css' => 'text/css',
    'gif' => 'image/gif',
    'htm' => 'text/html',
    'html' => 'text/html',
    'htmls' => 'text/html',
    'ico' => 'image/x-ico',
    'jpe' => 'image/jpeg',
    'jpg' => 'image/jpeg',
    'jpeg' => 'image/jpeg',
    'js' => 'application/x-javascript',
    'midi' => 'audio/midi',
    'mid' => 'audio/midi',
    'mod' => 'audio/mod',
    'mov' => 'movie/quicktime',
    'mp3' => 'audio/mp3',
    'mpg' => 'video/mpeg',
    'mpeg' => 'video/mpeg',
    'pdf' => 'application/pdf',
    'png' => 'image/png',
    'swf' => 'application/shockwave-flash',
    'tif' => 'image/tiff',
    'tiff' => 'image/tiff',
    'wav' => 'audio/wav',
    'xbm' => 'image/xbm',
    'xml' => 'text/xml',
);
?>
        ]]>
       </programlisting>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>rewrites</parameter></term>
     <listitem>
      <para>
       A la función rewrites se le proporciona un string como único parámetro y debe devolver un <type>string</type> o &false;.
      </para>
      <para>
       Si se está utilizando fast-cgi o cgi, el parámetro pasado a la función es el valor de la
       variable <varname>$_SERVER['PATH_INFO']</varname>. De otro modo, el parámetro pasado a la función es el valor
       de la variable <varname>$_SERVER['REQUEST_URI']</varname>.
      </para>
      <para>
       Si se devuelve un string, este se usa como la ruta de fichero interno. Si se devuelve &false;, webPhar()
       enviará un código de rechazo HTTP 403.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lanza una excepción de tipo <classname>PharException</classname> cuando no se puede abrir el fichero
   interno para salida, o si se llama desde un lugar que no sea
   una rutina de interoperabilidad. Si se pasa un array no válido a
   <parameter>mimetypes</parameter> o se proporciona una llamada de retorno no válida a <parameter>rewrites</parameter>,
   se lanza una excepción de tipo <classname>UnexpectedValueException</classname>.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>Phar::webPhar</function></title>
    <para>
     Con el ejemplo siguiente, el phar creado mostrará <literal>Hola Mundo</literal>
     si uno explora <literal>/miphar.phar/index.php</literal> o
     <literal>/miphar.phar</literal>, y mostrará la fuente de
     <literal>index.phps</literal> si uno explora <literal>/miphar.phar/index.phps</literal>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// creating the phar archive:
try {
    $phar = new Phar('miphar.phar');
    $phar['index.php'] = '<?php echo "Hola Mundo"; ?>';
    $phar['index.phps'] = '<?php echo "Hola Mundo"; ?>';
    $phar->setStub('<?php
Phar::webPhar();
__HALT_COMPILER(); ?>');
} catch (Exception $e) {
    // manejar errores
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::mungServer</function></member>
    <member><function>Phar::interceptFileFuncs</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
