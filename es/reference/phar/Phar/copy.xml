<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330543 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phar.copy" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Phar::copy</refname>
  <refpurpose>Copiar un fichero interno de un archivo phar a otro fichero nuevo dentro del phar</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>Phar::copy</methodname>
   <methodparam><type>string</type><parameter>oldfile</parameter></methodparam>
   <methodparam><type>string</type><parameter>newfile</parameter></methodparam>
  </methodsynopsis>
  &phar.write;
  
  <para>
   Copia un fichero interno de un archivo phar a otro fichero nuevo dentro del phar.
   Esta es una alternativa orientada a objetos para usar <function>copy</function> con
   la envoltura de flujos phar.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>oldfile</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>newfile</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve &true; en caso de éxito, pero es más seguro encerrar la llamada al método en un
   bloque try/catch y asumir el éxito si no se lanza ninguna excepción.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lanza una excepción de tipo <classname>UnexpectedValueException</classname> si el fichero origen no
   exite, el fichero destino ya existe, el acceso a escritura está deshabilitado, la apertura de cualquiera de los
   dos ficheros falla, la lectura del fichero fuente falla, o una excepción de tipo <classname>PharException</classname>
   si la escritura de los cambios del phar falla.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>Phar::copy</function></title>
    <para>
     Este ejemplo muestra el uso de <function>Phar::copy</function> y su
     equivalente con envoltura de flujos. La principal
     diferencia entre los dos enfoques es el manejo de errores. Todos los métodos de Phar
     lanzan excepciones, mientras que la envoltura de flujos utiliza <function>trigger_error</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $phar = new Phar('miphar.phar');
    $phar['a'] = 'hola';
    $phar->copy('a', 'b');
    echo $phar['b']; // imprime "hola"
} catch (Exception $e) {
    // manejar errores
}

// el equivalente con envoltura de flujos del código de arriba.
// Se dispara E_WARNINGS en caso de error en vez de excepciones.
copy('phar://miphar.phar/a', 'phar//miphar.phar/c');
echo file_get_contents('phar://miphar.phar/c'); // imprimie "hola"
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
