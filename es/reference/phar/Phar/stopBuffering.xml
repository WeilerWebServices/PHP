<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330543 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="phar.stopbuffering">
 <refnamediv>
  <refname>Phar::stopBuffering</refname>
  <refpurpose>Detener las peticiones de escritura en buffer del archivo Phar, y guardar los cambios en disco</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>Phar::stopBuffering</methodname>
   <void/>
  </methodsynopsis>
  
  <para>
   <function>Phar::stopBuffering</function> se usa junto con el
   método <function>Phar::startBuffering</function>. <function>Phar::startBuffering</function>
   puede proporcionar un aumento significativo de rendimiento al crear o modificar un
   archivo Phar con un gran número de ficheros. Normalmente, cada vez que un fichero
   dentro de un archivo Phar es creado o modificado de alguna manera, el archivo Phar
   entero se re-creará con los cambios. De esta forma, el archivo estará
   actualizado con la actividad realizada sobre él.
  </para>
  <para>
   Sin embargo, esto puede ser innecesario al crear simplemente un nuevo archivo Phar,
   que tendría más sentido escribir el archivo entero de una vez.
   De forma similar, a menudo es necesario realizar una serie de cambios y asegurarse
   de que todos son posibles antes de hacer cualquier cambio en disco, similar al
   concepto de transacciones en bases de datos relacionales. La
   pareja de métodos <function>Phar::startBuffering</function>/<function>Phar::stopBuffering</function>
   está prevista para este propósito.
  </para>
  <para>
   La escritura en buffer de Phar es por archivo, el almacenamiento activo en buffer del
   archivo Phar <literal>foo.phar</literal> no afecta a los cambios
   hechos al archivo Phar <literal>bar.phar</literal>.
  </para>
  
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Se lanza una excepción de tipo <classname>PharException</classname> si se encontró algún problema
   volcando los cambios al disco.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>Phar::stopBuffering</function></title>
    <para>
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$p = new Phar(dirname(__FILE__) . '/nuevo_phar.phar', 0, 'nuevo_phar.phar');
$p['fichero1.txt'] = 'hola';
$p->startBuffering();
var_dump($p->getStub());
$p->setStub("<?php
function __autoload(\$clase)
{
    include 'phar://nuevo_phar.phar/' . str_replace('_', '/', \$clase) . '.php';
}
Phar::mapPhar('nuevo_phar.phar');
include 'phar://nuevo_phar.phar/incio.php';
__HALT_COMPILER();");
$p->stopBuffering();
var_dump($p->getStub());
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(24) "<?php __HALT_COMPILER();"
string(195) "<?php
function __autoload($clase)
{
    include 'phar://' . str_replace('_', '/', $clase);
}
Phar::mapPhar('nuevo_phar.phar');
include 'phar://nuevo_phar.phar/incio.php';
__HALT_COMPILER();"
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::startBuffering</function></member>
    <member><function>Phar::isBuffering</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
