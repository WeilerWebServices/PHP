<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330543 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="phar.createdefaultstub">
 <refnamediv>
  <refname>Phar::createDefaultStub</refname>
  <refpurpose>Crear una rutina de interoperabilidad específica del formato de fichero phar</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier> <modifier>public</modifier> <modifier>static</modifier> <type>string</type><methodname>Phar::createDefaultStub</methodname>
   <methodparam choice="opt"><type>string</type><parameter>indexfile</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>webindexfile</parameter></methodparam>
  </methodsynopsis>
  
  <para>
   Este método está destinado a la creación de rutinas de interoperabilidad (stubs) específicas del formato de fichero phar, y no
   está destinado a ustilizarlo con archivo phar basados en tar o zip.
  </para>
  <para>
   Los archivos Phar contienen una rutina de interoperabilidad cargadora (en inglés <literal>stub</literal>)
   escrita en PHP que se ejecuta cuando el archivo es ejecutado en el propio PHP mediante
   inclusión:
   <programlisting role="php">
<![CDATA[
<?php
include 'miphar.phar';
?>
    ]]>
   </programlisting>
   o por simple ejecución:
   <screen>
<![CDATA[
php miphar.phar
    ]]>
   </screen>
  </para>
  <para>
   Este método proporciona una manera simple y sencilla de crear una rutina de interoperabilidad que
   ejecutará un fichero inicial desde el archivo phar. Además, se pueden especificar diferentes
   ficheros para ejecutar el archivo phar desde la línea de comandos o a través
   de un servidor web. La rutina de interoperabilidad cargadora también llama a <function>Phar::interceptFileFuncs</function>
   para permitir empaquetar de manera sencilla una aplicación PHP que accede al sistema de ficheros. Si la
   extensión phar no está presente, la rutina de interoperabilidad cargadora extraerá el archivo phar
   en un directorio temporal y después operará sobre los archivos. Una función d cierre
   borra los ficheros temporales a la salida.
  </para>
  
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una cadena que contiene una rutina de interoperabildad personalizada (stub)
   que permite al archivo Phar creado funcionar con o sin la extensón Phar
   habilitada.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lanza una excepción de tipo <classname>UnexpectedValueException</classname> si cualquier parámetro es mayor
   de 400 bytes.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>Phar::createDefaultStub</function></title>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $phar = new Phar('miphar.phar');
    $phar->setStub($phar->createDefaultStub('cli.php', 'web/index.php'));
} catch (Exception $e) {
    // manejar errores
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::setStub</function></member>
    <member><function>Phar::getStub</function></member>
   </simplelist>
  </para>
 </refsect1>
 
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
