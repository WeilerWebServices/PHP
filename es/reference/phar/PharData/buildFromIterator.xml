<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 310657 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="phardata.buildfromiterator" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>PharData::buildFromIterator</refname>
  <refpurpose>Construir un archivo tar o zip desde un iterador</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>PharData::buildFromIterator</methodname>
   <methodparam><type>Iterator</type><parameter>iter</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>base_directory</parameter></methodparam>
  </methodsynopsis>
  <para>
   Rellena un archivo tar o zip desde un iterador. Están soportados dos estilos de iteradores,
   los iteradores que mapean el nombre de fichero dentro del tar/zip al nombre del fichero en disco,
   y los iteradores como DirectoryIterator que devuelven
   objetos de la clase SplFileInfo. Se requiere el segundo parámetro para los iteradores que devuelven
   objetos de la clase SplFileInfo.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Un ejemplo de <function>PharData::buildFromIterator</function> con SplFileInfo</title>
   <para>
    Para la mayoría de los archivos tar/zip, el archivo reflejará la distribución real de directorios, y
    el segundo estilo es el más útil. Por ejemplo, para crear un archivo tar/zip
    que contenga los ficheros n esta distribución de muestra de directorios:
   </para>
   <para>
    <screen>
<![CDATA[
/ruta/al/proyecto/
                 config/
                        dist.xml
                        debug.xml
                 lib/
                     fichero1.php
                     fichero2.php
                 src/
                     procesa_algo.php
                 www/
                     index.php
                 cli/
                     index.php
    ]]>
    </screen>
   </para>
   <para>
    Este código podría usarse para añadir estos ficheros al archivo tar &quot;proyecto.tar&quot;:
   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php
$phar = new PharData('proyecto.tar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new RecursiveDirectoryIterator('/ruta/al/proyecto')),
    '/ruta/al/proyecto');
?>
    ]]>
    </programlisting>
   </para>
   <para>
    El fichero <literal>project.tar</literal> se puede usar inmediatamente.  <function>PharData::buildFromIterator</function> no
    establece valores como la compresión y metainformación, que se puede hacer después de crear el
    archivo tar/zip.
   </para>
   <para>
    Como observación interesante, <function>PharData::buildFromIterator</function> también se puede usar para
    copiar el contenido de un archivo phar, tar o zip existentese, ya que los objetos de la clase PharData descienden
    de la clase <classname>DirectoryIterator</classname>:
   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php
$phar = new PharData('proyecto.tar');
$phar->buildFromIterator(
    new RecursiveIteratorIterator(
     new Phar('/ruta/a/otro_phar.phar')),
    'phar:///ruta/a/otro_phar.phar/ruta/al/proyecto');
$phar->setStub($phar->createDefaultStub('cli/index.php', 'www/index.php'));
?>
    ]]>
    </programlisting>
   </para>
  </example>
  <example>
   <title>Un ejemplo de <function>PharData::buildFromIterator</function> con otros iteradores</title>
   <para>
    La segunda forma de iterador se puede usar con cualquier iterador que devuelva
    un mapeo clave => valor, tal como un objeto de la clase <classname>ArrayIterator</classname>:
   </para>
   <para>
    <programlisting role="php">
<![CDATA[
<?php
$phar = new PharData('proyecto.tar');
$phar->buildFromIterator(
    new ArrayIterator(
     array(
        'fichero/interno.php' => dirname(__FILE__) . '/algun_fichero.php',
        'otro/fichero.jpg' => fopen('/rota/a/archivo_grande.jpg', 'rb'),
     )));
?>
    ]]>
    </programlisting>
   </para>
  </example>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>iter</parameter></term>
     <listitem>
      <para>
       Cualquier iterador que mapee de forma asociativa el fichero tar/zip a la ubiciación o
       que devuelva objetos de la clase SplFileInfo
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>base_directory</parameter></term>
     <listitem>
      <para>
       Para los iteradores que devuelven objetos de la clase SplFileInfo, es la porción de cada
       ruta completa de fichero a eliminar cuando de añada al archivo tar/zip
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>PharData::buildFromIterator</function> devuelve un array asociativo que
   que mapea la ruta interna del fichero a la ruta completa del mismo en el
   sistema de ficheros.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método lanza una excepción de tipo <classname>UnexpectedValueException</classname> cuando
   el iterador devuelve valores incorrectos, tales como una clave de tipo integer en lugar de una
   cadena, una excepción de tipo <classname>BadMethodCallException</classname> cuando se
   pasa un iterador basado en SplFileInfo sin un parámetro <parameter>base_directory</parameter>,
   o una excepción de tipo <classname>PharException</classname> si hubo errores
   al guardar el archivo phar.
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Phar::buildFromIterator</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
