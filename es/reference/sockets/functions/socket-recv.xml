<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325538 Maintainer: seros Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.socket-recv">
 <refnamediv>
  <refname>socket_recv</refname>
  <refpurpose>Recibe información desde un socket conectado</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>socket_recv</methodname>
   <methodparam><type>resource</type><parameter>socket</parameter></methodparam>
   <methodparam><type>string</type><parameter role="reference">buf</parameter></methodparam>
   <methodparam><type>int</type><parameter>len</parameter></methodparam>
   <methodparam><type>int</type><parameter>flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   La función <function>socket_recv</function> recibe
   <parameter>len</parameter> bytes de información en <parameter>buf</parameter> desde
   <parameter>socket</parameter>. <function>socket_recv</function> se puede
   usar para reunir información desde sockets conectados. Además, se pueden
   especificar una o más banderas para modificar el comportamiento de la
   función.
  </para>
  <para>
   <parameter>buf</parameter> es pasado por referencia, por lo que debe ser
   especificado como una variable en la lista de argumentos. La información leída desde
   <parameter>socket</parameter> por <function>socket_recv</function>
   será devuelta en <parameter>buf</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>socket</parameter></term>
     <listitem>
      <para>
       <parameter>socket</parameter> debe ser un recurso socket previamente
       creado por socket_create().
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>buf</parameter></term>
     <listitem>
      <para>
       La información recibida será traida a la variable especifivada por
       <parameter>buf</parameter>. Si ocurre un error, si la
       conexión es reiniciada, o si no hay información
       disponible, <parameter>buf</parameter> será establecido a &null;.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>len</parameter></term>
     <listitem>
      <para>
       Se obtendrán hasta <parameter>len</parameter> bytes desde el host remoto.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       El valor de <parameter>flags</parameter> puede ser una combinación de
       las siguientes banderas, unidas con el operador binario OR
       (<literal>|</literal>).
      </para>
      
      <table>
       <title>Valores posibles de <parameter>flags</parameter></title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Bandera</entry>
          <entry>Descripción</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>MSG_OOB</constant></entry>
          <entry>
           Procesar información fuera de banda.
          </entry>
         </row>
         <row>
          <entry><constant>MSG_PEEK</constant></entry>
          <entry>
           Recibir informaicón desde el inicio de la cola recibida sin
           eliminarla de la cola.
          </entry>
         </row>
         <row>
          <entry><constant>MSG_WAITALL</constant></entry>
          <entry>
           Bloquea hasta que al menos se reciba <parameter>len</parameter> bytes.
           Sin embargo, si se captura una señal o el host remoto se desconecta, la
           función puede devolver menos información.
          </entry>
         </row>
         <row>
          <entry><constant>MSG_DONTWAIT</constant></entry>
          <entry>
           Con esta bandera establecida, la función devuelve incluso si normalmente
           habría bloqueado.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>    
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>socket_recv</function> devuelve el número de bytes recibidos,
   o &false; si hubo un error. El código de error real se puede recuperar
   llamando a <function>socket_last_error</function>. Este código de error se puede
   pasar a <function>socket_strerror</function> para obtener una explicación textual
   del error.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>socket_recv</function></title>
    <para>
     Este ejemplo es un reescrito sencillo del primer ejemplo de
     <xref linkend="sockets.examples" /> para
     usar <function>socket_recv</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
error_reporting(E_ALL);

echo "<h2>Conexión TCP/IP</h2>\n";

/* Obtener el puerto del servicio WWW. */
$service_port = getservbyname('www', 'tcp');

/* Obtener la dirección IP del host objetivo. */
$address = gethostbyname('www.example.com');

/* Crear un socket TCP/IP. */
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
if ($socket === false) {
    echo "socket_create() falló: razón: " . socket_strerror(socket_last_error()) . "\n";
} else {
    echo "OK.\n";
}

echo "Intentando conectar a '$address' en el puerto '$service_port'...";
$result = socket_connect($socket, $address, $service_port);
if ($result === false) {
    echo "socket_connect() falló.\nRazón: ($result) " . socket_strerror(socket_last_error($socket)) . "\n";
} else {
    echo "OK.\n";
}

$in = "HEAD / HTTP/1.1\r\n";
$in .= "Host: www.example.com\r\n";
$in .= "Connection: Close\r\n\r\n";
$out = '';

echo "Enviando petición HTTP HEAD...";
socket_write($socket, $in, strlen($in));
echo "OK.\n";

echo "Leyendo la respuesta:\n\n";
$buf = 'Este es mi buffer.';
if (false !== ($bytes = socket_recv($socket, $buf, 2048, MSG_WAITALL))) {
    echo "Leídos $bytes bytes desde socket_recv(). Cerrando el socket...";
} else {
    echo "socket_recv() falló; razón: " . socket_strerror(socket_last_error($socket)) . "\n";
}
socket_close($socket);

echo $buf . "\n";
echo "OK.\n\n";
?>
]]>
    </programlisting>
    <para>
     El ejemplo de arriba producirá algo parecido a esto:
    </para>
    <screen>
<![CDATA[
<h2>Conexión TCP/IP</h2>
OK.
Intentando conectar a '208.77.188.166' en el puerto '80'...OK.
Enviando petición HTTP HEAD...OK.
Leyendo la respuesta:

Leídos 123 bytes desde socket_recv(). Cerrando el socket...HTTP/1.1 200 OK
Date: Mon, 14 Sep 2009 08:56:36 GMT
Server: Apache/2.2.3 (Red Hat)
Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT
ETag: "b80f4-1b6-80bfd280"
Accept-Ranges: bytes
Content-Length: 438
Connection: close
Content-Type: text/html; charset=UTF-8

OK.
]]>
    </screen>
   </example>
  </para>
 </refsect1>
                     
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
