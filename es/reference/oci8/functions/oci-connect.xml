<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331842 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.oci-connect" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>oci_connect</refname>
  <refpurpose>Conecta a una base de datos de Oracle</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>oci_connect</methodname>
   <methodparam><type>string</type><parameter>username</parameter></methodparam>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>connection_string</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>character_set</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>session_mode</parameter></methodparam>
  </methodsynopsis>
  <para>
   Devuelve un identificador de conexión necesario para la mayoría de las operaciones de OCI8.
  </para>
  <para>
   Véase <link linkend="oci8.connection">Manejo de conexiones</link> para obtener
   información general sobre la gestión y agrupamiento de
   conexiones.
  </para>
  <para>
   Desde PHP 5.1.2 (PECL OCI8 1.1), se puede usar <function>oci_close</function>
   para cerrar conexiones.
  </para>
  <para>
   La segunda y subsiguientes llamadas a <function>oci_connect</function>
   con los mismos parámetros devolverán el gestor de conexión devuelto
   desde la primera llamada. Esto significa que las transacciones de un gestor también
   son las de los demás gestores, ya que usan la
   <emphasis>misma</emphasis> conexión subyacente a la base de datos. Si dos
   gestores necesitan ser aislados transaccionalmente uno de otro, use
   <function>oci_new_connect</function> en su lugar.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>username</parameter></term>
     <listitem>
      <para>
       El nombre de usuario de Oracle.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       La contraseña para <parameter>username</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>connection_string</parameter></term>
     <listitem>
      &oci.db;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>character_set</parameter></term>
     <listitem>
      &oci.charset;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>session_mode</parameter></term>
     <listitem>
      &oci.sessionmode;
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un identificador de conexión, o &false; en caso de error.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Uso básico de <function>oci_connect</function> utilizando la sintaxis de Easy Connect</title>
    <programlisting role="php">
<![CDATA[
<?php

// Conectar al servicio XE (es deicr, la base de datos) en la máquina "localhost"
$conn = oci_connect('hr', 'welcome', 'localhost/XE');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT * FROM employees');
oci_execute($stid);

echo "<table border='1'>\n";
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
    echo "<tr>\n";
    foreach ($row as $item) {
        echo "    <td>" . ($item !== null ? htmlentities($item, ENT_QUOTES) : "") . "</td>\n";
    }
    echo "</tr>\n";
}
echo "</table>\n";

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Uso básico de  <function>oci_connect</function> utilizando un nombre de Network Connect</title>
    <programlisting role="php">
<![CDATA[
<?php

// Conectar a la base de datos MYDB descrita en el fichero tnsnames.ora,
// Un ejemplo de una entrada de tnsnames.ora para MYDB podría ser:
//   MYDB =
//     (DESCRIPTION =
//       (ADDRESS = (PROTOCOL = TCP)(HOST = mymachine.oracle.com)(PORT = 1521))
//       (CONNECT_DATA =
//         (SERVER = DEDICATED)
//         (SERVICE_NAME = XE)
//       )
//     )

$conn = oci_connect('hr', 'welcome', 'MYDB');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT * FROM employees');
oci_execute($stid);

echo "<table border='1'>\n";
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
    echo "<tr>\n";
    foreach ($row as $item) {
        echo "    <td>" . ($item !== null ? htmlentities($item, ENT_QUOTES) : "") . "</td>\n";
    }
    echo "</tr>\n";
}
echo "</table>\n";

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title><function>oci_connect</function> con un conjunto de caracteres explícito</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = oci_connect('hr', 'welcome', 'localhost/XE', 'AL32UTF8');
if (!$conn) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
}

$stid = oci_parse($conn, 'SELECT * FROM employees');
oci_execute($stid);

echo "<table border='1'>\n";
while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
    echo "<tr>\n";
    foreach ($row as $item) {
        echo "    <td>" . ($item !== null ? htmlentities($item, ENT_QUOTES) : "") . "</td>\n";
    }
    echo "</tr>\n";
}
echo "</table>\n";

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Usar múltiples llamadas a <function>oci_connect</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$c1 = oci_connect("hr", "welcome", 'localhost/XE');
$c2 = oci_connect("hr", "welcome", 'localhost/XE');

// $c1 y $c2 muestran el mismo id de recurso de PHP, ya que usan la
// misma conexión subyacente a la base de datos
echo "c1 is $c1<br>\n";
echo "c2 is $c2<br>\n";

function create_table($conn)
{
    $stmt = oci_parse($conn, "create table hallo (test varchar2(64))");
    oci_execute($stmt);
    echo "Created table<br>\n";
}

function drop_table($conn)
{
    $stmt = oci_parse($conn, "drop table hallo");
    oci_execute($stmt);
    echo "Dropped table<br>\n";
}

function insert_data($connname, $conn)
{
    $stmt = oci_parse($conn, "insert into hallo
              values(to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
    oci_execute($stmt, OCI_DEFAULT);
    echo "$connname inserted row without committing<br>\n";
}

function rollback($connname, $conn)
{
    oci_rollback($conn);
    echo "$connname rollback<br>\n";
}

function select_data($connname, $conn)
{
    $stmt = oci_parse($conn, "select * from hallo");
    oci_execute($stmt, OCI_DEFAULT);
    echo "$connname ----selecting<br>\n";
    while (oci_fetch($stmt)) {
        echo "    " . oci_result($stmt, "TEST") . "<br>\n";
    }
    echo "$connname ----done<br>\n";
}

create_table($c1);

insert_data('c1', $c1);   // Insertar una fila usando c1
sleep(2);                 // Dormir para mostrar una marca de tiempo diferente en la 2ª fila
insert_data('c2', $c2);   // Insertar una fila usando c2

select_data('c1', $c1);   // Son devueltas ambas inserciones
select_data('c2', $c2);   // Son devueltas ambas inserciones

rollback('c1', $c1);      // Revertir usando c1

select_data('c1', $c1);   // Ambas inserciones han sido revertidas
select_data('c2', $c2);

drop_table($c1);

// El cierre de una de las conexiones hace que la variable de PHP sea inutilizable, aunque
// se podría utilizar la otra
oci_close($c1);
echo "c1 is $c1<br>\n";
echo "c2 is $c2<br>\n";


// La salida es:
//    c1 is Resource id #5
//    c2 is Resource id #5
//    Created table
//    c1 inserted row without committing
//    c2 inserted row without committing
//    c1 ----selecting
//        09-DEC-09 12:14:43
//        09-DEC-09 12:14:45
//    c1 ----done
//    c2 ----selecting
//        09-DEC-09 12:14:43
//        09-DEC-09 12:14:45
//    c2 ----done
//    c1 rollback
//    c1 ----selecting
//    c1 ----done
//    c2 ----selecting
//    c2 ----done
//    Dropped table
//    c1 is 
//    c2 is Resource id #5

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Una instalación o configuración incorrecta de la extensión OCI8 a menudo
    se manifestará como un problema o error de conexión.
    Véase la sección <link linkend="oci8.setup">Instalación/Configuración</link> para
    obtener información sobre la solución de problemas.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>oci_pconnect</function></member>
    <member><function>oci_new_connect</function></member>
    <member><function>oci_close</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

