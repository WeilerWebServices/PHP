<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 317663 Maintainer: tatai Status: ready -->

<refentry xml:id="gearmanclient.addtaskstatus" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>GearmanClient::addTaskStatus</refname>
  <refpurpose>Añade una tarea para obtener el estado</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>GearmanTask</type><methodname>GearmanClient::addTaskStatus</methodname>
   <methodparam><type>string</type><parameter>job_handle</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">context</parameter></methodparam>
  </methodsynopsis>
  <para>
   Usado para pedir información de estado del servidor Gearman que llamará a la
   función de retorno especificada (usando el método
   <methodname>GearmanClient::setStatusCallback</methodname>).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>job_handle</parameter></term>
     <listitem>
      <para>
       Manejador de la tarea a obtener el estado
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>context</parameter></term>
     <listitem>
      <para>
       Datos a pasar en la llamada a la función de retorno para el estado,
       generalmente una referencia a un array u objeto.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un objeto <classname>GearmanTask</classname>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Monitor para el estado de finalización de múltiples tareas en segundo plano
    </title>
    <para>
     Se introduce un retardo artificial en el trabajador del ejemplo para simular
     un proceso de larga duración. Únicamente se ejecuta un trabajador para este
     ejemplo.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Creamos el objeto */
$gmclient= new GearmanClient();

/* Añadimos el servidor por defecto */
$gmclient->addServer();

/* Iniciamos varios trabajos en segundo plano y grabamos los manejadores */
$handles = array();
$handles[0] = $gmclient->doBackground("reverse", "Hello World!");
$handles[1] = $gmclient->doBackground("reverse", "!dlroW olleH");

$gmclient->setStatusCallback("reverse_status");

/* Preguntamos constantemente al servidor para ver cuándo terminan los trabajos.
/* mejor método sería usar llamadas de retorno en los eventos */
do
{
   /* Usar la variable en contexto para seguir cuántas tareas han finalizado */
   $done = 0;
   $gmclient->addTaskStatus($handles[0], &$done);
   $gmclient->addTaskStatus($handles[1], &$done);
   $gmclient->runTasks();
   echo "Done: $done\n";
   sleep(1);
}
while ($done != 2);

function reverse_status($task, $done)
{
   if (!$task->isKnown())
      $done++;
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Done: 0
Done: 0
Done: 0
Done: 0
Done: 0
Done: 0
Done: 0
Done: 0
Done: 0
Done: 0
Done: 0
Done: 0
Done: 1
Done: 1
Done: 1
Done: 1
Done: 1
Done: 1
Done: 1
Done: 1
Done: 1
Done: 1
Done: 1
Done: 1
Done: 2
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>GearmanClient::setStatusCallback</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
