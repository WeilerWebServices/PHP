<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 300101 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="ref.pdo-4d.sql4d" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQL aceptado por 4D</refname>
  <refpurpose>PDO y SQL 4D</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <para>
   4D implementa estrictamente el estándar ANSI 89, y lo cumple.
   Se recomienda encarecidamente leer la documentación de 4D SQL para aprender
   sobre los comandos que están disponibles. La URL del manual es:
   <link xlink:href="&url.4d.doc;">&url.4d.doc;</link>.
   Abajo se enumeran las características de 4D SQL: no es una lista exhaustiva,
   pero podría servir como introducción.
  </para>
  <para>
   <table>
    <title>Características de 4D SQL</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Característica</entry>
       <entry>Alternativa</entry>
       <entry>Nota</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>INTEGER</entry>
       <entry>Modificar el SQL para que utilice INT.</entry>
       <entry>INT es el tipo de entero admitido en 4Dv12.0.</entry>
      </row>
      <row>
       <entry>CHAR</entry>
       <entry>Utilizar VARCHAR en su lugar.</entry>
       <entry>No soportada en 4Dv12.0</entry>
      </row>
      <row>
       <entry>UNION</entry>
       <entry>No soportada. Realizar consultas por separado.</entry>
       <entry>No soportada en 4Dv12.0</entry>
      </row>
      <row>
       <entry>SELECT 1 + 1;</entry>
       <entry>SELECT 1 + 1 FROM _USER_SCHEMAS;</entry>
       <entry>FROM es necesario</entry>
      </row>
      <row>
       <entry>FLOAT</entry>
       <entry>Convertir el valor FLOAT a un FLOAT o STRING, con una función de SQL 4D (CAST, ROUND, TRUNC o TRUNCATE)</entry>
       <entry>No soportada en las versiones actuales del controlador PDO_4D</entry>
      </row>
      <row>
       <entry>Tipado fuerte</entry>
       <entry>Tener cuidado con la consulta SQL, o con el código de PHP que proporciona datos con tipos exigidos</entry>
       <entry>
        Se debe proporcionar el tipo correcto exigido por 4D. No se puede insertar '1' (como cadena) en una columna INTEGER.
       </entry>
      </row>
      <row>
       <entry><function>PDO::execute($fila)</function> : solamente funciona si todas las columnas de la tabla son de tipo TEXT o VARCHAR</entry>
       <entry>Utilizar sentencias preparadas y los tipos correctos.</entry>
       <entry>La extensión PDO convierte todos los valores a través de execute() a cadenas, y exige que la base de datos SQL analice los valores.</entry>
      </row>
      <row>
       <entry>SELECT NULL FROM TABLE</entry>
       <entry>No utilizar constantes NULL. Extraerlas de la tabla</entry>
       <entry>No está permitido utilizar la constante NULL el la lista de selección</entry>
      </row>
      <row>
       <entry>SELECT * FROM TABLE WHERE 1</entry>
       <entry>Utilizar WHERE 1 = 1</entry>
       <entry>No se puede utilizar una constante en una cláusula WHERE</entry>
      </row>
      <row>
       <entry>SHOW TABLES</entry>
       <entry>Utilizar tablas de sistema</entry>
       <entry>
        La lista de tablas, esquemas, índices, etc., están en estas tablas de sistema:
        <literal>_USER_TABLES</literal>,  <literal>_USER_COLUMNS</literal>,  
        <literal>_USER_INDEXES</literal>,  <literal>_USER_CONSTRAINTS</literal>,  
        <literal>_USER_IND_COLUMNS</literal>,  <literal>_USER_CONS_COLUMNS</literal>,
        y <literal>_USER_SCHEMAS</literal>.
       </entry>
      </row>
      <row>
       <entry>Delimitador de estructura de SQL</entry>
       <entry>
        Utilizar la siguiente función para proteger elementos SQL:
        function sqlEscapeElement(elem) {
        return '[' . str_replace(']',']]', $elem) . ']';
        }
       </entry>
       <entry>
        Para escapar nombres de elementos de SQL (tablas, campos, usuarios,
        grupos, esquemas, claves primarias, etc.), todo el identificador
        debe estar entre corchetes, y el corchete de cierre
        ']' debe ser doble.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

