<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: tardeenfamenor Status: ready -->
<!-- Reviewed: no -->

<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<refentry xml:id="function.db2-next-result" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_next_result</refname>
  <refpurpose>
   Solicitar el siguiente resultado de un procedimiento almacendo
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>db2_next_result</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
  </methodsynopsis>


  <para>
   Un procedimiento almacenado puede o no devolver bloques de resultados. El primer resultado devuelto  
   se maneja de la misma manera que se manejan los resultados devueltos por una sentencia SELECT normal, 
   en cambio, para extraer el segundo y los siguientes bloques de un procedimiento almacenado 
   se debe llamar a <function>db2_next_result</function> y almacenar el resultado en una
   variable de PHP.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       Una sentencia preparada devuelta por <function>db2_exec</function> o
       <function>db2_execute</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La función devuelve un nuevo recurso de sentencia que contiene el siguiente bloque de resultados si el 
   procedimiento almacenado regresa otro bloque de resultados. La función devuelve &false; si el procedimiento 
   almacenado no regresa otro resultado.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Llamando a un procedimiento almacenado que devuelve múltiples resultados</title>
    <para>
     En el siguiente ejemplo, se llama a un procedimiento almacenado que devuelve tres 
     bloques de resultados. El primer resultado se extrae directamente con el mismo 
     recurso de sentencia que invoca a la instrucción CALL, el segundo y el tercer 
     resultado se extraen con un recurso de sentencia devuelto por <function>db2_next_result</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$conn = db2_connect($database, $user, $password);

if ($conn) {
  $stmt = db2_exec($conn, 'CALL multiResults()');

  print "Fetching first result set\n";
  while ($row = db2_fetch_array($stmt)) {
    var_dump($row);
  }

  print "\nFetching second result set\n";
  $res = db2_next_result($stmt);
  if ($res) {
    while ($row = db2_fetch_array($res)) {
      var_dump($row);
    }
  }

  print "\nFetching third result set\n";
  $res2 = db2_next_result($stmt);
  if ($res2) {
    while ($row = db2_fetch_array($res2)) {
      var_dump($row);
    }
  }

  db2_close($conn);
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Fetching first result set
array(2) {
  [0]=>
  string(16) "Bubbles         "
  [1]=>
  int(3)
}
array(2) {
  [0]=>
  string(16) "Gizmo           "
  [1]=>
  int(4)
}

Fetching second result set
array(4) {
  [0]=>
  string(16) "Sweater         "
  [1]=>
  int(6)
  [2]=>
  string(5) "llama"
  [3]=>
  string(6) "150.00"
}
array(4) {
  [0]=>
  string(16) "Smarty          "
  [1]=>
  int(2)
  [2]=>
  string(5) "horse"
  [3]=>
  string(6) "350.00"
}

Fetching third result set
array(1) {
  [0]=>
  string(16) "Bubbles         "
}
array(1) {
  [0]=>
  string(16) "Gizmo           "
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>


 <!-- Use when adding See Also links
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function></function></member>
    <member>Or <link linkend="somethingelse">something else</link></member>
   </simplelist>
  </para>
 </refsect1>
 -->


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
