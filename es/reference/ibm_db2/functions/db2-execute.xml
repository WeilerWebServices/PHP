<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 300101 Maintainer: tardeenfamenor Status: ready -->
<!-- Reviewed: no -->

<!-- Generated by xml_proto.php v2.2. Found in /scripts directory of phpdoc. -->
<refentry xml:id="function.db2-execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_execute</refname>
  <refpurpose>
   Ejecutar una sentencia SQL preparada
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>db2_execute</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>parameters</parameter></methodparam>
  </methodsynopsis>


  <para>
   <function>db2_execute</function> ejecuta una sentencia SQL que ha sido 
   preparada por <function>db2_prepare</function>.
  </para>
  <para>
   Si la sentencia SQL devuelve un bloque de resultados, por ejemplo, una sentencia SELECT o una llamada 
   a un procedimiento que devuelve bloques de resultados, se puede extraer
   una fila como arreglo a partir del recurso <literal>stmt</literal> 
   usando <function>db2_fetch_assoc</function>,
   <function>db2_fetch_both</function>, o
   <function>db2_fetch_array</function>. Alternativamente, se puede usar 
   <function>db2_fetch_row</function> para mover el apuntador del resultado a la 
   siguiente fila y extraer una columna de esa fila con 
   <function>db2_result</function>.
  </para>
  <para>
   En la función <function>db2_prepare</function> se discuten brevementen las ventajas de 
   utilizar <function>db2_prepare</function> y
   <function>db2_execute</function> en lugar de <function>db2_exec</function>.
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       La sentencia preparada devuelta por <function>db2_prepare</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameters</parameter></term>
     <listitem>
      <para>
       Un arreglo de parámetros de entrada que reemplazarán a los marcadores contenidos en 
       la sentencia preparada.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Preparando y ejecutando una sentencia SQL con marcadores de parámetros</title>
    <para>
     El siguiente ejemplo prepara una sentencia INSERT que acepta cuatro 
     marcadores de parámetros, después la ejecuta con <function>db2_execute</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$pet = array(0, 'cat', 'Pook', 3.2);

$insert = 'INSERT INTO animals (id, breed, name, weight)
    VALUES (?, ?, ?, ?)';

$stmt = db2_prepare($conn, $insert);
if ($stmt) {
    $result = db2_execute($stmt, $pet);
    if ($result) {
        print "Successfully added new pet.";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Successfully added new pet.
]]>
    </screen>
   </example>
   <example>
    <title>Llamando a un procedimiento almacenado con un parámetro OUT</title>
    <para>
     El siguiente ejemplo prepara una sentencia CALL que acepta un  
     marcador de parámetro que representa al parámetro OUT, enlaza la variable de PHP 
     <literal>$my_pets</literal> al parámetro utilizando 
     <function>db2_bind_param</function>, después utiliza 
     <function>db2_execute</function> para ejecutar la sentencia CALL. Después de que 
     la llamada al procedimiento almacenado se ha hecho, el valor de 
     <literal>$num_pets</literal> se actualiza con el valor devuelto por el procedimiento 
     almacenado para ese parámetro OUT.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$num_pets = 0;
$res = db2_prepare($conn, "CALL count_my_pets(?)");
$rc = db2_bind_param($res, 1, "num_pets", DB2_PARAM_OUT);
$rc = db2_execute($res);
print "I have $num_pets pets!";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
I have 7 pets!
]]>
    </screen>
   </example>
   <example>
    <title>Devolviendo datos XML como resultado SQL</title>
    <para>
     El siguiente ejemplo demuestra como trabajar con documentos almacenados  
     en una columna XML usando la base de datos SAMPLE. Por medio de SQL/XML, 
     este ejemplo devuelve algunos nodos en un documento XML contendos en  
     un resultado SQL.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = 'SELECT * FROM XMLTABLE(
    XMLNAMESPACES (DEFAULT \'http://posample.org\'),
    \'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
    COLUMNS
    "CID" VARCHAR (50) PATH \'@Cid\',
    "NAME" VARCHAR (50) PATH \'name\',
    "PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
    ) AS T
    WHERE NAME = ?
    ';

$stmt = db2_prepare($conn, $query);

$name = 'Kathy Smith';

if ($stmt) {
    db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_object($stmt)){
    printf("$row->CID     $row->NAME     $row->PHONE\n");
    }
}
db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1000     Kathy Smith     416-555-1358
1001     Kathy Smith     905-555-7258
]]>
    </screen>
   </example>
   <example>
    <title>Ejecutando un "JOIN" con datos XML</title>
    <para>
     El siguiente ejemplo funciona con documentos almacenados en dos diferentes  
     columnas XML en la base de datos SAMPLE. Crea dos tablas temporales  
     de los documentos XML de las dos columnas y devuelve  
     un resultado SQL con información acerca del estado de compra de un cliente.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT A.CID, A.NAME, A.PHONE, C.PONUM, C.STATUS
FROM
XMLTABLE(
XMLNAMESPACES (DEFAULT \'http://posample.org\'),
\'db2-fn:xmlcolumn("CUSTOMER.INFO")/customerinfo\'
COLUMNS
"CID" BIGINT PATH \'@Cid\',
"NAME" VARCHAR (50) PATH \'name\',
"PHONE" VARCHAR (50) PATH \'phone [ @type = "work"]\'
) as A,
PURCHASEORDER AS B,
XMLTABLE (
XMLNAMESPACES (DEFAULT \'http://posample.org\'),
\'db2-fn:xmlcolumn("PURCHASEORDER.PORDER")/PurchaseOrder\'
COLUMNS
"PONUM"  BIGINT PATH \'@PoNum\',
"STATUS" VARCHAR (50) PATH \'@Status\'
) as C
WHERE A.CID = B.CUSTID AND
    B.POID = C.PONUM AND
    A.NAME = ?
';

$stmt = db2_prepare($conn, $query);

$name = 'Kathy Smith';

if ($stmt) {
    db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_object($stmt)){
    printf("$row->CID     $row->NAME     $row->PHONE     $row->PONUM     $row->STATUS\n");
    }
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
1001     Kathy Smith     905-555-7258     5002     Shipped
]]>
    </screen>
   </example>
   <example>
    <title>Devolviendo datos SQL como parte un documento XML más extenso</title>
    <para>
     El siguiente ejemplo trabaja con una parte de los documentos PRODUCT.DESCRIPTION 
     en la base de datos SAMPLE. Crea un documento XML que contiene  
     descripciones del producto (datos XML) y precios (datos SQL).
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$conn = db2_connect("SAMPLE", "db2inst1", "ibmdb2");

$query = '
SELECT
XMLSERIALIZE(
XMLQUERY(\'
    declare boundary-space strip;
    declare default element namespace "http://posample.org";
    <promoList> {
    for $prod in $doc/product
    where $prod/description/price < 10.00
    order by $prod/description/price ascending
    return(
        <promoitem> {
        $prod,
        <startdate> {$start} </startdate>,
        <enddate> {$end} </enddate>,
        <promoprice> {$promo} </promoprice>
            } </promoitem>
    )
    } </promoList>
\' passing by ref DESCRIPTION AS "doc",
PROMOSTART as "start",
PROMOEND as "end",
PROMOPRICE as "promo"
RETURNING SEQUENCE)
AS CLOB (32000))
AS NEW_PRODUCT_INFO
FROM PRODUCT
WHERE PID = ?
';

$stmt = db2_prepare($conn, $query);

$pid = "100-100-01";

if ($stmt) {
    db2_bind_param($stmt, 1, "pid", DB2_PARAM_IN);
    db2_execute($stmt);

    while($row = db2_fetch_array($stmt)){
    printf("$row[0]\n");
    }
}

db2_close($conn);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<promoList xmlns="http://posample.org">
    <promoitem>
    <product pid="100-100-01">
        <description>
            <name>Snow Shovel, Basic 22 inch</name>
            <details>Basic Snow Shovel, 22 inches wide, straight handle with D-Grip</details>
            <price>9.99</price>
            <weight>1 kg</weight>
        </description>
    </product>
    <startdate>2004-11-19</startdate>
    <enddate>2004-12-19</enddate>
    <promoprice>7.25</promoprice>
    </promoitem>
</promoList>
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_exec</function></member>
    <member><function>db2_fetch_array</function></member>
    <member><function>db2_fetch_assoc</function></member>
    <member><function>db2_fetch_both</function></member>
    <member><function>db2_fetch_row</function></member>
    <member><function>db2_prepare</function></member>
    <member><function>db2_result</function></member>
   </simplelist>
  </para>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
