<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 322055 Maintainer: jesusruiz Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="rararchive.setallowbroken" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>RarArchive::setAllowBroken</refname>
  <refpurpose>Determina si la apertura de archivos dañados se permite</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop; (method):</para>
   <methodsynopsis>
    <modifier>public</modifier> <type>bool</type><methodname>RarArchive::setAllowBroken</methodname>
    <methodparam><type>bool</type><parameter>allow_broken</parameter></methodparam>
   </methodsynopsis>
  <para>&style.procedural;:</para>
  <methodsynopsis>
   <type>bool</type><methodname>rar_allow_broken_set</methodname>
   <methodparam><type>RarArchive</type><parameter>rarfile</parameter></methodparam>
   <methodparam><type>bool</type><parameter>allow_broken</parameter></methodparam>
  </methodsynopsis>
  <para>
   Este método determina si los archivos dañados pueden ser leidos o todas las operaciones que
   intenten extraer el archivo de las entradas producirán un error. Los archivos rotos son archivos para
   los cuales ningún error es detectado cuando el archivo es abierto pero un error se produce cuando leemos
   las entradas.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>rarfile</parameter></term>
     <listitem>
      <para>
       Un objeto <type>RarArchive</type>, abierto con <function>rar_open</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>allow_broken</parameter></term>
     <listitem>
      <para>
       Determina si se permite la lectura de archivos dañados (&true;) o no (&false;).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve &true; &return.falseforfailure;. Sólo se producirá un error si el archivo 
   ya fue cerrado.
  </para>
 </refsect1>
 
  <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>&style.oop;</title>
    <programlisting role="php">
<![CDATA[
<?php
function retnull() { return null; }
$file = dirname(__FILE__) . "/multi_broken.part1.rar";
/* El tercer argumento omite el mensaje "volumen no encontrado" */
$a = RarArchive::open($file, null, 'retnull');
$a->setAllowBroken(true);
foreach ($a->getEntries() as $e) {
    echo "$e\n";
}
var_dump(count($a));
?>
]]>
     </programlisting>
     &example.outputs.similar;
     <screen>
<![CDATA[
RarEntry for file "file1.txt" (52b28202)
int(1)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>&style.procedural;</title>
    <programlisting role="php">
<![CDATA[
<?php
function retnull() { return null; }
$file = dirname(__FILE__) . "/multi_broken.part1.rar";
/* El tercer argumento omite el mensaje "volumen no encontrado" */
$a = rar_open($file, null, 'retnull');
rar_allow_broken_set($a, true);
foreach (rar_list($a) as $e) {
    echo "$e\n";
}
var_dump(count($a));
?>
]]>
     </programlisting>
   </example>
  </para>
 </refsect1>

  <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>RarArchive::isBroken</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
