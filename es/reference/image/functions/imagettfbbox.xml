<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 344605 Maintainer: andresdzphp Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<refentry xml:id="function.imagettfbbox" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>imagettfbbox</refname>
  <refpurpose>Devuelve la caja circundante de un texto usando fuentes TrueType</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>imagettfbbox</methodname>
   <methodparam><type>float</type><parameter>size</parameter></methodparam>
   <methodparam><type>float</type><parameter>angle</parameter></methodparam>
   <methodparam><type>string</type><parameter>fontfile</parameter></methodparam>
   <methodparam><type>string</type><parameter>text</parameter></methodparam>
  </methodsynopsis>
  <para>
   Esta función calcula y devuelve la caja circundante en píxeles
   de un texto TrueType.
  </para>
  <note>
   <para>
    <function>imageftbbox</function> es una variante extendida de
    <function>imagettfbbox</function> que además soporta el
    <parameter>extrainfo</parameter>.
   </para>
  </note>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>size</parameter></term>
     <listitem>
      <para>&gd.font.size;</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>angle</parameter></term>
     <listitem>
      <para>
       El ángulo en grados en el que <parameter>text</parameter> será medido.
      </para>
     </listitem>
    </varlistentry>
    &gd.ttf.fontfile;
    <varlistentry>
     <term><parameter>text</parameter></term>
     <listitem>
      <para>
       El string a ser medido.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>imagettfbbox</function> devuelve un array con 8
   elementos que representan cuatro puntos que hacen la caja circundante del
   texto si se tiene éxito y &false; en caso de error.
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>key</entry>
       <entry>contents</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>0</entry>
       <entry>esquina inferior izquierda, posición X</entry>
      </row>
      <row>
       <entry>1</entry>
       <entry>esquina inferior izquierda, posición Y</entry>
      </row>
      <row>
       <entry>2</entry>
       <entry>esquina inferior derecha, posición X</entry>
      </row>
      <row>
       <entry>3</entry>
       <entry>esquina inferior derecha, posición Y</entry>
      </row>
      <row>
       <entry>4</entry>
       <entry>esquina superior derecha, posición X</entry>
      </row>
      <row>
       <entry>5</entry>
       <entry>esquina superior derecha, posición Y</entry>
      </row>
      <row>
       <entry>6</entry>
       <entry>esquina superior izquierda, posición X</entry>
      </row>
      <row>
       <entry>7</entry>
       <entry>esquina superior izquierda posición Y</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
  <para>
   Los puntos son relativos a <emphasis>text</emphasis> sin importar el ángulo
   <parameter>angle</parameter>, por lo que "superior izquierda" significa la esquina superior
   izquierda, viendo el texto horizontalmente.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>imagettfbbox</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Crear una imagen de 300x150
$im = imagecreatetruecolor(300, 150);
$negro = imagecolorallocate($im, 0, 0, 0);
$blanco = imagecolorallocate($im, 255, 255, 255);

// Establecer el fondo a blanco
imagefilledrectangle($im, 0, 0, 299, 299, $blanco);

// Ruta de nuestro archivo de fuente
$fuente = './arial.ttf';

// Primero creamos nuestra caja circundante para nuestro primer texto
$bbox = imagettfbbox(10, 45, $fuente, 'Powered by PHP ' . phpversion());

// Estas son nuestras coordenadas para X e Y
$x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) - 25;
$y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;

// Escribirlo
imagettftext($im, 10, 45, $x, $y, $negro, $fuente, 'Powered by PHP ' . phpversion());

// Crear la siguiente caja circundante para el segundo texto
$bbox = imagettfbbox(10, 45, $fuente, 'and Zend Engine ' . zend_version());

// Establecer las coordenadas para que esté a continuación del primer texto
$x = $bbox[0] + (imagesx($im) / 2) - ($bbox[4] / 2) + 10;
$y = $bbox[1] + (imagesy($im) / 2) - ($bbox[5] / 2) - 5;

// Escribirlo
imagettftext($im, 10, 45, $x, $y, $negro, $fuente, 'and Zend Engine ' . zend_version());

// Imprimir al navegador
header('Content-Type: image/png');

imagepng($im);
imagedestroy($im);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  &note.freetype;
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>imagettftext</function></member>
    <member><function>imageftbbox</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
