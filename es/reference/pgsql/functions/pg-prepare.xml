<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343888 Maintainer: andresdzphp Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->
<!-- splitted from ./en/functions/pgsql.xml, last change in rev 1.2 -->
<refentry xml:id="function.pg-prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_prepare</refname>
  <refpurpose> Envía una solicitud para crear una sentencia preparada con los parámetros
    dados, y espera que se complete</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>pg_prepare</methodname>
   <methodparam choice="opt"><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>stmtname</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
    <function>pg_prepare</function> crea una sentencia preparada para la ejecución posterior con 
    <function>pg_execute</function> o <function>pg_send_execute</function>. 
    Esta característica permite que los comandos que se utilizarán repetidamente se 
    analicen y se planifiquen sólo una vez, en lugar de cada vez que se ejecuten. 
    <function>pg_prepare</function> Está soportado sólo para conexiones de PostgreSQL 7.4 o
    superior; fallará al usar versiones anteriores.
  </para>
  <para>
    La función crea una sentencia preparada denominada <parameter>stmtname</parameter> desde la cadena 
    <parameter>query</parameter>, que debe contener un único comando SQL. <parameter>stmtname</parameter> puede 
    ser "" para crear una sentencia sin nombre, en cuyo caso se sustituye automáticamente cualquier sentencia 
    sin nombre preexistente; de lo contrario, es un error si el nombre de la sentencia ya está definido 
    en la sesión actual. Si se utilizan parámetros, se refieren al <parameter>query</parameter> como $1, $2, etc. 
  </para>
  <para>
    Las sentencias preparadas para su uso con <function>pg_prepare</function> también se pueden crear 
    ejecutando sentencias SQL <literal>PREPARE</literal>. (Pero <function>pg_prepare</function> es más flexible, ya que no 
    requiere preespecificar los tipos de parámetros.) Además, aunque no existe ninguna 
    función PHP para borrar una sentencia preparada, la sentencia SQL <literal>DEALLOCATE</literal>
    puede utilizarse para ese propósito.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       Recurso de conexión a una base de datos de PostgreSQL. Cuando 
       <parameter>connection</parameter> no está presente, se utilizará la conexión 
       predeterminada. Esta es la última conexión realizada por 
       <function>pg_connect</function> o <function>pg_pconnect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>stmtname</parameter></term>
     <listitem>
      <para>
       El nombre para dar la declaración preparada. Debe ser una conexión única. Si
       se especifica como "",  entonces se crea una declaración sin nombre, sobrescribiendo cualquier
       declaración sin nombre previamente definida.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       La declaración SQL parametrizada. Debe contener una sola declaración.
       (No se permiten las declaraciones múltiples separadas por punto y coma). Si se utiliza algún 
       parámetro, se denominan $1, $2, etc.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un recurso de consulta en caso de éxito&return.falseforfailure;.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Usando <function>pg_prepare</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Conéctese a una base de datos llamada "mary"
$dbconn = pg_connect("dbname=mary");

// Preparar una consulta para la ejecución
$result = pg_prepare($dbconn, "my_query", 'SELECT * FROM shops WHERE name = $1');

// Ejecute la consulta preparada. Tenga en cuenta que no es necesario escapar
// el string "Joe's Widgets" de cualquier manera
$result = pg_execute($dbconn, "my_query", array("Joe's Widgets"));

// Ejecutar la misma consulta preparada, esta vez con un parámetro diferente
$result = pg_execute($dbconn, "my_query", array("Clothes Clothes Clothes"));

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_execute</function></member>
    <member><function>pg_send_execute</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
