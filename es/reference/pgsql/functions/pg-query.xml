<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331237 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->
<!-- splitted from ./en/functions/pgsql.xml, last change in rev 1.2 -->
<refentry xml:id="function.pg-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pg_query</refname>
  <refpurpose>Ejecutar una consulta</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>pg_query</methodname>
   <methodparam choice="opt"><type>resource</type><parameter>connection</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>pg_query</function> ejecuta la consulta dada por <parameter>query</parameter>
   en la conexión a la base de datos especificada por <parameter>connection</parameter>.
   En la mayoría de los casos, es preferible utilizar
   <function>pg_query_params</function>.
  </para>
  <para>
   Si ocurre un error y se devuelve &false;, se pueden recuperara los detalles
   de este error con la función <function>pg_last_error</function>
   si la conexión es válida.
  </para>
  <para>
   <note>
    <simpara>
     Aunque se puede omitir <parameter>connection</parameter>,
     no se recomienda debido a que puede ser difícil encontrar
     errores en scripts.
    </simpara>
   </note>
  </para>
  <note>
   <para>
    Esta función se solía llamar <function>pg_exec</function>.
    <function>pg_exec</function> aún está disponible por
    compatibilidad, aunque se recomienda utilizar en nuevo nombre.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>connection</parameter></term>
     <listitem>
      <para>
       Recurso de conexión a una base de datos de PostgreSQL. Cuando
       <parameter>connection</parameter> no está presente, se utilizará la
       conexión predeterminada. Esta es la última conexión realizada por 
       <function>pg_connect</function> o <function>pg_pconnect</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       La sentencia o sentencias SQL a ejecutar. Cuando se pasan varias sentencias a la función,
       automáticamente se ejecutan como una sola transacción, a menos que haya comandos BEGIN/COMMIT explícitos
       incluidos en la cadena de consulta. Sin embargo, no se recomiendo el uso de varias transacciones en una llamada a la función.
      </para>
      <warning>
       <para>
        La interpolación de datos proporcionados por el usuario es extremadamente peligrosa y
        probablemente lleve a vulnerabilidades de <link linkend="security.database.sql-injection">
        inyecciones SQL</link>. En la mayoría de los casos
        es preferible el uso de <function>pg_query_params</function>, pasando
        los valores proporcionados por el usuario como parámetros en lugar de sustituirlos
        en la cadena de consulta.
       </para>
       <para>
        Cualquier dato proporcionado por el usuario sustituido directamente en una cadena de consulta debe
        ser <link linkend="function.pg-escape-string">escapado adecuadamente</link>.
       </para>
      </warning>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un recurso de resultados de consulta en caso de éxtio &return.falseforfailure;.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>pg_query</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = pg_pconnect("dbname=publisher");
if (!$conn) {
  echo "Ocurrió un error.\n";
  exit;
}

$result = pg_query($conn, "SELECT author, email FROM authors");
if (!$result) {
  echo "Ocurrió un error.\n";
  exit;
}

while ($row = pg_fetch_row($result)) {
  echo "Author: $row[0]  E-mail: $row[1]";
  echo "<br />\n";
}
 
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Uso de <function>pg_query</function> con varias sentencias</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = pg_pconnect("dbname=publisher");

// estas sentencias se ejecutarán como una sola transacción

$query = "UPDATE authors SET author=UPPER(author) WHERE id=1;";
$query .= "UPDATE authors SET author=LOWER(author) WHERE id=2;";
$query .= "UPDATE authors SET author=NULL WHERE id=3;";

pg_query($conn, $query);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_connect</function></member>
    <member><function>pg_pconnect</function></member>
    <member><function>pg_fetch_array</function></member>
    <member><function>pg_fetch_object</function></member>
    <member><function>pg_num_rows</function></member>
    <member><function>pg_affected_rows</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
