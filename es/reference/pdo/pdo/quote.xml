<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330543 Maintainer: alejandrorodas Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<refentry xml:id="pdo.quote" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::quote</refname>
  <refpurpose>
   Entrecomilla una cadena de caracteres para usarla en una consulta
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>string</type><methodname>PDO::quote</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>parameter_type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
  </methodsynopsis>
  
  <para>
   <function>PDO::quote</function> entrecomilla el string de entrada (si fuera
   necesario) y escapa los caracteres especiales contenidos en dicho string, usando
   un estilo de entrecomillado apropiado para el controlador subyacente.
  </para>
  <para>
   Si se usa esta función para construir sentencias SQL, se
   recomienda <emphasis>encarecidamente</emphasis> usar
   <function>PDO::prepare</function> para preparar sentencias SQL con
   los parámetros vinculados en vez de usar <function>PDO::quote</function> para interpolar
   entradas del usuario en una consulta SQL. Las sentencias preparadas con parámetros vinculados
   no son sólo más portables, más convenientes, e inmunes a inyecciones SQL, sino que
   son mucho más rápidas de ejecutar que las consultas interpoladas, ya que tanto el lado del
   servidor como el del cliente pueden almacenar en caché una forma compilada de la consulta.
  </para>
  <para>
   No todos los controladores de PDO implementan este método (como ejemplo notable, PDO_ODBC).
   En su lugar, se ha de considerar el uso de sentencias preparadas.
  </para>
  <caution>
   <title>Seguridad: el conjunto de caracteres predeterminado</title>
   <para>
    El conjunto de caracteres debe establecerse o bien al nivel del servidor, o dentro de la
    misma conexión a la base de datos (dependiendo del controlador) para que afecte a
    <methodname>PDO::quote</methodname>. Véase la <link linkend="pdo.drivers">documentación específica
    del controlador</link> para más información.
   </para>
  </caution>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La cadena de caracteres a entrecomillar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameter_type</parameter></term>
     <listitem>
      <para>
       Proporciona una declaración de tipo de datos para los controladores que tengan 
       un estilo de entrecomillado alternativo.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un string entrecomillado teóricamente seguro para pasarlo a una
   sentencia SQL. Devuelve &false; si el controlador no soporta el entrecomillado
   en esta forma.
  </para>
 </refsect1>
 
 <!-- Use when ERRORS exist
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   When does this function throw E_* level errors, or exceptions?
  </para>
 </refsect1>
 -->
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Entrecomillar una cadena de caracteres normal</title>
    <programlisting role="php">
<![CDATA[
<?php
$conexión = new PDO('sqlite:/home/lynn/music.sql3');

/* Cadena simple */
$cadena = 'Agradable';
print "Cadena sin entrecomillar: $cadena\n";
print "Cadena entrecomillada: " . $conexión->quote($cadena) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Cadena sin entrecomillar: Agradable
Cadena entrecomillada: 'Agradable'
]]>
    </screen>
   </example>
   <example>
    <title>Entrecomillar una cadena peligrosa</title>
    <programlisting role="php">
<![CDATA[
<?php
$conexión = new PDO('sqlite:/home/lynn/music.sql3');

/* Cadena peligrosa */
$cadena = 'Cadena \' desagradable';
print "Cadena sin entrecomillar: $cadena\n";
print "Cadena entrecomillada:" . $conexión->quote($cadena) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Cadena sin entrecomillar: Cadena ' desagradable
Cadena entrecomillada: 'Cadena '' desagradable'
]]>
    </screen>
   </example>
   <example>
    <title>Entrecomillar una cadena compleja</title>
    <programlisting role="php">
<![CDATA[
<?php
$conexión = new PDO('sqlite:/home/lynn/music.sql3');

/* Cadena compleja */
$cadena = "Ca'de''na \"co'\"mpleja";
print "Cadena sin entrecomillar: $cadena\n";
print "Cadena entrecomillada: " . $conexión->quote($cadena) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Cadena sin entrecomillar: Ca'de''na "co'"mpleja
Cadena entrecomillada: 'Ca''de''''na "co''"mpleja'
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
