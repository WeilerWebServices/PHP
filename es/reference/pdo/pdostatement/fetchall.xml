<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337242 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.fetchall" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetchAll</refname>
  <refpurpose>
   Devuelve un array que contiene todas las filas del conjunto de resultados
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>PDOStatement::fetchAll</methodname>
   <methodparam choice="opt"><type>int</type><parameter>fetch_style</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>fetch_argument</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>ctor_args</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>fetch_style</parameter></term>
     <listitem>
      <para>
       Controla el contenido del array devuelto, tal como está documentado en
       <function>PDOStatement::fetch</function>.
       El valor predeterminado es <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant>
       (el cual por defecto es <constant>PDO::FETCH_BOTH</constant>).
      </para>
      <para>
       Para devolver un array que contenga todos los valores de una única columna del
       conjunto de resultados, se debe especificar <constant>PDO::FETCH_COLUMN</constant>.
       Se puede especificar qué columna se desea obtener con el parámetro
       <parameter>fetch_argument</parameter>.
      </para>
      <para>
       Para obtener solamente los valores únicos de una sola columna del conjunto de resultados,
       se ha de realizar un OR a nivel de bits de <constant>PDO::FETCH_COLUMN</constant> con
       <constant>PDO::FETCH_UNIQUE</constant>.
      </para>
      <para>
       Para devolver un array asociativo agrupado según los valores de una columna
       especificada, se ha de realilar un OR a nivel de bits de
       <constant>PDO::FETCH_COLUMN</constant> con <constant>PDO::FETCH_GROUP</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>fetch_argument</parameter></term>
     <listitem>
      <para>
       Este argumento tiene un significado diferente dependiendo del valor del
       parámetro <parameter>fetch_style</parameter>:
       <itemizedlist>
        <listitem>
         <para>
          <constant>PDO::FETCH_COLUMN</constant>: Devuelve la columna con el índice
          indicado basado en 0.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_CLASS</constant>: Devuelve instancias de la clase especificada,
          haciendo corresponder las columnas de cada fila con las propiedades con nombre de la clase.
         </para>
        </listitem>
        <listitem>
         <para>
          <constant>PDO::FETCH_FUNC</constant>: Devuelve el resultado de llamar a
          la función especificada, usando cada columna de fila como parámetro de la llamada.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ctor_args</parameter></term>
     <listitem>
      <para>
       Los argumentos del constructor de la case cuando el parámetro
       <parameter>fetch_style</parameter> es <constant>PDO::FETCH_CLASS</constant>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>PDOStatement::fetchAll</function> devuelve un array que contiene
   todas las filas restantes del conjunto de resultados. El array representa cada
   fila como un array con valores de las columnas, o como un objeto con propiedades
   correspondientes a cada nombre de columna. Es devuelto un array vacío si hay
   cero resultados que obtener, o &false; en caso de fallo.
  </para>
  <para>
   Usar este método para obtener conjuntos de resultados grandes dará como resultado una
   fuerte demanda del sistema y, posiblemente, de los recursos de red. En lugar de recuperar
   todos los datos y manipularlos en PHP, considérese usar el servidor de bases
   de datos para manipular los conjuntos de resultados. Por ejemplo, se pueden usar las cláusulas
   WHERE y ORDER BY en sentencias SQL para restringir el resultado antes de recuperarlos y
   procesarlos con PHP.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Obtener todas las filas restantes de un conjunto de resultados</title>
    <programlisting role="php">
<![CDATA[
<?php
$gsent = $gbd->prepare("SELECT name, colour FROM fruit");
$gsent->execute();

/* Obtener todas las filas restantes del conjunto de resultados */
print("Obtener todas las filas restantes del conjunto de resultados:\n");
$resultado = $gsent->fetchAll();
print_r($resultado);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Obtener todas las filas restantes del conjunto de resultados:
Array
(
    [0] => Array
        (
            [name] => pear
            [0] => pear
            [colour] => green
            [1] => green
        )

    [1] => Array
        (
            [name] => watermelon
            [0] => watermelon
            [colour] => pink
            [1] => pink
        )

)
]]>
    </screen>
   </example>
   <example><title>Obtener todos los valores de una única columna de un conjunto de resultados</title>
    <para>
     El siguiente ejemplo demuestra cómo devolver todos los valores de una
     única columna de un conjunto de resultados, incluso si la sentencia SQL
     podría devolver múltiples columnas por cada fila.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$gsent = $gbd->prepare("SELECT name, colour FROM fruit");
$gsent->execute();

/* Obtener todos los valores de la primera columna */
$resultado = $gsent->fetchAll(PDO::FETCH_COLUMN, 0);
var_dump($resultado);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array(3)
(
    [0] =>
    string(5) => apple
    [1] =>
    string(4) => pear
    [2] =>
    string(10) => watermelon
)
]]>
    </screen>
   </example>
   <example><title>Agrupar todos los valores según una única columna</title>
    <para>
     El siguiente ejemplo demuestra cómo devolver un array asociativo
     agrupado según los valores de la columna especificada del conjunto de resultados. El
     array contiene tres claves: los valores <literal>apple</literal> y
     <literal>pear</literal> son devueltos como arrays que contienen dos
     colores diferentes, mientras que <literal>watermelon</literal> es
     devuelto como un array que contiene un solo color.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$insert = $gbd->prepare("INSERT INTO fruit(name, colour) VALUES (?, ?)");
$insert->execute(array('apple', 'green'));
$insert->execute(array('pear', 'yellow'));

$gsent = $gbd->prepare("SELECT name, colour FROM fruit");
$gsent->execute();

/* Agrupar valores según la primera columna */
var_dump($gsent->fetchAll(PDO::FETCH_COLUMN|PDO::FETCH_GROUP));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  ["apple"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(3) "red"
  }
  ["pear"]=>
  array(2) {
    [0]=>
    string(5) "green"
    [1]=>
    string(6) "yellow"
  }
  ["watermelon"]=>
  array(1) {
    [0]=>
    string(5) "green"
  }
}

]]>
    </screen>
   </example>
   <example><title>Instanciar una clase para cada resultado</title>
    <para>
     El siguiente ejemplo demuestra el comportamiento del estilo
     de obtención de <constant>PDO::FETCH_CLASS</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class fruit {
    public $name;
    public $colour;
}

$gsent = $gbd->prepare("SELECT name, colour FROM fruit");
$gsent->execute();

$resultado = $gsent->fetchAll(PDO::FETCH_CLASS, "fruit");
var_dump($resultado);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  object(fruit)#1 (2) {
    ["name"]=>
    string(5) "apple"
    ["colour"]=>
    string(5) "green"
  }
  [1]=>
  object(fruit)#2 (2) {
    ["name"]=>
    string(4) "pear"
    ["colour"]=>
    string(6) "yellow"
  }
  [2]=>
  object(fruit)#3 (2) {
    ["name"]=>
    string(10) "watermelon"
    ["colour"]=>
    string(4) "pink"
  }
}
]]>
    </screen>
   </example>
   <example><title>Invocar a una función por cada resultado</title>
    <para>
     El siguiente ejemplo demuestra el comportamiento del estilo
     de obtención de <constant>PDO::FETCH_FUNC</constant>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function fruit($name, $colour) {
    return "{$name}: {$colour}";
}

$gsent = $gbd->prepare("SELECT name, colour FROM fruit");
$gsent->execute();

$resultado = $gsent->fetchAll(PDO::FETCH_FUNC, "fruit");
var_dump($resultado);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  string(12) "apple: green"
  [1]=>
  string(12) "pear: yellow"
  [2]=>
  string(16) "watermelon: pink"
}
]]>
    </screen>
   </example>
   
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::query</function></member>
    <member><function>PDOStatement::fetch</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::setFetchMode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
