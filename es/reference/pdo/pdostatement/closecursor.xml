<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330543 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.closecursor" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::closeCursor</refname>
  <refpurpose>
   Cierra un cursor, habilitando a la sentencia para que sea ejecutada otra vez
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::closeCursor</methodname>
   <void/>
  </methodsynopsis>
  
  <para>
   <function>PDOStatement::closeCursor</function> libera la conexión
   al servidor, por lo que otras sentencias SQL podrían ejecutarse, pero deja la
   sentencia en un estado que la habilita para ser ejecutada otra vez.
  </para>
  <para>
   Este método es útil para los controladores de bases de datos que no admiten la ejecución
   de un objeto PDOStatement cuando otro objeto PDOStatement previamente ejecutado aún
   le restan filas por obtener. Si su controlador de bases de datos tiene esta limitación,
   el problema podría manifestarse en un error de "fuera de sencuencia".
  </para>
  <para>
   <function>PDOStatement::closeCursor</function> está implementado como un método
   opcional específico del controlador (permitienedo la máxima eficiencia), o como
   la alternativa genérica de PDO si no está instalada ninguna función específica del controlador.
   La alternativa genérica de PDO es semánticamente la misma que si se escribiera el siguiente
   código en un script de PHP:
   <programlisting role="php">
<![CDATA[
<?php
do {
    while ($sentencia->fetch())
        ;
    if (!$sentencia->nextRowset())
        break;
} while (true);
?>
]]>
   </programlisting>
  </para>
  
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>PDOStatement::closeCursor</function></title>
    <para>
     En el siguiente ejemplo, el objeto PDOStatement <varname>$sentencia</varname> 
     devuelve múltiples filas, aunque la aplicación solamente obtenga la primera,
     dejando al objeto PDOStatement con filas aún por obtener.
     Para asegurarse de que la aplicación funcionará con todos los controladores de bases de datos,
     el autor inserta una llmada a <function>PDOStatement::closeCursor</function>
     sobre <varname>$sentencia</varname> antes de ejecutar el objeto PDOStatement
     <varname>$otraSentencia</varname>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Crear un objeto PDOStatement */
$sentencia = $gbd->prepare('SELECT foo FROM bar');

/* Crear un segundo objeto PDOStatement */
$otraSentencia = $gbd->prepare('SELECT foobaz FROM foobar');

/* Ejecutar la primera sentencia */
$sentencia->execute();

/* Obtener solamente la primera fila de los resultados */
$sentencia->fetch();

/* La siguiente llamada a closeCursor() podría ser necesaria para algunos controladores */
$sentencia->closeCursor();

/* Ahora se puede ejecutar la segunda sentencia */
$otraSentencia->execute();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDOStatement::execute</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
