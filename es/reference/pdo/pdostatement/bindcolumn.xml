<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334762 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.bindcolumn" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::bindColumn</refname>
  <refpurpose>
   Vincula una columna a una variable de PHP
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
    <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::bindColumn</methodname>
   <methodparam><type>mixed</type><parameter>column</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">param</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>maxlen</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>driverdata</parameter></methodparam>
  </methodsynopsis>
  
  <para>
   <function>PDOStatement::bindColumn</function> se encarga de tener una
   variable en particular vinculada a una columna dada en el conjunto de resultados desde
   una consulta. Cada llamada a <function>PDOStatement::fetch</function> o a
   <function>PDOStatement::fetchAll</function> actualizará todas las variables
   que estén vinculadas a columnas.
  </para>
  <note>
   <para>
    Ya que la información sobre las columnas no siempre está disponible para PDO hasta
    que la sentencia sea ejecutada, las aplicaciones portables debería invocar esta
    función <emphasis>despúes</emphasis> de <function>PDOStatement::execute</function>.
   </para>
   <para>
    Sin embargo, para poder vincular una columna LOB como un flujo cuando se usa el
    <emphasis>controlador PgSQL</emphasis>, las aplicaciones deberían invocar este método
    <emphasis>antes</emphasis> de llamar a <function>PDOStatement::execute</function>,
    si no, el OID del objeto grande será devuelto como un número entero.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       El número (de primer índice 1) o el nombre de la columna del conjunto de resultados.
       Si se utiliza el nombre de la columna, tenga en cuenta que el nombre debería coincidir
       en mayúsculas/minúsculas con la columna, tal como la devuelve el controlador.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>param</parameter></term>
     <listitem>
      <para>
       El nombre de la variable de PHP a la que vincular la columna.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       El tipo de datos del parámetro, especificado por las <link
       linkend="pdo.constants"><literal>constantes
       PDO::PARAM_*</literal></link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>maxlen</parameter></term>
     <listitem>
      <para>
       La longitud máxima sugerida para la preasingnación.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>driverdata</parameter></term>
     <listitem>
      <para>
       Parámetro/s opcional/es para el controlador.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Vincular la salida de un conjunto de resultados a variables de PHP</title>
    <para>
     La vinculación de columnas del conjunto de resultados a variables de PHP es una forma
     efectiva de hacer que los datos contenidos en cada fila estén disponibles de inmediato
     para la aplicación. El siguiente ejemplo demuestra cómo PDO permite
     vincular y recuperar columnas con varias opciones y con
     valores predeterminados inteligentes.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function readData($gbd) {
  $sql = 'SELECT name, colour, calories FROM fruit';
  try {
    $sentencia = $gbd->prepare($sql);
    $sentencia->execute();

    /* Vincular por número de columna */
    $sentencia->bindColumn(1, $nombre);
    $sentencia->bindColumn(2, $color);
    
    /* Vincular por nombre de columna */
    $sentencia->bindColumn('calories', $calorías);

    while ($fila = $sentencia->fetch(PDO::FETCH_BOUND)) {
      $datos = $nombre . "\t" . $color . "\t" . $calorías . "\n";
      print $datos;
    }
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}
readData($gbd);
?>
  ]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
apple   red     150
banana  yellow  175
kiwi    green   75
orange  orange  150
mango   red     200
strawberry      red     25
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDOStatement::execute</function></member>
    <member><function>PDOStatement::fetch</function></member>
    <member><function>PDOStatement::fetchAll</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
