<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338832 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.execute" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::execute</refname>
  <refpurpose>
   Ejecuta una sentencia preparada
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::execute</methodname>
   <methodparam choice="opt"><type>array</type><parameter>input_parameters</parameter></methodparam>
  </methodsynopsis>
  <para>
   Ejecuta la <link linkend="pdo.prepared-statements">sentencia
   preparada</link>. Si ésta incluía marcadores de parámetros,
   se debe:
   <itemizedlist>
    <listitem><para>llamar a <function>PDOStatement::bindParam</function> y/o
     <function>PDOStatement::bindValue</function> para vincular variables o
     valores (respectivamente) a los marcadores de parámetros. Las variables vinculadas pasan
     su valor como entrada y reciben el valor de salida, si lo hubiera, de sus marcadores
     de parámetros asociados</para></listitem>
    <listitem>
     <para>o pasar un array de valores de parámetros de sólo entrada</para>
    </listitem>
   </itemizedlist>
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>input_parameters</parameter></term>
     <listitem>
      <para>
       Un array de valores con tantos elementos como parámetros
       vinculados en la sentencia SQL que va a ser ejecutada.
       Todos los valores son tratados como <constant>PDO::PARAM_STR</constant>.
      </para>
      <para>
       No es posible vincular múltiples valores a un único parámetro; por ejemplo,
       no se puede vincular dos valores a un único parámetro con nombre en una cláusula
       IN().
      </para>
      <para>
       Tampoco es posible vincular más valores que los especificados; si existen más claves en
       <parameter>input_parameters</parameter> que en la sentencia SQL especificada
       en <methodname>PDO::prepare</methodname>, entonces la sentencia
       fallará y se emitirá un error.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.0</entry>
       <entry>
        Las claves de <parameter>input_parameters</parameter> deben coincidir con aquellas
        declaradas en la sentencia SQL. Antes de PHP 5.2.0 esto se ignoraba silenciosamente.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example><title>Ejecutar una sentencia preparada con una variable y valor vinculados</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Ejecutar una sentencia preparada vinculando una variable y un valor */
$calorías = 150;
$color = 'gre';
$gsent = $gbd->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calorías AND colour LIKE :color');
$gsent->bindParam(':calories', $calorías, PDO::PARAM_INT);
$sth->bindValue(':colour', "%{$color}%");
$gsent->execute();
?>
]]>
   </programlisting>
  </example>
  
  <example><title>Ejecutar una sentencia preparada con un array de valores de inserción (parámetros con nombre)</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Ejecutar una sentencia preparada proporcionando un array de valores de inserción */
$calorías = 150;
$color = 'red';
$gsent = $gbd->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$gsent->execute(array(':calories' => $calorías, ':colour' => $color));
?>
]]>
   </programlisting>
  </example>
  
  <example><title>Ejecutar una sentencia preparada con un array de valores de inserción (parámetros de sustitución)</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Ejecutar una sentencia preparada proporcionando un array de valores de inserción */
$calorías = 150;
$color = 'red';
$gsent = $gbd->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$gsent->execute(array($calorías, $color));
?>
]]>
   </programlisting>
  </example>
  
  <example><title>Ejecutar una sentencia preparada con parámetros de sustitución de signos de interrogación</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Ejecutar una sentencia preparada vinculando variables de PHP */
$calorías = 150;
$color = 'red';
$gsent = $gbd->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$gsent->bindParam(1, $calorías, PDO::PARAM_INT);
$gsent->bindParam(2, $color, PDO::PARAM_STR, 12);
$gsent->execute();
?>
]]>
   </programlisting>
  </example>
  
  <example><title>Ejecutar una sentencia preparada usando un array para la cláusula IN</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Ejecutar una sentencia preparada usando un array de valores para una cláusula IN */
$parámetros = array(1, 21, 63, 171);
/* Crear una cadena para los parámetros de sustitución rellenados con el número de parámetros */
$place_holders = implode(',', array_fill(0, count($parámetros), '?'));

/*
    Esto prepara una sentencia con suficientes parámetros de sustitución sin nombre para
    cada valor del array $parámetros. Los valores del array $parámetros son vinculados a
    los parámetros de sustitución de la sentencia preparada cuando ésta sea ejecutada.
    Esto no es lo mismo que usar PDOStatement::bindParam(), pues esto último
    requiere una referencia a la variable. En su lugar, PDOStatement::execute() sólo
    vincula por valor.
*/
$gsent = $gbd->prepare("SELECT id, name FROM contacts WHERE id IN ($place_holders)");
$gsent->execute($parámetros);
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Algunos controladores necesitan <link linkend="pdostatement.closecursor">cerrar
    los cursores</link> antes de poder ejecutar la siguiente sentencia.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::bindParam</function></member>
    <member><function>PDOStatement::fetch</function></member>
    <member><function>PDOStatement::fetchAll</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
