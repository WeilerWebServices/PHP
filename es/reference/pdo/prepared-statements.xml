<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339564 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<chapter xml:id="pdo.prepared-statements" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Sentencias preparadas y procedimientos almacenados</title>
 <para>
  Muchas de las bases de datos más maduras admiten el concepto de sentencias
  preparadas. Estas pueden definirse como un tipo de plantillas
  compiladas para SQL que las aplicaciones quieren ejecutar, pudiendo ser personalizadas
  utilizando parámetros variables. Las sentencias preparadas ofrecen dos grandes beneficios:
 </para>
 <itemizedlist>
  <listitem>
   <simpara>
    La consulta sólo necesita ser analizada (o preparada) una vez, pero puede
    ser ejecutada muchas veces con los mismos o diferentes parámetros. Cuando la
    consulta se prepara, la base de datos analizará, compilará y optimizará su
    plan para ejecutarla. Para consultas complejas, este proceso puede tomar
    suficiente tiempo como para ralentizar notablemente una aplicación si fuera
    necesario repetir la misma consulta muchas veces con los mismos parámetros.
    Mediante el empleo de una sentencia preparada, la aplicación evita repetir el ciclo
    de análisis/compilación/optimización. Esto significa que las sentencias preparadas
    utilizan menos recursos y se ejecutan más rápidamente.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    Los parámetros para las sentencias preparadas no necesitan estar entrecomillados;
    el controlador automáticamente se encarga de esto. Si una aplicación usa exclusivamente
    sentencias preparadas, el desarrollador puede estar seguro de que no hay cabida para
    inyecciones de SQL (sin embargo, si otras partes de la consulta se construyen con
    datos de entrada sin escapar, aún es posible que ocurran ataques de inyecciones de SQL).
   </simpara>
  </listitem>
 </itemizedlist>
 <para>
  Las sentencias preparadas son tan útiles que son la única característica que PDO
  emulará para los controladores que no las soporten. Esto asegura que una aplicación
  sea capaz de emplear el mismo paradigma de acceso a datos independientemente de las
  capacidades de la base de datos.
 </para>
 <para>
  <example>
   <title>Inserciones repetidas utilizando sentencias preparadas</title>
   <simpara>
    Este ejemplo realiza dos consultas INSERT sustituyendo <literal>name</literal>
    y <literal>value</literal> por los marcadores correspondientes.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$sentencia = $mbd->prepare("INSERT INTO REGISTRY (name, value) VALUES (:name, :value)");
$sentencia->bindParam(':name', $nombre);
$sentencia->bindParam(':value', $valor);

// insertar una fila
$nombre = 'uno';
$valor = 1;
$sentencia->execute();

// insertar otra fila con diferentes valores
$nombre = 'dos';
$valor = 2;
$sentencia->execute();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Inserciones repetidas utilizando sentencias preparadas</title>
   <simpara>
    Este ejemplo realiza dos consultas INSERT sustituyendo <literal>name</literal>
    y <literal>value</literal> por los marcadores posicionales '<literal>?</literal>'.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$sentencia = $mbd->prepare("INSERT INTO REGISTRY (name, value) VALUES (?, ?)");
$sentencia->bindParam(1, $nombre);
$sentencia->bindParam(2, $valor);

// insertar una fila
$nombre = 'uno';
$valor = 1;
$sentencia->execute();

// insertar otra fila con diferentes valores
$nombre = 'dos';
$valor = 2;
$sentencia->execute();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Obtener datos empleando sentencias preparadas</title>
   <simpara>
    Este ejemplo obtiene datos basándose en un valor de clave proporcionado por un formulario.
    La entrada del usuario es entrecomillada automáticamente, con lo cual no hay riesgo de
    un ataque por inyección de SQL.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$sentencia = $mbd->prepare("SELECT * FROM REGISTRY where name = ?");
if ($sentencia->execute(array($_GET['name']))) {
  while ($fila = $sentencia->fetch()) {
    print_r($fila);
  }
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Llamar a un procedimiento almacenado con un parámetro de salida</title>
   <simpara>
    Si el controlador de la base de datos lo admite, una aplicación podría también vincular
    parámetros para salida y para entrada. Los parámetros de salida se emplean típicamente
    para recuperar valores de procedimientos almacenados. Los parámetros de salida son
    ligeramente más complejos de usar que los de entrada, de manera que el desarrollador
    debe conocer la magnitud de un parámetro dado cuando se vincula. Si el valor
    resulta ser más grande que el tamaño indicado, se emitirá un error.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$sentencia = $mbd->prepare("CALL sp_returns_string(?)");
$sentencia->bindParam(1, $valor_devuleto, PDO::PARAM_STR, 4000); 

// llamar al procedimiento almacenado
$sentencia->execute();

print "El procedimiento devolvió $valor_devuleto\n";
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Llamar a un procedimiento almacenado con un parámetro de entrada/salida</title>
   <simpara>
    Un desarrollador podría también especificar parámetros que contienen valores tanto de
    entrada como de salida; la sintaxis es similar a la de los parámetros de salida. En el
    siguiente ejemplo, la cadena 'hola' es pasada al procedimiento almacenado, y cuando éste
    finaliza, 'hola' es reemplazada con el valor de retorno del procedimiento.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$sentencia = $mbd->prepare("CALL sp_takes_string_returns_string(?)");
$valor = 'hola';
$sentencia->bindParam(1, $valor, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 4000); 

// llamar al procedimiento almacenado
$sentencia->execute();

print "El procedimiento devolvió $valor\n";
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Uso inválido de un marcador de posición</title>
   <programlisting role="php">
<![CDATA[
<?php
$sentencia = $mbd->prepare("SELECT * FROM REGISTRY where name LIKE '%?%'");
$sentencia->execute(array($_GET['name']));

// los marcadores de posición deben emplearse en el lugar del valor completo
$sentencia = $mbd->prepare("SELECT * FROM REGISTRY where name LIKE ?");
$sentencia->execute(array("%$_GET[name]%"));
?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

