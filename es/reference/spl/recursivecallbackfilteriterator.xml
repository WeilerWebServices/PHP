<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330310 Maintainer: andresdzphp Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<phpdoc:classref xml:id="class.recursivecallbackfilteriterator" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>La clase RecursiveCallbackFilterIterator</title>
 <titleabbrev>RecursiveCallbackFilterIterator</titleabbrev>
 
 <partintro>
  
  <!-- {{{ RecursiveCallbackFilterIterator intro -->
  <section xml:id="recursivecallbackfilteriterator.intro">
   &reftitle.intro;
   <para>
    
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="recursivecallbackfilteriterator.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>RecursiveCallbackFilterIterator</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>RecursiveCallbackFilterIterator</classname>
     </ooclass>
     
     <ooclass>
      <modifier>extends</modifier>
      <classname>CallbackFilterIterator</classname>
     </ooclass>
     
     <oointerface>
      <interfacename>OuterIterator</interfacename>
     </oointerface>
     
     <oointerface>
      <interfacename>RecursiveIterator</interfacename>
     </oointerface>
    </classsynopsisinfo>
    <!-- }}} -->
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.recursivecallbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[1])" />
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.recursivecallbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
    
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.callbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
    
   </classsynopsis>
   <!-- }}} -->
   
  </section>
  
  <!-- {{{ examples -->
  <section xml:id="recursivecallbackfilteriterator.examples">
   &reftitle.examples;
   <para>
    La llamada de retorno debería aceptar hasta tres argumentos:
    el elemento actual, la clave actual y el iterador, respectivamente.
   </para>
   <example xml:id="recursivecallbackfilteriterator.examples.args">
    <title>Argumentos disponibles de la llamada de retorno</title>
    <programlisting role="php">
<![CDATA[
<?php

/**
 * Llamada de retorno para RecursiveCallbackFilterIterator
 *
 * @param $current   El valor del elemento actual
 * @param $key       La clave del elemento actual
 * @param $iterator  El iterador a filtrar
 * @return boolean   TRUE si acepta el elemento actual, de lo contrario FALSE
 */
function my_callback($current, $key, $iterator) {
    // Aquí, el código de filtrado
}

?>
]]>
    </programlisting>
   </example>
   <para>
    Filtrar un iterador recursivo generalmente conlleva dos condiciones.
    La primera es que, con el fin de permitir la recursividad, la función de 
    llamada de retorno debería devolver &true; si el iterador actual tiene hijos.
    La segunda es la condición normal de filtro, como el tamaño de fichero o la 
    comprobación de la extensión como en el ejemplo de abajo.
   </para>
   <example xml:id="recursivecallbackfilteriterator.examples.basic">
    <title>Ejemplo básico de llamada de retorno recursiva</title>
    <programlisting role="php">
<![CDATA[
<?php

$dir = new FilesystemIterator(__DIR__);

// Filtrar ficheros de gran tamaño ( > 100MB)
$ficheros = new RecursiveCallbackFilterIterator($dir, function ($current, $key, $iterator) {
    // Permitir recursividad
    if ($iterator->hasChildren()) {
        return TRUE;
    }
    // Buscar ficheros de gran tamaño
    if ($current->isFile() && $current->getSize() > 104857600) {
        return TRUE;
    }
    return FALSE;
});
 
foreach (new RecursiveIteratorIterator($ficheros) as $fichero) {
    echo $fichero->getPathname() . PHP_EOL;
}

?>
]]>
    </programlisting>
   </example>
  </section>
  <!-- }}} -->
  
 </partintro>
 
 &reference.spl.entities.recursivecallbackfilteriterator;
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
