<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343899 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<refentry xml:id="function.spl-autoload-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>spl_autoload_register</refname>
  <refpurpose>Registrar las funciones dadas como implementación de __autoload()</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>spl_autoload_register</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>autoload_function</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>throw</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>prepend</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Registra una función con la cola de __autoload proporcionada por spl. Si la cola
   aún no ha sido activa, será activada.
  </para>
  <para>
   Si el código contiene una función <function>__autoload</function> existente,
   dicha función debe estar explícitamente registrada en la cola de __autoload. Esto
   es debido a que <function>spl_autoload_register</function> de hecho reemplazará
   la caché del motor para la función <function>__autoload</function>
   mediante <function>spl_autoload</function> o
   <function>spl_autoload_call</function>.
  </para>
  <para>
   Si deben haber varias funciones de autocarga, <function>spl_autoload_register</function> 
   lo permite. De hecho, crea una cola de funciones de autocarga y
   las recorre en el orden en que fueron definidas. Por el contrario,
   <function>__autoload</function> sólo puede definirse una vez.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>autoload_function</parameter></term>
     <listitem>
      <para>
       La función de autocarga a registrar.
       Si no se proporciona ningún parámetro, será registrada la implementación
       predeterminada de <function>spl_autoload</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>throw</parameter></term>
     <listitem>
      <para>
       Este parámetro especifica si
       <function>spl_autoload_register</function> debería lanzar
       excepciones cuando el parámetro <parameter>autoload_function</parameter>
       no puede ser registrado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prepend</parameter></term>
     <listitem>
      <para>
       Si es &true;, <function>spl_autoload_register</function> antepondrá
       el autocargador en la pila de autocarga en vez de posponerlo.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Se introdujo el soporte para espacios de nombres.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Se añadio el parámetro <parameter>prepend</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>spl_autoload_register</function> como sustituto de una función <function>__autoload</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// function __autoload($clase) {
//     include 'clases/' . $clase . '.clase.php';
// }

function mi_autocargador($clase) {
    include 'clases/' . $clase . '.clase.php';
}

spl_autoload_register('mi_autocargador');

// O, utilizar una función anónima, a partir de PHP 5.3.0
spl_autoload_register(function ($clase) {
    include 'clases/' . $clase . '.clase.php';
});

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Ejemplo de <function>spl_autoload_register</function> donde la clase no es cargada</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function test($nombre) {
        print '[['. $nombre .']]';
    }
}

spl_autoload_register(__NAMESPACE__ .'\Foo::test'); // A partir de PHP 5.3.0

new ClaseInexistente;

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
[[Foobar\ClaseInexistente]]
Fatal error: Class 'Foobar\ClaseInexistente' not found in ...
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>__autoload</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
