<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335401 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.ob-start">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>Activa el almacenamiento en búfer de la salida</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>output_callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>chunk_size</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Esta función activará el almacenamiento en búfer de la salida. Mientras dicho almacenamiento esté
   activo, no se enviará ninguna salida desde el script (aparte de cabeceras); en su lugar la
   salida se almacenará en un búfer interno.
  </para>
  <para>
   El contenido de este búfer interno se puede copiar a una variable de tipo string
   usando <function>ob_get_contents</function>. Para producir la salida de lo almacenado en
   el búfer interno se ha de usar <function>ob_end_flush</function>. De forma alternativa,
   <function>ob_end_clean</function> desechará de manera silenciosa el contenido
   del búfer.
  </para>
  <warning>
   <para>
    Algunos servidores web (p.ej. Apache) cambian en directorio de trabajo de un script
    cuando se invoca a la función de llamada de retorno. Se puede cambiar de nuevo mediante, por ejemplo,
    <literal>chdir(dirname($_SERVER['SCRIPT_FILENAME']))</literal> en la
    función de llamada de retorno.
   </para>
  </warning>
  <para>
   Los búferes de salida son apilables, es decir, que se podría llamar a
   <function>ob_start</function> mientras otro
   <function>ob_start</function> esté activo. Se ha de
   asegurar llamar a <function>ob_end_flush</function>
   las veces apropiadas. Si están activas múltiples funciones de llamada
   de retorno de salida, la salida se filtrará secuencialmente
   por cada una de ellas en orden de anidamiento.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>output_callback</parameter></term>
     <listitem>
      <para>
       Se puede especificar una función <parameter>output_callback</parameter>
       opcional. Esta función toma un string como parámetro y debería
       devolver otro string. La función se llamará cuando
       el búfer de salida sea volcado (enviado), limpiado (con
       <function>ob_flush</function>, <function>ob_clean</function> o alguna función
       similar) o cuando el búfer de salida
       sea volcado al navegador al final de la petición. Cuando se llame a
       <parameter>output_callback</parameter>, ésta recibirá el
       contenido del búfer de salida como su propio parámetro, y se espera que
       devuelva un nuevo búfer de salida como resultado, que será enviado al
       navegador. Si <parameter>output_callback</parameter> no es una
       función llamable, esta función devolverá &false;.
       Esta es la firma de la llamada de retorno:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>string</type><parameter>buffer</parameter></methodparam>
        <methodparam choice="opt"><type>int</type><parameter>phase</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>buffer</parameter></term>
         <listitem>
          <simpara>
           Contenido del búfer de salida.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>phase</parameter></term>
         <listitem>
          <simpara>
           Máscara de bits de constantes <constant>PHP_OUTPUT_HANDLER_*</constant>.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Si <parameter>output_callback</parameter> devuelve &false;, se enviará la
       entrada original al navegador.
      </para>
      <para>
       El parámetro <parameter>output_callback</parameter> se puede omitir
       pasando un valor &null;.
      </para>
      <para>
       <function>ob_end_clean</function>, <function>ob_end_flush</function>,
       <function>ob_clean</function>, <function>ob_flush</function> y
       <function>ob_start</function> no se pueden llamar desde una función de llamada
       de retorno. Si se hace, el comportamiento no estará
       definido. Si se quiere borrar el contenido de un búfer,
       se ha de devolver "" (un string nulo) desde la función de llamada de retorno.
       Tampoco se pueden llamar a funciones usando las funciones de búfer de salida como
       <literal>print_r($expresión, true)</literal> o
       <literal>highlight_file($nombre_fichero, true)</literal> desde una función de
       llamada de retorno.
      </para>
      <note>
       <para>
        En PHP 4.0.4, <function>ob_gzhandler</function> se introdujo para
        facilitar el envío de datos codificados con gz a los navegadores web que admitan
        páginas web comprimidas. <function>ob_gzhandler</function> determima
        el tipo de codificación de contenido que aceptará el navegador y devolverá
        su salida en consecuencia.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>chunk_size</parameter></term>
     <listitem>
      <para>
       Si se proporciona el parámetro opcional <parameter>chunk_size</parameter>, el
       búffer será volcado después de cualquier llamada de salida que cause que la longitud
       del búfer sea igual o exceda a <parameter>chunk_size</parameter>. El valor
       predeterminado <literal>0</literal> significa que la función de salida será llamada
       únicamente cuando el búfer de salida se cierre.
      </para>
      <para>
       Antes de PHP 5.4.0, el valor <literal>1</literal> era un caso
       especial que establecía el tamaño de segmento a 4096 bytes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       El parámetro <parameter>flags</parameter> es una máscara de bits que controla
       las operaciones que se pueden realizar sobre el búfer de salida. Lo predeterminado
       es permitir que los búferes de salida sean limpiados, volcados y borrados, lo que
       se puede hacer explícitamente mediante
       <constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant> |
       <constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant>, o
       <constant>PHP_OUTPUT_HANDLER_STDFLAGS</constant> como clave.
      </para>
      <para>
       Cada bandera (flag) controla el acceso a un conjunto de funciones, como está descrito a continuación:
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Constante</entry>
           <entry>Funciones</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_CLEANABLE</constant></entry>
           <entry>
            <function>ob_clean</function>,
            <function>ob_end_clean</function>, y
            <function>ob_get_clean</function>.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_FLUSHABLE</constant></entry>
           <entry>
            <function>ob_end_flush</function>,
            <function>ob_flush</function>, y
            <function>ob_get_flush</function>.
           </entry>
          </row>
          <row>
           <entry><constant>PHP_OUTPUT_HANDLER_REMOVABLE</constant></entry>
           <entry>
            <function>ob_end_clean</function>,
            <function>ob_end_flush</function>, y
            <function>ob_get_flush</function>.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        En caso de utilizar <function>ob_start</function> dentro de una retrollamada del
        búfer de salida, esta función ya no emitirá un <constant>E_ERROR</constant>,
        si no un <constant>E_RECOVERABLE_ERROR</constant>, permitiendo a los manejadores
        de errores propios capturar tales errores.
       </entry>
      </row>
      <row>
       <entry>5.4.0</entry>
       <entry>
        El tercer parámetro de <function>ob_start</function> se cambió de un
        parámetro <type>boolean</type> llamado <parameter>erase</parameter>
        (el cual, si se establecía a &false;, prevenía al búfer de salida de ser
        eliminado hasta el final de la ejecución del script) a un
        parámetro <type>integer</type> llamado <parameter>flags</parameter>.
        Desafortunadamente, esto resulta en una rotura de compatibilidad de la API para código
        escrito antes de PHP 5.4.0 que use el tercer parámetro. Véase
        <link linkend="function.ob-start.flags-bc">el ejemplo de banderas</link>
        para saber cómo manejar esto con código que necesite ser
        compatible con ambas.
       </entry>
      </row>
      <row>
       <entry>5.4.0</entry>
       <entry>
        Un tamaño de segmento de <literal>1</literal> ahora resulta en segmentos de 1 byte
        que se van a enviar al búfer de salida.
       </entry>
      </row>
      <row>
       <entry>4.3.2</entry>
       <entry>
        Se modficó esta función que devuelva &false; en caso de que la función
        <parameter>output_callback</parameter> pasada no pueda ejecutarse.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de una función de llamada de retorno definida por el usuario</title>
    <programlisting role="php">
<![CDATA[
<?php

function callback($búfer)
{
  // reemplazar todas las manzanas por naranjas
  return (str_replace("manzanas", "naranjas", $búfer));
}

ob_start("callback");

?>
<html>
<body>
<p>Es como comparar manzanas con naranjas.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>Es como comparar naranjas con naranjas.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>
  
  <para>
   <example xml:id="function.ob-start.flags-bc">
    <title>Crear un búfer de salida imborrable de forma compatible con PHP 5.3 y 5.4</title>
    <programlisting role="php">
<![CDATA[
<?php

if (version_compare(PHP_VERSION, '5.4.0', '>=')) {
  ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^
    PHP_OUTPUT_HANDLER_REMOVABLE);
} else {
  ob_start(null, 0, false);
}

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>  
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
