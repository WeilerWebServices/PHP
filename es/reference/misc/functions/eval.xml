<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338282 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.eval" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>eval</refname>
  <refpurpose>Evaluar una cadena como código de PHP</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>eval</methodname>
   <methodparam><type>string</type><parameter>code</parameter></methodparam>
  </methodsynopsis>
  <para>
   Evalua el código dado por <parameter>code</parameter> como código PHP.
  </para>
  <caution>
   <para>
    El constructor de lenguaje <function>eval</function> es <emphasis>muy peligroso</emphasis>
    porque permite la ejecución de código de PHP arbitrario. <emphasis>Su uso está totalmente
    desaconsejado.</emphasis> Si se ha verificado cuidadosamente que no existe otra opción
    que usar este constructor, se ha de poner especial atención en <emphasis>no pasar ninguna
    información proporcionada por el usuario</emphasis> a esta función sin haberla validado apropiadamente con anterioridad.
   </para>
  </caution>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>code</parameter></term>
     <listitem>
      <para>
       El código de PHP válido ser evaluado.
      </para>
      <para>
       El código no debe encerrarse entre
       <link linkend="language.basic-syntax.phpmode">etiquetas de PHP</link> de apertura y cierre,
       es decir, se debe pasar <literal>'echo "¡Hola!";'</literal> en vez de
       <literal>'&lt;?php echo "¡Hola!"; ?&gt;'</literal>. Aún es posible abandonar y
       reentrar en el modo PHP usando las etiquetas de PHP apropiadas, p.ej.
       <literal>'echo "¡En el modo PHP!"; ?&gt;¡En el modo HTML!&lt;?php echo "¡De vuelta en el modo PHP!";'</literal>.
      </para>
      <para>
       Aparte de que el código pasado debe ser código de PHP válido. Esto incluye que todas las sentencias
       deben finalizar apropiadamente usando un punto y coma.
       <literal>'echo "¡Hola!"'</literal>, por ejemplo, causará un error de análisis, mientras que
       <literal>'echo "¡Hola!";'</literal> funcionará.
      </para>
      <para>
       Una sentencia <literal>return</literal> finalizará inmediantamente la
       evaluación del código.
      </para>
      <para>
       El código se ejecutará en el ámbito del código que llama a <function>eval</function>. Así, cualquier
       variable definida o cambiada en la llamada a <function>eval</function> permanecerá visible después de que
       finalice.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>eval</function> devuelve &null; a menos que
   se llame a <literal>return</literal> en el código evaluado, en cuyo caso
   el valor pasado a <literal>return</literal> es devuelto. A partir de PHP 7, si hay un
   error de análisis en el código evaluado, <function>eval</function> lanzará una excepción ParseError.
   Antes de PHP 7, <function>eval</function> devolvía
   &false; y la ejecución del código posterior continuaba normalmente. No es
   posible capturar un error de análisis de <function>eval</function>
   usando <function>set_error_handler</function>.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>eval</function> - fusión de texto sencillo</title>
    <programlisting role="php">
<![CDATA[
<?php
$cadena = 'taza';
$nombre = 'café';
$str = 'Esto es una $cadena con mi $nombre en ella.';
echo $str. "\n";
eval("\$str = \"$str\";");
echo $str. "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Esto es una $cadena con mi $nombre en ella.
Esto es una taza con mi café en ella.
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  
  &note.language-construct;
  
  &tip.ob-capture;
  <note>
   <para>
    En caso de un error fatal en el código evaluado, se saldrá del script completamente.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
