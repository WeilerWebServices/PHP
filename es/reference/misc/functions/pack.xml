<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335075 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.pack" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pack</refname>
  <refpurpose>Empaqueta información a una cadena binaria</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>pack</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Empaqueta los argumentos dados a una cadena binaria según el formato dado por
   <parameter>format</parameter>. 
  </para>
  <para>
   La idea de esta función fue tomada de Perl y todos los códigos de formato
   funcionan igual que en Perl. Sin embargo, hay algunos códigos de formato que no están,
   como el código de formato "u" de Perl.
  </para>
  <para>
   Observe que la distinción entre valores con signo y sin signo sólo
   afecta a la función <function>unpack</function>, la
   función <function>pack</function> da los mismos resultados para
   códigos de formato con y sin signo.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>format</parameter></term>
     <listitem>
      <para>
       La cadena <parameter>format</parameter> consiste en códigos de formato
       seguidos de un argumento opcional de repetición. El argumento de repetición puede
       ser un valor entero o <literal>*</literal> para repetir hasta
       el final de los datos de entrada. Para a, A, h, H las repeticiones especifican
       cuántos caracteres se toman de un argumento de datos, para @ es la posición
       absoluta donde colocar el dato siguiente, para todo lo demás las
       repeticiones especifican cuántos argumentos de datos se consumen y empaquetan
       en la cadena binaria resultante.
      </para>
      <para>
       Los formatos implementados actualmente son:
       <table>
        <title>Caracteres de formato de <function>pack</function></title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Código</entry>
           <entry>Descripción</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>a</entry>
           <entry>cadena rellena de NUL</entry>
          </row>
          <row>
           <entry>A</entry>
           <entry>cadena rellena de SPACE</entry></row>
          <row>
           <entry>h</entry>
           <entry>cadena hexadecimal, nibble bajo primero</entry></row>
          <row>
           <entry>H</entry>
           <entry>cadena hexadecimal, nibble alto primero</entry></row>
          <row><entry>c</entry><entry>signed char</entry></row>
          <row>
           <entry>C</entry>
           <entry>carácter sin signo</entry></row>
          <row>
           <entry>s</entry>
           <entry>short con signo (siempre 16 bits, orden de byte de la máquina)</entry>
          </row>
          <row>
           <entry>S</entry>
           <entry>short sin signo (siempre 16 bits, orden de byte de la máquina)</entry>
          </row>
          <row>
           <entry>n</entry>
           <entry>short sin signo (siempre 16 bits, orden de byte big endian)</entry>
          </row>
          <row>
           <entry>v</entry>
           <entry>short sin signo (siempre 16 bits, orden de byte little endian)</entry>
          </row>
          <row>
           <entry>i</entry>
           <entry>integer con signo (tamaño y orden de byte dependientes de la máquina)</entry>
          </row>
          <row>
           <entry>I</entry>
           <entry>integer sin signo (tamaño y orden de byte dependientes de la máquina)</entry>
          </row>
          <row>
           <entry>l</entry>
           <entry>long con signo (siempre 32 bits, orden de byte de la máquina)</entry>
          </row>
          <row>
           <entry>L</entry>
           <entry>long sin signo (siempre 32 bits, orden de byte de la máquina)</entry>
          </row>
          <row>
           <entry>N</entry>
           <entry>long sin signo (siempre 32 bits, orden de byte big endian)</entry>
          </row>
          <row>
           <entry>V</entry>
           <entry>long sin signo (siempre 32 bits, orden de byte little endian)</entry>
          </row>
          <row>
           <entry>q</entry>
           <entry>long largo con signo (siempre 64 bit, orden de byte big endian)</entry>
          </row>
          <row>
           <entry>Q</entry>
           <entry>long largo sin signo (siempre 64 bit, orden de byte big endian)</entry>
          </row>
          <row>
           <entry>J</entry>
           <entry>long largo sin signo (siempre 64 bit, orden de byte big endian)</entry>
          </row>
          <row>
           <entry>P</entry>
           <entry>long largo sin signo (siempre 64 bit, orden de byte little endian)</entry>
          </row>
          <row>
           <entry>f</entry>
           <entry>float (tamaño y representación dependientes de la máquina)</entry>
          </row>
          <row>
           <entry>d</entry>
           <entry>double (tamaño y representación dependientes de la máquina)</entry>
          </row>
          <row>
           <entry>x</entry>
           <entry>byte NUL</entry>
          </row>
          <row>
           <entry>X</entry>
           <entry>copia de seguridad de un byte</entry>
          </row>
          <row>
           <entry>Z</entry>
           <entry>Cadena rellena de NUL (nuevo en PHP 5.5)</entry>
          </row>
          <row>
           <entry>@</entry>
           <entry>relleno de NUL hasta la posición absoluta</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una cadena binaria que contiene información.
  </para>
 </refsect1>
 
 <refsect1 role="changelog"><!-- {{{ -->
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.6.3</entry>
       <entry>
        Se añadieron los códigos "q", "Q", "J" y "P" para habilitar el trabajo con número de 64 bit.
       </entry>
      </row>
      <row>
       <entry>5.5.0</entry>
       <entry>
        Se añadió el código "Z" con funcionalidad equivalente a "a" por
        compatibilidad con Perl.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>pack</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$datosbinarios = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>
]]>
    </programlisting>
    <para>
     La cadena binaria resultante será de 6 bytes de longitud y contendrá
     la secuencia de bytes 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
    </para>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>Observe que PHP almacena internamente los valores de tipo <type>integer</type> como
    valores con signo de tamaño dependiente de la máquina (de tipo <literal>long</literal> de C).
    Los literales de tipo integer y las operaciones que producen números fuera de los límites del
    tipo <type>integer</type> serán almacenados como <type>float</type>.
    Cuando se empaquetan estos floats como integers, primero son convertidos al tipo integer.
    Esto puede o no puede resultar en el patrón de bytes deseado.
   </para>
   <para>El caso más relevante es cuando se empaquetan números sin signo que serían
    representables con el tipo <type>integer</type> si fueran sin signo.
    En sistemas donde el tipo <type>integer</type> tiene un tamaño de 32 bits, la conversión
    normalmente resultará en el mismo patrón de bytes que si el tipo <type>integer</type> fuera
    sin signo (aunque esto depende de las conversiones de con signo a sin signo definidas en la
    implementación, conforme al estándar de C). En sistemas donde el
    tipo <type>integer</type> tiene un tamaño de 64 bits, el tipo <type>float</type> casi
    con toda seguridad no tendrá una mantisa suficientemente grande para mantener el valor sin
    pérdida de precisión. Si esos sistemas también tienen un tipo
    <literal>int</literal> de C de 64 bits nativo (al contrario que la mayoría de sistemas basados en UNIX),
    la única forma de usar el formato de empaquetación <literal>I</literal> en el rango superior es crear
    valores <type>integer</type> negativos con la misma representación de bytes
    que el valor sin signo deseado.
   </para>
  </caution>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unpack</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
