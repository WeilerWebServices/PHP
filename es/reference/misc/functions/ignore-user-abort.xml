<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338301 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.ignore-user-abort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ignore_user_abort</refname>
  <refpurpose>Establecer si la desconexión de un cliente debería abortar la ejecución del script</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>ignore_user_abort</methodname>
   <methodparam choice="opt"><type>bool</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   Establece si la desconexión de un cliente debería ocasionar que el script sea abortado.
  </para>
  <para>
   Cuando se ejecuta PHP como un script de línea de comandos, y el tty del script
   finaliza sin que el script haya terminado, el script cesará su ejecución la
   siguiente vez que se intente escribir algo, a menos que
   <parameter>value</parameter> esté establecido a &true;
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>value</parameter></term>
     <listitem>
      <para>
       Si se establece, esta función establecerá la configuración ini de <link
       linkend="ini.ignore-user-abort">ignore_user_abort</link>
       al valor dado por <parameter>value</parameter>. Si no, esta función sólo
       devolverá la configuración previa sin cambiarla.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la configuración previa, como un integer.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo <function>ignore_user_abort</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Ignorar los abortos hechos por el usuario y permitir que el script
// se ejecute siempre
ignore_user_abort(true);
set_time_limit(0);

echo 'Probando la gestión de conexión de PHP';

// Ejecutar un bucle que hará, con suerte,
// que hagamos clic fuera de la
// página o en el botón "Parar".
while(1)
{
    // ¿Falló la conexión?
    if(connection_status() != CONNECTION_NORMAL)
    {
        break;
    }

    // Dormir durante 10 segundos
    sleep(10);
}

// Si se alcanza esto, el 'break' 
// fue provocado desde dentro del bucle while

// Por tanto, aquí podemos realizar una anotación o cualquier
// otra tarea que sea necesaria sin depender realmente del
// navegador.
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <para>
   PHP no detectará que el usuario abortó la conexión hasta que
   se haga un intento de enviar información al cliente. Usar simplemente
   una sentencia echo no garantiza que la información sea enviada, veáse
   <function>flush</function>. 
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>connection_aborted</function></member>
    <member><function>connection_status</function></member>
    <member>
     <link linkend="features.connection-handling">Manejo de conexiones</link>
     para una descripción completa del manejo de conexiones de PHP.
    </member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
