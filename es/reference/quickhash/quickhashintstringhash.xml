<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 321707 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.quickhashintstringhash" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>La clase QuickHashIntStringHash</title>
 <titleabbrev>QuickHashIntStringHash</titleabbrev>
 
 <partintro>
  
  <!-- {{{ QuickHashIntStringHash intro -->
  <section xml:id="quickhashintstringhash.intro">
   &reftitle.intro;
   <para>
    Esta clase envuelve un hash que contiene números enteros, donde los
    valores son strings. Los hash también están disponibles como
    implementación de la interfaz ArrayAccess.
   </para>
   <para>
    También se puede iterar sobre los hash con foreach, ya que la interfaz Iterator
    también está implementada. No se garantiza el orden de los elementos
    devueltos.
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="quickhashintstringhash.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>QuickHashIntStringHash</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>QuickHashIntStringHash</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">Constantes</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="quickhashintstringhash.constants.check-for-dupes">QuickHashIntStringHash::CHECK_FOR_DUPES</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="quickhashintstringhash.constants.do-not-use-zend-alloc">QuickHashIntStringHash::DO_NOT_USE_ZEND_ALLOC</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="quickhashintstringhash.constants.hasher-no-hash">QuickHashIntStringHash::HASHER_NO_HASH</varname>
     <initializer>256</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="quickhashintstringhash.constants.hasher-jenkins1">QuickHashIntStringHash::HASHER_JENKINS1</varname>
     <initializer>512</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="quickhashintstringhash.constants.hasher-jenkins2">QuickHashIntStringHash::HASHER_JENKINS2</varname>
     <initializer>1024</initializer>
    </fieldsynopsis>
    
    <classsynopsisinfo role="comment">Métodos</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.quickhashintstringhash')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->
   
  </section>
  
  <!-- {{{ QuickHashIntStringHash constants -->
  <section xml:id="quickhashintstringhash.constants">
   &reftitle.constants;
   <variablelist>
    
    <varlistentry xml:id="quickhashintstringhash.constants.check-for-dupes">
     <term><constant>QuickHashIntStringHash::CHECK_FOR_DUPES</constant></term>
     <listitem>
      <para>Si se habilita, la agregación de elementos duplicados a un canjunto (a través de add() o
       de loadFromFile()) resultará en la eliminación de dichos elementos del
       conjunto. Esto tomará tiempo extra, por lo que solamente se usa cuando es necesaria.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashintstringhash.constants.do-not-use-zend-alloc">
     <term><constant>QuickHashIntStringHash::DO_NOT_USE_ZEND_ALLOC</constant></term>
     <listitem>
      <para>Disables the use of PHP's internal memory manager for internal
       set structures. With this option enabled, internal allocations will not
       count towards the memory_limit settings.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashintstringhash.constants.hasher-no-hash">
     <term><constant>QuickHashIntStringHash::HASHER_NO_HASH</constant></term>
     <listitem>
      <para>Deshabilita es uso del gestor de memoria interno de PHP para las
       estructuras de conjuntosl Con esta opción habilitada, la asignaciones internas no
       con respecto a los ajuestes de memory_limit.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashintstringhash.constants.hasher-jenkins1">
     <term><constant>QuickHashIntStringHash::HASHER_JENKINS1</constant></term>
     <listitem>
      <para>Esta es la función de hash predeterminada para convertir los hash de tipo integer
       en índices de lista de recipientes.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashintstringhash.constants.hasher-jenkins2">
     <term><constant>QuickHashIntStringHash::HASHER_JENKINS2</constant></term>
     <listitem>
      <para>Selecciona un algoritmo de hash alternativo.</para>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </section>
  <!-- }}} -->
  
  
 </partintro>
 
 &reference.quickhash.entities.quickhashintstringhash;
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
