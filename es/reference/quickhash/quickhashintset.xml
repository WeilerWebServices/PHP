<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 321707 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.quickhashintset" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>La clase QuickHashIntSet</title>
 <titleabbrev>QuickHashIntSet</titleabbrev>
 
 <partintro>
  
  <!-- {{{ QuickHashIntSet intro -->
  <section xml:id="quickhashintset.intro">
   &reftitle.intro;
   <para>
    Esta clase envuelve un conjunto de contiene números enteros.
   </para>
   <para>
    Se puede iterar sobre los conjuntos con foreach, ya que la interfaz Iterator
    también está implementada. No se garantiza el orden de los elementos
    devueltos.
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="quickhashintset.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>QuickHashIntSet</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>QuickHashIntSet</classname>
     </ooclass>
    </classsynopsisinfo>
    <!-- }}} -->
    <classsynopsisinfo role="comment">Constatntes</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="quickhashintset.constants.check-for-dupes">QuickHashIntSet::CHECK_FOR_DUPES</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="quickhashintset.constants.do-not-use-zend-alloc">QuickHashIntSet::DO_NOT_USE_ZEND_ALLOC</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="quickhashintset.constants.hasher-no-hash">QuickHashIntSet::HASHER_NO_HASH</varname>
     <initializer>256</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="quickhashintset.constants.hasher-jenkins1">QuickHashIntSet::HASHER_JENKINS1</varname>
     <initializer>512</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="quickhashintset.constants.hasher-jenkins2">QuickHashIntSet::HASHER_JENKINS2</varname>
     <initializer>1024</initializer>
    </fieldsynopsis>
    
    <classsynopsisinfo role="comment">Métodos</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.quickhashintset')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->
   
  </section>
  
  <!-- {{{ QuickHashIntSet constants -->
  <section xml:id="quickhashintset.constants">
   &reftitle.constants;
   <variablelist>
    
    <varlistentry xml:id="quickhashintset.constants.check-for-dupes">
     <term><constant>QuickHashIntSet::CHECK_FOR_DUPES</constant></term>
     <listitem>
      <para>Si se habilita, la agregación de elementos duplicados a un canjunto (a través de add() o
       de loadFromFile()) resultará en la eliminación de dichos elementos del
       conjunto. Esto tomará tiempo extra, por lo que solamente se usa cuando es necesaria.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashintset.constants.do-not-use-zend-alloc">
     <term><constant>QuickHashIntSet::DO_NOT_USE_ZEND_ALLOC</constant></term>
     <listitem>
      <para>Deshabilita es uso del gestor de memoria interno de PHP para las
       estructuras de conjuntosl Con esta opción habilitada, la asignaciones internas no
       con respecto a los ajuestes de memory_limit.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashintset.constants.hasher-no-hash">
     <term><constant>QuickHashIntSet::HASHER_NO_HASH</constant></term>
     <listitem>
      <para>Selecciona el no usar la función de hash, sino que meramente usa un mósulo para
       buscar el índice de la lista de recipientes. Esto no es más rápido que el uso del hash normal, y
       se dan más colisiones.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashintset.constants.hasher-jenkins1">
     <term><constant>QuickHashIntSet::HASHER_JENKINS1</constant></term>
     <listitem>
      <para>Esta es la función de hash predeterminada para convertir los hash de tipo integer
       en índices de lista de recipientes.</para>
     </listitem>
    </varlistentry>
    
    <varlistentry xml:id="quickhashintset.constants.hasher-jenkins2">
     <term><constant>QuickHashIntSet::HASHER_JENKINS2</constant></term>
     <listitem>
      <para>Selecciona un algoritmo de hash alternativo.</para>
     </listitem>
    </varlistentry>
    
   </variablelist>
  </section>
  <!-- }}} -->
  
  
 </partintro>
 
 &reference.quickhash.entities.quickhashintset;
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
