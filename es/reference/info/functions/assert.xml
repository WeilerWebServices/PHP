<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338974 Maintainer: edwincartagenah Status: in process -->
<!-- Reviewed: in prcess -->

<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Aserción</refname>
  <refpurpose>Verifica si la aserción es &false;</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <para>PHP 5 y 7</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
  </methodsynopsis>
  <para>PHP 7</para>
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type>Throwable</type><parameter>exception</parameter></methodparam>
  </methodsynopsis>
  <para>
   La función <function>assert</function> revisará el parámetro
   <parameter>assertion</parameter> proporcionado y tomará la acción apropiada si
   su resultado es &false;.
  </para>
  <refsect2>
   <title>Aserciones tradicionales (PHP 5 y 7)</title>
   <para>
    Si el parámetro <parameter>assertion</parameter> es proporcionado como un string
    será evaluado como código PHP por la función <function>assert</function>.
    Las ventajas de un parámetro <parameter>assertion</parameter> como string es que son
    menos sobrecargados cuando la comprobación de la aserción está deshabilitada y los
    mensajes que contienen la expresión <parameter>assertion</parameter>, la
    expresión falla. Esto significa que si pasa una condición de tipo boolean como
    <parameter>assertion</parameter> esta condición no se mostrará como
    parámetro a la función de aserción la cual tiene que haber definido con la función
    <function>assert_options</function>, la condición es convertida
    a un string antes de llamar ese manejador de función, y el tipo boolean &false;
    es convertido como el string vacío.
   </para>
   <para>
    Las aserciones deberían ser utilizadas solamente como una característica de depuración. Debería
    utilizarlas para las revisiones de buen funcionamiento las cuales comprueban las condiciones que siempre
    deberían ser &true; y que indican algunos errores de programación o si no,
    para revisar la presencia de algunas características, como funciones de
    extensión o ciertos límites del sistema y características.
   </para>
   <para>
    Las aserciones no deberían utilizarse para operaciones normales en tiempo de ejecución como
    revisiones de parámetros de entrada. Como regla general su código siempre debería
    ser capaz de funcionar correctamente aún si la verificación de aserción no está
    activada.
   </para>
   <para>
    El comportamiento de la función <function>assert</function> podría ser configurado por
    la función <function>assert_options</function> o por .ini-settings el cual está descrito
    en la página del manual de esas funciones.
   </para>
   <para>
    La función <function>assert_options</function> y/o la directiva de configuración
    <constant>ASSERT_CALLBACK</constant> permite que una función de llamada de retorno sea establecida
    para manejar aseciones fallidas.
   </para>
   <para>
    Las llamadas de retorno <function>assert</function> son particularmente útiles para
    construir conjuntos de pruebas automatizadas porque le permiten capturar fácilmente
    el código pasado a la aserción, junto con la información
    en donde fue hecha la aserción. Mientras que la información puede ser
    capturada a través de otros métodos, utilizar asernciones lo hace mucho más rápido
    y más fácil!
   </para>
   <para>
    La función de llamada de retorno debería aceptar tres argumentos. El primero
    contendrá el fichero en que falló la aserción. El segundo
    contendrá la línea en la que falló la aserción y
    el tercer argumento contendrá la expresión que falló (si la
    hubiera &#x2014; valores literales tales como 1 o "dos" no se pasarán a través
    de este argumento). Los usuarios de PHP 5.4.8 y versiones posteriores también podrían proveer un cuarto
    argumento opcional, que contendrá el parámetro
    <parameter>description</parameter> proporcionado a la función <function>assert</function>, si
    fue establecido.
   </para>
  </refsect2>
  <refsect2 xml:id="function.assert.expectations">
   <title>Expectativas (solamente PHP 7)</title>
   <para>
    La función <function>assert</function> es una construcción de lenguaje en PHP 7, que permite
    la definición de expectativas: las aserciones que surten efecto en ambientes
    de desarrollo y pruebas, pero que se optimizan para que tengan costo cero en la
    producción.
   </para>
   <para> ************* desde aqui ***************
    Mientras que <function>assert_options</function> puede ser utilizada para controlar
    el comportamiento como se describe anteriormente por la compatibilidad con versiones anteriores, el código PHP 7
    sólo debería usar las dos directivas nuevas de configuración para controlar
    el comportamiento de <function>assert</function> y no llamar a
    <function>assert_options</function>.
   </para>
   <table>
    <title>  *************** DESDE AQUI ****************
     PHP 7 configuration directives for <function>assert</function>
    </title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Directive</entry>
       <entry>Default value</entry>
       <entry>Possible values</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <link linkend="ini.zend.assertions">zend.assertions</link>
       </entry>
       <entry><literal>1</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: generate and execute code (development mode)
         </member>
         <member>
          <!-- TODO: look up the RFC to figure out why you'd want this -->
          <literal>0</literal>: generate code but jump around it at runtime
         </member>
         <member>
          <literal>-1</literal>: do not generate code (production mode)
         </member>
        </simplelist>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="ini.assert.exception">assert.exception</link>
       </entry>
       <entry><literal>0</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: throw when the assertion fails, either by
          throwing the object provided as the <parameter>exception</parameter>
          or by throwing a new <classname>AssertionError</classname> object if
          <parameter>exception</parameter> wasn't provided
         </member>
         <member>
          <literal>0</literal>: use or generate a
          <classname>Throwable</classname> as described above, but only
          generate a warning based on that object rather than throwing it
          (compatible with PHP 5 behaviour)
         </member>
        </simplelist>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </refsect2>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       The assertion. In PHP 5, this must be either a <type>string</type> to
       be evaluated or a <type>boolean</type> to be tested. In PHP 7, this may
       also be any expression that returns a value, which will be executed and
       the result used to indicate whether the assertion succeeded or failed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>description</parameter></term>
     <listitem>
      <para>
       An optional description that will be included in the failure message if
       the <parameter>assertion</parameter> fails.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>exception</parameter></term>
     <listitem>
      <para>
       In PHP 7, the second parameter can be a
       <classname>Throwable</classname> object instead of a descriptive
       <type>string</type>, in which case this is the object that will be
       thrown if the assertion fails and the
       <link linkend="ini.assert.exception">assert.exception</link>
       configuration directive is enabled.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &false; if the assertion is false, &true; otherwise.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>7.0.0</entry>
       <entry>
        <function>assert</function> is now a language construct and not a
        function. <function>assertion</function> can now be an expression.
        The second parameter is now interpreted either as an
        <parameter>exception</parameter> (if a
        <classname>Throwable</classname> object is given), or as the
        <parameter>description</parameter> supported from PHP 5.4.8 onwards.
       </entry>
      </row>
      <row>
       <entry>5.4.8</entry>
       <entry>
        The <parameter>description</parameter> parameter was added. The
        <parameter>description</parameter> is also now provided to a callback
        function in <constant>ASSERT_CALLBACK</constant> mode as the fourth
        argument.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <refsect2>
   <title>Traditional assertions (PHP 5 and 7)</title>
   <para>
    <example>
     <title>Handle a failed assertion with a custom handler</title>
     <programlisting role="php">
<![CDATA[
<?php
// Active assert and make it quiet
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Create a handler function
function my_assert_handler($file, $line, $code)
{
    echo "<hr>Assertion Failed:
        File '$file'<br />
        Line '$line'<br />
        Code '$code'<br /><hr />";
}

// Set up the callback
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Make an assertion that should fail
assert('mysql_query("")');
?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    <example>
     <title>Using a custom handler to print a description</title>
     <programlisting role="php">
<![CDATA[
<?php
// Active assert and make it quiet
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Create a handler function
function my_assert_handler($file, $line, $code, $desc = null)
{
    echo "Assertion failed at $file:$line: $code";
    if ($desc) {
        echo ": $desc";
    }
    echo "\n";
}

// Set up the callback
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Make an assertion that should fail
assert('2 < 1');
assert('2 < 1', 'Two is less than one');
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
 <![CDATA[
 Assertion failed at test.php:21: 2 < 1
 Assertion failed at test.php:22: 2 < 1: Two is less than one
 ]]>
     </screen>
    </example>
   </para>
  </refsect2>
  <refsect2>
   <title>Expectations (PHP 7 only)</title>
   <example>
    <title>Expectations without a custom exception</title>
    <programlisting role="php">
<![CDATA[
<?php
assert(true == false);
echo 'Hi!';
?>
]]>
    </programlisting>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 0,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 1
     and <link linkend="ini.assert.exception">assert.exception</link> set to 0,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Warning: assert(): assert(true == false) failed in - on line 2
Hi!
]]>
    </screen>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 1
     and <link linkend="ini.assert.exception">assert.exception</link> set to 1,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: assert(true == false) in -:2
Stack trace:
#0 -(2): assert(false, 'assert(true == ...')
#1 {main}
  thrown in - on line 2
]]>
    </screen>
   </example>
   <example>
    <title>Expectations with a custom exception</title>
    <programlisting role="php">
<![CDATA[
<?php
class CustomError extends AssertionError {}

assert(true == false, new CustomError('True is not false!'));
echo 'Hi!';
?>
]]>
    </programlisting>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 0,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 1
     and <link linkend="ini.assert.exception">assert.exception</link> set to 0,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Warning: assert(): CustomError: True is not false! in -:4
Stack trace:
#0 {main} failed in - on line 4
Hi!
]]>
    </screen>
    <para>
     With <link linkend="ini.zend.assertions">zend.assertions</link> set to 1
     and <link linkend="ini.assert.exception">assert.exception</link> set to 1,
     the above example will output:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught CustomError: True is not false! in -:4
Stack trace:
#0 {main}
  thrown in - on line 4
]]>
    </screen>
   </example>
  </refsect2>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
  