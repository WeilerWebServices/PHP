<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: carlos Status: ready -->
<refentry xml:id="function.sqlite-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sqlite_escape_string</refname>
  <refpurpose>Escapa una cadena para ser usada como un parámetro para una consulta</refpurpose>
 </refnamediv> 
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sqlite_escape_string</methodname>
   <methodparam><type>string</type><parameter>item</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_escape_string</function> escapará correctamente la cadena especificada mediante <parameter>item</parameter>
   para ser usada en una sentencia SQL SQLite. Incluye la duplicación de los caracteres de comillas simples (<literal>'</literal>) y la comprobación de caracteres binarios que no sean seguros en la consulta.
  </para>
  <para>
   Aunque la codificación es segura para la inserción de datos, se hacen comparaciones de texto simples y cláusulas <literal>LIKE</literal> en las consultas inutilizables para las columnas que contienen datos binarios. En la práctica, esto no deberia ser un problema, ya que en el esquema no se deberian usar tales cosas en columnas binarias (de hecho, podría ser mejor almacenar datos binarios utilizando otros métodos, como por ejemplo en ficheros).
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>item</parameter></term>
     <listitem>
      <para>
       El <type>string</type> que va a ser escapado.
      </para>
      <para>
       Si <parameter>item</parameter> contiene un caracter<literal>NUL</literal>, o si este empieza con caracter cuyo valor ordinal es       <literal>0x01</literal>, PHP aplicará un esquema de codificación binaria, para que pueda ser almacenado con seguridad y recuperar datos binarios.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un  <type>string</type> escapado para ser usado en una sentencia SQL SQLite SQL.
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    No usar esta función para codificar los valores devueltos desde los UDFs creados usando
     <function>sqlite_create_function</function> o
    <function>sqlite_create_aggregate</function> - usar en su lugar
    <function>sqlite_udf_encode_binary</function>.
   </simpara>
  </note>
  <warning>
   <simpara>
    <function>addslashes</function> <emphasis>NO</emphasis> deberia ser usado para escapar strings para consultas SQLite; ya que esto conducirá a extraños resultado cuando se devuelvan sus datos.
   </simpara>
  </warning>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlite_udf_encode_binary</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
     Local variables:
     mode: sgml
     sgml-omittag:t
     sgml-shorttag:t
     sgml-minimize-attributes:nil
     sgml-always-quote-attributes:t
     sgml-indent-step:1
     sgml-indent-data:t
     sgml-parent-document:nil
     sgml-default-dtd-file:"~/.phpdoc/manual.ced"
     sgml-exposed-tags:nil
     sgml-local-catalogs:nil
     sgml-local-ecat-files:nil
     End:
     vim600: syn=xml fen fdm=syntax fdl=2 si
     vim: et tw=78 syn=sgml
     vi: ts=1 sw=1
     -->
