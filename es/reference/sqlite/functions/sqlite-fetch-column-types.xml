<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334762 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.sqlite-fetch-column-types" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sqlite_fetch_column_types</refname>
  <refname>SQLiteDatabase::fetchColumnTypes</refname>
  <refpurpose>
   Devuelve un array con los tipos de columna de una tabla en particular
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>sqlite_fetch_column_types</methodname>
   <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
   <methodparam><type>resource</type><parameter>dbhandle</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>result_type</parameter><initializer>SQLITE_ASSOC</initializer></methodparam>
  </methodsynopsis>
  <para>&style.oop; (método):</para>
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>SQLiteDatabase::fetchColumnTypes</methodname>
   <methodparam><type>string</type><parameter>table_name</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>result_type</parameter><initializer>SQLITE_ASSOC</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_fetch_column_types</function> devuelve un array con los tipos de
   datos de las columnas de la tabla especificada por <parameter>table_name</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>table_name</parameter></term>
     <listitem>
      <para>
       El nombre de la tabla a consultar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dbhandle</parameter></term>
     <listitem>
      <para>
       El resucrso de Base de datos de SQLite; devuelto desde <function>sqlite_open</function>
       cuando se usa procedimentalmente. Este parámetro no es necesario
       al usar elmétodo orientado a objetos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>result_type</parameter></term>
     <listitem>
      <para>
       El parámetro opcional <parameter>result_type</parameter> acepta una
       constante y determina cómo el array devuelto será indexado. Al utilizar
       <constant>SQLITE_ASSOC</constant> devolverá solamente índices asociativos
       (campos con nombre) mientras que <constant>SQLITE_NUM</constant> devolverá solamente
       índices numéricos (números ordinales de campos).
       <constant>SQLITE_ASSOC</constant> es el predeterminado para
       esta función.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un array con los tipos de datos de las columnas; &false; en caso de error.
  </para>
  &sqlite.case-fold;
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>Se añadió el parámetro <parameter>result_type</parameter></entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo prodecimental</title>
    <programlisting role="php">
<![CDATA[
<?php
$db = sqlite_open('mysqlitedb');
sqlite_query($db, 'CREATE TABLE foo (bar varchar(10), arf text)');
$cols = sqlite_fetch_column_types('foo', $db, SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Column: $column  Type: $type\n";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo orientado a objetos</title>
    <programlisting role="php">
<![CDATA[
<?php
$db = new SQLiteDatabase('mysqlitedb');
$db->query('CREATE TABLE foo (bar varchar(10), arf text)');
$cols = $db->fetchColumnTypes('foo', SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Columna: $column  Tipo: $type\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Columna: bar  Tipo: VARCHAR
Columna: arf  Tipo: TEXT
]]>
    </screen>
   </example>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
