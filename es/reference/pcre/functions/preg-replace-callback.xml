<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 337413 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.preg-replace-callback" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace_callback</refname>
  <refpurpose>Realiza una búsqueda y sustitución de una expresión regular usando una llamada de retorno</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace_callback</methodname>
   <methodparam><type>mixed</type><parameter>pattern</parameter></methodparam>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>subject</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">count</parameter></methodparam>
  </methodsynopsis>
  <para>
   El comportamiento de esta función es casi idéntico al de
   <function>preg_replace</function>, excepto por el hecho de que en vez
   del parámetro <parameter>replacement</parameter>, se debería especificar
   <parameter>callback</parameter>.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>pattern</parameter></term>
     <listitem>
      <para>
       El patron de búsqueda. Puede ser tanto un cadena como un array de
       cadenas.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Una llamada de retorno que será llamada y pasada a un array de elementos coincidentes
       en la cadena <parameter>subject</parameter>. La llamada de retorno debería
       devolver la cadena de sustitución. Esta es la firma de la llamada de retorno:
      </para>
      <para>
       <methodsynopsis>
        <type>string</type><methodname><replaceable>handler</replaceable></methodname>
        <methodparam><type>array</type><parameter>matches</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       A menudo se necesitará la función de <parameter>callback</parameter>
       para usar <function>preg_replace_callback</function> únicamente en un lugar.
       En este caso se puede usar una
       <link linkend="functions.anonymous">función anónima</link> para
       declarar una llamada de retorno dentro de la llamada a
       <function>preg_replace_callback</function>. Al hacerlo de este modo,
       se tiene toda la información de la llamada en un único lugar y no
       abarrota el espacio de nombres de funciones con un nombre de función de llamada de retorno
       que no se usa en ningún otro sitio.
      </para>
      <para>
       <example>
        <title><function>preg_replace_callback</function> y 
         función anónima</title>
        <programlisting role="php">
<![CDATA[
<?php
/* un filtro de línea de comandos estilo unix para convertir letras
 * mayúsculas a minúsculas al principio de párrafos */
$fp = fopen("php://stdin", "r") or die("no se puede leer stdin");
while (!feof($fp)) {
    $línea = fgets($fp);
    $línea = preg_replace_callback(
        '|<p>\s*\w|',
        function ($coincidencias) {
            return strtolower($coincidencias[0]);
        },
        $línea
    );
    echo $línea;
}
fclose($fp);
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>subject</parameter></term>
     <listitem>
      <para>
       La cadena o un array de cadenas a buscar y reemplazar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       Las sustituciones máximas posibles por cada patrón en cada
       cadena <parameter>subject</parameter>. Por defecto
       <literal>-1</literal> (sin límite).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>count</parameter></term>
     <listitem>
      <para>
       Si se especifica, esta variable será rellenada con el número de
       sustituciones hechas.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace_callback</function> devuelve un array si el
   parámetro <parameter>subject</parameter> es un array, o, por el contrario
   una cadena. Si se producen errores, el valor devuleto es &null;
  </para>
  <para>
   Si se encontraron coincidencias, el nuevo sujeto será devuelto, de lo contrario
   <parameter>subject</parameter> será devuelto sin cambios. 
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Se añadió el parámetro <parameter>count</parameter>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>preg_replace_callback</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// este texto se usó en 2002
// queremos actualizarlo al 2003
$texto = "El Día de los Inocentes es el 28/12/2002\n";
$texto.= "Las últimas Navidades fueron el 24/12/2001\n";
// la función de llamada de retorno
function añoSiguiente($coincidencias)
{
  // como es usual: $coincidencias[0] es la coincidencia completa
  // $coincidencias[1] la coincidencia del primer sub-patrón
  // encerrado entre '(...)' y así sucesivamente
  return $coincidencias[1].($coincidencias[2]+1);
}
echo preg_replace_callback(
            "|(\d{2}/\d{2}/)(\d{4})|",
            "añoSiguiente",
            $texto);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
El Día de los Inocentes es el 28/12/2003
Las últimas Navidades fueron el 24/12/2002
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>preg_replace_callback</function> usando una estructura recursiva
     para manejar el código BB encapsulado</title>
    <programlisting role="php">
<![CDATA[
<?php
$entrada = "nivel 1 [indent] nivel 2 [indent] nivel 3 [/indent] nivel 2 [/indent] nivel 1";

function analizarEtiquetasRecursivo($entrada)
{

    $regex = '#\[indent]((?:[^[]|\[(?!/?indent])|(?R))+)\[/indent]#';

    if (is_array($entrada)) {
        $entrada = '<div style="margin-left: 10px">'.$entrada[1].'</div>';
    }

    return preg_replace_callback($regex, 'analizarEtiquetasRecursivo', $entrada);
}

$salida = analizarEtiquetasRecursivo($entrada);

echo $salida;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="pcre.pattern">Patrones de PCRE</link></member>
    <member><function>preg_replace_callback_array</function></member>
    <member><function>preg_quote</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_last_error</function></member>
    <member><link linkend="functions.anonymous">Funciones anónimas</link></member>
    <member>&seealso.callback;</member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
