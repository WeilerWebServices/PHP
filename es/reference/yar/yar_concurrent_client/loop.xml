<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 343889 Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<refentry xml:id="yar-concurrent-client.loop" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Yar_Concurrent_Client::loop</refname>
  <refpurpose>Enviar todas las llamadas</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <modifier>static</modifier> <type>bool</type><methodname>Yar_Concurrent_Client::loop</methodname>
   <methodparam choice="opt"><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>error_callback</parameter></methodparam>
  </methodsynopsis>
  <para>
    Envía todas las llamadas RPC remotas registradas.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>callback</parameter></term>
    <listitem>
     <para>
      Si se establece esta retrollamada, Yar la invocará después de haber
      enviado todas las llamadas y antes de cualquier respuesta, con un $callinfo NULL.
     </para>
     <para>
      Entonces, si un usuario no especifica la retrollamada al registrar una llamada concurretne,
      esta retrollamada se utilizará para manejar la resupesta, o si no, se utilizará la
      retrollamada especificada durante el registro.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>error_callback</parameter></term>
    <listitem>
     <para>
      Si se establece esta retrollamada, Yar la invocará cuando suceda un
      error.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>

  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>Yar_Concurrent_Client::loop</function></title>
   <programlisting role="php">
<![CDATA[
<?php
function callback($retval, $callinfo) {
     if ($callinfo == NULL) {
        echo "Now, all requests are sent, and no any response available\n";
     } else {
        echo "This is a remote call response, the method name is", $callinfo["method"], 
             ". calling sequence is " , $callinfo["sequence"] , "\n";
        var_dump($retval);
     }
} 

function error_callback($type, $error, $callinfo) {
    error_log($error);
}

Yar_Concurrent_Client::call("http://host/api/", "some_method", array("parameters"), "callback");
Yar_Concurrent_Client::call("http://host/api/", "some_method", array("parameters"));   // if the callback is not specificed, 
                                                                               // callback in loop will be used
Yar_Concurrent_Client::call("http://host/api/", "some_method", array("parameters"), "callback", NULL, array(YAR_OPT_PACKAGER => "json"));
                                                                               //this server accept json packager
Yar_Concurrent_Client::call("http://host/api/", "some_method", array("parameters"), "callback", NULL, array(YAR_OPT_TIMEOUT=>1));
                                                                               //custom timeout 

Yar_Concurrent_Client::loop("callback", "error_callback"); //send the requests, 
                                                           //the error_callback is optional
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Now, all requests are sent, and no any response available
This is a remote call response, the method name issome_method. calling sequence is 4
string(11) "some_method"
This is a remote call response, the method name issome_method. calling sequence is 1
string(11) "some_method"
This is a remote call response, the method name issome_method. calling sequence is 2
string(11) "some_method"
This is a remote call response, the method name issome_method. calling sequence is 3
string(11) "some_method"
]]>
   </screen>
  </example>
 </refsect1>


 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Yar_Concurrent_Client::call</methodname></member>
   <member><methodname>Yar_Concurrent_Client::reset</methodname></member>
   <member><methodname>Yar_Server::__construct</methodname></member>
   <member><methodname>Yar_Server::handle</methodname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
