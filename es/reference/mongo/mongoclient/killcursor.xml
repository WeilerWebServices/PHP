<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 338152 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongoclient.killcursor" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoClient::killCursor</refname>
  <refpurpose>Elimina un cursor específico del servidor</refpurpose>
 </refnamediv>

 <refsynopsisdiv role="soft-deprecation-notice">
  &mongo.noalternative.method.note;
 </refsynopsisdiv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>MongoClient::killCursor</methodname>
   <methodparam><type>string</type><parameter>server_hash</parameter></methodparam>
   <methodparam><type>int|MongoInt64</type><parameter>id</parameter></methodparam>
  </methodsynopsis>
  <para>
   En ciertas situaciones, podría ser necesario eliminar un cursor del servidor.
   Normalmente, los cursores expiran tras 10 minutos de inactividad, pero es posible
   crear un cursor inmortal con
   <methodname>MongoCursor::immortal</methodname> que nunca expira. Para
   poder eliminar dicho cursor inmortal, se puede llamar a este
   método con la información proporcionada por
   <methodname>MongoCursor::info</methodname>.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>server_hash</parameter>
     </term>
     <listitem>
      <para>
       El hash del servidor que posee el cursor. Puede obtenerse a través de
       <methodname>MongoCursor::info</methodname>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>id</parameter>
     </term>
     <listitem>
      <para>
       El ID del cursor a eliminar. Se puede proporcionar un valor de tipo <type>int</type>
       que contenga el ID de 6a bits del cursor , o un objeto de la clase
       <classname>MongoInt64</classname>. Lo último es necesario en plataformas
       de 32 bits (y en Windows).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve &true; si el método intentó eliminar el cursor, y &false; si
   había algo erróneo en los argumentos (tal como un
   <parameter>server_hash</parameter> erróneo). El estado devuelto <emphasis>no
   refleja</emphasis> dónde fue elminado el cursor, ya que el servidor no
   proporciona tal información.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método muestra una advertencia si el
   <parameter>server_hash</parameter> proporcionado no coincide con una conexión
   existente. No intentar eliminar un cursor tampoco se intenta en este caso.
  </para>
 </refsect1>
 
 <refsect1 role="examples" xml:id="mongo.mongoclient.killcursor.examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>MongoClient::killCursor</function></title>
   <para>
    Este ejemplo muestra cómo conectarse, realizar una consulta, obtener la información
    del cursor y luego eliminarlo.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient();
$c = $m->testdb->collection;
$cursor = $c->find();
$resultado = $cursor->next();

// Ahora el cursor es válido, por lo que se puede obtener el hash y el ID:
$info = $cursor->info();

// Eliminar el cursor the cursor
MongoClient::killCursor( $info['server'], $info['id'] );
?>
]]>
   </programlisting>
  </example>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
