<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 321508 Maintainer: chuso Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<refentry xml:id="mongocursor.sort" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCursor::sort</refname>
  <refpurpose>Ordena los resultados por el campo que se indique</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCursor::sort</methodname>
   <methodparam><type>array</type><parameter>fields</parameter></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>fields</parameter>
     </term>
     <listitem>
      <para>
       Array de campos en función de los que se va a ordenar. Cada elemento del array tiene
       de clave el nombre del campo, y como valor, o bien <literal>1</literal> para
       orden ascendente, o bien <literal>-1</literal> para orden descendente.
      </para>
      <para>
       En primer lugar, se ordena de acuerdo al primer campo del array. Después (si
       existe) de acuerdo al segundo, etc. Esto quiere decir que el orden de
       los campos del array <parameter>fields</parameter> es importante.
       Revise la sección de ejemplos.
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1> 

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Devuelve el mismo cursor con el que se invocó a este método.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lanza <classname>MongoCursorException</classname> si ya se hubiera empezado a recorrer el cursor.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>MongoCursor::sort</function></title>
   <programlisting role="php">
<![CDATA[
<?php
// ordenar por x ascendentemente
$cursor->sort(array('x' => 1));

// El orden del array asociativo es importante. Por ejemplo, estos dos
// ejemplos generarán distintos resultados:

// ordena por fecha ascendentemente y después por edad descendentemente
$cursor->sort(array('date' => 1, 'age' => -1));

// ordena por edad descendentemente y después por fecha ascendentemente
$cursor->sort(array('age' => -1, 'date' => 1));
?>
]]>
   </programlisting>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
