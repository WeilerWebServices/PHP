<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 328496 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocursor.awaitdata" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCursor::awaitData</refname>
  <refpurpose>Establece si el cursor esperará un momento a que un cursor de seguimiento devuelva más datos</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCursor::awaitData</methodname>
   <methodparam choice="opt"><type>bool</type><parameter>wait</parameter><initializer>true</initializer></methodparam>
  </methodsynopsis>
  <para>
   Este método se usa con cursores de seguimiento. Si se está al final de los
   datos, se bloquea un momento en lugar de no devolver datos. Después de un tiempo de
   espera, se devuelve de la manera normal.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>wait</parameter>
     </term>
     <listitem>
      <para>
       Si el cursor debería esperar a que estén disponibles más datos.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve este cursor.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lanza una <classname>MongoCursorException</classname> si este cursor ha empezado a iterar.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>MongoCursor::awaitData</function></title>
   <para>
    En este ejemplo, le seguimos la pista a "oplog" y, en lugar de dormir durante cada
    iteración, se establece la opción <function>MongoCursor::awaitData</function>.
    <function>MongoCursor::hasNext</function> ahora bloqueará hasta que haya
    más datos disponibles.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient( 'mongodb://localhost:13000', array( 'replSet' => 'seta' ) );
$c = $m->local->selectCollection( 'oplog.rs' );
$cursor = $c->find( array( 'ns' => 'demo.article', 'op' => 'i' ) );
$cursor->tailable( true );
$cursor->awaitData( true );

while (true) {
    if (!$cursor->hasNext()) {
        // we've read all the results, exit
        if ($cursor->dead()) {
            break;
        }
    } else {
        var_dump( $cursor->getNext() );
    }
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   La documentación principal de MongoDB sobre <link xlink:href="&url.mongodb.dochub.tailable;">cursores de seguimiento</link>.
  </para>
  <para>
   <simplelist>
    <member><function>MongoCursor::tailable</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
