<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334691 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongocursor.addoption" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCursor::addOption</refname>
  <refpurpose>Añade un par clave/valor de alto nivel a una consulta</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCursor::addOption</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
  </methodsynopsis>
  <para>
   Esta es una función avanzada y no debería usarse a menos que se sepa lo que se
   está haciendo.
  </para>
  <para>
   Una consulta puede ser opcionalmente anidada en un campo "query" si se proporcionan otras opciones,
   como una ordenación o sugerencia. Por ejemplo, añadir una ordenación ocasiona que la consulta
   se convierta en un subcampo de un objeto de consulta mayor, como:
   <programlisting role="php">
<![CDATA[
<?php

$query = array("query" => $query, "orderby" => $sort);

?>
]]>
   </programlisting>
  </para>
  <para>
   Este método se usa para añadir un campo de alto nivel a una consulta. Hace que la consulta sea
   subobjeto (si ya no lo fuera) y añade el par clave/valor elegido
   al nivel más alto.
  </para>
  <warning>
   <para>
    No se puede usar para añadir criterios extra a una consulta al vuelo. Por ejemplo,
    esto <emphasis>no</emphasis> funcionará:
    <programlisting role="php">
<![CDATA[
<?php

// INCORRECTO
$cursor = $users->find()->addOption("name", "joe")->addOption("age", 20);

?>
]]>
    </programlisting>
    Esto <emphasis>no</emphasis> consultará por un ususario llamado "joe" de 20 años.
   </para>
  </warning>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>key</parameter>
     </term>
     <listitem>
      <para>
       El nombre del campo a añadir.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>value</parameter>
     </term>
     <listitem>
      <para>
       El valor a añadir.
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Returns this cursor.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lanza una <classname>MongoCursorException</classname> si este cursor ha empezado a iterar.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo para añadir un comentario con <function>MongoCursor::addOption</function></title>
   <para>
    MongoDB admite el envío de opciones especiales al servidor. El shell utiliza
    la opción <literal>_addSpecial</literal> para enviar un comentario dado por
    <literal>$comment</literal> al servidor. Este comentario aparecerá en
    el registro de perfiles (para consultas lentas, p.ej.). En el controlador de PHP, se utilizar
    el método <function>MongoCursor::addOption</function>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$m = new MongoClient;
$c = $m->demo->demo;
$cursor = $c->find();
$cursor->addOption('$comment', "Este comentario se mostrará en el registro de perfiles");

foreach ($cursor as $documento) { /* vacío */ }
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
{
    "op" : "query",
    "ns" : "demo.demo",
    "query" : {
        "$query" : {
             
        },
        "$comment" : "Este comentario se mostrará en el registro de perfiles"
    },
    "cursorid" : 168463566447,
    "ntoreturn" : 0,
    "ntoskip" : 0,
    "nscanned" : 101,
    "nscannedObjects" : 101,
    "keyUpdates" : 0,
    "numYield" : 0,
…
]]>
   </screen>
  </example>
  <example>
   <title>Ejemplo de <function>MongoCursor::addOption</function></title>
   <para>
    El uso de <function>MongoCursor::skip</function> para omitir millones de
    resultados puede ser lento. Un atajo para esto es usar las opciones
    <literal>$min</literal> o <literal>$max</literal> para la consulta.
    Pueden ser útiles, pero requieren un índice exactamente en los campos que van a
    ser buscados. Este es un ejemplo de cómo usar <literal>$min</literal> como
    alternativa a <function>MongoCursor::skip</function>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// asegurarse de tener un índice
$c->ensureIndex(array("ts" => 1));

// podría ser necesario modificar esto para ejecutarlo en un tiempo razonable en
// máquinas lentas (debería tomar unos 30 segundos en una buena máquina)
for ($i = 0; $i < 30000000; $i++) {
    $c->insert(array("ts" => new MongoDate(), "i" => $i));
}

$ahora = strtotime("now");

// buscar documentos insertados en los últimos 2 segundos
$cursor = $c->find()->addOption('$min', array("ts" => $ahora-2));

?>
]]>
   </programlisting>
  </example>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
