<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 332331 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<refentry xml:id="mongocollection.find" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::find</refname>
  <refpurpose>Consulta esta colección, devolviendo un objeto <classname>MongoCursor</classname>
   para el conjunto de resultados</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>MongoCursor</type><methodname>MongoCollection::find</methodname>
   <methodparam choice="opt"><type>array</type><parameter>query</parameter><initializer>array()</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>fields</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;  
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>query</parameter>
     </term>
     <listitem>
      <para>
       Los campos en los que buscar. El lenguaje de consultas de MongoDB es bastante
       extenso. El controlador de PHP, en la mayoría de los casos, pasará la consulta
       directamente al servidor, por lo que es una buena idea leer el manual de MongoDB sobre
       <link xlink:href="&url.mongodb.dochub.find;">find</link>.
      </para>
      <warning>
       <para>
        Asegúrese de que en todos los operadores de consulta especiales (los que empiezan
        con <literal>$</literal>) se usen comillas simples, ya que así PHP no intentará
        reemplazar <literal>"$exists"</literal> con el valor de la variable
        <literal>$exists</literal>.
       </para>
      </warning>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>fields</parameter>
     </term>
     <listitem>
      <para>
       Campos del resultado que se devolverán. El array está en el formato
       <literal>array('nombrecampo' => true, 'nombrecampo2' => true)</literal>.
       El campo <literal>_id</literal> se devuelve siempre.
      </para>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un cursor para los resultados de la búsqueda.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>MongoCollection::find</function></title>
   <para>Este ejemplo demuestra las opciones de búsqueda básica.</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$collection = new MongoCollection($db, 'produce');

// buscar frutas
$fruitQuery = array('Type' => 'Fruit');

$cursor = $collection->find($fruitQuery);
foreach ($cursor as $doc) {
    var_dump($doc);
}

// buscar los que son dulces. Taste es un hijo de Details. 
$sweetQuery = array('Details.Taste' => 'Sweet');
echo "Sweet\n";
$cursor = $collection->find($sweetQuery);
foreach ($cursor as $doc) {
    var_dump($doc);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(4) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "50a87dd084f045a19b220dd6"
  }
  ["Name"]=>
  string(5) "Apple"
  ["Type"]=>
  string(5) "Fruit"
  ["Details"]=>
  array(2) {
    ["Taste"]=>
    string(5) "Sweet"
    ["Colour"]=>
    string(3) "Red"
  }
}
array(4) {
  ["_id"]=>
  object(MongoId)#8 (1) {
    ["$id"]=>
    string(24) "50a87de084f045a19b220dd7"
  }
  ["Name"]=>
  string(5) "Lemon"
  ["Type"]=>
  string(5) "Fruit"
  ["Details"]=>
  array(2) {
    ["Taste"]=>
    string(4) "Sour"
    ["Colour"]=>
    string(5) "Green"
  }
}

Sweet:
array(4) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "50a87dd084f045a19b220dd6"
  }
  ["Name"]=>
  string(5) "Apple"
  ["Type"]=>
  string(5) "Fruit"
  ["Details"]=>
  array(2) {
    ["Taste"]=>
    string(5) "Sweet"
    ["Colour"]=>
    string(3) "Red"
  }
}
]]>
   </screen>
   <para>
    Véase <classname>MongoCursor</classname> para más información sobre cómo trabajar con cursores.
   </para>
  </example>
  <example>
   <title>Ejemplo de <function>MongoCollection::find</function></title>
   <para>Este ejemplo muestra como buscar en un rango.</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$colección = new MongoCollection($db, 'phpmanual');

// buscar documentos donde 5 < x < 20
$rangeQuery = array('x' => array( '$gt' => 5, '$lt' => 20 ));

$cursor = $colección->find($rangeQuery);
foreach ($cursor as $doc) {
    var_dump($doc);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(2) {
  ["_id"]=>
  object(MongoId)#10 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000000"
  }
  ["x"]=>
  int(12)
}
array(2) {
  ["_id"]=>
  object(MongoId)#11 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000001"
  }
  ["x"]=>
  int(12)
}
]]>
   </screen>
   <para>
    Véase <classname>MongoCursor</classname> para más información sobre cómo trabajar con cursores.
   </para>
  </example>
  <example>
   <title>Ejemplo de <function>MongoCollection::find</function> usando $where</title>
   <para>Este ejemplo demuestra cómo buscar en una colección usando código javascript para reducir el conjunto de resultados.</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$colección = new MongoCollection($db, 'phpmanual');

$js = "function() {
    return this.name == 'Joe' || this.age == 50;
}";
$cursor = $colección->find(array('$where' => $js));
foreach ($cursor as $doc) {
    var_dump($doc);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000002"
  }
  ["name"]=>
  string(3) "Joe"
  ["age"]=>
  int(20)
}
]]>
   </screen>
  </example>
  <example>
   <title>Ejemplo de <function>MongoCollection::find</function> usando $in</title>
   <para>Este ejemplo demuestra cómo buscar una colección usando el operador $in.</para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$colección = new MongoCollection($db, 'phpmanual');

$cursor = $colección->find(array(
    'name' => array('$in' => array('Joe', 'Wendy'))
));

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(3) {
  ["_id"]=>
  object(MongoId)#7 (1) {
    ["$id"]=>
    string(24) "4ebc3e3710b89f2349000002"
  }
  ["name"]=>
  string(3) "Joe"
  ["age"]=>
  int(20)
}
]]>
   </screen>
  </example>
  
  <example>
   <title>Obtener resultados en forma de array</title>
   <para>
    Devuelve un <classname>MongoCursor</classname>. A menudo, los principiantes
    se sienten más cómodos usando arrays. Para convertir un cursor en un
    array, utilice la función <function>iterator_to_array</function>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new MongoClient();
$db = $m->selectDB('test');
$colección = new MongoCollection($db, 'phpmanual');

$cursor = $colección->find();
$array = iterator_to_array($cursor);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(3) {
  ["4ebc40af10b89f5149000000"]=>
  array(2) {
    ["_id"]=>
    object(MongoId)#6 (1) {
      ["$id"]=>
      string(24) "4ebc40af10b89f5149000000"
    }
    ["x"]=>
    int(12)
  }
  ["4ebc40af10b89f5149000001"]=>
  array(2) {
    ["_id"]=>
    object(MongoId)#11 (1) {
      ["$id"]=>
      string(24) "4ebc40af10b89f5149000001"
    }
    ["x"]=>
    int(12)
  }
  ["4ebc40af10b89f5149000002"]=>
  array(3) {
    ["_id"]=>
    object(MongoId)#12 (1) {
      ["$id"]=>
      string(24) "4ebc40af10b89f5149000002"
    }
    ["name"]=>
    string(3) "Joe"
    ["age"]=>
    int(20)
  }
}
]]>
   </screen>
   <para>
    Al usar <function>iterator_to_array</function> se fuerza a que el controlador cargue todos los
    resultados en memoria. ¡No lo use cuando el resultado supere el tamaño máximo
    de memoria!
   </para>
   <para>
    Además, algunas colecciones del sistema no tienen un campo <literal>_id</literal>.
    Si se trabaja con colecciones que pudieran tener documentos
    sin <literal>_id</literal>s, establezca &false; el segundo argumento de
    <function>iterator_to_array</function> (así, no tratará de usar como clave el
    valor del campo <literal>_id</literal> inexistente).
   </para>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>MongoCollection::findOne</function></member>
   <member><function>MongoCollection::insert</function></member>
   <member>Documentación de MongoDB sobre <link xlink:href="&url.mongodb.dochub.find;">find</link>.</member>
  </simplelist>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
