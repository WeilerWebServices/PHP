<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 333265 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<refentry xml:id="mongocollection.group" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::group</refname>
  <refpurpose>Lleva a cabo una operación similar al comando GROUP BY de SQL</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>MongoCollection::group</methodname>
   <methodparam><type>mixed</type><parameter>keys</parameter></methodparam>
   <methodparam><type>array</type><parameter>initial</parameter></methodparam>
   <methodparam><type>MongoCode</type><parameter>reduce</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;  
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>keys</parameter>
     </term>
     <listitem>
      <para>
       Campos a agrupar. Si se pasa un array o un objeto que no es de código, será la clave
       usada para agrupar resultados. 
      </para>
      <para>1.0.4+: Si <parameter>keys</parameter> es una instancia de
       <classname>MongoCode</classname>, <parameter>keys</parameter> será tratado como una función
       que devuelve la clave con la que agrupar (revise el ejemplo de abajo
       sobre "Pasar una función a <parameter>keys</parameter>").  
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>initial</parameter>
     </term>
     <listitem>
      <para>
       Valor inicial del objeto contador de acumulación.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>reduce</parameter>
     </term>
     <listitem>
      <para>
       Una función que toma dos argumentos (el documento actual y la acumulación
       en este punto) y realiza la acumulación.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Parámetros opcionales para el comando group. Las opciones válidas son:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         <literal>"condition"</literal>
        </para>
        <para>
         Condición para incluir un documento a la acumulación.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>"finalize"</literal>
        </para>
        <para>
         Función que se invoca por cada clave única que toma la salida de la función
         reduce.
        </para>
       </listitem>
       &mongo.command.parameters.maxtimems;
      </itemizedlist>
     </listitem>
    </varlistentry>   
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un array que contiene el resultado.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.5.0</entry>
       <entry>Se añadió la opción <literal>"maxTimeMS"</literal>.</entry>
      </row>
      <row>
       <entry>1.2.11</entry>
       <entry>
        Emite un error de nivel <constant>E_DEPRECATED</constant> cuando
        <parameter>options</parameter> es de tipo <type>scalar</type>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>MongoCollection::group</function></title>
   <para>
    Agrupa los documentos por categoría y crea una lista de los nombres que hay
    dentro de dicha categoría.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$colección->insert(array("categoria" => "fruta", "nombre" => "manzana"));
$colección->insert(array("categoria" => "fruta", "nombre" => "melocoton"));
$colección->insert(array("categoria" => "fruta", "nombre" => "platano"));
$colección->insert(array("categoria" => "verdura", "nombre" => "maiz"));
$colección->insert(array("categoria" => "verdura", "nombre" => "brocoli"));

$keys = array("categoria" => 1);

$initial = array("items" => array());

$reduce = "function (obj, prev) { prev.items.push(obj.nombre); }";

$g = $colección->group($keys, $initial, $reduce);

echo json_encode($g['retval']);

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
[{"categoria":"fruta","items":["manzana","melocoton","platano"]},{"categoria":"verdura","items":["maiz","brocoli"]}]
]]>
   </screen>
  </example>
  
  <example>
   <title>Ejemplo de <function>MongoCollection::group</function></title>
   <para>
    Este ejemplo no utiliza ninguna clave, por lo que cada documento será su propio grupo.
    Además, usa una condición: sólo los documentos que la cumplan serán procesados
    por la función de agrupación.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$colección->save(array("a" => 2));
$colección->save(array("b" => 5));
$colección->save(array("a" => 1));

// usar todos los campos
$claves = array();

// establecer valores iniciales
$inicial = array("count" => 0);

// función JavaScript a realizar
$reduce = "function (obj, prev) { prev.count++; }";

// usar sólo los documentos donde el campo "a" es mayor que 1
$condicion = array('condition' => array("a" => array( '$gt' => 1)));

$g = $colección->group($claves, $inicial, $reduce, $condicion);

var_dump($g);

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(4) {
  ["retval"]=>
  array(1) {
    [0]=>
    array(1) {
      ["count"]=>
      float(1)
    }
  }
  ["count"]=>
  float(1)
  ["claves"]=>
  int(1)
  ["ok"]=>
  float(1)
}
]]>
   </screen>
  </example>
  
  <example>
   <title>Pasar una función a <parameter>keys</parameter></title>
   <para>
    Si se desea agrupar por algo distinto a un nombre de campo, se puede pasar
    una función como primer parámetro de 
    <function>MongoCollection::group</function>, y así se ejecutará con cada documento.
    Se usará el valor devuelto de la función como valor de
    agrupación.
   </para>
   <para>
    Este ejemplo demuestra cómo agrupar por el campo num módulo 4 (num % 4).
   </para>
   
   <programlisting role="php">
<![CDATA[
<?php

$c->group(new MongoCode('function(doc) { return {mod : doc.num % 4}; }'),
     array("count" => 0),
     new MongoCode('function(current, total) { total.count++; }'));

?>
]]>
   </programlisting>
  </example>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
