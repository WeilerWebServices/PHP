<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335169 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongowritebatch.add" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoWriteBatch::add</refname>
  <refpurpose>Añade una operación de escritura a un lote</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>bool</type><methodname>MongoWriteBatch::add</methodname>
   <methodparam><type>array</type><parameter>item</parameter></methodparam>
  </methodsynopsis>
  <para>
   Añade una operación de escritura al lote.
  </para>
  <para>
   Si <parameter>$item</parameter> hace que el lote exceda los límites
   <link xlink:href="url.mongodb.dochub.maxWriteBatchSize">maxWriteBatchSize</link>
   o <link xlink:href="url.mongodb.dochub.maxBsonObjectSize">maxBsonObjectSize</link>,
   el controlador dividirá internamente los lotes en varias órdenes de
   escritura en la llamada a <methodname>MongoWriteBatch::execute</methodname>.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>item</parameter></term>
    <listitem>
     <para>
      Un array que describe una operación de escritura. La estructura de este valor
      depende del tipo de operación del lote.
      <informaltable>
       <thead>
        <row>
         <entry>Tipo de lote</entry>
         <entry>Argumento previsto</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><constant>MongoWriteBatch::COMMAND_INSERT</constant></entry>
         <entry>
          <simpara>El documento a añadir.</simpara>
         </entry>
        </row>
        <row>
         <entry><constant>MongoWriteBatch::COMMAND_UPDATE</constant></entry>
         <entry>
          <para>Operación de acualización pura.</para>
          <para>Las claves requeridas son <literal>"q"</literal> y <literal>"u"</literal>, las cuales se corresponden a los parámetros <link linkend="mongocollection.update.criteria"><parameter>$criteria</parameter></link> y <link linkend="mongocollection.update.new_object"><parameter>$new_object</parameter></link> de <function>MongoCollection::update</function>, respectivamente.</para>
          <para>Las claves opcionales son <literal>"multi"</literal> y <literal>"upsert"</literal>, las cuales se corresponden a las opciones <link linkend="mongocollection.update.multiple"><literal>"multiple"</literal></link> y <link linkend="mongocollection.update.upsert"><literal>"upsert"</literal></link> para <function>MongoCollection::update</function>, respectivamente. Si no se especifican, ambas opciones se predeterminan a &false;.</para>
         </entry>
        </row>
        <row>
         <entry><constant>MongoWriteBatch::COMMAND_DELETE</constant></entry>
         <entry>
          <para>Operación de eliminación pura..</para>
          <para>Las claves requeridas son: <literal>"q"</literal> y <literal>"limit"</literal>, las cuales se corresponden al parámetro <link linkend="mongocollection.remove.criteria"><parameter>$criteria</parameter></link> y a la opción <link linkend="mongocollection.remove.justone"><literal>"justOne"</literal></link> de <function>MongoCollection::remove</function>, respectivamente.</para>
          <para>La opción <literal>"limit"</literal> es un <type>integer</type>; sin embargo, MongoDB únicamente soporta <literal>0</literal> (es decir, eliminar todos los documentos coincidentes) y <literal>1</literal> (es decir, eliminar al menos un elemento coincidente) por ahora.</para>
         </entry>
        </row>
       </tbody>
      </informaltable>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve &true; en caso de éxito y lanza una excepción en caso de fallo.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   <member><classname>Exception</classname> en fallos de análisis de parámetros</member>
   <member><classname>Exception</classname> en errores de validación de argumentos (p.ej. claves ausentes)</member>
  </simplelist>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="mongowritebatch.add.example.insert">
   <title>Ejemplo de <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Poner en lotes varias operaciones de inserción
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$colección = $mc->selectCollection("test", "test");


$docs = array();
$docs[] = array("my" => "demo");
$docs[] = array("is" => "working");
$docs[] = array("pretty" => "well");

$lote = new MongoInsertBatch($colección);
foreach($docs as $documento) {
    $lote->add($documento);
}
$lote->execute(array("w" => 1));
?>
]]>
   </programlisting>
  </example>
  
  <example xml:id="mongowritebatch.add.example.update">
   <title>Ejemplo de <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Poner en lotes varias operaciones de actualización
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$colección = $mc->selectCollection("test", "test");


$item1 = array(
    "q" => array("my" => "demo"),
    "u" => array('$set' => array("try" => 1)),
    "multi"  => false, /* valor predeterminado */
    "upsert" => false, /* valor predeterminado */
);
$item2 = array(
    "q" => array("is" => "working"),
    "u" => array('$set' => array("try" => 2)),
    "multi" => true,
);
$item3 = array(
    "q" => array("created" => "new-document"),
    "u" => array('$set' => array("try" => 3)),
    "upsert" => true,
);

$lote = new MongoUpdateBatch($colección);
$lote->add($item1);
$lote->add($item2);
$lote->add($item3);
$lote->execute(array("w" => 1));

?>
]]>
   </programlisting>
  </example>
  
  <example xml:id="mongowritebatch.add.example.delete">
   <title>Ejemplo de <methodname>MongoWriteBatch::add</methodname></title>
   <para>
    Poner en lotes varias operaciones de eliminación
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$mc = new MongoClient("localhost");
$colección = $mc->selectCollection("test", "test");


$item1 = array(
    "q" => array("my" => "demo"),
    "limit" => 1,
);
$item2 = array(
    "q" => array("try" => 3),
    "limit" => 1,
);


$lote = new MongoDeleteBatch($colección);
$lote->add($item1);
$lote->add($item2);
$lote->execute(array("w" => 1));
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 
 
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
