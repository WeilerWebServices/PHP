<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: yago Status: ready -->
<!-- Reviewed: no Maintainer: seros -->

<chapter xml:id="memcached.callbacks" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Retrollamadas</title>
 
 <section xml:id="memcached.callbacks.result">
  <title>Retrollamadas de resultados</title>
  <para>
   Las retrollamadas (<type>callback</type>) de resultados son invocadas por los métodos
   <methodname>Memcached::getDelayed</methodname> o
   <methodname>Memcached::getDelayedBykey</methodname> por cada ítem del 
   conjunto de resultados. A la retrollamada se le proporciona el objeto Memcached y el array
   con la información del ítem. La retrollamada no tiene que devolver nada.
  </para>
  <example>
   <title>Ejemplo retrollamada de resultados</title>
   <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);
$items = array(
    'clave1' => 'valor1',
    'clave2' => 'valor2',
    'clave3' => 'valor3'
);
$m->setMulti($items);
$m->getDelayed(array('clave1', 'clave3'), true, 'rll_resultados');

function rll_resultados($memc, $item)
{
    var_dump($item);
}
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(3) {
  ["key"]=>
  string(6) "clave1"
  ["value"]=>
  string(6) "valor1"
  ["cas"]=>
  float(49)
}
array(3) {
  ["key"]=>
  string(6) "clave3"
  ["value"]=>
  string(6) "valor3"
  ["cas"]=>
  float(50)
}
]]>
   </screen>
  </example>
 </section>
 
 <section xml:id="memcached.callbacks.read-through">
  <title>Retrollamadas de caché de lectura previa</title>
  <para>
   Las retrollamadas de caché de lectura previa son invocadas cuando un ítem no puede ser obtenido
   de un servidor. A la retrollamada se le proporciona el objecto Memcached, la clave
   solicitada y el valor por referencia de la variable. La retrollamada se encarga de
   definir el valor y devolver true o false. Si la retrollamada devuelve true,
   Memcached guardará el valor en el servidor y lo devolverá a la 
   función de llamada original. Solamente <methodname>Memcached::get</methodname> y
   <methodname>Memcached::getByKey</methodname> admiten estas retrollamadas,
   ya que el protocolo memcache no provee información sobre las claves
   que no fueron encontradas en la petición de varias claves.
  </para>
  <example>
   <title>Ejemplo de lectura de retrollamada</title>
   <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);

$info_perfil = $m->get('user:'.$id_usuario, 'rll_info_usuario');

function rll_info_usuario($memc, $clave, &$valor)
{
    $id_usuario = substr($clave, 5);
    /* buscar el prefil en la BD */
    /* ... */
    $valor = $info_perfil;
    return true;
}
?>
]]>
   </programlisting>
  </example>
 </section>
 
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
