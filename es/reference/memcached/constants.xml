<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: yago Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<appendix xml:id="memcached.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <variablelist>
  
  <varlistentry xml:id="memcached.constants.opt-compression">
   <term><constant>Memcached::OPT_COMPRESSION</constant></term>
   <listitem>
    <para>Activa o desactiva la compresión de la carga. Cuando está activada,
     los valores de ítems mayores que cierto umbral (actualmente 100 bytes) serán
     comprimidos durante el almacenamiento y descomprimidos durante su recuperación
     de forma transparente.</para>
    <para>Tipo: <literal>boolean</literal>, predeterminado: &true;.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-serializer">
   <term><constant>Memcached::OPT_SERIALIZER</constant></term>
   <listitem>
    <para>
     Especifica el serializador a emplear para serializar valores no escalares.
     Los serializadores válidos son <constant>Memcached::SERIALIZER_PHP</constant>
     o <constant>Memcached::SERIALIZER_IGBINARY</constant>. Este último solo se
     admite cuando memcached está configurada con la opción
     <literal>--enable-memcached-igbinary</literal> y la extensión
     <literal>igbinary</literal> está cargada.
    </para>
    <para>Tipo: <literal>integer</literal>, predeterminado: <constant>Memcached::SERIALIZER_PHP</constant>.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.serializer-php">
   <term><constant>Memcached::SERIALIZER_PHP</constant></term>
   <listitem>
    <para>El serializador de PHP predeterminado.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.serializer-igbinary">
   <term><constant>Memcached::SERIALIZER_IGBINARY</constant></term>
   <listitem>
    <para>El serializador de <link xlink:href="&url.igbinary;">igbinary</link>.
     En lugar de una representación textual, almacena estructuras de datos de PHP de
     una forma binaria compacta, lo que resulta en mejoras de espacio y tiempo.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.serializer-json">
   <term><constant>Memcached::SERIALIZER_JSON</constant></term>
   <listitem>
    <para>El serializador de JSON. Requiere PHP 5.2.10+.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-prefix-key">
   <term><constant>Memcached::OPT_PREFIX_KEY</constant></term>
   <listitem>
    <para>Puede emplearse para crear un "dominio" para las claves de ítems. El valor
     especificado será utilizado para prefijar cada una de las claves. No puede ser
     mayor que <literal>128</literal> caracteres y reducirá el 
     tamaño máximo disponible de la clave. El prefijo se aplica solamente a las
     claves de los ítems, no en las claves de servidores.</para>
    <para>Tipo: <literal>string</literal>, predeterminado: <literal>""</literal>.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-hash">
   <term><constant>Memcached::OPT_HASH</constant></term>
   <listitem>
    <para>Especifica el algoritmo hash utilizado por las claves de ítems. Los valores
     válidos se proporcionan mediante las constantes <constant>Memcached::HASH_*</constant>.
     Cada algoritmo hash tiene sus ventajas y desventajas. Se deberá utilizar el
     predeterminado si no se tiene conocimiento o no tiene relevancia.</para>
    <para>Tipo: <literal>integer</literal>, predeterminado: <constant>Memcached::HASH_DEFAULT</constant></para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.hash-default">
   <term><constant>Memcached::HASH_DEFAULT</constant></term>
   <listitem>
    <para>Algoritmo hash predeterminado (Jenkins una-cada-vez) de claves de ítems.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.hash-md5">
   <term><constant>Memcached::HASH_MD5</constant></term>
   <listitem>
    <para>Algoritmo hash para claves de ítems MD5.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.hash-crc">
   <term><constant>Memcached::HASH_CRC</constant></term>
   <listitem>
    <para>Algoritmo hash para claves de ítems CRC.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.hash-fnv1-64">
   <term><constant>Memcached::HASH_FNV1_64</constant></term>
   <listitem>
    <para>Algoritmo hash para claves de ítems FNV1_64.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.hash-fnv1a-64">
   <term><constant>Memcached::HASH_FNV1A_64</constant></term>
   <listitem>
    <para>Algoritmo hash para claves de ítems FNV1_64A.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.hash-fnv1-32">
   <term><constant>Memcached::HASH_FNV1_32</constant></term>
   <listitem>
    <para>Algoritmo hash para claves de ítems FNV1_32.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.hash-fnv1a-32">
   <term><constant>Memcached::HASH_FNV1A_32</constant></term>
   <listitem>
    <para>Algoritmo hash para claves de ítems FNV1_32A.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.hash-hsieh">
   <term><constant>Memcached::HASH_HSIEH</constant></term>
   <listitem>
    <para>Algoritmo hash para claves de ítems Hsieh.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.hash-murmur">
   <term><constant>Memcached::HASH_MURMUR</constant></term>
   <listitem>
    <para>Algoritmo hash para claves de ítems Murmur</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-distribution">
   <term><constant>Memcached::OPT_DISTRIBUTION</constant></term>
   <listitem>
    <para>Especifica el método para distribuir claves de ítems en los servidores.
     Actualmente, los métodos admitidos son módulo y hash consistente. El hash consistente
     proporciona una mejor distribución y permite que los servidores sean añadidos
     al clúster con el mínimo de pérdidas de caché.</para>
    <para>Tipo: <literal>integer</literal>, predeterminado: <constant>Memcached::DISTRIBUTION_MODULA.</constant></para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.distribution-modula">
   <term><constant>Memcached::DISTRIBUTION_MODULA</constant></term>
   <listitem>
    <para>Algoritmo de distribución de claves basado en módulo.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.distribution-consistent">
   <term><constant>Memcached::DISTRIBUTION_CONSISTENT</constant></term>
   <listitem>
    <para>Algoritmo de distribución de claves hash consistentes (basado en libketama).</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-libketama-compatible">
   <term><constant>Memcached::OPT_LIBKETAMA_COMPATIBLE</constant></term>
   <listitem>
    <para>Activa o desactiva la compatibilidad con el comportamiento de libketama. Cuando
     está activada, el algoritmo hash de claves de ítems se establece a MD5 y la distribución
     se establece a la distribución de hash consistente compensada. Esto es útil
     debido a que otros clientes basados en libketama (Python, Ruby, etc.) con la misma
     configuración de servidor serán capaces de acceder a las claves de forma transparente.
    </para>
    <note>
     <para>
      Es muy recomendable activar esta opción para el empleo de
      hash consistente, y seguramente estará activada de forma predeterminada en 
      futuras versiones.
     </para>
    </note>
    <para>Tipo: <literal>boolean</literal>, predeterminado: &false;.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-buffer-writes">
   <term><constant>Memcached::OPT_BUFFER_WRITES</constant></term>
   <listitem>
    <para>Activa o desactiva la E/S en búfer. Activar la E/S en búfer hace
     que los comandos de almacenamiento usen el búfer en lugar de ser enviados. Cualquier acción que
     obtenga datos hace que la información del búfer sea enviada a la conexión remota.
     El quitar o cerrar la conexión también ocasionará que
     los datos del búfer sean enviados a la conexión remota.</para>
    <para>Tipo: <literal>boolean</literal>, predeterminado: &false;.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-binary-protocol">
   <term><constant>Memcached::OPT_BINARY_PROTOCOL</constant></term>
   <listitem>
    <para>Activa el empleo del protocolo binario. Observe que no se puede
     cambiar esta opción cuando una conexión está abierta.</para>
    <para>Tipo: <literal>boolean</literal>, predeterminado: &false;.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-no-block">
   <term><constant>Memcached::OPT_NO_BLOCK</constant></term>
   <listitem>
    <para>Activa o desactiva la E/S asíncrona. Es el transporte más rápido
     disponible para funciones de almacenamiento.</para>
    <para>Tipo: <literal>boolean</literal>, predeterminado: &false;.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-tcp-nodelay">
   <term><constant>Memcached::OPT_TCP_NODELAY</constant></term>
   <listitem>
    <para>Activa o desactiva la característica de no retraso para conectar a un socket (podría
     ser más rápida en algunos entornos).</para>
    <para>Tipo: <literal>boolean</literal>, predeterminado: &false;.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-socket-send-size">
   <term><constant>Memcached::OPT_SOCKET_SEND_SIZE</constant></term>
   <listitem>
    <para>El búfer máximo de envío de socket, en bytes.</para>
    <para>Tipo: <literal>integer</literal>, predeterminado: varía según la plataforma/configuración
     del kernel.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-socket-recv-size">
   <term><constant>Memcached::OPT_SOCKET_RECV_SIZE</constant></term>
   <listitem>
    <para>El búfer máximo de recepción de socket, en bytes.</para>
    <para>Tipo: <literal>integer</literal>, predeterminado: varía según la plataforma/configuración
     del kernel.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-connect-timeout">
   <term><constant>Memcached::OPT_CONNECT_TIMEOUT</constant></term>
   <listitem>
    <para>En el modo de no bloqueo, establecer el valor del tiempo de espera durante la conexión al
     socket, en milisengundos.</para>
    <para>Tipo: <literal>integer</literal>, predeterminado: <literal>1000</literal>.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-retry-timeout">
   <term><constant>Memcached::OPT_RETRY_TIMEOUT</constant></term>
   <listitem>
    <para>La cantidad de tiempo, en segundos, a esperar para reintentar la conexión
     en caso que haya fallado.</para>
    <para>Tipo: <literal>integer</literal>, predeterminado: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-send-timeout">
   <term><constant>Memcached::OPT_SEND_TIMEOUT</constant></term>
   <listitem>
    <para>Tiempo de espera para el envío al socket, en microsegundos. En los casos donde no se puede
     emplear E/S de no bloqueo, permitirá tener tiempos de espera al
     enviar datos.</para>
    <para>Tipo: <literal>integer</literal>, predeterminado: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-recv-timeout">
   <term><constant>Memcached::OPT_RECV_TIMEOUT</constant></term>
   <listitem>
    <para>Tiempo de espera para la lectura del socket, en microsegundos. En los casos donde no se puede
     emplear E/S de no bloqueo, permitirá tener tiempos de espera al
     leer datos.</para>
    <para>Tipo: <literal>integer</literal>, predeterminado: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-poll-timeout">
   <term><constant>Memcached::OPT_POLL_TIMEOUT</constant></term>
   <listitem>
    <para>Tiempo de espera para el agrupamiento de conexiones, en milisegundos.</para>
    <para>Tipo: <literal>integer</literal>, predeterminado: <literal>1000</literal>.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-cache-lookups">
   <term><constant>Memcached::OPT_CACHE_LOOKUPS</constant></term>
   <listitem>
    <para>Activa o desactiva caché para resoluciones DNS.</para>
    <para>Tipo: <literal>boolean</literal>, predeterminado: &false;.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.opt-server-failure-limit">
   <term><constant>Memcached::OPT_SERVER_FAILURE_LIMIT</constant></term>
   <listitem>
    <para>Especifica el límite de intentos de conexión al servidor. El
     servidor será eliminado después del número indicado de fallos continuos de 
     conexión.</para>
    <para>Tipo: <literal>integer</literal>, predeterminado: <literal>0</literal>.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.have-igbinary">
   <term><constant>Memcached::HAVE_IGBINARY</constant></term>
   <listitem>
    <para>Indica si está disponible el soporte para el serializador igbinary.</para>
    <para>Tipo: <literal>boolean</literal>.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.have-json">
   <term><constant>Memcached::HAVE_JSON</constant></term>
   <listitem>
    <para>Indica si está disponible el soporte para el serializador JSON.</para>
    <para>Tipo: <literal>boolean</literal>.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.get-preserve-order">
   <term><constant>Memcached::GET_PRESERVE_ORDER</constant></term>
   <listitem>
    <para>Opción para <function>Memcached::getMulti</function> y
     <function>Memcached::getMultiByKey</function> para garantizar que las claves son
     devueltas en el mismo orden que fueron solicitadas. Las claves no existentes
     obtienen un valor predeterminado de NULL.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-success">
   <term><constant>Memcached::RES_SUCCESS</constant></term>
   <listitem>
    <para>La operación se completó satisfactoriamente.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-failure">
   <term><constant>Memcached::RES_FAILURE</constant></term>
   <listitem>
    <para>La operación falló de algún modo.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-host-lookup-failure">
   <term><constant>Memcached::RES_HOST_LOOKUP_FAILURE</constant></term>
   <listitem>
    <para>Falló la resolución DNS.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-unknown-read-failure">
   <term><constant>Memcached::RES_UNKNOWN_READ_FAILURE</constant></term>
   <listitem>
    <para>Fallo al leer datos de la red.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-protocol-error">
   <term><constant>Memcached::RES_PROTOCOL_ERROR</constant></term>
   <listitem>
    <para>Comando erróneo del protocolo memcached.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-client-error">
   <term><constant>Memcached::RES_CLIENT_ERROR</constant></term>
   <listitem>
    <para>Error en el lado del cliente.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-server-error">
   <term><constant>Memcached::RES_SERVER_ERROR</constant></term>
   <listitem>
    <para>Error en el lado del servidor.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-write-failure">
   <term><constant>Memcached::RES_WRITE_FAILURE</constant></term>
   <listitem>
    <para>Fallo al escribir datos en la red.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-data-exists">
   <term><constant>Memcached::RES_DATA_EXISTS</constant></term>
   <listitem>
    <para>Fallo al comparar e intercambiar: el ítem que se intenta guardar ha sido
     modificado desde la última vez que se obtuvo.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-notstored">
   <term><constant>Memcached::RES_NOTSTORED</constant></term>
   <listitem>
    <para>El ítem no fue guardado: pero no a causa de un error. Normalmente
     significa que no se cumplió la condición para un comando "add" o "replace",
     o que el ítem está en una cola para su eliminación.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-notfound">
   <term><constant>Memcached::RES_NOTFOUND</constant></term>
   <listitem>
    <para>No se encontró el ítem con esta clave (mediante la operación "get" 
     o "cas").</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-partial-read">
   <term><constant>Memcached::RES_PARTIAL_READ</constant></term>
   <listitem>
    <para>Error de lectura parcial de datos en la red.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-some-errors">
   <term><constant>Memcached::RES_SOME_ERRORS</constant></term>
   <listitem>
    <para>Algunos errores sucedieron durante una obtención múltiple.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-no-servers">
   <term><constant>Memcached::RES_NO_SERVERS</constant></term>
   <listitem>
    <para>La lista de servidores está vacía.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-end">
   <term><constant>Memcached::RES_END</constant></term>
   <listitem>
    <para>Final del conjunto de resultados.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-errno">
   <term><constant>Memcached::RES_ERRNO</constant></term>
   <listitem>
    <para>Error del sistema.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-buffered">
   <term><constant>Memcached::RES_BUFFERED</constant></term>
   <listitem>
    <para>La operación estaba almacenada en búfer.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-timeout">
   <term><constant>Memcached::RES_TIMEOUT</constant></term>
   <listitem>
    <para>La operación expiró.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-bad-key-provided">
   <term><constant>Memcached::RES_BAD_KEY_PROVIDED</constant></term>
   <listitem>
    <para>Clave errónea.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-connection-socket-create-failure">
   <term><constant>Memcached::RES_CONNECTION_SOCKET_CREATE_FAILURE</constant></term>
   <listitem>
    <para>Fallo al crear el socket de red.</para>
   </listitem>
  </varlistentry>
  
  <varlistentry xml:id="memcached.constants.res-payload-failure">
   <term><constant>Memcached::RES_PAYLOAD_FAILURE</constant></term>
   <listitem>
    <para>Error de carga: no se pudo comprimir/descomprimir o serializar/deserializar el valor.</para>
   </listitem>
  </varlistentry>
  
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

