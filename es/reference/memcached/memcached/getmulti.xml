<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 303570 Maintainer: yago Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<refentry xml:id="memcached.getmulti" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Memcached::getMulti</refname>
  <refpurpose>Obtener varios ítems</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>Memcached::getMulti</methodname>
   <methodparam><type>array</type><parameter>keys</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">cas_tokens</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>Memcached::getMulti</function> es similar a 
   <methodname>Memcached::get</methodname>, pero en lugar de un único ítem
   de clave, obtiene varios ítems cuyas claves se especifican en el array 
   <parameter>keys</parameter>. Si se proporciona la variable
   <parameter>cas_tokens</parameter>, esta contendrá los token CAS para los 
   ítems que se hayan encontrado.
   <note>
    <para>
     A diferencia de <methodname>Memcached::get</methodname> no es posible 
     especificar una retrollamada de caché de lectura previa para
     <function>Memcached::getMulti</function>, porque el protocolo memcache
     no provee información de las claves que no se encontraron en la petición
     de claves múltiple.
    </para>
   </note>
  </para>
  <para>
   El parámetro <parameter>flags</parameter> se puede emplear para especificar
   opciones adicionales para <function>Memcached::getMulti</function>. Actualmente,
   la única opción disponible es
   <constant>Memcached::GET_PRESERVE_ORDER</constant>, que garantiza que las
   claves sean devueltas en el mismo orden en que fueron solicitadas.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>keys</parameter></term>
     <listitem>
      <para>
       Array de claves a obtener.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cas_tokens</parameter></term>
     <listitem>
      <para>
       La variable donde guardar los token CAS de los ítems encontrados.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Los indicadores para la operación de obtención (get).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el array de ítems encontrados &return.falseforfailure;.
   &memcached.result.getresultcode;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>Memcached::getMulti</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);

$ítems = array(
    'clave1' => 'valor1',
    'clave2' => 'valor2',
    'clave3' => 'valor3'
);
$m->setMulti($ítems);
$resultado = $m->getMulti(array('clave1', 'clave3', 'clave_errónea'), $cas);
var_dump($resultado, $cas);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
array(2) {
  ["clave1"]=>
  string(6) "valor1"
  ["clave3"]=>
  string(6) "valor3"
}
array(2) {
  ["clave1"]=>
  float(2360)
  ["clave3"]=>
  float(2362)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo de <constant>Memcached::GET_PRESERVE_ORDER</constant></title>
    <programlisting role="php">
<![CDATA[
<?php
$m = new Memcached();
$m->addServer('localhost', 11211);

$data = array(
    'foo' => 'foo-data',
    'bar' => 'bar-data',
    'baz' => 'baz-data',
    'lol' => 'lol-data',
    'kek' => 'kek-data',
);

$m->setMulti($data, 3600);

$null = null;
$claves = array_keys($data);
$claves[] = 'zoo';
$obtenidas = $m->getMulti($claves, $null, Memcached::GET_PRESERVE_ORDER);

foreach ($obtenidas as $c => $v) {
    echo "$c $v\n";
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
foo foo-data
bar bar-data
baz baz-data
lol lol-data
kek kek-data
zoo 
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Memcached::getMultiByKey</methodname></member>
    <member><methodname>Memcached::get</methodname></member>
    <member><methodname>Memcached::getDelayed</methodname></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
