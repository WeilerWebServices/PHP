<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334762 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<reference xml:id="ref.sca" xmlns="http://docbook.org/ns/docbook">
 <title>&Functions; de SCA</title>
 
 <partintro>
  <!-- FIXME: This needs to be upgraded to the new oo-markup -->
  <!-- Class definition section -->
  <section xml:id="sca.classes"><!-- {{{ -->
   &reftitle.classes;
   <para> 
    La mayoría de la interfaz de SCA se realiza a través de las anotaciones dentro
    de componentes de SCA, por lo que hay pocas clases y métodos públicos. Las únicas
    clases de SCA que los scripts o componentes pueden invocar son la calse <classname>SCA</classname>
    misma, y las clases delegadas <classname>SCA_LocalProxy</classname>
    y <classname>SCA_SoapProxy</classname>.
   </para>
   
   <section xml:id="class.sca"><!-- {{{ -->
    <title><classname>SCA</classname></title>
    <para>
     Mucho del trabajo de la clase SCA se realiza cuando el fichero
     <filename>SCA.php</filename> se incluye dentro de un componente SCA.
     Sin embargo, un script de PHP podría incluir
     <filename>SCA.php</filename> y llamar al método
     <function>getService</function> de la clase SCA para
     obtener un delegado para un servicio. Un componente no cecesitará hacer esto ya que
     los delegados se obtienen en su lugar definiendo una variable de instancia con
     la anotación @reference.
    </para>
    <para> 
     Los componentes que necesitan crear un SDO para devolver a un llamador
     necesitarán una factoría de datos que invocar. Para este propósito, la clase SCA soporta
     el
     <function>createDataObject</function> método, el cual
     creará un SDO según el modelo definido por las anotaciones @types
     del componente. Los argumentos para
     <function>createDataObject</function> son los mismos que los del
     Servicio de Acceso a Datos de XML de SDO.
    </para>
    
    <section><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link linkend="sca.getservice">
         getService</link> - obtener un delegado para un servicio
       </para>
      </listitem>
      <listitem>
       <para>
        <link linkend="sca.createdataobject">
         createDataObject</link> - crear un SDO
       </para>
      </listitem>
     </itemizedlist>
    </section> <!-- }}} -->
   </section><!-- }}} -->
   
   <section xml:id="class.sca-localproxy"><!-- {{{ -->
    <title>
     <classname>SCA_LocalProxy</classname>
    </title>
    <para>
     Cuando se invoca a
     <function>getService</function> con un componente local de PHP
     como objetivo,se devuelve un delegado local. Un delegado local
     también se inyecta en las variables de instancia de un componente que estén
     definidas con una anotación @reference y una @binding.php. Cuando el
     script o componente hacen llamadas al delegado local, aquellas son pasadas
     al componente objetivo mismo.
    </para>
    <para> 
     Los componentes que necesitan crear un SDO para pasarlo a otro componente
     necesitarán una factoría de datos que invocar. Para este propósito, la
     clase SCA_LocalProxy soporta el método <function>createDataObject</function>,
     el cual creará un SDO según el modelo definido por las
     anotaciones @types del componente. Los argumentos para
     <function>createDataObject</function> son los mismos que los del
     Servicio de Acceso a Datos de XML de SDO.
    </para>
    
    <section><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link
        linkend="sca-localproxy.createdataobject">
         createDataObject</link> - crear un SDO
       </para>
      </listitem>
     </itemizedlist>
    </section><!-- }}} -->
   </section><!-- }}} -->
   
   <section xml:id="class.sca-soapproxy"><!-- {{{ -->
    <title>
     <classname>SCA_SoapProxy</classname>
    </title>
    <para>
     Cuando se invoca a
     <function>getService</function> con un fichero WSDL
     como objetivo, se devuelve un delgado SOAP. Un delegado SOAP también se
     inyecta a las variables de instancia de un componente que estén definidas con una
     anotación @reference y una @binding.soap. Cuando el sctipt o
     componente hacen llamadas al delegado SOAP, aquellas son formadas dentro de las
     petición de SOAP de servicios web y pasadas al componente objetivo, con
     la ayuda de la extensión Soap de PHP. 
    </para>
    <para> 
     Los componentes que necesitan crear un SDO para pasarlo a otro componente
     necesitarán una factoría de datos que invocar. Para este propósito, la
     clase <classname>SCA_SoapProxy</classname> soporta el
     método <function>createDataObject</function>, el cual creará un
     SDO según el modelo definido dentro de WSDL objetivo. Los
     argumentos para <function>createDataObject</function> son los mismos
     que los del Servicio de Acceso a Datos de XML de SDO.
    </para>
    
    <section><!-- {{{ -->
     &reftitle.methods;
     <itemizedlist>
      <listitem>
       <para>
        <link
        linkend="sca-soapproxy.createdataobject">
         createDataObject</link> - crear un SDO
       </para>
      </listitem>
     </itemizedlist>
    </section><!-- }}} -->
   </section><!-- }}} -->
  </section>
  <!-- }}} -->
  
 </partintro>
 
 &reference.sca.entities.SCA;
 &reference.sca.entities.SCA-LocalProxy;
 &reference.sca.entities.SCA-SoapProxy;
 
</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
