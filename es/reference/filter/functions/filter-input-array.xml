<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330268 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.filter-input-array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>filter_input_array</refname>
  <refpurpose>Obtiene variables externas y opcionalmente las filtra</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>filter_input_array</methodname>
   <methodparam><type>int</type><parameter>type</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>definition</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>add_empty</parameter><initializer>true</initializer></methodparam>
  </methodsynopsis>
  <para>
   Esta función es útil para recuperar muchos valores sin necesidad de hacer
   repetidas llamadas a <function>filter_input</function>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>type</parameter></term>
     <listitem>
      <para>
       Una de las siguientes: <constant>INPUT_GET</constant>, <constant>INPUT_POST</constant>,
       <constant>INPUT_COOKIE</constant>, <constant>INPUT_SERVER</constant> o
       <constant>INPUT_ENV</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>definition</parameter></term>
     <listitem>
      <para>
       Un array definiendo los argumentos. Una clave válida será aquella que contiene
       un <type>string</type> con el nombre de una variable y un valor
       válido aquel que o bien es un tipo <link linkend="filter.filters">filter type</link>
       o un <type>array</type> especificando opcionalmente el filtro, flags y
       opciones. Si el valor es un array, las claves válidas serán: <literal>filter</literal>
       que especifica el tipo <link linkend="filter.filters">filter type</link>,
       <literal>flags</literal> que define cualquier flag que deba aplicarse a los
       filtros, y <literal>options</literal> que establece cualquier opción que se deba
       aplicar al filtro. Para entender mejor su funcionamiento, vea el ejemplo inferior.
      </para>
      <para>
       Este parámetro puede ser también un entero que indique una <link
       linkend="filter.constants">constante de filtro</link>. Entonces todos
       los valores en el array de entrada son filtrados por ese filtro.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>add_empty</parameter></term>
     <listitem>
      <para>
       Añade claves faltantes como &null; al valor devuelto.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   En caso de éxito, un array con los valores de las variables que se han
   pedido o &false; en caso de fallo. Un valor del array puede ser &false; si
   el filtro falla o &null; si la variable no está creada. O, si se usa el
   flag <constant>FILTER_NULL_ON_FAILURE</constant> y la variable no está
   definida retorna &false; y &null; si el filtro falla.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo con <function>filter_input_array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
error_reporting(E_ALL | E_STRICT);
/* Los datos vienen realmente por POST
$_POST = array(
    'id_producto'    => 'libgd<script>',
    'componente'     => '10',
    'version'      => '2.0.33',
    'test_escalar'    => array('2', '23', '10', '12'),
    'test_array'     => '2',
);
*/

$args = array(
    'id_producto'   => FILTER_SANITIZE_ENCODED,
    'componente'    => array('filter'    => FILTER_VALIDATE_INT,
                            'flags'     => FILTER_REQUIRE_ARRAY, 
                            'options'   => array('min_range' => 1, 'max_range' => 10)
                           ),
    'version'     => FILTER_SANITIZE_ENCODED,
    'no_existe' => FILTER_VALIDATE_INT,
    'test_escalar'   => array(
                            'filter' => FILTER_VALIDATE_INT,
                            'flags'  => FILTER_REQUIRE_SCALAR,
                           ),
    'test_array'    => array(
                            'filter' => FILTER_VALIDATE_INT,
                            'flags'  => FILTER_REQUIRE_ARRAY,
                           )

);

$mis_entradas = filter_input_array(INPUT_POST, $args);

var_dump($mis_entradas);
echo "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(6) {
  ["id_producto"]=>
  array(1) {
    [0]=>
    string(17) "libgd%3Cscript%3E"
  }
  ["componente"]=>
  array(1) {
    [0]=>
    int(10)
  }
  ["version"]=>
  array(1) {
    [0]=>
    string(6) "2.0.33"
  }
  ["no_existe"]=>
  NULL
  ["test_escalar"]=>
  bool(false)
  ["test_array"]=>
  array(1) {
    [0]=>
    int(2)
  }
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.4.0</entry>
       <entry>
        Se añadió el parámetro <parameter>add_empty</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    No existe la clave <literal>REQUEST_TIME</literal> en la matriz
    <constant>INPUT_SERVER</constant> porque este valor se inserta posteriormente en
    <varname>$_SERVER</varname>.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>filter_input</function></member>
    <member><function>filter_var_array</function></member>
    <member><xref linkend="filter.filters" /></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
