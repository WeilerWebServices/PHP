<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 299490 Maintainer: yago Status: ready -->
<refentry xml:id="memcache.replace" xmlns="http://docbook.org/ns/docbook"> 
 <refnamediv>
  <refname>Memcache::replace</refname>
  <refpurpose>Reemplaza el valor de un valor existente</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::replace</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flag</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::replace</function> debe ser usado para reemplazar el valor de un
   valor existente en una <parameter>key</parameter> determinada. En caso que la 
   llave no exista, <function>Memcache::replace</function> devolverá 
   &false;. Por lo demás <function>Memcache::replace</function> funciona
   similar a <function>Memcache::set</function>.
   También se puede usar la función <function>memcache_replace</function>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       La clave que será asociada con el valor.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variable a guardar. Cadenas y enteros son guardados tal y como son,
       otros tipos son guardados de forma serializada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flag</parameter></term>
     <listitem>
      <para>
       Utilice <constant>MEMCACHE_COMPRESSED</constant> para guardar el valor de
       forma comprimida (utiliza zlib).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expire</parameter></term>
     <listitem>
      <para>
       Tiempo de expiración del valor. Si es igual a cero, el valor nunca expirará.
       También se puede usar Unix timestamp o el número de segundos empezando desde
       de hora actual, pero como máximo el número de segundos no debe exceder de 
       2592000 (30 días).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>Memcache::replace</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$memcache_obj = memcache_connect('memcache_host', 11211);

/* API por procedimientos */
memcache_replace($memcache_obj, "test_key", "some variable", false, 30);

/* API OO */
$memcache_obj->replace("test_key", "some variable", false, 30);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::set</function></member>
    <member><function>Memcache::add</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
