<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331963 Maintainer: yago Status: ready -->
<!-- Reviewed: no Maintainer: yago -->
<refentry xml:id="memcache.addserver" xmlns="http://docbook.org/ns/docbook"> 
 <refnamediv>
  <refname>Memcache::addServer</refname>
  <refpurpose>Añadir servidor memcache al grupo de conexiones</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::addServer</methodname>
   <methodparam><type>string</type><parameter>host</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>port</parameter><initializer>11211</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>persistent</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>weight</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeout</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>retry_interval</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>status</parameter></methodparam>
   <methodparam choice="opt"><type>callable</type><parameter>failure_callback</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>timeoutms</parameter></methodparam>
  </methodsynopsis>
  
  <para>
   <function>Memcache::addServer</function> añade un servidor al grupo de conexiones.
   También se puede usar la función <function>memcache_add_server</function>.
  </para>
  
  <para>
   Cuando se usa este método (opuestamente a <function>Memcache::connect</function> y
   <function>Memcache::pconnect</function>) la conexión no se establece hasta que es
   necesaria. De esta forma no hay sobrecarga al añadir un gran número de servidores
   en el grupo de conexiones, aunque no todos van a ser utilizados.
  </para>
  
  <para>
   La conexión puede caer en cualquier momento usando cualquiera de los métodos, mientras
   otros servidores estén disponibles para hacer la petición el usuario no notará
   nada. Cualquier tipo de errores de socket o servidor Memcached (excepto out-of-memory)
   seguramente harán caer la conexión. Errores en el cliente como añadir una llave que
   ya existe no provocará la caida de la conexión.
  </para>
  
  <note>
   <para>
    Esta función fué añadida en Memcache versión 2.0.0.
   </para>
  </note>
  
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>host</parameter></term>
     <listitem>
      <para>
       Apunta al host donde memcached está esperando conexiones. Este parámetro
       también se puede especificar con otros transportes como 
       <literal>unix:///path/to/memcached.sock</literal> para usar domain UNIX sockets, 
       en este caso <parameter>port</parameter> debe también
       establecerse a <literal>0</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       Apunta al puerto donde memcache está esperando para conexiones.
       Establece este parámetro a <literal>0</literal> cuando se usan UNIX domain sockets.
      </para>
      <para>
       Por favor note: <parameter>port</parameter> será por defecto
       <link linkend="ini.memcache.default-port">memcache.default_port</link>
       en caso de no especificarse. Por esta razón, se recomienda especificar
       el puerto explícitamente en la llamada a este método.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>persistent</parameter></term>
     <listitem>
      <para>
       Controla el uso de una conexión persistente. Por defecto &true;. 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>weight</parameter></term>
     <listitem>
      <para>
       Número de segmentos para crear de este servidor, que a su vez controlan la
       probabilidad de que sea seleccionado. La probabilidad es relativa a la
       de peso total de todos los servidores.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeout</parameter></term>
     <listitem>
      <para>
       Valor en segundos que se utilizará para conectar con el demonio. Piense
       dos veces antes de cambiar el valor predeterminado de 1 segundo - se 
       puede perder todas las ventajas de la caché si su conexión es demasiado lenta.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>retry_interval</parameter></term>
     <listitem>
      <para>
       Controla la frecuencia de reintentos cuando falla la conexión, el valor por defecto es 
       15 segundos. Si establece este parámetro a -1 desactivará el reintento automático.
       Ni esta opción ni el parámetro <parameter>persistent</parameter> tienen ningún efecto
       cuando la extensión se carga dinámicamente a través de <function>dl</function>.
      </para>
      <para>
       Cada conexión struct fallida tiene su propio timeout y antes de que caduque,
       el struct será omitido cuando se selecionen backends para servir una petición.Cuando
       caduque la conexión se reconectará satisfactoriamente o se marcará como fallida
       por otros <parameter>retry_interval</parameter> segundos. El típico efecto es
       que cada servidor web hijo reintentará la conexión cada <parameter>retry_interval</parameter> 
       cuando se sirven páginas.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       Controla si el servidor debe ser marcado como online. Estableciendo este parámetro
       a &false; y <parameter>retry_interval</parameter> a -1 permite a un servidor que falle
       a ser mantenido en el grupo para no afectar el algoritmo de distribución de llaves.
       Las peticiones a este servidor fallarán inmediatamente dependiendo en la opción
       <parameter>memcache.allow_failover</parameter>. Por defecto to &true;, que significa
       que el servidor se considera online.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>failure_callback</parameter></term>
     <listitem>
      <para>
       Permite al usuario a especificar la llamada a una función de retorno a ejectuar cuando
       se encuentre un error. La llamada de retorno se ejecuta antes de que se produzca la 
       caída en la conexión. La función toma dos parámetros, el hostname y el puerto del puerto
       que ha fallado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>timeoutms</parameter></term>
     <listitem>
      <para>
       
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    Cuando no se especifica <parameter>port</parameter>, este método usará el valor
    establecido en la directiva ini
    <link linkend="ini.memcache.default-port">memcache.default_port</link> de PHP.
    Si este valor se cambiara en cualquier lugar de la aplicación podría conducir
    a resultados inesperados; por esta razón, es prudente especificar el puerto
    explícitamente en la llamada a este método.
   </para>
  </warning>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo <function>Memcache::addServer</function></title>
    <programlisting role="php">
<![CDATA[
<?php

/* OO API */

$memcache = new Memcache;
$memcache->addServer('memcache_host', 11211);
$memcache->addServer('memcache_host2', 11211);

/* procedural API */

$memcache_obj = memcache_connect('memcache_host', 11211);
memcache_add_server($memcache_obj, 'memcache_host2', 11211);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::connect</function></member>
    <member><function>Memcache::pconnect</function></member>
    <member><function>Memcache::close</function></member>
    <member><function>Memcache::setServerParams</function></member>
    <member><function>Memcache::getServerStatus</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
