<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 299490 Maintainer: yago Status: ready -->
<refentry xml:id="memcache.set" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>Memcache::set</refname>
  <refpurpose>Guarda datos en el servidor</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>Memcache::set</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flag</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>expire</parameter></methodparam>
  </methodsynopsis>

  <para>
   <function>Memcache::set</function> guarda un valor 
   <parameter>var</parameter> con una <parameter>key</parameter> en el 
   servidor memcached. El parámetro <parameter>expire</parameter> es el tiempo de
   expiración en segundos. Si es 0, el valor nunca expira (pero el servidor memcached
   no garantiza que este valor será guardado para siempre, puede ser eliminado de la caché
   para hacer espacio para otros valores).
   Se puede usar la constante <constant>MEMCACHE_COMPRESSED</constant> en el valor del
   <parameter>flag</parameter> si quiere utilizar compresión al momento (usando zlib).
   <note>
    <para>
     Recuerde que variables de recursos (ej. ficheros y descriptores de conexiones)
     no pueden guardarse en caché, porque no pueden ser representados adecuadamente
     de forma serializada.   
    </para> 
   </note>
   También se puede usar la función <function>memcache_set</function>.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       La clave que quedará asociada con el valor.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variable a guardar. Cadenas y enteros se guardan tal y como son, 
       otros tipos se guardan serializados.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flag</parameter></term>
     <listitem>
      <para>
       Use <constant>MEMCACHE_COMPRESSED</constant> para guardar datos
       comprimidos (usa zlib).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>expire</parameter></term>
     <listitem>
      <para>
       Tiempo de expiración del valor. Si es iqual a cero, el valor nunca
       expirará. También puedes usar Unix timestamp o el número de segundos
       empezando desde la fecha actual, el valor no puede exceder de 
       2592000 segundos (30 días).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>Memcache::set</function></title>
    <programlisting role="php">
<![CDATA[
<?php
/* API por procedimientos */

/* Conectar al servidor memcached */
$memcache_obj = memcache_connect('memcache_host', 11211);

/*
Establecer el valor según la key 'var_key'
usando 0 como valor del flag, no será usada compresión
el tiempo de expiración es de 30 segundos
*/
memcache_set($memcache_obj, 'var_key', 'some variable', 0, 30);

echo memcache_get($memcache_obj, 'var_key');

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Ejemplo de <function>Memcache::set</function></title>
    <programlisting role="php">
<![CDATA[
<?php
/* API OO */

$memcache_obj = new Memcache;

/* connect to memcached server */
$memcache_obj->connect('memcache_host', 11211);

/*
Establece el valor según la llave 'var_key', usando compresión al momento
expira en 50 segundos
*/
$memcache_obj->set('var_key', 'some really big variable', MEMCACHE_COMPRESSED, 50);

echo $memcache_obj->get('var_key');

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>Memcache::add</function></member>
    <member><function>Memcache::replace</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
