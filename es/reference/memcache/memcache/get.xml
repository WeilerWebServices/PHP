<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 328199 Maintainer: yago Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="memcache.get" xmlns="http://docbook.org/ns/docbook"> 
 <refnamediv>
  <refname>Memcache::get</refname>
  <refpurpose>Obtener valor del servidor</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>Memcache::get</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">flags</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>array</type><methodname>Memcache::get</methodname>
   <methodparam><type>array</type><parameter>keys</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">flags</parameter></methodparam>
  </methodsynopsis>
  
  <para>
   <function>Memcache::get</function> devuelve los datos previamente almacenados si
   el valor con la <parameter>key</parameter> existe en el servidor en este momento.
  </para>
  
  <para>
   Se puede pasar un array de llaves a <function>Memcache::get</function> para 
   obtener un array de valores. El resultado del array contendrá solamente 
   las parejas llave-valor encontradas.
  </para>
  
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       La llave o array de llaves a capturar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Si está presente, las flags capturadas juntamente con los valores serán escritas 
       en este parámetro. Estas flags son las mismas que las dadas por ejemplo en <function>Memcache::set</function>.
       El byte más bajo del entero está reservado para uso interno de pecl/memcache (ej. para
       estado de compresión y serialización).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la cadena asociada con la clave dada por <parameter>key</parameter> o
   un array de pares clave-valor cuando <parameter>key</parameter> es un <type>array</type>.
   Devuelve &false; en caso de error, <parameter>key</parameter> no se encuentra, o
   <parameter>key</parameter> es un <type>array</type> vacío.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>Memcache::get</function></title>
    <programlisting role="php">
<![CDATA[
<?php

/* API por procedimientos */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, 'some_key');

/* API OO */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get('some_key');

/* 
También se puede usar array de keys como parámetro.
Si el valor no fue encontrado en el servidor, el 
resultado del array simplemente no contendrá dicha
clave.
*/

/* API por procedimientos */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, Array('some_key', 'another_key'));

/* API OO */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get(Array('some_key', 'second_key'));

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
