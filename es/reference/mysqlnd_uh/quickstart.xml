<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325471 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="mysqlnd-uh.quickstart" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Guía rápida y ejemplos</title>
 <para>
  El complemento gestor del usuario de mysqlnd puede ser interpretado como un delegado (proxy) en la parte del
  cliente para todas las extensiones de MySQL para PHP (<link linkend="ref.mysqli">mysqli</link>,
  <link linkend="ref.mysql">mysql</link>,
  <link linkend="ref.pdo-mysql">PDO_MYSQL</link>), si éstas están compiladas para
  utilizar la biblioteca <link linkend="book.mysqlnd">mysqlnd</link>. Dichas
  extensiones usan la biblioteca <literal>mysqlnd</literal> internamente, a nivel
  de C, para comunicarse con el servidor MySQL. PECL/mysqlnd_uh
  permite capturar muchas llamadas a <literal>mysqlnd</literal>. Por lo tanto,
  la mayoría de las actividades de las extensiones de MySQL para PHP pueden ser monitorizadas.
 </para>
 <para>
  Ya que la monitorización sucede al nivel de la biblioteca, en una capa bajo la
  aplicación, es posible monitorizar aplicaciones sin tener que modificarlas.
 </para>
 <para>
  En el nivel de C, la biblioteca <literal>mysqlnd</literal> está estructurada en módulos
  o clases. La extensión captura casi todos los métodos de la clase interna <literal>connection</literal>
  de <literal>mysqlnd</literal> y los expone a través de la
  clase del espacio de usuario <classname>MysqlndUhConnection</classname>. Unos pocos métodos de
  la clase interna <literal>statement</literal> de mysqlnd están disponibles
  para el usuario de PHP con la clase <classname>MysqlndUhPreparedStatement</classname>.
  Mediante la derivación de las clases <classname>MysqlndUhConnection</classname> y
  <classname>MysqlndUhPreparedStatement</classname>, los ususarios obtienen acceso a
  las llamadas a las funciones internas de <literal>mysqlnd</literal>.
 </para>
 <note>
  <para>
   Las llamadas a las funciones internas de <literal>mysqlnd</literal> no estás diseñadas
   para ser expuestas al usuario de PHP. La manipulación de sus actividades podría
   causar que PHP falle o que se pierda memoria. A menudo, esto no se considera un fallo. Por favor,
   recuerde que se está accediendo a funciones de la biblioteca en C a través
   de PHP de las que se espera que realicen ciertas acciones, la cuales podrían no
   emularse en el espacio de usuario. Por lo tanto, se recomienda encarecidamente invocar siempre a
   la implementación del método padre cuando se derive de <classname>MysqlndUhConnection</classname>
   o de <classname>MysqlndUhPreparedStatement</classname>. Para prevenir el peor de los
   casos, la extensión lleva a cabo algunas comprobaciones sensatas. Por favor, véanse también las
   <link linkend="mysqlnd-uh.configuration">&ConfigureOptions; de Mysqlnd_uh</link>.
  </para>
 </note>
 
 
 <section xml:id="mysqlnd-uh.quickstart.configuration">
  <title>Puesta en marcha</title>
  <para>
   El complemento está implementado como una extensión de PHP. Véanse las
   <link linkend="mysqlnd-uh.installation">instrucciones de instalación</link> para
   instalar la extensión
   <link xlink:href="&url.pecl.package;mysqlnd_ms">PECL/mysqlnd_uh</link>.
   Luego, se ha de cargar la estensión en PHP y activar el complemento en el fichero de configuración
   de PHP usando la directiva de configuración de PHP llamada
   <link linkend="ini.mysqlnd-uh.enable">mysqlnd_uh.enable</link>.
   El ejemplo de abajo muestra la configuración predeterminada de la extensión.
  </para>
  <para>
   <example>
    <title>Habilitar el complemento (php.ini)</title>
    <programlisting role="ini">
<![CDATA[
mysqlnd_uh.enable=1
mysqlnd_uh.report_wrong_types=1
]]>
    </programlisting>
   </example>
  </para>
 </section>
 
 <section xml:id="mysqlnd-uh.quickstart.how-it-works">
  <title>Cómo funciona</title>
  <para>
   Aquí se describe el funcionamiento de fondo e interno de la extensión
   mysqlnd_uh.
  </para>
  <para>
   Se proporcionan dos clases con la extensión: <classname>MysqlndUhConnection</classname>
   y <classname>MysqlndUhPreparedStatement</classname>. <classname>MysqlndUhConnection</classname> permite
   acceder a casi todos los métodos de la clase interna <literal>connection</literal>
   de <literal>mysqlnd</literal>. La última expone algunos métodos
   seleccionados de la clase interna <literal>statement</literal> de <literal>mysqlnd</literal>.
   Por ejemplo, <methodname>MysqlndUhConnection::connect</methodname> hace referencia
   a la función <literal>mysqlnd_conn__connect</literal> en C de la biblioteca
   <literal>mysqlnd</literal>.
  </para>
  <para>
   Como complemento de mysqlnd, la extensión PECL/mysqlnd_uh reemplaza las funciones
   de la biblioteca en C <literal>mysqlnd</literal> con sus propias funciones. Siempre que una
   extensión de MySQL para PHP compilada para usar <literal>mysqlnd</literal> llame a
   una función de mysqlnd, se ejecutarán las funciones instaladas por el complemento
   en lugar de las originales de <literal>mysqlnd</literal>. Por ejemplo,
   <function>mysqli_connect</function> invoca a <literal>mysqlnd_conn__connect</literal>,
   por lo que será llamada la función de conexión instaladas por PECL/mysqlnd_uh.
   Las funciones instaladas por PECL/mysqlnd_uh son métodos de clases internas.
  </para>
  <para>
   Las clases de PHP internas y sus métodos no hacen sino llamar a sus homólogos
   de la biblioteca en C <literal>mysqlnd</literal>, para comportarse exactamente
   como la función original de <literal>mysqlnd</literal> que sustituyen.
   El código de abajo ilustra en pseudocódigo lo que hace la extensión.
  </para>
  <para>
   <example>
    <title>Pseudocódigo: qué hace la clase interna</title>
    <programlisting>
<![CDATA[
class MysqlndUhConnection {
  public function connect(($conn, $host, $user, $passwd, $db, $port, $socket, $mysql_flags) {
    MYSQLND* c_mysqlnd_connection = convert_from_php_to_c($conn);
    ...
    return call_c_function(mysqlnd_conn__connect(c_mysqlnd_connection, ...));
  }
}
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Las clases internas se comportan como un procy transparente. Es posible
   reemplazar dicho procy con uno propio. Esto se lleva a cabo derivando
   <classname>MysqlndUhConnection</classname> o
   <classname>MysqlndUhPreparedStatement</classname> para extender la funcionalidad
   del procy, y después registrando un nuevo objeto procy.
   Los objetos proxy se instalan con
   <function>mysqlnd_uh_set_connection_proxy</function>
   y
   <function>mysqlnd_uh_set_statement_proxy</function>.
  </para>
  <para>
   <example>
    <title>Instalar un proxy</title>
    <programlisting role="php">
<![CDATA[
<?php
class proxy extends MysqlndUhConnection {
 public function connect($res, $host, $user, $passwd, $db, $port, $socket, $mysql_flags) {
   printf("%s(%s)\n", __METHOD__, var_export(func_get_args(), true));
   $ret = parent::connect($res, $host, $user, $passwd, $db, $port, $socket, $mysql_flags);
   printf("%s returns %s\n", __METHOD__, var_export($ret, true));
   return $ret;
 }
}
mysqlnd_uh_set_connection_proxy(new proxy());

$mysqli = new mysqli("localhost", "root", "", "test");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
proxy::connect(array (
  0 => NULL,
  1 => 'localhost',
  2 => 'root',
  3 => '',
  4 => 'test',
  5 => 3306,
  6 => NULL,
  7 => 131072,
))
proxy::connect returns true
]]>
    </screen>
   </example>
  </para>
 </section>
 
 <section xml:id="mysqlnd-uh.quickstart.proxy-installation">
  <title>Instalar un proxy</title>
  <para>
   La extensión proporciona dos clases internas: <classname>MysqlndUhConnection</classname>
   y <classname>MysqlndUhPreparedStatement</classname>. Estas clases se usan
   para capturar las llamadas a la biblioteca <literal>mysqlnd</literal>. Sus métodos se corresponden
   con las funciones internas de <literal>mysqlnd</literal>. Por omisión, actúan como
   un proxy transparente y no hacen nada sino llamar a sus homólogos de <literal>mysqlnd</literal>.
   Al derivar estas clases se puede instalar un proxy propio para monitorizar <literal>mysqlnd</literal>.
  </para>
  <para>
   Véase también la guía <link linkend="mysqlnd-uh.quickstart.how-it-works">Cómo funciona</link>
   para aprender sobre el funcionamiento interno de esta extensión.
  </para>
  <para>
   Los delegados (proxy) de conexiones son objetos de tipo <classname>MysqlndUhConnection</classname>.
   Dichos objetos se instalan con
   <function>mysqlnd_uh_set_connection_proxy</function>.
   Si se instala la clase interna <classname>MysqlndUhConnection</classname>
   como un proxy, no ocurre nada; se comporta como un delegado transparente.
  </para>
  <para>
   <example>
    <title>Registro del proxy, mysqlnd_uh.enable=1</title>
    <programlisting role="php">
<![CDATA[
<?php
mysqlnd_uh_set_connection_proxy(new MysqlndUhConnection());
$mysqli = new mysqli("localhost", "root", "", "test");
?>
]]>
    </programlisting>
  </example>
  </para>
  <para>
   La directiva de configuración de <literal>PHP_INI_SYSTEM</literal>
   <literal><link linkend="ini.mysqlnd-uh.enable">mysqlnd_uh.enable</link></literal>
   controla si se puede establecer un proxy. Si está deshabilitada, la extensión
   lanzará errores de tipo <literal>E_WARNING</literal>
  </para>
  <para>
   <example>
    <title>La instalación del proxy deshabilitada</title>
    <programlisting role="ini">
<![CDATA[
mysqlnd_uh.enable=0
]]>
    </programlisting>
    <programlisting role="php">
<![CDATA[
<?php
mysqlnd_uh_set_connection_proxy(new MysqlndUhConnection());
$mysqli = new mysqli("localhost", "root", "", "test");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PHP Warning:  MysqlndUhConnection::__construct(): (Mysqlnd User Handler) The plugin has been disabled by setting the configuration parameter mysqlnd_uh.enabled = false.  You must not use any of the base classes in %s on line %d
PHP Warning:  mysqlnd_uh_set_connection_proxy(): (Mysqlnd User Handler) The plugin has been disabled by setting the configuration parameter mysqlnd_uh.enable = false. The proxy has not been installed  in %s on line %d
]]>
    </screen>
   </example>
  </para>
  <para>
   Para monitorizar <literal>mysqlnd</literal>, se ha de escribir un objeto
   proxy propio derivando <classname>MysqlndUhConnection</classname>.
   Por favor, véase la referencia de la función para la lista de métodos que
   que se pueden derivar. De forma alternativa, se puede usar la reflexión para inspeccionar
   la clase interna <classname>MysqlndUhConnection</classname>.
  </para>
  <para>
   Crear una nueva clase <literal>proxy</literal>. Derivarla de la
   clase interna <classname>MysqlndUhConnection</classname>.
   Reemplazar el método
   <function>MysqlndUhConnection::connect</function>.
   Imprimir el valor del parámetro 'host' pasado al método.
   Asegurarse de que se llama a la implementación madre del método <literal>connect</literal>.
   No hacer todo esto podría proporcionar resultados inesperados y no deseados, incluyendo
   pérdidas de memoria y fallos.
  </para>
  <para>
   Registrar el proxy y abrir tres conexiones usando las extensiones de MySQL
   para PHP <link linkend="ref.mysqli">mysqli</link>,
   <link linkend="ref.mysql">mysql</link>,
   <link linkend="ref.pdo-mysql">PDO_MYSQL</link>. Si las extensiones han sido
   compiladas para usar la biblioteca <literal>mysqlnd</literal>, el método
   <literal>proxy::connect</literal> será llamado tres veces, una
   por cada conexión abierta.
  </para>
  <para>
   <example>
    <title>Proxy de conexión</title>
    <programlisting role="php">
<![CDATA[
<?php
class proxy extends MysqlndUhConnection {
  public function connect($res, $host, $user, $passwd, $db, $port, $socket, $mysql_flags) {
   printf("Conexión abierta con '%s'\n", $host);
   /* ¡Llame siempre a la implementación madre! */
   return parent::connect($res, $host, $user, $passwd, $db, $port, $socket, $mysql_flags);
  }
}
mysqlnd_uh_set_connection_proxy(new proxy());

$mysqli = new mysqli("localhost", "root", "", "test");
$mysql = mysql_connect("localhost", "root", "");
$pdo = new PDO("mysql:host=localhost;dbname=test", "root", "");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Conexión abierta con 'localhost'
Conexión abierta con 'localhost'
Conexión abierta con 'localhost'
]]>
    </screen>
   </example>
  </para>
  <para>
   El uso de delegados (proxy) de sentencias preparadas sigue el mismo patrón: crear un
   objeto proxy del tipo <classname>MysqlndUhPreparedStatement</classname>
   e instalar el proxy usando
   <function>mysqlnd_uh_set_statement_proxy</function>.
  </para>
  <para>
   <example>
    <title>Proxy de sentencia preparada</title>
    <programlisting role="php">
<![CDATA[
<?php
class stmt_proxy extends MysqlndUhPreparedStatement {
 public function prepare($res, $query) {
  printf("%s(%s)\n", __METHOD__, $query);
  return parent::prepare($res, $query);
 }
}
mysqlnd_uh_set_statement_proxy(new stmt_proxy());

$mysqli = new mysqli("localhost", "root", "", "test");
$stmt = $mysqli->prepare("SELECT 'mysqlnd hacking made easy' AS _msg FROM DUAL");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
stmt_proxy::prepare(SELECT 'mysqlnd hacking made easy' AS _msg FROM DUAL)
]]>
    </screen>
   </example>
  </para>
 </section>
 
 <section xml:id="mysqlnd-uh.quickstart.query-monitoring">
  <title>Monitorización básica de consultas</title>
  <para>
   La monitorización básica de una sentencia de consulta es sencilla con PECL/mysqlnd_uh.
   Combinada con <function>debug_print_backtrace</function> puede convertirse en una poderosa
   herramienta, por ejemplo, para buscar el origen de ciertas sentencias. Esto podría
   ser necesario cuando se buscan consultas lentas y también después de la refactoriazación
   de una base de datos para buscar código que aún accede a bases de datos o tablas
   obsoletas. Esto último podría ser un asunto complicado, especialmente si
   la aplicación utiliza consultas autogeneradas.
  </para>
  <para>
   <example>
    <title>Monitorización básica</title>
    <programlisting role="php">
<![CDATA[
<?php
class conn_proxy extends MysqlndUhConnection {
 public function query($res, $query) {
  debug_print_backtrace();
  return parent::query($res, $query);
 }
}
class stmt_proxy extends MysqlndUhPreparedStatement {
 public function prepare($res, $query) {
  debug_print_backtrace();
  return parent::prepare($res, $query);
 }
}
mysqlnd_uh_set_connection_proxy(new conn_proxy());
mysqlnd_uh_set_statement_proxy(new stmt_proxy());

printf("Delegados instalados...\n");
$pdo = new PDO("mysql:host=localhost;dbname=test", "root", "");
var_dump($pdo->query("SELECT 1 AS _one FROM DUAL")->fetchAll(PDO::FETCH_ASSOC));

$mysqli = new mysqli("localhost", "root", "", "test");
$mysqli->prepare("SELECT 1 AS _two FROM DUAL");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
#0  conn_proxy->query(Resource id #19, SELECT 1 AS _one FROM DUAL)
#1  PDO->query(SELECT 1 AS _one FROM DUAL) called at [example.php:19]
array(1) {
  [0]=>
  array(1) {
    ["_one"]=>
    string(1) "1"
  }
}
#0  stmt_proxy->prepare(Resource id #753, SELECT 1 AS _two FROM DUAL)
#1  mysqli->prepare(SELECT 1 AS _two FROM DUAL) called at [example.php:22]
]]>
    </screen>
   </example>
  </para>
  <para>
   Para la monitorización básica de consultas se debería instalar un proxy de conexión y otro
   de sentencias preparadas. El primero debería derivar de <function>MysqlndUhConnection::query</function>.
   Todas las consultas de una base de datos que no utilicen sentencias preparadas nativas llamarán a este método.
   En el ejemplo, la función <literal>query</literal> es invocada por una llamada a PDO.
   Por omisión, <literal>PDO_MySQL</literal> utiliza la emulación de sentencias preparadas.
  </para>
  <para>
   Todas las sentencias preparadas nativas se preparan con con el método <literal>prepare</literal>
   de <literal>mysqlnd</literal> exportado a través de
   <methodname>MysqlndUhPreparedStatement::prepare</methodname>. Se ha de derivar
   <classname>MysqlndUhPreparedStatement</classname> y sobrescribir <literal>prepare</literal>
   para monitorizar sentencias preparadas nativas.
  </para>
 </section>
 
 
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
