<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 349883 Maintainer: yago Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->
<refentry xml:id='function.simplexml-load-file' xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>simplexml_load_file</refname>
  <refpurpose>
   Interpreta un fichero XML en un objeto
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>SimpleXMLElement</type><methodname>simplexml_load_file</methodname>
   <methodparam><type>string</type><parameter>filename</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>class_name</parameter><initializer>"SimpleXMLElement"</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>ns</parameter><initializer>""</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>is_prefix</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Convierte el documento correcto XML del fichero dado en un objeto.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filename</parameter></term>
     <listitem>
      <para>
       Ruta al fichero XML
      </para>
      <note>
       <para>
        Libxml 2 no escapa la URI, así que si es necesario pasar, por ejemplo
        <literal>b&amp;c</literal>, como parámetro <literal>a</literal> de la
        URI, hay que llamar a
        <literal>simplexml_load_file(rawurlencode('http://example.com/?a=' . 
         urlencode('b&amp;c')))</literal>. Desde PHP 5.1.0 no es necesario
        hacer esto porque PHP lo hará automáticamente.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>class_name</parameter></term>
     <listitem>
      <para>
       Este parámetro opcional puede ser usado cuando se necesita que
       <function>simplexml_load_file</function> retorne un objeto de la clase
       especificada. Esa clase debe extender de la clase
       <type>SimpleXMLElement</type>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Desde PHP 5.1.0 y Libxml 2.6.0 puede usarse
       <parameter>options</parameter> para especificar <link
       linkend="libxml.constants">parámetros Libxml adicionales</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ns</parameter></term>
     <listitem>
      <para>
       El prefijo del espacio de nombres o un URI.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>is_prefix</parameter></term>
     <listitem>
      <para>
       &true; si <parameter>ns</parameter> es un prefijo, &false; si es un URI;
       por defecto es &false;.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un <type>object</type> de tipo <type>SimpleXMLElement</type> cuyas
   propiedades contienen los datos del documento XML, &return.falseforfailure;.
  </para>
  &return.falseproblem;
 </refsect1>
 
 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Produce un mensaje de error <constant>E_WARNING</constant> para cada error
   encontrado en los datos XML.
  </para>
  <tip>
   <para>
    Usar <function>libxml_use_internal_errors</function> para suprimir todos
    los errores XML y <function>libxml_get_errors</function> para iterar sobre
    cada uno de ellos posteriormente.
   </para>
  </tip>
 </refsect1><!-- }}} -->
 
  <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.0</entry>
       <entry>
        Se añadió el parámetro opcional <parameter>is_prefix</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Interpreta un documento XML</title>
    <programlisting role="php">
<![CDATA[
<?php
// El fichero test.xml contiene un documento XML con un elemento raíz y, al
// menos, un elemento /[raiz]/titulo.

if (file_exists('test.xml')) {
    $xml = simplexml_load_file('test.xml');
 
    print_r($xml);
} else {
    exit('Error abriendo test.xml.');
}
?>
]]>
    </programlisting>
    <para>
     Este script mostrará, si no hay errores:
    </para>
    <screen>
<![CDATA[
SimpleXMLElement Object
(
  [titulo] => Título ejemplo
  ...
)
]]>
    </screen>
    <simpara>
     En este punto, se puede seguir recorriendo usando
     <literal>$xml->titulo</literal> y cualquier otro elemento.
    </simpara>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>simplexml_load_string</function></member>
    <member><methodname>SimpleXMLElement::__construct</methodname></member>
    <member><xref linkend="simplexml.examples-errors" /></member>
    <member><function>libxml_use_internal_errors</function></member>
    <member><xref linkend="simplexml.examples-basic"/></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
