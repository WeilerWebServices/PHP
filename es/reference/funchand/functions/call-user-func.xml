<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 335189 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.call-user-func" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>call_user_func</refname>
  <refpurpose>Llamar a una llamada de retorno dada por el primer parámetro</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>call_user_func</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>parameter</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Llama a la llamada de retorno dada por el primer parámetro <parameter>callback</parameter> y pasa
   los parámetros restantes como argumentos.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       La función llamable (<type>callable</type>) a llamar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameter</parameter></term>
     <listitem>
      <para>
       Cero o más parámetros a pasar a la llamda de retorno.
      </para>
      <note>
       <para>
        Observe que los parámetros para <function>call_user_func</function> no
        son pasados por referencia.
        <example>
         <title>Ejemplo de <function>call_user_func</function> y referencias</title>
         <programlisting role="php">
<![CDATA[
<?php
error_reporting(E_ALL);
function incrementar(&$var)
{
    $var++;
}

$a = 0;
call_user_func('incrementar', $a);
echo $a."\n";

// En su lugar se puede usar esto
call_user_func_array('incrementar', array(&$a));
echo $a."\n";
?>
]]>
         </programlisting>
         &example.outputs;
         <screen>
<![CDATA[
0
1
]]>
         </screen>
        </example>
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el valor devuelto por la llamada de retorno, o &false; en caso de error.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        La interpretación de palabras clave orientadas a objetos como <literal>parent</literal>
        y <literal>self</literal> ha cambiado. Anteriormente al llamarlas usando la
        sintaxis de dobles dos puntos emitiría una advertencia <constant>E_STRICT</constant> porque
        eran interpretadas como estáticas.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>call_user_func</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function barbero($tipo)
{
    echo "Usted quiere un corte de pelo al estilo $tipo, sin problemas\n";
}
call_user_func('barbero', "seta");
call_user_func('barbero', "rapado");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Usted quiere un corte de pelo al estilo seta, sin problemas
Usted quiere un corte de pelo al estilo rapado, sin problemas
]]>
    </screen>
   </example>
   <example>
    <title><function>call_user_func</function> usando un nombre de espacios de nombres</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function prueba() {
        print "¡Hola mundo!\n";
    }
}

call_user_func(__NAMESPACE__ .'\Foo::prueba'); // A partir de PHP 5.3.0
call_user_func(array(__NAMESPACE__ .'\Foo', 'prueba')); // A partir de PHP 5.3.0

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
¡Hola mundo!
¡Hola mundo!
]]>
    </screen>
   </example>
   <example>
    <title>Usar un método de clase con <function>call_user_func</function></title>
    <programlisting role="php">
<![CDATA[
<?php

class miclase {
    static function saludar()
    {
        echo "¡Hola!\n";
    }
}

$nombreclase = "miclase";

call_user_func(array($nombreclase, 'saludar'));
call_user_func($nombreclase .'::saludar'); // A partir de 5.2.3

$miobjeto = new miclase();

call_user_func(array($miobjeto, 'saludar'));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
¡Hola!
¡Hola!
¡Hola!
]]>
    </screen>   
   </example>
   <example>
    <title>Usar una función lambda con <function>call_user_func</function></title>
    <programlisting role="php">
<![CDATA[
<?php
call_user_func(function($arg) { print "[$arg]\n"; }, 'prueba'); /* A partir de PHP 5.3.0 */
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
[prueba]
]]>
    </screen>   
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  &note.func-callback-exceptions;
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func_array</function></member>
    <member><function>is_callable</function></member>
    <member>&seealso.callback;</member>
    <member><methodname>ReflectionFunction::invoke</methodname></member>
    <member><methodname>ReflectionMethod::invoke</methodname></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
