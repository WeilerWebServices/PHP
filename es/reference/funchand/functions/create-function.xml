<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331556 Maintainer: seros Status: ready -->
<refentry xml:id="function.create-function" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>create_function</refname>
  <refpurpose>Crear una función anónima (estilo lambda)</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>create_function</methodname>
   <methodparam><type>string</type><parameter>args</parameter></methodparam>
   <methodparam><type>string</type><parameter>code</parameter></methodparam>
  </methodsynopsis>
  <para>
   Crea una función anónima desde los parámetros pasados, y
   devuelve un nombre único para ella.
  </para>
  <caution>
   <para>
    Esta función realiza internamente un <function>eval</function> y como tal tiene los
    mismos problemas de seguridad que <function>eval</function>. Además posee características
    malas de rendimiento y uso de memoria.
   </para>
   <para>
    Si se usa 5.3.0 o superior, se debería usar en su lugar una
    <link linkend="functions.anonymous">función anónima</link> nativa.
   </para>
  </caution>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   Normalmente estos parámetros serán pasados como una cadena entre comillas simples.
   La razón de usar comillas simples es proteger a los nombres de las
   variables de ser analizados, de otro modo, si se usan comillas dobles habrá
   necesidad de escapar los nombres de las variables, p.ej. <literal>\$avar</literal>.
   <variablelist>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
       Los argumentos de la función.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>code</parameter></term>
     <listitem>
      <para>
       El código de la función.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un nombre de función único como cadena, o &false; en caso de error.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Crear una función anónima con <function>create_function</function>
    </title>
    <para>
     Se puede usar esta función para, por ejemplo, crear una función desde
     información reunida en tiempo de ejecución:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$nuevafunc = create_function('$a,$b', 'return "ln($a) + ln($b) = " . log($a * $b);');
echo "Nueva función anónima: $nuevafunc\n";
echo $nuevafunc(2, M_E) . "\n";
// imprime
// Nueva función anónima: lambda_1
// ln(2) + ln(2.718281828459) = 1.6931471805599
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   O quizás para tener una función gestora general que pueda aplicar un conjunto
   de operaciones a una lista de parámetros:
  </para>
  <para>
   <example>
    <title>
     Hacer una función de proceso general con
     <function>create_function</function>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
function procesar($var1, $var2, $farr)
{
    foreach ($farr as $f) {
        echo $f($var1, $var2) . "\n";
    }
}

// crear un puñado de funciones matemáticas
$f1 = 'if ($a >=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}';
$f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);";
$f3 = 'if ($a > 0 && $b != 0) {return "ln(a)/b = ".log($a)/$b; } else { return false; }';
$farr = array(
    create_function('$x,$y', 'return "algo de trigonometría: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "una hipotenusa: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', $f1),
    create_function('$a,$b', $f2),
    create_function('$a,$b', $f3)
    );

echo "\nUsar la primera matriz de funciones anónimas\n";
echo "parámetros: 2.3445, M_PI\n";
procesar(2.3445, M_PI, $farr);

// ahora hacer un puñado de funciones de proceso de cadenas
$garr = array(
    create_function('$b,$a', 'if (strncmp($a, $b, 3) == 0) return "** \"$a\" '.
    'y \"$b\"\n** ¡Para mí se parecen! (mirando los 3 primeros caracteres)";'),
    create_function('$a,$b', '; return "CRCs: " . crc32($a) . ", ".crc32($b);'),
    create_function('$a,$b', '; return "similar(a,b) = " . similar_text($a, $b, &$p) . "($p%)";')
    );
echo "\nUsar la segunda matriz de funciones anónimas\n";
procesar("Cuando los pájaros cantan", "Cuando es de noche", $garr);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Usar la primera matriz de funciones anónimas
parámetros: 2.3445, M_PI
algo de trigonometría: -1.6291725057799
una hipotenusa: 3.9199852871011
b*a^2 = 4.8103313314525
min(b^2+a, a^2,b) = 8.6382729035898
ln(a)/b = 0.27122299212594

Usar la segunda matriz de funciones anónimas
** "Cuando es de noche" y "Cuando los pájaros cantan"
** ¡Para mí se parecen! (mirando los 3 primeros caracteres)
CRCs: -725381282, 342550513
similar(a,b) = 11(45.833333333333%)
]]>
    </screen>
   </example>
  </para>
  <para>
   Pero quizás el uso más común de las funciones estilo lambda (anónimas)
   sea el de crear funciones de llamada de retorno, por ejemplo cuando se usa
   <function>array_walk</function> o <function>usort</function>
  </para>
  <para>
   <example>
    <title>Usar funciones anónimas como funciones de llamada de retorno</title>
    <programlisting role="php">
<![CDATA[
<?php
$av = array("el ", "un ", "ese ", "este ");
array_walk($av, create_function('&$v,$k', '$v = $v . "mango";'));
print_r($av);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
  [0] => el mango
  [1] => un mango
  [2] => ese mango
  [3] => este mango
)
]]>
    </screen>
    <para>
     una matriz de cadenas ordenada de más corta a más larga
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sv = array("pequeña", "más larga", "una gran cadena", "esto es una 'señora' cadena");
print_r($sv);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
  [0] => pequeña
  [1] => más larga
  [2] => una gran cadena
  [3] => esto es una 'señora' cadena
)
]]>
    </screen>
    <para>
     ordenarla de más larga a más corta
    </para>
    <programlisting role="php">
<![CDATA[
<?php

usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
  [0] => esto es una 'señora' cadena
  [1] => una gran cadena
  [2] => más larga
  [3] => pequeña
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="functions.anonymous">Funciones anónimas</link></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
