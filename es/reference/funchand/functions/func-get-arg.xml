<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334626 Maintainer: lehmer Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.func-get-arg" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>func_get_arg</refname>
  <refpurpose>Devuelve un elemento de una lista de argumentos</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>func_get_arg</methodname>
   <methodparam><type>int</type><parameter>arg_num</parameter></methodparam>
  </methodsynopsis>
  <para>
   Obtiene el argumento especificado de una lista de argumentos de una función definida por el usuario.
  </para>
  <para>
   Esta función se puede usar junto con
   <function>func_get_args</function> y <function>func_num_args</function>
   para permitir a las funciones de usuario aceptar listas de argumentos de longitud variable.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>arg_num</parameter></term>
     <listitem>
      <para>
       El índice del argumento. Los argumentos de las funciones se empiezan a contar desde
       cero.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el argumento especificado, o &false; en caso de error.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Esta función ahora se puede usar en listas de parámetros.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Si esta función es llamada desde el ámbito último de un archivo
        que ha sido incluido mediante una llamada a <function>include</function>
        o <function>require</function> desde dentro de una función en el
        archivo de llamada, ahora genera una advertencia y devuelve &false;.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Genera una advertencia si se llama desde fuera de una función definida por el usuario, o
   si <parameter>arg_num</parameter> es mayor que el número de argumentos
   pasados actualmente.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>func_get_arg</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
     $númargs = func_num_args();
     echo "Número de argumentos: $númargs<br />\n";
     if ($númargs >= 2) {
         echo "El segundo argumento es: " . func_get_arg(1) . "<br />\n";
     }
}

foo (1, 2, 3);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo de <function>func_get_arg</function> antes y
     después de PHP 5.3</title>
    <programlisting role="php">
<![CDATA[
prueba.php
<?php
function foo() {
    include './fga.inc';
}

foo('Primer argumento', 'Segundo argumento');
?>

fga.inc
<?php

$arg = func_get_arg(1);
var_export($arg);

?>
]]>
    </programlisting>
    <para>
     Salida anterior a PHP 5.3:
    </para>
    <screen>
<![CDATA[
'Segundo argumento'
]]>
    </screen>
    <para>
     Salida en PHP 5.3 y posterior:
    </para>
    <screen>
<![CDATA[
Warning: func_get_arg():  Called from the global scope - no function
context in /home/torben/Desktop/code/ml/fga.inc on line 3
false
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>func_get_arg</function> ejemplo de argumentos byref (pasa un objeto como referencia) y byval (pasa un objeto como valor)</title>
    <programlisting role="php">
<![CDATA[
<?php
function byVal($arg) {
    echo 'Pasó como     : ', var_export(func_get_arg(0)), PHP_EOL;
    $arg = 'baz';
    echo 'Tras el cambio: ', var_export(func_get_arg(0)), PHP_EOL;
}

function byRef(&$arg) {
    echo 'Pasó como     : ', var_export(func_get_arg(0)), PHP_EOL;
    $arg = 'baz';
    echo 'Tras el cambio: ', var_export(func_get_arg(0)), PHP_EOL;
}

$arg = 'bar';
byVal($arg);
byRef($arg);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
     Pasó como     : 'bar'
     Tras el cambio: 'bar'
     Pasó como     : 'bar'
     Tras el cambio: 'baz'
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  &note.funcnoparam;
  &note.funcbyref;
  <note>
   <simpara>
    Esta función solamente devuelve una copia de los argumentos pasados, y no
    rinde cuentas de los argumentos predeterminados (no pasados).
   </simpara>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
        <member><link linkend="functions.variable-arg-list.new">La sintaxis de <literal>...</literal> en PHP 5.6+</link></member>
    <member><function>func_get_args</function></member>
    <member><function>func_num_args</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
