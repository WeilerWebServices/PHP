<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325661 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.call-user-func-array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>call_user_func_array</refname>
  <refpurpose>Llamar a una llamada de retorno con un array de parámetros</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>call_user_func_array</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
   <methodparam><type>array</type><parameter>param_arr</parameter></methodparam>
  </methodsynopsis>
  <para>
   Llama a la llamada de retorno dada por el primer parámetro <parameter>callback</parameter> con
   los parámetros de <parameter>param_arr</parameter>.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       La función llamable (<type>callable</type>) a llamar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>param_arr</parameter></term>
     <listitem>
      <para>
       Los parámetros a pasar a la llamada de retorno, como matriz indexada.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el valor devuelto por la llamada de retorno, o &false; en caso de error.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        La interpretación de palabras clave orientadas a objetos como <literal>parent</literal>
        y <literal>self</literal> ha cambiado. Anteriormente al llamarlas usando la
        sintaxis de dobles dos puntos emitiría una advertencia <constant>E_STRICT</constant> porque
        eran interpretadas como estáticas.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>call_user_func_array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function foobar($arg, $arg2) {
    echo __FUNCTION__, " obtuvo $arg y $arg2\n";
}
class foo {
    function bar($arg, $arg2) {
        echo __METHOD__, " obtuvo $arg y $arg2\n";
    }
}


// Llamar a la función foobar() con 2 argumentos
call_user_func_array("foobar", array("uno", "dos"));

// Llamar al método $foo->bar() con 2 argumentos
$foo = new foo;
call_user_func_array(array($foo, "bar"), array("tres", "cuatro"));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
foobar obtuvo uno y dos
foo::bar obtuvo tres y cuatro
]]>
    </screen>
   </example>
   <example>
    <title><function>call_user_func_array</function> usando un nombre de espacio de nombres</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function prueba($nombre) {
        print "¡Hola {$nombre}!\n";
    }
}

// A partir de PHP 5.3.0
call_user_func_array(__NAMESPACE__ .'\Foo::prueba', array('Gema'));

// A partir de PHP 5.3.0
call_user_func_array(array(__NAMESPACE__ .'\Foo', 'prueba'), array('Pedro'));

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
¡Hola Gema!
¡Hola Pedro!
]]>
    </screen>
   </example>
   <example>
    <title>Usar una función lambda</title>
    <programlisting role="php">
<![CDATA[
<?php

$func = function($arg1, $arg2) {
    return $arg1 * $arg2;
};

var_dump(call_user_func_array($func, array(2, 4))); /* A partir de PHP 5.3.0 */

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(8)
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Antes de PHP 5.4, las variables referenciadas de <parameter>param_arr</parameter>
    son pasadas a la función por referencia, sin tener en cuenta si la función
    espera que el parámetro respectivo sea pasado por referencia. Esta forma de
    paso por referncia en tiempo de llamda no emite un aviso de obsolescencia, pero,
    no obstante, está obsoleta, y ha sido eliminada en PHP 5.4.
    Además, esto no se aplica a funciones internas, para las que
    la firma de la funcion es aceptada. Pasar por valor cuando la función
    espera un parámetro por referencia resulta en una advertencia, y
    <function>call_user_func</function> devolverá &false; (existe, sin embargo, una
    excepción para valores pasados con cuenta de referencia = 1, como en los literales,
    ya que pueden convertirse en referencias  sin efectos dañinos — aunque también
    sin escribir que esos valores tengan ningún efecto —; sin embargo,
    no confíe en este comportamiento, ya que la cuenta de referencia es un detalle
    de implementación y la solidez de este comportamiento es cuestinable).
   </para>
  </note>
  &note.func-callback-exceptions;
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member>&seealso.callback;</member>
    <member><methodname>ReflectionFunction::invokeArgs</methodname></member>
    <member><methodname>ReflectionMethod::invokeArgs</methodname></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
