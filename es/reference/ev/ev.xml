<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 341255 Maintainer: mariano Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<phpdoc:classref xml:id="class.ev" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La clase Ev</title>
 <titleabbrev>Ev</titleabbrev>
 <partintro>
<!-- {{{ Ev intro -->
  <section xml:id="ev.intro">
   &reftitle.intro;
   <para>
    Ev es una clase estática que proporciona acceso al bucle por omsión y a algunas 
    operaciones comunes.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="ev.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>Ev</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>Ev</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">Constantes</classsynopsisinfo>
<!--{{{-->
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.flag-auto">Ev::FLAG_AUTO</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.flag-noenv">Ev::FLAG_NOENV</varname>
     <initializer>16777216</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.flag-forkcheck">Ev::FLAG_FORKCHECK</varname>
     <initializer>33554432</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.flag-noinotify">Ev::FLAG_NOINOTIFY</varname>
     <initializer>1048576</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.flag-signalfd">Ev::FLAG_SIGNALFD</varname>
     <initializer>2097152</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.flag-nosigmask">Ev::FLAG_NOSIGMASK</varname>
     <initializer>4194304</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.run-nowait">Ev::RUN_NOWAIT</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.run-once">Ev::RUN_ONCE</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.break-cancel">Ev::BREAK_CANCEL</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.break-one">Ev::BREAK_ONE</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.break-all">Ev::BREAK_ALL</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.minpri">Ev::MINPRI</varname>
     <initializer>-2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.maxpri">Ev::MAXPRI</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.read">Ev::READ</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.write">Ev::WRITE</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.timer">Ev::TIMER</varname>
     <initializer>256</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.periodic">Ev::PERIODIC</varname>
     <initializer>512</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.signal">Ev::SIGNAL</varname>
     <initializer>1024</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.child">Ev::CHILD</varname>
     <initializer>2048</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.stat">Ev::STAT</varname>
     <initializer>4096</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.idle">Ev::IDLE</varname>
     <initializer>8192</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.prepare">Ev::PREPARE</varname>
     <initializer>16384</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.check">Ev::CHECK</varname>
     <initializer>32768</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.embed">Ev::EMBED</varname>
     <initializer>65536</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.custom">Ev::CUSTOM</varname>
     <initializer>16777216</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.error">Ev::ERROR</varname>
     <initializer>2147483648</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.backend-select">Ev::BACKEND_SELECT</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.backend-poll">Ev::BACKEND_POLL</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.backend-epoll">Ev::BACKEND_EPOLL</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.backend-kqueue">Ev::BACKEND_KQUEUE</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.backend-devpoll">Ev::BACKEND_DEVPOLL</varname>
     <initializer>16</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.backend-port">Ev::BACKEND_PORT</varname>
     <initializer>32</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.backend-all">Ev::BACKEND_ALL</varname>
     <initializer>63</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>integer</type>
     <varname linkend="ev.constants.backend-mask">Ev::BACKEND_MASK</varname>
     <initializer>65535</initializer>
    </fieldsynopsis>
<!--}}}-->
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.ev')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ Ev constants -->
  <section xml:id="ev.constants">
   &reftitle.constants;

  <para xml:id="ev.constants.loop-flags">
    Flags disponibles para crear un bucle:
<!--{{{-->
    <variablelist>
     <varlistentry xml:id="ev.constants.flag-auto">
      <term>
       <constant>Ev::FLAG_AUTO</constant>
      </term>
      <listitem>
       <para>
        El valor del flag por defecto
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.flag-noenv">
      <term>
       <constant>Ev::FLAG_NOENV</constant>
      </term>
      <listitem>
       <para>
        Si este flag es utilizado (o el programa corre setuid o setgid),
        <literal>libev</literal>
        no tendrá en cuenta la variable de entorno
        <varname>LIBEV_FLAGS</varname>
        . De otro modo (por defecto),
        <varname>LIBEV_FLAGS</varname>
        reemplazará los flags completamente si es definido. Útil para evaluación
        de performance y para encontrar errores.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.flag-forkcheck">
      <term>
       <constant>Ev::FLAG_FORKCHECK</constant>
      </term>
      <listitem>
       <para>
        Permite que libev verifique un fork en cada iteración, en lugar de llamar a 
        <methodname>EvLoop::fork</methodname>
        manualmente. Esto funciona al llamar a 
        <literal>getpid()</literal>
        en cada iteración del bucle, y como tal podrá alentizar el bucle de eventos con
        numerosas iteraciones, aunque esto no es usualmente notorio. Este flag no puede
        ser reemplazado o especificado mediante la variable de entorno 
        <varname>LIBEV_FLAGS</varname>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.flag-noinotify">
      <term>
       <constant>Ev::FLAG_NOINOTIFY</constant>
      </term>
      <listitem>
       <para>
        Cuando este flag es especificado,
        <literal>libev</literal>
        no intentará utilizar la API
        <literal>inotify</literal>
        para sus watchers
        <link
      xlink:href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_stat_code_did_the_file_attri">ev_stat</link>. 
        El flag puede ser útil para conservar los descriptores de archivo inotify,
        ya que de otro modo cada bucle que utilice watchers
        <literal>ev_stat</literal>
        consumen un handle
        <literal>inotify</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.flag-signalfd">
      <term>
       <constant>Ev::FLAG_SIGNALFD</constant>
      </term>
      <listitem>
       <para>
        Cuando este flag es especificado,
        <literal>libev</literal>
        intentará utilizar la API
        <literal>signalfd</literal>
        para sus watchers
        <link
      xlink:href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_signal_code_signal_me_when_a">ev_signal</link>
        (y
        <link
       xlink:href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_child_code_watch_out_for_pro">ev_child</link>
        ). Esta API entrega las señales sincrónicamente, lo que la hace más rápida
        y puede permitir obtener los datos de señal encolados.
        También puede simplificar el manejo de señales mediante hilos, siempre y cuando
        las señales sean bloqueadas apropiadamente en los hilos.
        <literal>Signalfd</literal>
        no será utilizado por defecto.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.flag-nosigmask">
      <term>
       <constant>Ev::FLAG_NOSIGMASK</constant>
      </term>
      <listitem>
       <para>
        Cuando este flag es especificado,
        <literal>libev</literal>
        hará imposible la modificación de la máscara de señal. Esto significa
        que será necesario asegurarse que las señales están desbloqueadas antes
        de recibirlas.
       </para>
       <para>
        Este comportamiento es útil para el manejo de señales personalizado, o para
        manipular señales solamente en hilos específicos.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
<!--}}}-->
   <para xml:id="ev.constants.run-flags">
    Flags disponibles para
    <methodname>Ev::run</methodname>
    , o
    <methodname>EvLoop::run</methodname>
<!--{{{-->
    <variablelist>
     <varlistentry xml:id="ev.constants.run-nowait">
      <term>
       <constant>Ev::RUN_NOWAIT</constant>
      </term>
      <listitem>
       <para>
        Significa que el bucle de eventos buscará nuevos eventos, y manejará
        aquellos eventos y cualquier otro evento pendiente, pero no esperará
        ni bloqueará el proceso en caso de que no haya eventos, retornando
        luego de una iteración del bucle. Esto es útil para obtener nuevos
        eventos mientras se realizan cálculos costosos, manteniendo el
        programa funcionando.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.run-once">
      <term>
       <constant>Ev::RUN_ONCE</constant>
      </term>
      <listitem>
       <para>
        Significa que el bucle de eventos buscará nuevos eventos (esperando
        si es necesario) y manejará aquellos eventos, y cualquier otro evento
        pendiente. Bloqueará el proceso hasta que al menos un evento esté
        disponible (que podría ser un evento interno a <literal>libev</literal>,
        por lo que no hay garantía de que un callback registrado por el usuario
        sea llamado), y retornará luego de una iteración del bucle.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
<!--}}}-->
   <para xml:id="ev.constants.break-flags">
    Flags disponibles para
    <methodname>Ev::stop</methodname>
    , o
    <methodname>EvLoop::stop</methodname>
<!--{{{-->
    <variablelist>
     <varlistentry xml:id="ev.constants.break-cancel">
      <term>
       <constant>Ev::BREAK_CANCEL</constant>
      </term>
      <listitem>
       <para>
        Cancelar la operación break.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.break-one">
      <term>
       <constant>Ev::BREAK_ONE</constant>
      </term>
      <listitem>
       <para>
        Hace que la llamada interior
        <methodname>Ev::run</methodname>
        (o
        <methodname>EvLoop::run</methodname>
        ) retorne.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.break-all">
      <term>
       <constant>Ev::BREAK_ALL</constant>
      </term>
      <listitem>
       <para>
        Hace que todas las llamadas
        <methodname>Ev::run</methodname>
        (o
        <methodname>EvLoop::run</methodname>
        ) retornen.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
<!--}}}-->
   <para xml:id="ev.constants.watcher-pri">
    Prioridades Watcher:
<!--{{{-->
    <variablelist>
     <varlistentry xml:id="ev.constants.minpri">
      <term>
       <constant>Ev::MINPRI</constant>
      </term>
      <listitem>
       <para>
        Prioridad mínima disponible.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.maxpri">
      <term>
       <constant>Ev::MAXPRI</constant>
      </term>
      <listitem>
       <para>
        Prioridad máxima disponible.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
<!--}}}-->
   <para xml:id="ev.constants.watcher-revents">
    Máscaras de Bit de los eventos (recibidos):
<!--{{{-->
    <variablelist>
     <varlistentry xml:id="ev.constants.read">
      <term>
       <constant>Ev::READ</constant>
      </term>
      <listitem>
       <para>
        El descriptor de archivo en el watcher
        <classname>EvIo</classname>
        se ha vuelto disponible.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.write">
      <term>
       <constant>Ev::WRITE</constant>
      </term>
      <listitem>
       <para>
        El descriptor de archivo en el watcher
        <classname>EvIo</classname>
        se ha vuelto modificable.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.timer">
      <term>
       <constant>Ev::TIMER</constant>
      </term>
      <listitem>
       <para>
        El watcher <classname>EvTimer</classname>
        ha agotado su tiempo.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.periodic">
      <term>
       <constant>Ev::PERIODIC</constant>
      </term>
      <listitem>
       <para>
        El watcher <classname>EvPeriodic</classname>
        ha agotado su tiempo.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.signal">
      <term>
       <constant>Ev::SIGNAL</constant>
      </term>
      <listitem>
       <para>
        Una señal especificada en 
        <methodname>EvSignal::__construct</methodname>
        ha sido recibida.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.child">
      <term>
       <constant>Ev::CHILD</constant>
      </term>
      <listitem>
       <para>
        El
        <parameter>pid</parameter>
        especificado en
        <methodname>EvChild::__construct</methodname>
        ha recibido una alteración de estado.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.stat">
      <term>
       <constant>Ev::STAT</constant>
      </term>
      <listitem>
       <para>
        El path especificado en el watcher
        <classname>EvStat</classname>
        ha modificado sus atributos.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.idle">
      <term>
       <constant>Ev::IDLE</constant>
      </term>
      <listitem>
       <para>
        El watcher <classname>EvIdle</classname>
        trabaja cuando no hay nada que hacer con otros watchers.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.prepare">
      <term>
       <constant>Ev::PREPARE</constant>
      </term>
      <listitem>
       <para>
        Todos los watchers
        <classname>EvPrepare</classname>
        son invocados justo antes de que
        <methodname>Ev::run</methodname>
        comience. Así, los watchers
        <classname>EvPrepare</classname>
        son los últimos en ser invocados antes de que el bucle de
        eventos duerma, o busque nuevos eventos.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.check">
      <term>
       <constant>Ev::CHECK</constant>
      </term>
      <listitem>
       <para>
        Todos los watchers
        <classname>EvCheck</classname>
        son encolados justo luego de que 
        <methodname>Ev::run</methodname>
        haya obtenido los nuevos eventos,
        pero antes de que encole cualquier
        callback para los eventos recibidos.
        Así, los watchers
        <classname>EvCheck</classname>
        serán invocados antes que cualquier otro watcher
        de la misma o menor prioridad dentro de la iteración
        del bucle de eventos.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.embed">
      <term>
       <constant>Ev::EMBED</constant>
      </term>
      <listitem>
       <para>
        El bucle embebido especificado en el watcher
        <classname>EvEmbed</classname>
        necesita atención.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.custom">
      <term>
       <constant>Ev::CUSTOM</constant>
      </term>
      <listitem>
       <para>
        Nunca enviado (o utilizado) por
        <literal>libev</literal>, pero puede
        ser libremente utilizado por los usuarios de
        <literal>libev</literal>
        para enviar señales a watchers (por ejemplo
        a través de
        <methodname>EvWatcher::feed</methodname>
        ).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.error">
      <term>
       <constant>Ev::ERROR</constant>
      </term>
      <listitem>
       <para>
        Un error no especificado ha ocurrido, y el watcher se ha detenido. Esto
        puede ocurrir ya sea porque el watcher no haya sido inicializado apropiadamente
        debido a que 
        <literal>libev</literal>
        ha agotado la memoria disponible, porque un descriptor de archivo se encontraba ya cerrado,
        o por cualquier otro problema.
        <literal>Libev</literal>
        considera estos errores como errores de aplicación. Véase también
        <link
    xlink:href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#ANATOMY_OF_A_WATCHER_CONTENT">ANATOMY
    OF A WATCHER</link>
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
<!--}}}-->
   <para xml:id="ev.constants.watcher-backends">
    Flags de Backend:
<!--{{{-->
    <variablelist>
     <varlistentry xml:id="ev.constants.backend-select">
      <term>
       <constant>Ev::BACKEND_SELECT</constant>
      </term>
      <listitem>
       <para>
        <literal>Backend select(2)</literal>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.backend-poll">
      <term>
       <constant>Ev::BACKEND_POLL</constant>
      </term>
      <listitem>
       <para>
        <literal>Backend poll(2)</literal>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.backend-epoll">
      <term>
       <constant>Ev::BACKEND_EPOLL</constant>
      </term>
      <listitem>
       <para>
        Backend específico a Linux
        <literal>epoll(7)</literal>
        tanto para kernels anteriores o posteriores a la
        versión 2.6.9
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.backend-kqueue">
      <term>
       <constant>Ev::BACKEND_KQUEUE</constant>
      </term>
      <listitem>
       <para>
        Backend <literal>kqueue</literal>
        utilizado en la mayoría de los sistemas BSD.
        El watcher <classname>EvEmbed</classname>
        puede ser utilizado para embeber un bucle (con e backend 
        <literal>kqueue</literal>
        )
        dentro de otro. Por ejemplo, uno puede intentar crear un bucle de
        eventos con el backend 
        <literal>kqueue</literal>
        y utilizarlo solamente por sus sockets.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.backend-devpoll">
      <term>
       <constant>Ev::BACKEND_DEVPOLL</constant>
      </term>
      <listitem>
       <para>
        Backend Solaris 8. Aún no implementado.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.backend-port">
      <term>
       <constant>Ev::BACKEND_PORT</constant>
      </term>
      <listitem>
       <para>
        Mecanismo de puerto Solaris 10 con buena escalabilidad.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.backend-all">
      <term>
       <constant>Ev::BACKEND_ALL</constant>
      </term>
      <listitem>
       <para>
        Intentar todos los backends (incluso los corrompidos). No es
        recomendado utilizar este flag explícitamente. En su lugar deberían
        utilizarse operaciones Bitwise (por ejemplo
        <constant>Ev::BACKEND_ALL</constant>
        &amp; ~
        <constant>Ev::BACKEND_KQUEUE</constant>
        ). Utiliza
        <methodname>Ev::recommendedBackends</methodname>
        , o no especifiques ningún backend en especial.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="ev.constants.backend-mask">
      <term>
       <constant>Ev::BACKEND_MASK</constant>
      </term>
      <listitem>
       <para>
        No es un backend, sino una máscara que permite seleccionar todos
        los bits de backends desde el valor 
        <parameter>flags</parameter>
        para sacar de la máscara cualquier backend (por ejemplo cuando se modifica
        la variable de entorno
        <varname>LIBEV_FLAGS</varname>
        ).
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
<!--}}}-->
   <note xmlns="http://docbook.org/ns/docbook">
    <para>
     Durante la fase de inicialización del módulo,
     <literal>Ev</literal>
     registtra para el bucle por defecto una llamada a
     <link
   xlink:href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#FUNCTIONS_CONTROLLING_EVENT_LOOPS_CO">ev_loop_fork</link>
     a través de
     <literal>pthread_atfork</literal>
     (si se encuentra disponible).
    </para>
   </note>
   <note xmlns="http://docbook.org/ns/docbook">
    <para>
     Existen métodos que ofrecen acceso al
     <emphasis>bucle de eventos por defecto</emphasis>
     en la clase
     <classname>Ev</classname>
     (por ejemplo
     <methodname>Ev::iteration</methodname>
     ,
     <methodname>Ev::depth</methodname>
     etc.) Para
     <emphasis>bucles personalizados</emphasis>
     (creados con
     <methodname>EvLoop::__construct</methodname>
     ) estos valores pueden ser accedidos a través de propiedades y métodos correspondientes
     de la clase
     <classname>EvLoop</classname>
     .
    </para>
    <para>
     La instancia del bucle de eventos por defecto puede ser obtenida a través del método
     <methodname>EvLoop::defaultLoop</methodname>
     .
    </para>
   </note>
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.ev;

</phpdoc:classref>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
