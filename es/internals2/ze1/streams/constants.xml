<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: seros Status: ready -->
<!-- Author: Wez Furlong <wez@thebrainroom.com>
  Please contact me before making any major amendments to the
  content of this section.  Splitting/Merging are fine if they are
  required for php-doc restructuring purposes - just drop me a line
  if you make a change (so I can update my local copy).
-->

 <sect2 xml:id="internals2.ze1.streams.constants" xmlns="http://docbook.org/ns/docbook">
  <title>Opciones de apertura de flujos</title>
  
  <para>
   Estas constantes afectan a la operación de funciones de flujos de fábrica.
   <variablelist>
    <varlistentry>
     <term>
      <constant>IGNORE_PATH</constant> 
     </term>
     <listitem>
      <simpara>
       Esta es la opción predeterminada para los flujos; solicita que no se va a buscar
       en include_path el archivo pedido.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>USE_PATH</constant> 
     </term>
     <listitem>
      <simpara>
       Solicita que el archivo pedido se va a buscar en include_path.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>IGNORE_URL</constant> 
     </term>
     <listitem>
      <simpara>
       Solicita que las envolturas de URL registradas van a ser ignoradas cuando se abra el
       flujo. Las envolturas distintas de URL se tomarán en consideración cuando
       se decodifique la ruta. No hay una bandera opuesta a esta; la API de
       flujos usará todas las envolturas registradas por omisión.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>IGNORE_URL_WIN</constant> 
     </term>
     <listitem>
      <simpara>
       Es sistemas Windows esto es equivalente a IGNORE_URL.
       En los demás sistemas esta bandera no tiene efecto.
      </simpara>
     </listitem>
    </varlistentry>
    
    <varlistentry>
     <term>
      <constant>ENFORCE_SAFE_MODE</constant> 
     </term>
     <listitem>
      <simpara>
       Solicita que la implementación de flujo subyacente realice una comprobación de
       safe_mode en el archivo antes de abrirlo. Si se omite esta bandera se saltará
       la comprobación de safe_mode y permitirá la apertura de cualquier archivo que el proceso de PHP
       tenga derecho a acceder.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>REPORT_ERRORS</constant> 
     </term>
     <listitem>
      <simpara>
       Si esta bandera está establecida y hubo un error durante la apertura del archivo
       o URL, la API de flujos llamará a la función php_error por usted. Esto
       es útil porque la ruta puede contener información sobre nombre de usuario/contraseña
       que no debería ser mostrada en la salida del navegador (sería un
       riesgo de seguridad hacerlo). Cuando la API de flujos provoca el error, primero
       elimina la información sobre el nombre de usuario/contraseña de la ruta, haciendo que el
       mensaje de error sea seguro para mostrarlo en el navegador.
      </simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>STREAM_MUST_SEEK</constant> 
     </term>
     <listitem>
      <simpara>
       Esta bandera es útil cuando su extensión realmente debe ser capaz de buscar
       aleatoriamente en un flujo. Algunos flujos pueden no ser "buscables" en
       su forma nativa, por lo que esta bandera pregunta a la API de flujos para verificar si el
       flujo soporta la búsqueda. Si no la soporta, copiará el flujo
       a un lugar temporalmente (que puede ser un archivo temporal o un flujo
       de memoria) que soporta búsquedas.
       Por favor, observe que esta bandera no es útil cuando se quiere buscar el
       flujo y escribir en él, ya que el flujo al que se está accediendo no debería
       estar limitado al recurso real que se registró.
      </simpara>
      <note>
       <simpara>
        Si el recurso solicitado está basado en una red, esta bandera causará que
        el abridor bloquee hasta que el contenido completo haya sido descargado.
        </simpara>
      </note>        
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <constant>STREAM_WILL_CAST</constant> 
     </term>
     <listitem>
      <simpara>
       Si su extensión está usando una biblioteca de terceros que supone un FILE* o
       descriptor de archivo, se puede usar esta bandera para solicitar a la API de flujos que
       abra el recurso pero que evite almacenarlo en el buffer. Entonces se puede usar
       <function>php_stream_cast</function> para recuperar el FILE* o
       descriptor de archivo que la biblioteca necesita.
      </simpara>
      <simpara>
       Esto es particularmente útil cuando se accede a URLs de HTTP donde el inicio
       de la información del flujo real se encuentra despuiés de un índice indeterminado dentro
       del flujo.
      </simpara>
      <simpara>
       Ya que esta opción deshabilita el uso del buffer al nivel de la API de flujos, se
       puede experimentar una bajada de rendimiento cuando se usan funciones de flujos
       sobre el flujo; esto es aceptable ya que se le tiene que indicar
       a los flujos que se usarán las funciones para comparar al implementación
       del flujo subyacente.
       Sólo use esta opción cuando esté seguro de que la necesita.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>    
  </para>
 </sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

