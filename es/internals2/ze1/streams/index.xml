<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: seros Status: ready -->
<!-- Author: Wez Furlong <wez@thebrainroom.com>
  Please contact me before making any major amendments to the
  content of this section.  Splitting/Merging are fine if they are
  required for php-doc restructuring purposes - just drop me a line
  if you make a change (so I can update my local copy).
-->

<sect1 xml:id="internals2.ze1.streams" xmlns="http://docbook.org/ns/docbook">
 <title>API de Flujos para Autores de Extensiones de PHP</title>
 <para>
  <note>
   <para>
    Las funciones de este capítulo son para usarlas en el código fuente de PHP
    y no son funciones de PHP. Se puede encontrar información sobre las funciones de flujos del entorno
    de usuario en la <link linkend="book.stream">Referencia de Flujos</link>.
   </para>
  </note>
 </para>
 <sect2 xml:id="internals2.ze1.streams.overview">
  <title>Visión General</title>
  <para>
   La API de Flujos de PHP introduce una aproximación unificada para el manejo de
   archivos y sockets de extensiones de PHP. Usando una API única con funciones
   estándar para operaciones comunes, la API de flujos permite a sus extensiones
   acceder a archivos, sockets, URLs, memoria y objetos definidos en scripts.
   Streams (Flujos) es una API extensible en tiempo de ejecución que permite la carga dinámica
   de módulos (¡y scripts!) para registrar nuevos flujos.
  </para>
  <para>
   El objetivo de la API de Flujos es hacerla confortable para desarrolladores para
   abrir ficheros, URLs y otras fuentes de datos que se pueden utilizar como flujos con una API unificada
   que es fácil de entender. La API está más o menos basada en la familia de funciones stdio de
   ANSI C (con semántica idéntica para la mayoría de las funciones
   principales), por lo que los programadores de C estarán familiarizados con los flujos.
  </para>
  <para>
    La API de flujos opera en dos niveles diferentes: en el nivel básico,
    la API define objetos php_stream para representar fuentes de datos que se pueden usar como flujos.
    En un nivel ligeramente superior, la API define objetos php_stream_wrapper
    que "envuelven" al nivel inferior de la API para proporcionar soporte para recuperar
    información y meta-información desde URLs. Un parámetro adicional,
    <literal>context</literal>, aceptado por la mayoría de las funciones de creación de flujos, es pasado
    al método <literal>stream_opener</literal> de la envoltura para mejorar el comportamiento
    de la envoltura.
  </para>
  <para>
   Un flujo, una vez abierto, también puede tener cualquier número de <literal>filtros</literal>
   aplicados a él, que procesan la información que es leída desde/escrita en el flujo.
  </para>
  <para>
   Los flujos pueden ser convertidos (cast) en otros tipos de gestores de archivos, por lo que
   se pueden usar con bibliotecas de terceros sin grandes dificultades. Esto permite
   a estas bibliotecas acceder a la información directamente desde fuentes de URL. Si su
   sistema tiene la función <function>fopencookie</function> o
   <function>funopen</function>, ¡puede incluso
   pasar cualquier flujo de PHP a cualquier biblioteca de use stdio de ANSI!
  </para>
 </sect2>

 <sect2 xml:id="internals2.ze1.streams.basics">
  <title>Flujos: lo básico</title>
  <para>
   Usar flujos es muy parecido a usar las funciones de stdio de ANSI. La principal
   diferencia está en la manera en de obtiener el gestor de flujo para empezar con él.
   En la mayoría de los casos se usará <function>php_stream_open_wrapper</function>
   para obtener el gestor de flujo. Esta función trabaja de manera similar a fopen,
   como se puede ver en el ejemplo de abajo:
  </para>
  <para>
     <example>
      <title>ejemplo sencillo de flujo que muestra la página de inicio de PHP</title>
      <programlisting role="c">
<![CDATA[
php_stream * stream = php_stream_open_wrapper("http://www.php.net", "rb", REPORT_ERRORS, NULL);
if (stream) {
    while(!php_stream_eof(stream)) {
        char buf[1024];
        
        if (php_stream_gets(stream, buf, sizeof(buf))) {
            printf(buf);
        } else {
            break;
        }
    }
    php_stream_close(stream);
}
]]>
      </programlisting>
     </example>
  </para>
  <para>
   La tabla de abajo muestra la equivalencia entre Flujos y las funciones stdio de ANSI más comunes.
   A menos que se anote lo contrario, la semántica de las funciones son idénticas.
     <table>
      <title>Funciones stdio de ANSI equivalentes en la API de Flujos</title>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>Función Stdio de ANSI</entry>
         <entry>Función de Flujos de PHP</entry>
         <entry>Notas</entry>
        </row>
       </thead>
       <tbody>

        <row>
         <entry>fopen</entry>
         <entry>php_stream_open_wrapper</entry>
         <entry>Los Flujos incluyen parámetros adicionales</entry>
        </row>

        <row>
         <entry>fclose</entry>
         <entry>php_stream_close</entry>
         <entry></entry>
        </row>

        <row>
         <entry>fgets</entry>
         <entry>php_stream_gets</entry>
         <entry></entry>
        </row>

        <row>
         <entry>fread</entry>
         <entry>php_stream_read</entry>
         <entry>El parámetro nmemb se asume que tiene un valor de 1, por lo que el prototipo se parece más a read(2)</entry>
        </row>

        <row>
         <entry>fwrite</entry>
         <entry>php_stream_write</entry>
         <entry>El parámetro nmemb se asume que tiene un valor de 1, por lo que el prototipo se parece más a write(2)</entry>
        </row>

        <row>
         <entry>fseek</entry>
         <entry>php_stream_seek</entry>
         <entry></entry>
        </row>

        <row>
         <entry>ftell</entry>
         <entry>php_stream_tell</entry>
         <entry></entry>
        </row>

        <row>
         <entry>rewind</entry>
         <entry>php_stream_rewind</entry>
         <entry></entry>
        </row>

        <row>
         <entry>feof</entry>
         <entry>php_stream_eof</entry>
         <entry></entry>
        </row>

        <row>
         <entry>fgetc</entry>
         <entry>php_stream_getc</entry>
         <entry></entry>
        </row>

        <row>
         <entry>fputc</entry>
         <entry>php_stream_putc</entry>
         <entry></entry>
        </row>

        <row>
         <entry>fflush</entry>
         <entry>php_stream_flush</entry>
         <entry></entry>
        </row>

        <row>
         <entry>puts</entry>
         <entry>php_stream_puts</entry>
         <entry>La misma semántica que puts, NO fputs</entry>
        </row>

        <row>
         <entry>fstat</entry>
         <entry>php_stream_stat</entry>
         <entry>Los flujos tienen una estructura de estadísticas más abundante</entry>
        </row>
         
       </tbody>
      </tgroup>
     </table>
   
  </para>
 </sect2>

 <sect2 xml:id="internals2.ze1.streams.resources">
  <title>Flujos como Recursos</title>
  <para>
   Todos los flujos están registrados como recursos cuando son creados. Esto asegura
   que serán limpiados de manera apropiada incluso si hubiera un error fatal.
   Todas las funciones de sistema de archivos de PHP operan sobre recursos de flujos - esto
   significa que sus extensiones pueden aceptar punteros a archivos de PHP habituales
   como parámetros, y devovler flujos desde sus funciones.
   La API de flujos realiza este proceso de la forma más sencilla posible:
  </para>
  <para>
     <example>
      <title>Cómo aceptar un flujo como parámetro</title>
      <programlisting role="c">
<![CDATA[
PHP_FUNCTION(example_write_hello)
{
    zval *zstream;
    php_stream *stream;
    
    if (FAILURE == zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "r", &zstream))
        return;
    
    php_stream_from_zval(stream, &zstream);

    /* ahora se puede usar el flujo. Sin embargo, usted no es el "propietario" del
        flujo; lo es el script. Esto significa que NO DEBE cerrar el
        flujo, ¡ya que causaría que PHP se colgara! */

    php_stream_write(stream, "hello\n");
        
    RETURN_TRUE();
}
]]>
      </programlisting>
     </example>
  </para>
  <para>
     <example>
      <title>Cómo devolver un flujo desde una función</title>
      <programlisting role="c">
<![CDATA[
PHP_FUNCTION(example_open_php_home_page)
{
    php_stream *stream;
    
    stream = php_stream_open_wrapper("http://www.php.net", "rb", REPORT_ERRORS, NULL);
    
    php_stream_to_zval(stream, return_value);

    /* después de este punto, el flujo es "propiedad" del script.
        ¡Si lo cierra ahora PHP se colgará! */
}
]]>
      </programlisting>
     </example>
  </para>
  <para>
   Ya que los flujos se limpian automáticamente, es tentador pensar que podemos
   zafarnos y ser unos programadores descuidados y no molestarnos en cerrar los flujos cuando
   hayamos terminado con ellos. Aunque tal enfoque podría funcionar, no es una buena idea
   por varias razones: los flujos permanecen bloqueados en los recursos del sistema mientras están
   abiertos, por lo que dejar un archivo abierto después de que se haya terminado con él podría impedir
   que otros procesos accedan al mismo. Si un script trata con un gran número de archivos,
   la acumulación de recursos usados, tanto en términos de memoria como en
   el número de archivos abiertos, puede causar que las peticiones al servidor web fallen. Suena
   mal, ¿verdad? La API de flujos incluye algo de magia que le puede ayudar a
   mantener su código limpio - si un flujo es cerrado por su código cuando debería hacerlo,
   puede encontrar alguna información de depuración útil en el registro de errores de su servidor
   web.
  </para>
  <note>
   <simpara>
    Use siempre uan construcción de depuración de PHP al desarrollar una extensión
    (<option>--enable-debug</option> cuando se ejecute configure), ya que se ha realizado
    un mucho esfuerzo para advertirle de filtraciones de memoria y flujos.
   </simpara>
  </note>
  <para>
   En algunos casos es útil mantener un flujo abierto durante una petición, para actuar
   como un archivo de registro o de seguimiento, por ejemplo. Escribir código para limpiar de forma
   segura un flujo no es difícil, pero requiere varias líneas de código que no son estrictamente
   necesarias. Para ahorrarse el problema de escribir el código puede
   marcar un flujo como OK para su autolimpieza. Esto significa que
   la API de flujos no emitirá una advertencia cuando es hora de autolimpiar
   un flujo. Para hacer esto puede usar <function>php_stream_auto_cleanup</function>.
  </para>
 </sect2>
<!-- Disable these until references are fixed
 &internals2.ze1.streams.common;
 &internals2.ze1.streams.dir;
 &internals2.ze1.streams.file;
 &internals2.ze1.streams.socket;
 &internals2.ze1.streams.structs;
-->
 &internals2.ze1.streams.constants;
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

