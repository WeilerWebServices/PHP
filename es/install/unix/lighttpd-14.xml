<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: chuso Status: ready -->
<sect1 xml:id="install.unix.lighttpd-14" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Lighttpd 1.4 en sistemas Unix</title>

 <para>
  Esta sección contiene anotaciones y consejos específicos para la instalación
  de PHP en Lighttpd 1.4 para sistemas Unix.
 </para>

 <para>
  Por favor, antes de continuar consulte el <link xlink:href="&url.lighttpd.doc;">
  sistema de seguimiento de Lighttpd</link> para saber cómo instalar Lighttpd apropiadamente.
 </para>
 
 <para>
  La SAPI recomendada para conectar PHP a Lighttpd es Fastcig. Esta SAPI
  viene habilitada por omisión en php-cgi PHP 5.3. En versiones anteriores debe
  configurarse PHP con --enable-fastcgi. Para verificar que PHP tiene fastcgi habilitado,
  <literal>php -v</literal> debe contener <literal>PHP 5.2.5 (cgi-fcgi)</literal>
  En versiones anteriores a PHP 5.2.3, fastcgi estaba habilitado en el binario de php (no había php-cgi).
 </para>
 
 <sect2 xml:id="install.unix.lighttpd-14.lighttpd-spawn">
  <title>Permitiendo que Lighttpd lance procesos de php</title>

  <para>
   Para configurar Lighttpd para que se conecte a php y lance procesos fastcgi, debe editar
   lighttpd.conf. Se recomienda utilizar sockets para conectar fastcgi a los procesos
   del sistema local.
  </para>

  <example>
   <title>Extracto de lighttpd.conf</title>
   <screen>
<![CDATA[
server.modules += ( "mod_fastcgi" )

fastcgi.server = ( ".php" =>
  ((
    "socket" => "/tmp/php.socket",
    "bin-path" => "/usr/local/bin/php-cgi",
    "bin-environment" => (
      "PHP_FCGI_CHILDREN" => "16",
      "PHP_FCGI_MAX_REQUESTS" => "10000"
    ),
    "min-procs" => 1,
    "max-procs" => 1,
    "idle-timeout" => 20
  ))
)
]]>

   </screen>
  </example>

  <para>
   La directiva bin-path permite a lighttpd lanzar procesos fastcgi dinámicamente.
   PHP creará nuevos procesos hijos según se especifique en la variable de entorno
   PHP_FCGI_CHILDREN. La directiva "bin-environment" establece el entorno de los
   nuevos procesos. Cada vez que se alcance un determinado número de peticiones,
   determinado por PHP_FCGI_MAX_REQUEST, se matará un proceso. Las directivas
   "min-procs" y "max-procs" deben, por norma general, evitarse con PHP. PHP
   gestiona sus propios hijos, de forma que cachés como APC sólo estarán disponibles
   para los procesos gestionados por PHP. Si se establece "min-procs" a un número superior a 1,
   el número total de procesos oyentes en php se multiplicará por PHP_FCGI_CHILDREN
   (2 min-procs * 16 hijos produce 32 oyentes).
  </para>
 </sect2>

 <sect2 xml:id="install.unix.lighttpd-14.spawn-fcgi">
  <title>Lanzando procesos con spawn-fcgi</title>  

  <para>
   Lighttpd contiene el programa spawn-fcgi que facilita lanzar
   procesos fastcgi.
  </para>
 </sect2>

 <sect2 xml:id="install.unix.lighttpd-14.spawn-php">
  <title>Lanzando procesos php-cgi</title>

  <para>
   Pese a que es más laborioso, es posible lanzar procesos sin spawn-fcgi.
   La variable de entorno PHP_FCGI_CHILDREN controla
   cuántos procesos hijo de PHP se lanzarán para manejar las peticiones entrantes.
   PHP_FCGI_MAX_REQUESTS determinará el tiempo de vida (en peticiones) de cada
   proceso hijo. Aquí se muestra un script en bash que asiste en la creación de procesos php.
  </para>
     
  <example>
   <title>Lanzando oyentes FastCGI</title>
   <screen>
<![CDATA[
#!/bin/sh

# Ubicación del binario php-cgi
PHP=/usr/local/bin/php-cgi

# Ubicación del fichero PID
PHP_PID=/tmp/php.pid

# Enlazando a una dirección
#FCGI_BIND_ADDRESS=10.0.1.1:10000
# Enlazando a un socket de dominio
FCGI_BIND_ADDRESS=/tmp/php.sock

PHP_FCGI_CHILDREN=16
PHP_FCGI_MAX_REQUESTS=10000

env -i PHP_FCGI_CHILDREN=$PHP_FCGI_CHILDREN \
       PHP_FCGI_MAX_REQUESTS=$PHP_FCGI_MAX_REQUESTS \
       $PHP -b $FCGI_BIND_ADDRESS &

echo $! > "$PHP_PID"

]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="install.unix.lighttpd-14.remote-fcgi">
  <title>Conexión a instancias FCGI remotas</title>

  <para>
   Para poder tener aplicaciones escalables, pueden lanzarse instancias de
   fastcgi en múltiples equipos remotos.
  </para>
   
  <example>
   <title>Conexión a instancias de php-fastcgi remotas</title>
   <screen>
<![CDATA[
fastcgi.server = ( ".php" =>
   (( "host" => "10.0.0.2", "port" => 1030 ),
    ( "host" => "10.0.0.3", "port" => 1030 ))
)
]]>
   </screen>
  </example>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
