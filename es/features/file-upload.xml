<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 339750 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<chapter xml:id="features.file-upload" xmlns="http://docbook.org/ns/docbook">
 <title>Subida de ficheros</title>
 
 <sect1 xml:id="features.file-upload.post-method">
  <title>Subida con el método POST</title>
  <simpara>
   Esta característica permite la subida de ficheros de texto y binarios.
   Con la autenticación de PHP y las funciones de manipulación de ficheros
   se tiene control completo sobre quién está autorizado a realizar una subida y
   qué hay que hacer con el fichero una vez subido.
  </simpara>
  <simpara>
   PHP es capaz de recibir subidas de ficheros de cualquier navegador
   compatible con el RFC-1867.
  </simpara>
  
  <note>
   <title>Nota sobre configuraciones relacionadas</title>
   <para>
    Véanse también las directivas <link linkend="ini.file-uploads">file_uploads</link>,
    <link linkend="ini.upload-max-filesize">upload_max_filesize</link>,
    <link linkend="ini.upload-tmp-dir">upload_tmp_dir</link>,
    <link linkend="ini.post-max-size">post_max_size</link> y
    <link linkend="ini.max-input-time">max_input_time</link>
    de &php.ini;
   </para>
  </note>
  
  <para>
   PHP también admite el método PUT para subir ficheros tal y como lo
   utilizan los clientes <productname>Netscape Composer</productname> y
   <productname>Amaya</productname> del W3C. Véase el <link
   linkend="features.file-upload.put-method">Soporte para el
   método PUT</link> para más detalles.
  </para>
  
  <para>
   <example>
    <title>Formulario para la subida de ficheros</title>
    <para>
     Se puede construir una página de subida de ficheros creando un formulario especial
     parecido a este:
    </para>
    <programlisting role="html">
<![CDATA[
<!-- El tipo de codificación de datos, enctype, DEBE especificarse como sigue -->
<form enctype="multipart/form-data" action="__URL__" method="POST">
    <!-- MAX_FILE_SIZE debe preceder al campo de entrada del fichero -->
    <input type="hidden" name="MAX_FILE_SIZE" value="30000" />
    <!-- El nombre del elemento de entrada determina el nombre en el array $_FILES -->
    Enviar este fichero: <input name="fichero_usuario" type="file" />
    <input type="submit" value="Enviar fichero" />
</form>
]]>
    </programlisting>
    <para>
     El <literal>__URL__</literal> del ejemplo anterior se debe sustituir
     y debe apuntar a un fichero de PHP.
    </para>
    <para>
     El campo oculto <literal>MAX_FILE_SIZE</literal> (medido en bytes) debe
     preceder al campo de entrada del fichero, siendo su valor el tamaño de fichero máximo aceptado por PHP.
     Se debe utilizar siempre este elemento del formulario, ya que evita a los usuarios la molestia de
     esperar a que un fichero grande sea transferido sólo para descubrir que falló la transferencia 
     porque era demasiado grande. Hay que tener en cuenta que engañar a esta configuración en el
     lado del navegador es muy fácil; nunca dependa de que los ficheros que tengan un tamaño mayor
     sean bloqueados por esta característica. Es simplemente una característica conventiene para
     los usuarios en el lado cliente de la aplicación. No obstante, la configuración de PHP (en el lado del
     servidor) para un tamaño máximo no puede ser engañada.
    </para>
   </example>
  </para>
  
  <note>
   <para>
    Asegúrese de que el formulario de subida de ficheros tiene el atributo <literal>enctype="multipart/form-data"</literal>
    o de lo contrario la subida de ficheros no funcionará.
   </para>
  </note>
  
  <para>
   El array global <varname>$_FILES</varname> contendrá toda la información de los los ficheros subidos.
   Su contenido en el formulario del ejemplo es el siguiente. Observe que se asume el empleo del
   nombre <emphasis>fichero_usuario</emphasis> para el fichero subido, tal como se utiliza en el script
   de ejemplo anterior. Este puede ser cualquier nombre.
   <variablelist>
    <varlistentry>
     <term><varname>$_FILES['fichero_usuario']['name']</varname></term>
     <listitem>
      <para>
       El nombre original del fichero en la máquina del cliente.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><varname>$_FILES['fichero_usuario']['type']</varname></term>
     <listitem>
      <para>
       El tipo MIME del fichero, si el navegador proporcionó esta
       información. Un ejemplo sería
       <literal>"image/gif"</literal>. Este tipo MIME, sin embargo,
       no se comprueba en el lado de PHP y por lo tanto no se garantiza
       su valor.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><varname>$_FILES['fichero_usuario']['size']</varname></term>
     <listitem>
      <para>
       El tamaño, en bytes, del fichero subido.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><varname>$_FILES['fichero_usuario']['tmp_name']</varname></term>
     <listitem>
      <para>
       El nombre temporal del fichero en el cual se almacena el fichero
       subido en el servidor.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><varname>$_FILES['fichero_usuario']['error']</varname></term>
     <listitem>
      <para>
       El <link linkend="features.file-upload.errors">código de error</link>
       asociado a esta subida.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  
  <para>
   Por defecto, los ficheros se almacenan en el directorio temporal predeterminado
   del servidor, a menos que se haya indicado otra ubicaicón con la directiva <link
   linkend="ini.upload-tmp-dir">upload_tmp_dir</link> en
   &php.ini;. Se puede cambiar el directorio predeterminado
   del servidor estableciendo la variable de entorno
   <envar>TMPDIR</envar> en el entorno en que se ejecuta PHP.
   Configurarlo usando <function>putenv</function> desde un script de PHP
   no funcionará. Esta variable de entorno también se puede utilizar
   para asegurarse de que las demás operaciones están trabajando sobre los ficheros
   subidos.
   <example>
    <title>Validación de la subida de ficheros</title>
    <para>
     Véanse también las entradas de las funciones <function>is_uploaded_file</function>
     y <function>move_uploaded_file</function> para más información. El
     siguiente ejemplo procesará la subida de fichero desde un formulario.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// En versiones de PHP anteriores a la 4.1.0, debería utilizarse $HTTP_POST_FILES en lugar
// de $_FILES.

$dir_subida = '/var/www/uploads/';
$fichero_subido = $dir_subida . basename($_FILES['fichero_usuario']['name']);

echo '<pre>';
if (move_uploaded_file($_FILES['fichero_usuario']['tmp_name'], $fichero_subido)) {
    echo "El fichero es válido y se subió con éxito.\n";
} else {
    echo "¡Posible ataque de subida de ficheros!\n";
}

echo 'Más información de depuración:';
print_r($_FILES);

print "</pre>";

?>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   El script de PHP que recibe el fichero subido debería implementar
   cualquier lógica necesaria para determinar qué se debe hacer
   con el fichero subido. Se puede, por ejemplo, utilizar la
   variable <varname>$_FILES['fichero_usuario']['size']</varname>
   para descartar cualquier fichero que sea demasiado pequeño o demasiado grande. Se
   podría utilizar la
   variable <varname>$_FILES['fichero_usuario']['type']</varname>
   para descartar cualquier fichero que no corresponda con un cierto criterio de tipo, aunque
   esto se debe emplear solo como la primera de una serie de comprobaciones debido a que este valor
   está completamente bajo el control del cliente y no se comprueba en el lado
   de PHP.
   También se puede usar <varname>$_FILES['fichero_usuario']['error']</varname>
   y planear la lógica de acuerdo con los <link
   linkend="features.file-upload.errors">códigos de error</link>.
   Cualquiera que sea la lógica, se debería borrar el fichero del
   directorio temporal o moverlo a otra ubicación.
  </simpara>
  <simpara>
   Si no se selecciona ningún fichero en el formulario para realizar la subida, PHP devolverá
   <varname>$_FILES['fichero_usuario']['size']</varname> como 0, y
   <varname>$_FILES['fichero_usuario']['tmp_name']</varname> como ninguno.
  </simpara>
  <simpara>
   El fichero será borrado del directorio temporal al final
   de la solicitud si este no ha sido movido o renombrado.
  </simpara>
  <example>
   <title>Subir un array de ficheros</title>
   <para>
    PHP admite la <link linkend="faq.html.arrays">funcionalidad de array en HTML</link>
    incluso con ficheros.
   </para>
   <programlisting role="html">
<![CDATA[
<form action="" method="post" enctype="multipart/form-data">
<p>Imágenes:
<input type="file" name="imágenes[]" />
<input type="file" name="imágenes[]" />
<input type="file" name="imágenes[]" />
<input type="submit" value="Enviar" />
</p>
</form>
]]>
   </programlisting>
   <programlisting role="php">
<![CDATA[
<?php
foreach ($_FILES["imágenes"]["error"] as $clave => $error) {
    if ($error == UPLOAD_ERR_OK) {
        $nombre_tmp = $_FILES["imágenes"]["tmp_name"][$clave];
        // basename() puede evitar ataques de denegació del sistema de ficheros;
        // podría ser apropiado más validación/saneamiento del nombre de fichero
        $nombre = basename($_FILES["imágenes"]["name"][$clave]);
        move_uploaded_file($nombre_tmp, "datos/$nombre");
    }
}
?>
]]>
   </programlisting>
  </example>
  <para>
   Se puede implementar una barra de progreso de subida de ficheros con el <link
   linkend="session.upload-progress">Progreso de subida en sesiones</link>.
  </para>
 </sect1>
 
 <sect1 xml:id="features.file-upload.errors">
  <title>Explicación de los mensajes de error</title>
  <simpara>
   PHP devuelve un código de error apropiado junto con el
   array de ficheros. El código de error se puede encontrar en el
   segmento <literal>error</literal> del array de ficheros que PHP crea
   durante la subida de ficheros. En otras palabras, el error puede
   encontrarse en <varname>$_FILES['fichero_usuario']['error']</varname>.
  </simpara>
  <para>
   <variablelist>
    <varlistentry>
     <term><constant>UPLOAD_ERR_OK</constant></term>
     <listitem>
      <para>
       Valor: 0; No hay error, fichero subido con éxito.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>UPLOAD_ERR_INI_SIZE</constant></term>
     <listitem>
      <para>
       Valor: 1; El fichero subido excede la directiva
       <link linkend="ini.upload-max-filesize">upload_max_filesize</link>
       de &php.ini;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>UPLOAD_ERR_FORM_SIZE</constant></term>
     <listitem>
      <para>
       Valor: 2; El fichero subido excede la directiva <emphasis>MAX_FILE_SIZE</emphasis>
       especificada en el formulario HTML.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>UPLOAD_ERR_PARTIAL</constant></term>
     <listitem>
      <para>
       Valor: 3; El fichero fue sólo parcialmente subido.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>UPLOAD_ERR_NO_FILE</constant></term>
     <listitem>
      <para>
       Valor: 4; No se subió ningún fichero.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>UPLOAD_ERR_NO_TMP_DIR</constant></term>
     <listitem>
      <para>
       Valor: 6; Falta la carpeta temporal. Introducido en PHP 5.0.3.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>UPLOAD_ERR_CANT_WRITE</constant></term>
     <listitem>
      <para>
       Valor: 7; No se pudo escribir el fichero en el disco. Introducido en PHP 5.1.0.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><constant>UPLOAD_ERR_EXTENSION</constant></term>
     <listitem>
      <para>
       Valor: 8; Una extensión de PHP detuvo la subida de ficheros. PHP no
       proporciona una forma de determinar la extensión que causó la parada
       de la subida de ficheros; el examen de la lista de extensiones cargadas con <function>phpinfo</function> puede ayudar.
       Introducido en PHP 5.2.0.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </sect1>
 
 <sect1 xml:id="features.file-upload.common-pitfalls">
  <title>Dificultades comunes</title>
  <simpara>
   El elemento <literal>MAX_FILE_SIZE</literal> no puede especificar un tamaño de fichero
   mayor que el establecido en la directiva <link
   linkend="ini.upload-max-filesize">upload_max_filesize</link>
   del fichero &php.ini;. Por defecto es 2 megabytes.
  </simpara>
  <simpara>
   Si hay un límite de memoria habilitado, podría ser necesario un valor
   de <link linkend="ini.memory-limit">memory_limit</link> más grande. Asegúrese
   de establecer un valor de <link linkend="ini.memory-limit">memory_limit</link>
   lo suficientemente grande.
  </simpara>
  <simpara>
   Si el valor de <link linkend="ini.max-execution-time">max_execution_time</link>
   es demasiado pequeño, la ejecución del script podría exceder este valor. Asegúrese
   de establecer un valor de <literal>max_execution_time</literal> lo suficientemente grande.
  </simpara>
  <note>
   <simpara>
    <link linkend="ini.max-execution-time">max_execution_time</link> solo
    afecta al tiempo de ejecución del propio script. Todo tiempo empleado
    en actividades externas a la ejecución del script,
    tales como las llamadas al sistema con <function>system</function>, la
    función <function>sleep</function>, las consultas a base de datos, el tiempo que tarda
    el proceso de subida de ficheros, etc., no se incluye para determinar el tiempo
    máximo que el script ha estado en ejecución.
   </simpara>
  </note>
  <warning>
   <simpara>
    <link linkend="ini.max-input-time">max_input_time</link> establece el tiempo
    máximo, en segundos, que al script se le permite recibir información; esto incluye
    la subida de ficheros. Para ficheros grandes o varios ficheros, o usuarios con conexiones más lentas,
    podría excederse el valor predeterminado de <literal>60 segundos</literal>.
   </simpara>
  </warning>
  <simpara>
   Si el valor de <link linkend="ini.post-max-size">post_max_size</link> se establece demasiado
   pequeño, los ficheros grandes no podrán ser subidos. Asegúrese de establecer
   <literal>post_max_size</literal> lo suficientemente grande.
  </simpara>
  <simpara>
   A partir de PHP 5.2.12, el
   ajuste de configuración <link linkend="ini.max-file-uploads">max_file_uploads</link>
   controla el número máximo de ficheros que se pueden subir en una
   petición. Si se suben más ficheros que el límite establecido,
   <varname>$_FILES</varname> parará de procesar ficheros una vez se alcance
   este límite. Por ejemplo, si
   <link linkend="ini.max-file-uploads">max_file_uploads</link> se establece a
   <literal>10</literal>, <varname>$_FILES</varname> nunca contendrá
   más de 10 elementos.
  </simpara>
  <simpara>
   No validar sobre qué fichero se opera podría significar que los usuarios pueden acceder
   a información delicada de otros directorios.
  </simpara>
  <simpara>
   Por favor, observe que el <productname>CERN httpd</productname> parece quitar todo
   lo que empieza con primer espacio en blanco en la cabecera de tipo de contenido MIME
   que recibe desde el cliente. Mientras este sea el caso, el <productname>CERN httpd</productname>
   no tendrá soporte para la funcionalidad de subida de ficheros.
  </simpara>
  <simpara>
   Debido a la gran cantidad de estilos de listados de directorios, no podemos garantizar
   que los ficheros con nombres exóticos (como el que contiene espacios en blanco) se manejen adecuadamente.
  </simpara>
  <simpara>
   Los desarrolladores no deben mezclar los campos <literal>input</literal> normales con los de subida de ficheros en la misma
   variable de formulario (mediante un nombre de <literal>input</literal> como <literal>foo[]</literal>).
  </simpara>
 </sect1>
 
 <sect1 xml:id="features.file-upload.multiple">
  <title>Subida de varios ficheros</title>
  <simpara>
   Se pueden subir varios ficheros utilizando diferentes
   <literal>name</literal> para los <literal>input</literal>.
  </simpara>
  <simpara>
   También es posible subir varios ficheros simultáneamente y
   tener la información organizada automáticamente en arrays. Para
   ello es necesario utilizar la misma sintaxis de presentación de array en el
   formulario HTML, tal como se hace con 'selects' y 'checkboxes' múltiples:
  </simpara>
  <para>
   <example>
    <title>Subida de varios ficheros</title>
    <programlisting role="html">
<![CDATA[
<form action="file-upload.php" method="post" enctype="multipart/form-data">
  Enviar estos ficheros:<br />
  <input name="fichero_usuario[]" type="file" /><br />
  <input name="fichero_usuario[]" type="file" /><br />
  <input type="submit" value="Enviar ficheros" />
</form>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   Cuando se envía el formulario de arriba, se inicializarán los arrays
   <varname>$_FILES['fichero_usuario']</varname>,
   <varname>$_FILES['fichero_usuario']['name']</varname> y
   <varname>$_FILES['fichero_usuario']['size']</varname>
   (al igual que en <varname>$HTTP_POST_FILES</varname> para las versiones de PHP anteriores
   a la 4.1.0).
   Cuando
   <link linkend="ini.register-globals">register_globals</link> está activado, las globales para los ficheros
   subidos también se inicializan. Cada uno de estos será un array indexado
   numéricamente con los valores correspondientes a los ficheros enviados.
  </simpara>
  <simpara>
   Por ejemplo, suponga que se envían los nombres de fichero
   <filename>/home/test/review.html</filename> y
   <filename>/home/test/xwp.out</filename>. En este
   caso,<varname>$_FILES['fichero_usuario']['name'][0]</varname>
   contendría el valor <filename>review.html</filename>, y
   <varname>$_FILES['fichero_usuario']['name'][1]</varname> contendría
   el valor <filename>xwp.out</filename>. De manera similar,
   <varname>$_FILES['fichero_usuario']['size'][0]</varname> contendría
   el tamaño del fichero <filename>review.html</filename>, y así sucesivamente.
  </simpara>
  <simpara>
   También se establecen
   <varname>$_FILES['fichero_usuario']['name'][0]</varname>,
   <varname>$_FILES['fichero_usuario']['tmp_name'][0]</varname>,
   <varname>$_FILES['fichero_usuario']['size'][0]</varname>, y
   <varname>$_FILES['fichero_usuario']['type'][0]</varname>.
  </simpara>
  <warning>
   <simpara>
    A partir de PHP 5.2.12, el
    ajuste de configuración <link linkend="ini.max-file-uploads">max_file_uploads</link>
    actúa como límite del número de ficheros que se pueden
    subir en una petición. Es necesario asegurarse de que el formulario no
    intente subir más ficheros que este límite en una petición.
   </simpara>
  </warning>
 </sect1>
 
 <sect1 xml:id="features.file-upload.put-method">
  <title>Soporte para el método PUT</title>
  <para>
   PHP ofrece soporte para el método PUT de HTTP utilizado por algunos clientes para almacenar
   ficheros en un servidor.
   Las peticiones PUT son mucho más simples que una subida de ficheros mediante peticiones POST.
   Se ven algo como esto:
   <informalexample>
    <programlisting role="HTTP">
<![CDATA[
PUT /ruta/nombrefichero.html HTTP/1.1
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   Esto normalmente significaría que el cliente remoto quiere guardar
   el contenido que le sigue como: <filename>/ruta/nombrefichero.html</filename> en el árbol web.
   Obviamente, no es una buena idea que Apache o PHP permitan a todo el mundo
   sobrescribir automáticamente cualquier fichero del árbol web. Por tanto, para manejar
   tales peticiones se debe primero indicar al servidor web que
   cierto script de PHP maneje la petición. En Apache, esto se
   hace con la directiva <emphasis>Script</emphasis>. Esta se puede
   colocar casi en cualquier parte del fichero de configuración de Apache. Un
   lugar común es dentro de un bloque <literal>&lt;Directory&gt;</literal> o tal vez dentro
   de un bloque <literal>&lt;VirtualHost&gt;</literal>. Una línea como ésta resolvería el problema:
   <informalexample>
    <programlisting>
<![CDATA[
Script PUT /put.php
]]>
    </programlisting>
   </informalexample>
  </para>
  <simpara>
   Esto le indica a Apache que envíe todas las peticiones PUT para los URI que coincidan con
   el contexto en el cual se pone esta línea en el script <filename>put.php</filename>. Se
   asume, por supuesto, que se tiene habilitado PHP para la extensión
   <filename>.php</filename> y que PHP está activo. El recurso de destino para todas las
   peiticiones PUT a este script tiene que ser el propio script, no el nombre de fichero que
   debería tener el fichero subido.
  </simpara>
  <simpara>
   Entonces, con PHP se haría algo como lo siguiente en el
   fichero put.php. Se copiaría el contenido del fichero subido al
   fichero <filename>mificheroput.ext</filename> en el servidor.
   Podría ser conveniente realizar algunas comprobaciones y/o
   autenticar al usuario antes de realizar esta copia del fichero.
  </simpara>
  <para>
   <example>
    <title>Guardar ficheros PUT de HTTP</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Los datos de PUT vienen en el flujo de entrada estándar */
$datosPUT = fopen("php://input", "r");

/* Abrir un fichero para escritura */
$fp = fopen("mificheroput.ext", "w");

/* Leer 1 KB de datos cada vez
   y escribir en el fichero */
while ($datos = fread($datosPUT, 1024))
  fwrite($fp, $datos);

/* Cerrar los flujos */
fclose($fp);
fclose($datosPUT);
?>
]]>
    </programlisting>
   </example>
  </para>
 </sect1>
 
 <sect1 xml:id="features.file-upload.errors.seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="security.filesystem">Seguridad del sistema de ficheros</link></member>
   </simplelist>
  </para>
 </sect1>
 
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

