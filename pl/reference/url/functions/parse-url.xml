<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: adi Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.parse-url" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>parse_url</refname>
  <refpurpose>Przetwarza adres URL i zwraca jego składowe</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>parse_url</methodname>
   <methodparam><type>string</type><parameter>url</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>składnik</parameter></methodparam>
  </methodsynopsis>
  <para>
   Funkcja przetwarza URL i zwraca tablicę asocjacyjną zawierającą każdy z 
   komponentów wchodzących w skład URL.
   </para>
  <para>
   Ta funkcja <emphasis role="strong">nie służy</emphasis> do sprawdzania
   poprawności podanego URL, tylko rozbija go na podane niżej części. Częściowe
   URLe także są obsługiwane <function>parse_url</function> postara się przetworzyć
   je poprawnie.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>url</parameter></term>
     <listitem>
      <para>
       Adres URL do przetworzenia
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <variablelist>
    <varlistentry>
     <term><parameter>składnik</parameter></term>
     <listitem>
      <para>
       Podaj jedną ze stałych <constant>PHP_URL_SCHEME</constant>,
       <constant>PHP_URL_HOST</constant>, <constant>PHP_URL_PORT</constant>,
       <constant>PHP_URL_USER</constant>, <constant>PHP_URL_PASS</constant>,
       <constant>PHP_URL_PATH</constant>, <constant>PHP_URL_QUERY</constant>
       or <constant>PHP_URL_FRAGMENT</constant> aby otrzymać określony składnik URL
       jako <type>string</type>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   W przypadku poważnie zdeformowanych URLi, <function>parse_url</function> może zwrócić
   &false; i wyemitować <constant>E_WARNING</constant>. W przeciwnym wypadku zostanie zwrócona asocjatywna tablica,
   której składowe mogą być następujące (wystąpi przynajmnej jedena):  
   <itemizedlist>
    <listitem>
     <simpara>
      <varname remap="structfield">scheme (protokół)</varname> - np. http
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">host</varname> 
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">port</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">user (użytkownik)</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">pass (hasło)</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">path (ścieżka)</varname>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">query (zapytanie)</varname> - po znaku <literal>?</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <varname remap="structfield">fragment</varname> - po znaku <literal>#</literal>
     </simpara> 
    </listitem> 
   </itemizedlist> 
  </para>
  <para>
   Jeśli parametr <parameter>składnik</parameter> jest określony, zwracany jest
   <type>string</type> zamiast <type>array</type>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.2</entry>
       <entry>Dodano parametr <parameter>składnik</parameter></entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples"> &reftitle.examples; 
  <para>
   <example> 
    <title>A <function>parse_url</function> przykład</title>
    <programlisting role="php">
<![CDATA[
<?php
$url = 'http://uzytkownik:haslo@serwer/sciezka?arg=wartosc#kotwica';

print_r(parse_url($url));

echo parse_url($url, PHP_URL_PATH);
?>
]]> 
    </programlisting> 
    &example.outputs; 
    <screen> 
<![CDATA[
Array
(
    [scheme] => http
    [host] => serwer
    [user] => uzytkownik
    [pass] => haslo
    [path] => /sciezka
    [query] => arg=wartosc
    [fragment] => kotwica
)
/sciezka
]]>
    </screen> 
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Funkcja nie działa na relatywnych URLach.
   </para>
  </note>
  <note>
   <para>
    Ta funkcja jest przeznaczona do przetwarzania URLi, a nie URI.
    Jednakże, aby zastosować wymóg wstecznej kompatybilności PHP, zrobiono wyjątek dla
    protokołu file:// gdzie potrójne ukośniki (file:///...) są dozwolone. Dla innych protokołów
    jest to nieprawidłowe.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso"> &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pathinfo</function></member>
    <member><function>parse_str</function></member>
    <member><function>http_build_query</function></member>
    <member><function>dirname</function></member>
    <member><function>basename</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->