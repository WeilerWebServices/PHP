<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: adi Status: ready -->
<!-- $Revision$ -->
  <refentry xml:id="function.urlencode" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <refnamediv>
    <refname>urlencode</refname>
    <refpurpose>Koduje łańcuch metodą kodowania URLi</refpurpose>
   </refnamediv>
   
   <refsect1>
    <title>Opis</title>
     <methodsynopsis>
      <type>string</type><methodname>urlencode</methodname>
      <methodparam><type>string</type><parameter>str</parameter></methodparam>
     </methodsynopsis>
    <para>
     Zwraca łańcuch w którym wszystkie nie alfanumeryczne znaki
     z wyjątkiem <screen>-_.</screen> zostały zastąpione przez
     dwie cyfry szesnastkowe poprzedzone znakiem procenta
     (<literal>%</literal>), a spacje kodowane są jako znak
     (<literal>+</literal>). To kodowanie jest takie same jak
     wykorzystywane przy przesyłaniu danych z formularzy WWW, tj.
     takie samo jak w media typie:
     <literal>application/x-www-form-urlencoded</literal>.
     Różni się od kodowania z RFC1738 (zobacz
     <function>rawurlencode</function>) tym, że z powodów historycznych,
     spacje są kodowane jako znak plus (+).  Funkcja ta jest odpowiednia
     do zakodowania łańcucha używanego w zapytaniu URL oraz
     jako zmienna przekazywana do następnej strony:
     <example>
      <title><function>urlencode</function> przykład</title>
      <programlisting role="php">
<![CDATA[
<?php
echo '<a href="mycgi?foo=', urlencode($userinput), '">';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
    Notka: Uważaj na zmienne, które mogą zawierać HTML'owe encje.
    Rzeczy jak &amp;amp, &amp;copy i &amp;pound są przetwarzane przez
    przeglądarkę i ich aktualna postać jest używana dalej zamiast
    porządanej nazwy zmiennej.  To jest oczywisty problem, o którym W3C
    informuje ludzi od lat. Referencje są tutaj:
    <link xlink:href="&url.argsep;">&url.argsep;</link>. PHP obsługuje
    zmianę separatora argumentów na zalecany przez W3C średnik
    poprzez dyrektywę arg_separator .ini.  Niestety większość przeglądarek
    nie wysyła danych z formularza w formacie używającym średnik jako
    separator. Bardziej przenośnym rozwiązaniem jest użycie &amp;amp;
    jako separatora zamiast &amp;.  Nie musisz zmieniać PHP'owego
    arg_separator aby to uzyskać.  Zostaw separator jako &amp;, ale
    koduj swoje URL'e używając <function>htmlentities</function>lub  
    <function>htmlspecialchars</function>. 
    </para>  
    <para>  
     <example>
      <title><function>urlencode</function> i
             <function>htmlentities</function> przykład</title>
      <programlisting role="php">
<![CDATA[
<?php
$query_string = 'foo=' . urlencode($foo) . '&bar=' . urlencode($bar);
echo '<a href="mycgi?' . htmlentities($query_string) . '">'; 
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Patrz także: <function>urldecode</function>,
     <function>htmlentities</function>,
     <function>rawurldecode</function> i
     <function>rawurlencode</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
