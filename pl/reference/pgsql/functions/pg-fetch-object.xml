<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 334605 Maintainer: joeaccord Status: ready -->
<!-- $Revision$-->
<!-- splitted from ./en/functions/pgsql.xml, last change in rev 1.2 -->
<!-- CREDITS: jarek, garbus, sobak -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.pg-fetch-object">
 <refnamediv>
  <refname>pg_fetch_object</refname>
  <refpurpose>Pobiera wiersz jako obiekt</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>object</type><methodname>pg_fetch_object</methodname>
   <methodparam><type>resource</type><parameter>wynik</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>wiersz</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>typ_wyniku</parameter><initializer>PGSQL_ASSOC</initializer></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <type>object</type><methodname>pg_fetch_object</methodname>
   <methodparam><type>resource</type><parameter>wynik</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>wiersz</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>nazwa_klasy</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>parametry</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>pg_fetch_object</function> zwraca obiekt którego
   atrybutami są nazwy pól pobranego wiersza. Może dodatkowo
   tworzyć pewien obiekt określonej klasy, oraz wstawić parametry do
   konstruktora tej klasy.
  </para>
  &database.fetch-null;
  <para>
   Pod względem szybkości funkcja ta jest identyczna jak
   <function>pg_fetch_array</function>, i prawie tak szybka jak
   <function>pg_fetch_row</function> (różnica jest
   znikoma).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>wynik</parameter></term>
     <listitem>
      <para>
       Identyfikator wyniku zapytania PostgreSQL, zwrócony przez <function>pg_query</function>,
       <function>pg_query_params</function> lub <function>pg_execute</function>
       (między innymi).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>wiersz</parameter></term>
     <listitem>
      <para>
       Numer wiersza w wyniku do pobrania.  Wiersze są numerowane od zera w górę.  Jeśli jest pominięty
       albo wynosi &null;, pobrany zostanie kolejny wiersz.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>typ_wyniku</parameter></term>
      <listitem>
       <para>
        Pomijany i przestarzały.
       </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>nazwa_klasy</parameter></term>
      <listitem>
       <para>
        Nazwa klasy do wytworzenia, określenie zwracanych parametrów.
        Jeśli nie podano, zwrócony zostanie obiekt <classname>stdClass</classname>.
       </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parametry</parameter></term>
      <listitem>
       <para>
        Opcjonalna tablica (ang. <type>array</type>) parametrów podawanych do konstruktora
        obiektów klasy <parameter>nazwa_klasy</parameter>.
       </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Obiekt (ang. <type>object</type>) z atrybutem dla każdej nazwy 
   kolumny w wyniku. Wartości <literal>NULL</literal> z bazy danych
   są zwracane jako &null;.
  </para>
  <para>
   &false; jest zwracne, gdy parametr <parameter>wiersz</parameter> przekracza całkowitą
   liczbę wierszy, gdy kolejny wiersz nie istnieje, lub w przypadku każdego innego błędu.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pg_fetch_object</function> - przykład</title>
    <programlisting role="php">
<![CDATA[
<?php 

$baza = "magazyn";

$polaczenie = pg_connect("host=localhost port=5432 dbname=$baza");
if (!$polaczenie) { 
  echo "Błąd połączenia do bazy PostgreSQL $baza\n";
  exit;
}

$zap = pg_query($polaczenie, "SELECT * FROM ksiazki ORDER BY autor");


while ($dane = pg_fetch_object($zap)) {
  echo $dane->autor . " (";
  echo $dane->rok . "): ";
  echo $dane->tytul . "<br />";
}

pg_free_result($zap);
pg_close($polaczenie);

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pg_query</function></member>
    <member><function>pg_fetch_array</function></member>
    <member><function>pg_fetch_assoc</function></member>
    <member><function>pg_fetch_row</function></member>
    <member><function>pg_fetch_result</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
