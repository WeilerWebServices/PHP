<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 297028 Maintainer: leszek Status: ready -->
<!-- $Revision$ -->
<!-- CREDITS: sobak -->
<refentry xml:id="function.array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array</refname>
  <refpurpose>Stwórz tablicę</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array</methodname>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Tworzy tablicę. Przeczytaj rozdział poświęcony
   <link linkend="language.types.array">typowi tablicowemu</link>, żeby dowiedzieć się
   czym jest tablica.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
       Składnia "index =&gt; wartości", oddzielona przecinkami, definiuje pary
       indeksów i wartości. Indeks może być ciągiem tekstowym lub liczbą
       stałoprzecinkową. Jeśli indeks zostanie pominięty, automatycznie
       wygenerowany zostanie indeks będący liczbą całkowitą, poczynając od 0.
       Jeśli indeks jest liczbą całkowitą, następny wygenerowany indeks będzie
       miał wartość "największy indeks + 1".  Zauważ, że jeśli pojawią się dwie
       wartości o tym samym indeksie, ostatnia nadpisze wcześniejsze.
      </para>
      <para>
       Przecinek po ostatniej podanej wartości, mimo że jest niespotykany, jest
       poprawny składniowo.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Zwraca tablicę parametrów. Parametrom można przypisać
   indeks używając operatora <literal>=&gt;</literal>. Przeczytaj rozdział
   o <link linkend="language.types.array">typie tablicowym</link>, aby dowiedzieć się
   czym dokładnie jest tablica.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   Poniższy przykład demonstruje jak stworzyć wielowymiarową tablicę, jak
   określić klucze w tablicy asocjacyjnej i jak pominąć, a następnie kontynuować
   liczbowe indeksy w normalnych tablicach.
   <example>
    <title>Prosty przykład użycia <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$fruits = array (
    "owoce"  => array("a" => "pomarańcza", "b" => "banan", "c" => "jabłko"),
    "liczby" => array(1, 2, 3, 4, 5, 6),
    "dziury"   => array("pierwsza", 5 => "druga", "trzecia")
);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Indeksowanie automatyczne z <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$array = array(1, 1, 1, 1,  1, 8 => 1,  4 => 1, 19, 3 => 13);
print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [0] => 1
    [1] => 1
    [2] => 1
    [3] => 13
    [4] => 1
    [8] => 1
    [9] => 19
)
]]>
    </screen>
   </example>
  </para>
  <para>
   Zauważ, że indeks '3' został zdefiniowany dwukrotnie i przyjął ostateczną wartość 13.
   Indeks 4 został zdefiniowany po kluczu 8, a następny indeks (dla wartości 19)
   to 9, ponieważ największym dotyczczasowym indeksem był 8.
  </para>
  <para>
   Ten przykład tworzy tablicę numerowaną od 1.
   <example>
    <title>Tablica numerowana od 1</title>
    <programlisting role="php">
<![CDATA[
<?php
$kwartal = array(1 => 'Styczeń', 'Luty', 'Marzec');
print_r($kwartal);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [1] => Styczeń
    [2] => Luty
    [3] => Marzec
)
]]>
    </screen>
   </example>
  </para>
  <para>
   Podobnie jak w Perlu, wartość z tablicy można uzyskać wewnątrz cudzysłowów.
   Jednakże w PHP niezbędne jest zawarcie zmiennej wewnątrz nawiasów klamrowych.
   <example>
    <title>Odczytywanie elementu tablicy wewnątrz cudzysłowów</title>
    <programlisting role="php">
<![CDATA[
<?php

$foo = array('bar' => 'baz');
echo "Hello {$foo['bar']}!"; // Hello baz!

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <para>
   <note>
    <para>
     <function>array</function> jest konstrukcją języka używaną do
     tekstowej reprezentacji tablic, a nie zwykłą funkcją.
    </para>
   </note>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_pad</function></member>
    <member><function>list</function></member>
    <member><function>count</function></member>
    <member><function>range</function></member>
    <member>&foreach;</member>
    <member>Typ <link linkend="language.types.array">array</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
