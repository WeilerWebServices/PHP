<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: n/a Maintainer: leszek Status: ready -->
<!-- $Revision$ -->
<refentry xml:id="function.list" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>list</refname>
  <refpurpose>Przypisz zmienne tak jakby były tablicą</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Opis</title>
  <methodsynopsis>
   <type>void</type><methodname>list</methodname>
   <methodparam><type>mixed</type><parameter>zmienna</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Podobnie jak <function>array</function>, nie jest na prawdę funkcją,
   ale elementem składni języka. Instrukcja <function>list</function>
   jest używana do przypisywania listy zmiennych w jednej operacji.
  </para>
  <note>
   <para>
    <function>list</function> działa tylko z tablicami o indeksach
    liczbowych zakładając że indeksy zaczynają się od 0.
   </para>
  </note>
  <para>
   <example>
    <title>Przykłady użycia <function>list</function></title>
    <programlisting role="php">
<![CDATA[
<?php

$info = array('kawa', 'brązowa', 'kofeina');

// Listowanie wszystkich zmiennych
list($napój, $kolor, $składnik) = $info;
echo "$napój jest $kolor a $składnik czyni ją wyjątkową.\n";

// Listowanie niektórych elementów
list($napój, , $składnik) = $info;
echo "$napój zawiera $składnik.\n";

// Albo przeskoczmy od razu do trzeciego
list( , , $składnik) = $info;
echo "Potrzebna jest mi $składnik!\n";

// list() nie działa z łańcuchami znaków 
list($bar) = "abcde"; 
var_dump($bar); // NULL 
 
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Przykład użycia <function>list</function></title>
    <programlisting role="php">
<![CDATA[
<table>
 <tr>
  <th>Nazwisko pracownika</th>
  <th>Pensja</th>
 </tr>

<?php

$wynik = mysql_query("SELECT id, nazwisko, pensja FROM pracownicy", $conn);
while (list($id, $nazwisko, $pensja) = mysql_fetch_row($wynik)) {
   echo " <tr>\n" .
        "  <td><a href=\"info.php?id=$id\">$nazwisko</a></td>\n" .
        "  <td>$pensja</td>\n" .
        " </tr>\n";
}
?>

</table>
]]>
    </programlisting>
   </example>
  </para>
  <warning>
   <para>
    <function>list</function> Przypisuje wartości zaczynając parametru
    znajdującego się po prawej. Przy używaniu zwykłych zmiennych nie ma
    się o co martwić. Ale używając tablic z indeksami, zazwyczaj
    oczekuje się, że kolejność indeksów w tablicy będzie taka sama jak zapis
    wywołania <function>list</function>, od lewej do prawej. Otóż tak nie
    jest. Zmienne są przypisywane w odwrotnej kolejności.
   </para>
  </warning>
  <example>
   <title>Przykład użycia <function>list</function> z indeksowaną
    tablicą</title>
   <programlisting role="php">
<![CDATA[
<?php

$info = array('kawa', 'brązowa', 'kofeina');

list($a[0], $a[1], $a[2]) = $info;

var_dump($a);

?>
]]>
   </programlisting>
  </example>
  <para>
    Przykład ten wyświetli co następuje (zauważ kolejność elementów
    porównując ją do tej, w której były one zapisane w wywołaniu funkcji
    <function>list</function>):
  </para>
  <screen>
array(3) {
  [2]=>
  string(8) "kofeina"
  [1]=>
  string(5) "brązowa"
  [0]=>
  string(6) "kawa"
}
  </screen>
  <para>
   Patrz także: <function>each</function> <function>array</function> i
   <function>extract</function>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
