<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 347270 Maintainer: sergey Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="language.constants" xmlns="http://docbook.org/ns/docbook">
 <title>Константы</title>
 
 <simpara>
  Константа - это идентификатор (имя) для простого значения. Как следует из названия,
  их значение не может изменится в ходе выполнения скрипта
  (кроме <link linkend="language.constants.predefined">магических констант</link>,
  которые на самом деле не являются константами).
  Имена констант по умолчанию чувствительны к регистру. По принятому соглашению, имена констант 
  всегда пишутся в верхнем регистре.
 </simpara>
 <para>
  Имя константы должно соответствовать тем же правилам именования, что
  и другие имена в PHP. Правильное имя начинается с буквы или символа подчеркивания,
  за которым следует любое количество букв, цифр и символов подчеркивания. Регулярное выражение для проверки правильности
  имени константы выглядит так:
  <code>^[a-zA-Z_\x80-\xff][a-zA-Z0-9_\x80-\xff]*$</code>
 </para>
 <para>
  Возможно определить константы с помощью функции
  <function>define</function> зарезервированными или
  даже некорректными именами, значения которых могут быть (только) получены
  через функцию
  <function>constant</function>. Однако, делать это не рекомендуется.
 </para>
 &tip.userlandnaming;
 <para>
  <example>
   <title>Правильные и неправильные имена констант</title>
   <programlisting role="php">
<![CDATA[
<?php

// Правильные имена констант
define("FOO",     "что-то");
define("FOO2",    "что-то ещё");
define("FOO_BAR", "что-то большее");

// Неправильные имена констант
define("2FOO",    "что-то");

// Это верное объявление, но лучше его не использовать:
// PHP однажды может зарегистрировать волшебную константу,
// которая нарушит работу скрипта
define("__FOO__", "что-то");

?>
]]>
   </programlisting>
  </example>
 </para>
 <note>
  <simpara>
   Понятие "буквы" здесь - это символы a-z, A-Z,
   и другие символы с ASCII-кодами от 128 до 255 (0x80-0xff).
  </simpara>
 </note>
 
 <simpara>
  Как и &link.superglobals;, константы доступны из любой области видимости.
  Вы можете использовать константы в любом месте вашего скрипта, не обращая
  внимания на текущую область видимости.
  Подробную информацию об областях видимости можно найти 
  <link linkend="language.variables.scope">здесь</link>.
 </simpara>
 
 <sect1 xml:id="language.constants.syntax">
  <title>Синтаксис</title>
  <simpara>
   Вы можете определить константу с помощью функции <function>define</function>
   или с помощью ключевого слова <literal>const</literal> вне объявления класса
   с PHP 5.3.0. В то время как <function>define</function> позволяет
   задать константу через выражение, конструкция <literal>const</literal> ограничена
   как описано в следующем параграфе. После того, как константа определена, ее значение
   не может быть изменено или аннулировано.
  </simpara>
  <simpara>
   Если использована конструкция <literal>const</literal>, константы могут содержать только
   скалярные данные (типы <type>boolean</type>, <type>integer</type>, <type>float</type> и
   <type>string</type>). С PHP 5.6 возможно определить константу 
   как скалярное выражение, а также определить константу с типом <type>array</type>.
   Можно определить константы с типом <type>resource</type>, но не рекомендуется,
   так как это может привести к неожиданным результатам.
  </simpara>
  <simpara>
   Получить значение константы можно, указав ее имя. В отличие от переменных,
   вам <emphasis>не нужно</emphasis> предварять имя константы символом
   <literal>$</literal>.
   Также вы можете использовать функцию <function>constant</function> для
   получения значения константы, если вы формируете имя константы динамически.
   Используйте функцию <function>get_defined_constants</function> для получения
   списка всех определенных констант.
  </simpara>
  <note>
   <simpara>
    Константы и (глобальные) переменные находятся в разных пространствах имен.
    Это означает, что, например, &true; и <varname>$TRUE</varname> в целом
    отличаются.
   </simpara>
  </note>
  <simpara>
   Если вы используете неопределенную константу, PHP предполагает, что
   вы имеете ввиду само имя константы, как если бы вы указали литерал типа
   <type>string</type> (CONSTANT вместо "CONSTANT"). Этот резервный вариант
   объявлен устаревшим с PHP 7.2.0, при этом будет сгенерирована ошибка
   уровня <constant>E_WARNING</constant> при его использовании
   (ранее вместо этого выдавалась ошибка уровня
   <link linkend="ref.errorfunc">E_NOTICE</link>). Смотрите также главу
   руководства, которая разъясняет, почему
   <link linkend="language.types.array.foo-bar">$foo[bar]</link> - это неправильно
   (конечно, если вы перед этим не объявили <literal>bar</literal> как константу с
   помощью <function>define</function>). Это не относится к <link
   linkend="language.namespaces.rules">(полностью) определенным константам</link>,
   которые вызовут фатальную ошибку, если они не определены.
   Если вы просто хотите проверить, определена ли константа, используйте функцию <function>defined</function>.
  </simpara>
  <para>
   Различия между константами и переменными:
   <itemizedlist>
    <listitem>
     <simpara>
      У констант нет приставки в виде знака доллара (<literal>$</literal>);
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      До PHP 5.3 константы можно определить только с помощью функции
      <function>define</function>, а не присваиванием значения;
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Константы могут быть определены и доступны в любом месте без учета
      области видимости;
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Константы не могут быть переопределены или удалены после первоначального объявления; и
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Константы могут иметь только скалярные значения. С версии PHP 5.6 возможно задать
      константу массивом, используя <literal>const</literal>, а с PHP 7 константы с массивом
      можно определить с помощью <function>define</function>.
      Вы можете использовать массивы при задании констант, если результат выражения
      будет допустимого типа. Например, <literal>const FOO = array(1,2,3)[0];</literal>.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  
  <para>
   <example>
    <title>Определение констант</title>
    <programlisting role="php">
<![CDATA[
<?php
define("CONSTANT", "Здравствуй, мир.");
echo CONSTANT; // выводит "Здравствуй, мир."
echo Constant; // выводит "Constant" и предупреждение.
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   <example>
    <title>Определение констант с помощью ключевого слова <literal>const</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
// Работает, начиная с версии PHP 5.3.0
const CONSTANT = 'Здравствуй, мир.';

echo CONSTANT;

// Работает, начиная с версии PHP 5.6.0
const ANOTHER_CONST = CONSTANT.'; Прощай, мир.';
echo ANOTHER_CONST;

const ANIMALS = array('dog', 'cat', 'bird');
echo ANIMALS[1]; // выводит "cat"

// Работает в PHP 7
define('ANIMALS', array(
    'dog',
    'cat',
    'bird'
));
echo ANIMALS[1]; // выводит "cat"
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <note>
   <para>
    В отличие от определения констант с помощью функции <function>define</function>,
    константы, объявленные с помощью ключевого слова <literal>const</literal>
    должны быть объявлены в самой верхней области видимости, потому что они
    определяются при компилировании скрипта. Это означает, что их нельзя объявлять
    внутри функций, циклов, выражений <literal>if</literal> и блоков <literal>try</literal>/
    <literal>catch</literal>.
   </para>
  </note>
  
  <note>
   <para>
    Константы, определенные с помощью ключевого слова <literal>const</literal> 
    всегда регистрозависимы. Тогда как при использовании <function>define</function>
    они могут быть нечувствительны к регистру.
   </para>
  </note>
  
  <simpara>
   Смотрите также <link linkend="language.oop5.constants">Константы классов</link>.
  </simpara>
 </sect1>
 
 <sect1 xml:id="language.constants.predefined">
  <title>Волшебные константы</title>
  
  <simpara>
   PHP предоставляет большой список <link linkend="reserved.constants">
   предопределенных констант</link> для каждого выполняемого скрипта. Многие из
   этих констант определяются различными модулями и будут присутствовать только
   в том случае, если эти модули доступны в результате динамической загрузки
   или в результате статической сборки.
  </simpara>
  
  <para>
   Есть девять магических констант, которые меняют свое значение в
   зависимости от контекста, в котором они используются.
   Например, значение <constant>__LINE__</constant> зависит от строки в скрипте,
   на которой эта константа указана. Все магические константы разрешаются во
   время компиляции, в отличие от обычных констант, которые разрешаются во
   время выполнения. Специальные константы нечувствительны
   к регистру и их список приведен ниже:
  </para>
  <para>
   <table>
    <title>Некоторые магические константы PHP</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Имя</entry>
       <entry>Описание</entry>
      </row>
     </thead>
     <tbody>
      <row xml:id="constant.line">
       <entry><constant>__LINE__</constant></entry>
       <entry>
        Текущий номер строки в файле.
       </entry>
      </row>
      <row xml:id="constant.file">
       <entry><constant>__FILE__</constant></entry>
       <entry>
        Полный путь и имя текущего файла с развернутыми симлинками. Если используется
        внутри подключаемого файла, то возвращается имя данного файла.
       </entry>
      </row>
      <row xml:id="constant.dir">
       <entry><constant>__DIR__</constant></entry>
       <entry>
        Директория файла. Если используется внутри подключаемого файла,
        то возвращается директория этого файла. Это эквивалентно вызову
        <literal>dirname(__FILE__)</literal>. Возвращаемое имя директории
        не оканчивается на слеш, за исключением корневой директории.
       </entry>
      </row>
      <row xml:id="constant.function">
       <entry><constant>__FUNCTION__</constant></entry>
       <entry>
        Имя функции или <literal>{closure}</literal> в случае анонимной функции.
       </entry>
      </row>
      <row xml:id="constant.class">
       <entry><constant>__CLASS__</constant></entry>
       <entry>
        Имя класса. Это имя содержит название пространства имен, в котором класс был объявлен 
        (например, <literal>Foo\Bar</literal>).
        Обратите внимание, что начиная с PHP 5.4 __CLASS__ также работает в
        трейтах. При использовании в методах трейтов __CLASS__ является именем
        класса, в котором эти методы используется.
       </entry>
      </row>
      <row xml:id="constant.trait">
       <entry><constant>__TRAIT__</constant></entry>
       <entry>
        Имя трейта. Это имя содержит название пространства имен, в котором трейт
        был объявлен (например, <literal>Foo\Bar</literal>).
       </entry>
      </row>
      <row xml:id="constant.method">
       <entry><constant>__METHOD__</constant></entry>
       <entry>
        Имя метода класса.
       </entry>
      </row>
      <row xml:id="constant.namespace">
       <entry><constant>__NAMESPACE__</constant></entry>
       <entry>
        Имя текущего пространства имен.
       </entry>
      </row>
      <row xml:id="constant.coloncolonclass">
       <entry><constant>ClassName::class</constant></entry>
       <entry>
        Полное имя класса (с указанием пространства имен). См. также 
        <link linkend="language.oop5.basic.class.class">::class</link>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <!-- <link linkend="language.oop5.basic.class.class">::class</link> -->
  <para>
   Смотрите также
   <function>get_class</function>,
   <function>get_object_vars</function>,
   <function>file_exists</function>&listendand;
   <function>function_exists</function>.
  </para>
  
  <sect2 xml:id="language.constants.predefined.changelog">
   &reftitle.changelog;
   
   <para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>&Version;</entry>
        <entry>&Description;</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>5.5.0</entry>
        <entry>
         Добавлена магическая константа <constant>::class</constant>
        </entry>
       </row>
       <row>
        <entry>5.4.0</entry>
        <entry>
         Добавлена константа <constant>__TRAIT__</constant>
        </entry>
       </row>
       <row>
        <entry>5.3.0</entry>
        <entry>
         Добавлены константы <constant>__DIR__</constant> и <constant>__NAMESPACE__</constant>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </para>
  </sect2>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
